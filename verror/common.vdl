package verror

error (
	// Unknown means the error has no known Id.  A more specific error should
	// always be used, if possible.  Unknown is typically only used when
	// automatically converting errors that do not contain an Id.
	Unknown() {"en":"Error{:_}"}

	// Internal means an internal error has occurred.  A more specific error
	// should always be used, if possible.
	Internal() {"en":"Internal error{:_}"}

	// NotImplemented means that the request type is valid but that the method to
	// handle the request has not been implemented.
	NotImplemented() {"en":"Not implemented{:_}"}

	// EOF means the end-of-file has been reached; more generally, no more input
	// data is available.
	EOF() {"en":"EOF{:_}"}

	// BadArg means the arguments to an operation are invalid or incorrectly
	// formatted.
	BadArg() {"en":"Bad argument{:_}"}

	// BadState means an operation was attempted on an object while the object was
	// in an incompatible state.
	BadState() {"en":"Invalid state{:_}"}

	// BadEtag means the etag presented by the client was out of date or otherwise
	// invalid, likely because some other request caused the etag at the server to
	// change. The client should get a fresh etag and try again.
	// TODO(sadovsky): Rename "etag" to something else. HTTP etags are content
	// hashes, used to implement client-side response caching. We use etags for
	// for atomicity in read-modify-write operations, and generally recommend for
	// them to be implemented as (possibly lightly obfuscated) sequence numbers.
	BadEtag() {"en":"Etag is out of date"}

	// Exist means that the requested item already exists; typically returned when
	// an attempt to create an item fails because it already exists.
	Exist() {"en":"Already exists{:_}"}

	// NoExist means that the requested item does not exist; typically returned
	// when an attempt to lookup an item fails because it does not exist.
	NoExist() {"en":"Does not exist{:_}"}

	// NoExistOrNoAccess means that either the requested item does not exist, or
	// is inaccessible.  Typically returned when the distinction between existence
	// and inaccessiblity needs to remain hidden, as a privacy feature.
	NoExistOrNoAccess() {"en":"Does not exist or access denied{:_}"}

	// The following errors can occur during the process of establishing
	// an RPC connection.
	// NoExist (see above) is returned if the name of the server fails to
	// resolve any addresses.
	// NoServers is returned when the servers returned for the supplied name
	// are somehow unusable or unreachable by the client.
	// NoAccess is returned when a server does not authorize a client.
	// NotTrusted is returned when a client does not trust a server.
	//
	// TODO(toddw): These errors and descriptions were added by Cos; consider
	// moving the IPC-related ones into the ipc package.
	NoServers() {RetryRefetch, "en":"No usable servers found{:_}"}
	NoAccess() {RetryRefetch, "en":"Access denied{:_}"}
	NotTrusted() {RetryRefetch, "en":"Client does not trust server{:_}"}
	NoServersAndAuth() {RetryRefetch, "en":"Has no usable servers and is either not trusted or access was denied{:_}"}

	// Aborted means that an operation was not completed because it was aborted by
	// the receiver.  A more specific error should be used if it would help the
	// caller decide how to proceed.
	Aborted() {"en":"Aborted{:_}"}

	// BadProtocol means that an operation was not completed because of a protocol
	// or codec error.
	BadProtocol() {"en":"Bad protocol or type{:_}"}

	// Canceled means that an operation was not completed because it was
	// explicitly cancelled by the caller.
	Canceled() {"en":"Canceled{:_}"}

	// Timeout means that an operation was not completed before the time deadline
	// for the operation.
	Timeout() {"en":"Timeout{:_}"}
)
