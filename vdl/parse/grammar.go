//line grammar.y:36

// This grammar.go file was auto-generated by yacc from grammar.y.

package parse

import __yyfmt__ "fmt"

//line grammar.y:38
import (
	"math/big"
	"strings"
)

type strPos struct {
	str string
	pos Pos
}

type intPos struct {
	int *big.Int
	pos Pos
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

type imagPos struct {
	imag *BigImag
	pos  Pos
}

// typeListToStrList converts a slice of Type to a slice of strPos.  Each type
// must be a TypeNamed with an empty PackageName, otherwise errors are reported,
// and ok=false is returned.
func typeListToStrList(yylex yyLexer, typeList []Type) (strList []strPos, ok bool) {
	ok = true
	for _, t := range typeList {
		var tn *TypeNamed
		if tn, ok = t.(*TypeNamed); !ok {
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names)", t.String())
			return
		}
		if strings.ContainsRune(tn.Name, '.') {
			ok = false
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names).", tn.Name)
			return
		}
		strList = append(strList, strPos{tn.Name, tn.P})
	}
	return
}

// ensureNonEmptyToken reports an error if tok is empty.
func ensureNonEmptyToken(yylex yyLexer, tok strPos, errMsg string) {
	if len(tok.str) == 0 {
		lexPosErrorf(yylex, tok.pos, errMsg)
	}
}

//line grammar.y:97
type yySymType struct {
	yys        int
	pos        Pos
	strpos     strPos
	intpos     intPos
	ratpos     ratPos
	imagpos    imagPos
	namepos    NamePos
	nameposes  []NamePos
	typeexpr   Type
	typeexprs  []Type
	fields     []*Field
	iface      *Interface
	constexpr  ConstExpr
	constexprs []ConstExpr
	complit    *ConstCompositeLit
	kvlit      KVLit
	kvlits     []KVLit
}

const startImportsOnly = 57346
const startFullFile = 57347
const tOROR = 57348
const tANDAND = 57349
const tLE = 57350
const tGE = 57351
const tNE = 57352
const tEQEQ = 57353
const tLSH = 57354
const tRSH = 57355
const tPACKAGE = 57356
const tIMPORT = 57357
const tTYPE = 57358
const tENUM = 57359
const tSET = 57360
const tMAP = 57361
const tSTRUCT = 57362
const tONEOF = 57363
const tINTERFACE = 57364
const tSTREAM = 57365
const tCONST = 57366
const tTRUE = 57367
const tFALSE = 57368
const tERRORID = 57369
const tIDENT = 57370
const tSTRLIT = 57371
const tINTLIT = 57372
const tRATLIT = 57373
const tIMAGLIT = 57374
const notPackage = 57375

var yyToknames = []string{
	"startImportsOnly",
	"startFullFile",
	" ;",
	" :",
	" ,",
	" .",
	" (",
	" )",
	" [",
	" ]",
	" {",
	" }",
	" <",
	" >",
	" =",
	" !",
	" +",
	" -",
	" *",
	" /",
	" %",
	" |",
	" &",
	" ^",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tLSH",
	"tRSH",
	"tPACKAGE",
	"tIMPORT",
	"tTYPE",
	"tENUM",
	"tSET",
	"tMAP",
	"tSTRUCT",
	"tONEOF",
	"tINTERFACE",
	"tSTREAM",
	"tCONST",
	"tTRUE",
	"tFALSE",
	"tERRORID",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
	"tIMAGLIT",
	"notPackage",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 95,
	10, 33,
	14, 33,
	-2, 109,
}

const yyNprod = 130
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 575

var yyAct = []int{

	190, 95, 189, 154, 116, 188, 210, 117, 40, 191,
	110, 104, 99, 37, 96, 30, 51, 111, 148, 186,
	33, 72, 62, 84, 85, 86, 27, 19, 102, 82,
	58, 87, 22, 21, 44, 88, 105, 50, 41, 38,
	121, 42, 39, 52, 53, 54, 55, 56, 64, 50,
	60, 89, 90, 46, 57, 91, 92, 93, 94, 36,
	71, 41, 81, 105, 32, 22, 21, 22, 21, 38,
	47, 48, 106, 47, 50, 8, 50, 50, 50, 50,
	15, 12, 41, 48, 196, 24, 5, 68, 15, 13,
	101, 236, 14, 25, 123, 65, 26, 149, 147, 38,
	235, 79, 61, 242, 35, 97, 216, 151, 108, 50,
	112, 113, 118, 120, 142, 143, 144, 145, 240, 50,
	221, 207, 204, 201, 193, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 156, 51, 152, 219, 185, 226, 227,
	51, 157, 160, 163, 146, 106, 161, 50, 148, 77,
	200, 165, 50, 199, 50, 194, 50, 205, 50, 202,
	20, 52, 53, 54, 55, 56, 76, 52, 53, 54,
	55, 56, 57, 73, 70, 159, 107, 75, 57, 74,
	29, 118, 231, 229, 78, 155, 203, 50, 118, 215,
	206, 50, 208, 150, 122, 217, 220, 100, 66, 78,
	63, 238, 218, 224, 67, 223, 211, 222, 50, 166,
	50, 50, 7, 230, 134, 135, 136, 234, 138, 9,
	162, 214, 197, 51, 158, 163, 140, 141, 50, 241,
	237, 153, 98, 80, 59, 69, 43, 31, 96, 18,
	51, 16, 228, 232, 118, 206, 34, 84, 85, 86,
	52, 53, 54, 55, 56, 87, 2, 3, 45, 4,
	23, 57, 239, 6, 28, 11, 17, 52, 53, 54,
	55, 56, 10, 1, 187, 89, 90, 233, 57, 91,
	92, 93, 94, 96, 225, 51, 83, 148, 103, 213,
	198, 114, 84, 85, 86, 195, 119, 109, 0, 0,
	87, 0, 155, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 52, 53, 54, 55, 56, 0, 0, 0,
	89, 90, 0, 57, 91, 92, 93, 94, 96, 0,
	51, 52, 53, 54, 55, 56, 0, 84, 85, 86,
	0, 0, 57, 164, 0, 87, 0, 51, 0, 0,
	0, 0, 51, 0, 0, 115, 0, 52, 53, 54,
	55, 56, 0, 0, 51, 89, 90, 0, 57, 91,
	92, 93, 94, 0, 52, 53, 54, 55, 56, 52,
	53, 54, 55, 56, 51, 57, 0, 0, 0, 0,
	57, 52, 53, 54, 55, 56, 49, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	212, 52, 53, 54, 55, 56, 0, 0, 0, 126,
	127, 0, 57, 132, 133, 134, 135, 136, 137, 138,
	139, 124, 125, 128, 129, 130, 131, 140, 141, 209,
	0, 0, 0, 0, 126, 127, 0, 0, 132, 133,
	134, 135, 136, 137, 138, 139, 124, 125, 128, 129,
	130, 131, 140, 141, 192, 0, 0, 0, 0, 126,
	127, 0, 0, 132, 133, 134, 135, 136, 137, 138,
	139, 124, 125, 128, 129, 130, 131, 140, 141, 126,
	127, 0, 0, 132, 133, 134, 135, 136, 137, 138,
	139, 124, 125, 128, 129, 130, 131, 140, 141, 126,
	127, 0, 0, 132, 133, 134, 135, 136, 137, 138,
	139, 0, 125, 128, 129, 130, 131, 140, 141, 126,
	127, 0, 0, 132, 133, 134, 135, 136, 137, 138,
	139, 0, 0, 128, 129, 130, 131, 140, 141, 132,
	133, 134, 135, 136, 137, 138, 139, 0, 0, 0,
	0, 0, 0, 140, 141,
}
var yyPact = []int{

	262, -1000, 50, 50, -1000, 25, -1000, 43, 245, 51,
	-1000, 243, -1000, -1000, -1000, 17, -1000, 47, -1000, 15,
	-1000, -1000, -36, 241, 54, 49, 32, -1000, 240, -1000,
	-1000, -1000, 23, -1000, -1000, 362, 19, -1000, 84, 11,
	-1000, 77, 197, -18, -1000, 239, -1000, 382, -1000, 170,
	-1000, 8, 169, 177, 175, 162, 145, 200, -1000, 237,
	-1000, 328, -1000, 236, -1000, -39, -1000, -1000, 196, 20,
	13, 173, 382, -33, 382, 382, 350, 382, -10, 193,
	-11, 483, -1000, -1000, 328, 328, 328, 328, 144, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 328, 192, -12, -1000,
	-1000, -1000, -1000, 235, -1000, 185, -1000, 382, -1000, 228,
	-1000, -1000, 172, 139, 224, -1000, -1000, 345, -1000, 213,
	-1000, -1000, -1000, -1000, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, -1000, -1000, -1000, -1000, 328, -1000, 4, 463,
	-1000, -1000, 109, -14, 39, 221, -1000, 108, -33, -1000,
	382, 107, 382, -1000, 382, 106, 382, 503, 523, 539,
	539, 539, 539, 539, 539, 202, 202, -1000, -1000, -1000,
	202, -1000, 202, -1000, -1000, 438, -1000, 208, -1000, -1000,
	413, -1000, -1000, -1000, -1000, 302, 90, -1000, 204, 138,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	105, 283, 283, 134, -1000, -1000, 132, 182, 382, 382,
	181, -1000, -1000, -1000, 483, -1000, 238, -1000, 83, -1000,
	-1000, -1000, -1000, 203, 483, -1000, 382, 103, 328, 86,
	-1000, 483, -1000,
}
var yyPgo = []int{

	0, 1, 10, 307, 35, 7, 306, 305, 301, 4,
	300, 3, 299, 298, 11, 0, 29, 296, 2, 294,
	287, 9, 5, 284, 283, 269, 222, 282, 276, 275,
	274, 41, 170, 270, 268, 20, 256, 244, 13, 210,
	8, 6,
}
var yyR1 = []int{

	0, 24, 24, 27, 27, 27, 27, 25, 25, 26,
	26, 29, 29, 29, 30, 30, 32, 32, 28, 28,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	34, 34, 35, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 2, 8, 8, 9, 5, 5,
	6, 6, 36, 36, 13, 13, 14, 14, 11, 11,
	11, 10, 10, 12, 12, 12, 7, 7, 7, 7,
	19, 19, 19, 20, 20, 37, 37, 38, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 16, 16, 16,
	16, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 21, 21, 23, 23, 22, 22, 18, 18,
	39, 39, 40, 40, 1, 1, 31, 31, 41, 41,
}
var yyR2 = []int{

	0, 4, 4, 0, 1, 1, 1, 0, 3, 0,
	3, 3, 5, 2, 1, 3, 1, 2, 0, 3,
	3, 5, 2, 2, 3, 5, 2, 3, 5, 2,
	1, 3, 2, 1, 4, 3, 5, 4, 5, 5,
	3, 5, 1, 3, 1, 1, 3, 2, 1, 3,
	1, 3, 4, 6, 1, 3, 5, 1, 2, 4,
	4, 1, 3, 0, 1, 1, 0, 3, 4, 6,
	0, 2, 4, 1, 3, 1, 3, 3, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 2, 2,
	2, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 2, 4, 1, 3, 1, 3, 1, 1,
	1, 3, 1, 3, 1, 3, 0, 1, 0, 1,
}
var yyChk = []int{

	-1000, -24, 4, 5, -25, 36, -25, -26, 50, -26,
	-27, -29, 38, 46, 49, 37, 6, -28, 6, 10,
	-32, 51, 50, -33, 38, 46, 49, 11, -30, -32,
	51, 6, 10, -35, -36, 50, 10, -38, 50, 10,
	-40, 50, -31, 6, 11, -34, -35, 50, -4, 44,
	-1, 12, 39, 40, 41, 42, 43, 50, 11, -37,
	-38, 18, 11, -39, -40, 18, 11, -32, -31, 6,
	14, 52, 13, 14, 12, 12, 14, 14, 9, -31,
	6, -15, -16, -17, 19, 20, 21, 27, -4, 47,
	48, 51, 52, 53, 54, -1, 10, -31, 6, 51,
	11, -35, 15, -13, -14, 50, -1, 13, -4, -3,
	-2, 50, -4, -4, -8, 15, -9, -5, -4, -6,
	-4, 50, 11, -38, 28, 29, 16, 17, 30, 31,
	32, 33, 20, 21, 22, 23, 24, 25, 26, 27,
	34, 35, -16, -16, -16, -16, 10, -21, 14, -15,
	11, -40, -31, 6, -11, 10, -4, -31, 6, 13,
	13, -31, 6, -4, 8, -31, 6, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, 15, -23, -22, -18,
	-15, -21, 11, 15, -14, -7, 45, 11, -10, -5,
	-9, 15, -2, -4, 15, -9, -4, 15, -4, 11,
	-41, 8, 7, -12, -4, -11, 16, -41, 8, 8,
	-41, 15, -22, -18, -15, -19, 14, 17, -4, 11,
	-9, 11, 15, -20, -15, 17, 8, -41, 8, -4,
	15, -15, 17,
}
var yyDef = []int{

	0, -2, 7, 7, 9, 0, 9, 3, 0, 18,
	1, 0, 4, 5, 6, 0, 8, 2, 10, 0,
	13, 16, 0, 0, 0, 0, 0, 11, 126, 14,
	17, 19, 0, 22, 23, 0, 0, 26, 0, 0,
	29, 122, 0, 127, 20, 126, 30, 0, 32, 0,
	33, 0, 0, 0, 0, 0, 0, 124, 24, 126,
	75, 0, 27, 126, 120, 0, 12, 15, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 77, 78, 97, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 107, 108, -2, 0, 0, 127, 123,
	21, 31, 52, 126, 54, 124, 57, 0, 35, 126,
	42, 44, 0, 0, 126, 40, 45, 0, 48, 126,
	50, 125, 25, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 100, 101, 0, 110, 0, 0,
	28, 121, 0, 127, 66, 0, 34, 0, 127, 37,
	0, 0, 127, 47, 0, 0, 127, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 0, 112, 128, 114, 116,
	119, 118, 111, 53, 55, 63, 0, 58, 128, 128,
	61, 36, 43, 38, 39, 46, 49, 41, 51, 102,
	0, 129, 0, 70, 64, 65, 0, 0, 129, 129,
	0, 113, 115, 117, 119, 56, 0, 67, 0, 59,
	62, 60, 71, 128, 73, 68, 0, 0, 129, 0,
	72, 74, 69,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 19, 3, 3, 3, 24, 26, 3,
	10, 11, 22, 20, 8, 21, 9, 23, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 7, 6,
	16, 18, 17, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 12, 3, 13, 27, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 14, 25, 15,
}
var yyTok2 = []int{

	2, 3, 4, 5, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		//line grammar.y:170
		{
			lexGenEOF(yylex)
		}
	case 4:
		//line grammar.y:172
		{
			lexGenEOF(yylex)
		}
	case 5:
		//line grammar.y:174
		{
			lexGenEOF(yylex)
		}
	case 6:
		//line grammar.y:176
		{
			lexGenEOF(yylex)
		}
	case 7:
		//line grammar.y:181
		{
			lexPosErrorf(yylex, Pos{}, "file must start with package statement")
		}
	case 8:
		//line grammar.y:183
		{
			lexVDLFile(yylex).PackageDef = NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}
		}
	case 16:
		//line grammar.y:201
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Pos: yyS[yypt-0].strpos.pos}})
		}
	case 17:
		//line grammar.y:206
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 32:
		//line grammar.y:235
		{
			tds := &lexVDLFile(yylex).TypeDefs
			*tds = append(*tds, &TypeDef{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 33:
		//line grammar.y:242
		{
			yyVAL.typeexpr = &TypeNamed{Name: yyS[yypt-0].strpos.str, P: yyS[yypt-0].strpos.pos}
		}
	case 34:
		//line grammar.y:244
		{
			yyVAL.typeexpr = &TypeArray{Len: int(yyS[yypt-2].intpos.int.Int64()), Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-3].pos}
		}
	case 35:
		//line grammar.y:246
		{
			yyVAL.typeexpr = &TypeList{Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-2].pos}
		}
	case 36:
		//line grammar.y:248
		{
			yyVAL.typeexpr = &TypeEnum{Labels: yyS[yypt-2].nameposes, P: yyS[yypt-4].pos}
		}
	case 37:
		//line grammar.y:250
		{
			yyVAL.typeexpr = &TypeSet{Key: yyS[yypt-1].typeexpr, P: yyS[yypt-3].pos}
		}
	case 38:
		//line grammar.y:252
		{
			yyVAL.typeexpr = &TypeMap{Key: yyS[yypt-2].typeexpr, Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-4].pos}
		}
	case 39:
		//line grammar.y:254
		{
			yyVAL.typeexpr = &TypeStruct{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 40:
		//line grammar.y:256
		{
			yyVAL.typeexpr = &TypeStruct{P: yyS[yypt-2].pos}
		}
	case 41:
		//line grammar.y:258
		{
			yyVAL.typeexpr = &TypeOneOf{Types: yyS[yypt-2].typeexprs, P: yyS[yypt-4].pos}
		}
	case 42:
		//line grammar.y:262
		{
			yyVAL.nameposes = []NamePos{yyS[yypt-0].namepos}
		}
	case 43:
		//line grammar.y:264
		{
			yyVAL.nameposes = append(yyS[yypt-2].nameposes, yyS[yypt-0].namepos)
		}
	case 44:
		//line grammar.y:268
		{
			yyVAL.namepos = NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}
		}
	case 45:
		//line grammar.y:272
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 46:
		//line grammar.y:274
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 47:
		//line grammar.y:312
		{
			if names, ok := typeListToStrList(yylex, yyS[yypt-1].typeexprs); ok {
				for _, n := range names {
					yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: n.str, Pos: n.pos}})
				}
			} else {
				lexPosErrorf(yylex, yyS[yypt-0].typeexpr.Pos(), "perhaps you forgot a comma before %q?.", yyS[yypt-0].typeexpr.String())
			}
		}
	case 48:
		//line grammar.y:324
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 49:
		//line grammar.y:326
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 50:
		//line grammar.y:330
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 51:
		//line grammar.y:332
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 52:
		//line grammar.y:337
		{
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{NamePos: NamePos{Name: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos}})
		}
	case 53:
		//line grammar.y:342
		{
			yyS[yypt-2].iface.Name, yyS[yypt-2].iface.Pos = yyS[yypt-5].strpos.str, yyS[yypt-5].strpos.pos
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, yyS[yypt-2].iface)
		}
	case 54:
		//line grammar.y:350
		{
			yyVAL.iface = yyS[yypt-0].iface
		}
	case 55:
		//line grammar.y:352
		{
			yyS[yypt-2].iface.Embeds = append(yyS[yypt-2].iface.Embeds, yyS[yypt-0].iface.Embeds...)
			yyS[yypt-2].iface.Methods = append(yyS[yypt-2].iface.Methods, yyS[yypt-0].iface.Methods...)
			yyVAL.iface = yyS[yypt-2].iface
		}
	case 56:
		//line grammar.y:360
		{
			yyVAL.iface = &Interface{Methods: []*Method{{InArgs: yyS[yypt-3].fields, InStream: yyS[yypt-2].typeexprs[0], OutStream: yyS[yypt-2].typeexprs[1], OutArgs: yyS[yypt-1].fields, Tags: yyS[yypt-0].constexprs, NamePos: NamePos{Name: yyS[yypt-4].strpos.str, Pos: yyS[yypt-4].strpos.pos}}}}
		}
	case 57:
		//line grammar.y:362
		{
			yyVAL.iface = &Interface{Embeds: []*NamePos{{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}}}
		}
	case 58:
		//line grammar.y:366
		{
			yyVAL.fields = nil
		}
	case 59:
		//line grammar.y:368
		{
			yyVAL.fields = yyS[yypt-2].fields
		}
	case 60:
		//line grammar.y:372
		{
			for _, t := range yyS[yypt-2].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
		}
	case 61:
		//line grammar.y:382
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 62:
		//line grammar.y:384
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 63:
		//line grammar.y:390
		{
			yyVAL.fields = nil
		}
	case 64:
		//line grammar.y:392
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Pos: yyS[yypt-0].typeexpr.Pos()}}}
		}
	case 65:
		//line grammar.y:394
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 66:
		//line grammar.y:398
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 67:
		//line grammar.y:400
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 68:
		//line grammar.y:402
		{
			yyVAL.typeexprs = []Type{yyS[yypt-1].typeexpr, nil}
		}
	case 69:
		//line grammar.y:404
		{
			yyVAL.typeexprs = []Type{yyS[yypt-3].typeexpr, yyS[yypt-1].typeexpr}
		}
	case 70:
		//line grammar.y:408
		{
			yyVAL.constexprs = nil
		}
	case 71:
		//line grammar.y:410
		{
			yyVAL.constexprs = nil
		}
	case 72:
		//line grammar.y:412
		{
			yyVAL.constexprs = yyS[yypt-2].constexprs
		}
	case 73:
		//line grammar.y:416
		{
			yyVAL.constexprs = []ConstExpr{yyS[yypt-0].constexpr}
		}
	case 74:
		//line grammar.y:418
		{
			yyVAL.constexprs = append(yyS[yypt-2].constexprs, yyS[yypt-0].constexpr)
		}
	case 77:
		//line grammar.y:427
		{
			cds := &lexVDLFile(yylex).ConstDefs
			*cds = append(*cds, &ConstDef{Expr: yyS[yypt-0].constexpr, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 78:
		//line grammar.y:434
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 79:
		//line grammar.y:436
		{
			yyVAL.constexpr = &ConstBinaryOp{"||", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 80:
		//line grammar.y:438
		{
			yyVAL.constexpr = &ConstBinaryOp{"&&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 81:
		//line grammar.y:440
		{
			yyVAL.constexpr = &ConstBinaryOp{"<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 82:
		//line grammar.y:442
		{
			yyVAL.constexpr = &ConstBinaryOp{">", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 83:
		//line grammar.y:444
		{
			yyVAL.constexpr = &ConstBinaryOp{"<=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 84:
		//line grammar.y:446
		{
			yyVAL.constexpr = &ConstBinaryOp{">=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 85:
		//line grammar.y:448
		{
			yyVAL.constexpr = &ConstBinaryOp{"!=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 86:
		//line grammar.y:450
		{
			yyVAL.constexpr = &ConstBinaryOp{"==", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 87:
		//line grammar.y:452
		{
			yyVAL.constexpr = &ConstBinaryOp{"+", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 88:
		//line grammar.y:454
		{
			yyVAL.constexpr = &ConstBinaryOp{"-", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 89:
		//line grammar.y:456
		{
			yyVAL.constexpr = &ConstBinaryOp{"*", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 90:
		//line grammar.y:458
		{
			yyVAL.constexpr = &ConstBinaryOp{"/", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 91:
		//line grammar.y:460
		{
			yyVAL.constexpr = &ConstBinaryOp{"%", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 92:
		//line grammar.y:462
		{
			yyVAL.constexpr = &ConstBinaryOp{"|", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 93:
		//line grammar.y:464
		{
			yyVAL.constexpr = &ConstBinaryOp{"&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 94:
		//line grammar.y:466
		{
			yyVAL.constexpr = &ConstBinaryOp{"^", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 95:
		//line grammar.y:468
		{
			yyVAL.constexpr = &ConstBinaryOp{"<<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 96:
		//line grammar.y:470
		{
			yyVAL.constexpr = &ConstBinaryOp{">>", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 97:
		//line grammar.y:474
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 98:
		//line grammar.y:476
		{
			yyVAL.constexpr = &ConstUnaryOp{"!", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 99:
		//line grammar.y:478
		{
			yyVAL.constexpr = &ConstUnaryOp{"+", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 100:
		//line grammar.y:480
		{
			yyVAL.constexpr = &ConstUnaryOp{"-", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 101:
		//line grammar.y:482
		{
			yyVAL.constexpr = &ConstUnaryOp{"^", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 102:
		//line grammar.y:484
		{
			yyVAL.constexpr = &ConstTypeConv{yyS[yypt-3].typeexpr, yyS[yypt-1].constexpr, yyS[yypt-3].typeexpr.Pos()}
		}
	case 103:
		//line grammar.y:489
		{
			yyVAL.constexpr = &ConstLit{true, yyS[yypt-0].pos}
		}
	case 104:
		//line grammar.y:491
		{
			yyVAL.constexpr = &ConstLit{false, yyS[yypt-0].pos}
		}
	case 105:
		//line grammar.y:493
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 106:
		//line grammar.y:495
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 107:
		//line grammar.y:497
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 108:
		//line grammar.y:499
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].imagpos.imag, yyS[yypt-0].imagpos.pos}
		}
	case 109:
		//line grammar.y:501
		{
			yyVAL.constexpr = &ConstNamed{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 110:
		//line grammar.y:503
		{
			yyVAL.constexpr = &ConstCompositeLit{yyS[yypt-1].typeexpr, yyS[yypt-0].complit.KVList, yyS[yypt-1].typeexpr.Pos()}
		}
	case 111:
		//line grammar.y:505
		{
			yyVAL.constexpr = yyS[yypt-1].constexpr
		}
	case 112:
		//line grammar.y:509
		{
			yyVAL.complit = &ConstCompositeLit{nil, nil, yyS[yypt-1].pos}
		}
	case 113:
		//line grammar.y:511
		{
			yyVAL.complit = &ConstCompositeLit{nil, yyS[yypt-2].kvlits, yyS[yypt-3].pos}
		}
	case 114:
		//line grammar.y:515
		{
			yyVAL.kvlits = []KVLit{yyS[yypt-0].kvlit}
		}
	case 115:
		//line grammar.y:517
		{
			yyVAL.kvlits = append(yyS[yypt-2].kvlits, yyS[yypt-0].kvlit)
		}
	case 116:
		//line grammar.y:521
		{
			yyVAL.kvlit = KVLit{Value: yyS[yypt-0].constexpr}
		}
	case 117:
		//line grammar.y:523
		{
			yyVAL.kvlit = KVLit{Key: yyS[yypt-2].constexpr, Value: yyS[yypt-0].constexpr}
		}
	case 118:
		//line grammar.y:527
		{
			yyVAL.constexpr = yyS[yypt-0].complit
		}
	case 119:
		//line grammar.y:529
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 122:
		//line grammar.y:538
		{
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{NamePos: NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}})
		}
	case 123:
		//line grammar.y:543
		{
			ensureNonEmptyToken(yylex, yyS[yypt-0].strpos, "error id must be non-empty if specified")
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{ID: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 124:
		//line grammar.y:554
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 125:
		//line grammar.y:556
		{
			yyVAL.strpos = strPos{yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, yyS[yypt-2].strpos.pos}
		}
	}
	goto yystack /* stack new state and value */
}
