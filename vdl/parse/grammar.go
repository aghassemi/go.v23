//line grammar.y:36

// This grammar.go file was auto-generated by yacc from grammar.y.

package parse

import __yyfmt__ "fmt"

//line grammar.y:38
import (
	"math/big"
	"strings"
)

type strPos struct {
	str string
	pos Pos
}

type intPos struct {
	int *big.Int
	pos Pos
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

type imagPos struct {
	imag *BigImag
	pos  Pos
}

// typeListToStrList converts a slice of Type to a slice of strPos.  Each type
// must be a TypeNamed with an empty PackageName, otherwise errors are reported,
// and ok=false is returned.
func typeListToStrList(yylex yyLexer, typeList []Type) (strList []strPos, ok bool) {
	ok = true
	for _, t := range typeList {
		var tn *TypeNamed
		if tn, ok = t.(*TypeNamed); !ok {
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names)", t.String())
			return
		}
		if strings.ContainsRune(tn.Name, '.') {
			ok = false
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names).", tn.Name)
			return
		}
		strList = append(strList, strPos{tn.Name, tn.P})
	}
	return
}

// ensureNonEmptyToken reports an error if tok is empty.
func ensureNonEmptyToken(yylex yyLexer, tok strPos, errMsg string) {
	if len(tok.str) == 0 {
		lexPosErrorf(yylex, tok.pos, errMsg)
	}
}

//line grammar.y:97
type yySymType struct {
	yys        int
	pos        Pos
	strpos     strPos
	intpos     intPos
	ratpos     ratPos
	imagpos    imagPos
	typeexpr   Type
	typeexprs  []Type
	fields     []*Field
	iface      *Interface
	constexpr  ConstExpr
	constexprs []ConstExpr
	complit    *ConstCompositeLit
	kvlit      KVLit
	kvlits     []KVLit
}

const startImportsOnly = 57346
const startFullFile = 57347
const tOROR = 57348
const tANDAND = 57349
const tLE = 57350
const tGE = 57351
const tNE = 57352
const tEQEQ = 57353
const tLSH = 57354
const tRSH = 57355
const tPACKAGE = 57356
const tIMPORT = 57357
const tTYPE = 57358
const tMAP = 57359
const tSTRUCT = 57360
const tINTERFACE = 57361
const tSTREAM = 57362
const tCONST = 57363
const tTRUE = 57364
const tFALSE = 57365
const tERRORID = 57366
const tIDENT = 57367
const tSTRLIT = 57368
const tINTLIT = 57369
const tRATLIT = 57370
const tIMAGLIT = 57371
const notPackage = 57372

var yyToknames = []string{
	"startImportsOnly",
	"startFullFile",
	" ;",
	" :",
	" ,",
	" .",
	" (",
	" )",
	" [",
	" ]",
	" {",
	" }",
	" <",
	" >",
	" =",
	" !",
	" +",
	" -",
	" *",
	" /",
	" %",
	" |",
	" &",
	" ^",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tLSH",
	"tRSH",
	"tPACKAGE",
	"tIMPORT",
	"tTYPE",
	"tMAP",
	"tSTRUCT",
	"tINTERFACE",
	"tSTREAM",
	"tCONST",
	"tTRUE",
	"tFALSE",
	"tERRORID",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
	"tIMAGLIT",
	"notPackage",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 89,
	10, 33,
	14, 33,
	-2, 101,
}

const yyNprod = 122
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 463

var yyAct = []int{

	173, 89, 172, 189, 82, 171, 40, 76, 37, 106,
	142, 107, 174, 93, 98, 33, 51, 22, 21, 69,
	30, 206, 199, 24, 99, 41, 51, 143, 25, 51,
	27, 26, 179, 42, 180, 51, 38, 50, 109, 47,
	48, 8, 15, 52, 53, 57, 61, 39, 46, 50,
	51, 54, 48, 52, 53, 68, 52, 53, 5, 75,
	19, 54, 52, 53, 54, 51, 22, 21, 105, 100,
	54, 50, 50, 50, 102, 103, 108, 52, 53, 65,
	62, 58, 95, 111, 41, 54, 130, 131, 132, 133,
	73, 137, 52, 53, 91, 135, 221, 22, 21, 139,
	54, 149, 96, 50, 36, 51, 144, 195, 59, 50,
	55, 219, 148, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 140, 52, 53, 99, 168, 200, 185, 146, 176,
	54, 38, 44, 100, 41, 50, 38, 50, 108, 50,
	184, 50, 108, 183, 187, 182, 177, 186, 114, 115,
	205, 32, 120, 121, 122, 123, 124, 125, 126, 127,
	112, 113, 116, 117, 118, 119, 128, 129, 47, 71,
	50, 215, 67, 193, 50, 196, 198, 148, 20, 194,
	214, 134, 203, 145, 202, 136, 201, 50, 35, 50,
	207, 50, 108, 101, 187, 70, 213, 209, 29, 210,
	208, 72, 51, 72, 143, 217, 216, 50, 220, 90,
	218, 51, 138, 136, 169, 15, 12, 110, 78, 79,
	80, 13, 64, 90, 14, 51, 81, 94, 211, 52,
	53, 49, 78, 79, 80, 63, 197, 54, 52, 53,
	81, 190, 147, 83, 84, 141, 54, 85, 86, 87,
	88, 92, 52, 53, 74, 66, 43, 83, 84, 7,
	54, 85, 86, 87, 88, 90, 9, 51, 31, 136,
	18, 16, 2, 3, 78, 79, 80, 60, 56, 90,
	4, 51, 81, 34, 6, 45, 23, 28, 78, 79,
	80, 11, 17, 10, 52, 53, 81, 1, 170, 83,
	84, 212, 54, 85, 86, 87, 88, 204, 52, 53,
	77, 97, 191, 83, 84, 192, 54, 85, 86, 87,
	88, 114, 115, 181, 104, 120, 121, 122, 123, 124,
	125, 126, 127, 112, 113, 116, 117, 118, 119, 128,
	129, 188, 178, 0, 0, 0, 114, 115, 0, 0,
	120, 121, 122, 123, 124, 125, 126, 127, 112, 113,
	116, 117, 118, 119, 128, 129, 175, 0, 0, 0,
	0, 114, 115, 0, 0, 120, 121, 122, 123, 124,
	125, 126, 127, 112, 113, 116, 117, 118, 119, 128,
	129, 114, 115, 0, 0, 120, 121, 122, 123, 124,
	125, 126, 127, 0, 113, 116, 117, 118, 119, 128,
	129, 114, 115, 0, 0, 120, 121, 122, 123, 124,
	125, 126, 127, 0, 0, 116, 117, 118, 119, 128,
	129, 120, 121, 122, 123, 124, 125, 126, 127, 122,
	123, 124, 0, 126, 0, 128, 129, 0, 0, 0,
	0, 128, 129,
}
var yyPact = []int{

	278, -1000, 22, 22, -1000, -6, -1000, 188, 275, 5,
	-1000, 274, -1000, -1000, -1000, 50, -1000, -15, -1000, 19,
	-1000, -1000, -28, 272, 151, 94, 37, -1000, 260, -1000,
	-1000, -1000, 131, -1000, -1000, 200, 99, -1000, 63, 97,
	-1000, 62, 234, -30, -1000, 259, -1000, 38, -1000, 168,
	-1000, 6, 193, 165, 202, -1000, 258, -1000, 279, -1000,
	255, -1000, -35, -1000, -1000, 226, -8, 87, 190, 38,
	38, 53, -9, 216, -11, 142, -1000, -1000, 279, 279,
	279, 279, 181, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	279, 211, -22, -1000, -1000, -1000, -1000, 249, -1000, 204,
	-1000, 38, -1000, 180, 246, -1000, -1000, 93, -1000, -1000,
	-1000, -1000, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	-1000, -1000, -1000, -1000, 279, -1000, 209, 365, -1000, -1000,
	124, -23, -10, 23, -1000, 38, 122, 38, -1000, 38,
	385, 405, 421, 421, 421, 421, 421, 421, 427, 427,
	-1000, -1000, -1000, 427, -1000, 427, -1000, -1000, 340, -1000,
	243, -1000, -1000, 315, -1000, -1000, -1000, -1000, 17, 91,
	-1000, 238, 14, -1000, -1000, -1000, -1000, -1000, -1000, 121,
	265, 265, 146, -1000, -1000, 4, 199, 38, 198, 38,
	-1000, -1000, -1000, 142, -1000, 223, -1000, 173, -1000, -1000,
	-1000, -1000, 207, 142, -1000, 38, 96, 279, 79, -1000,
	142, -1000,
}
var yyPgo = []int{

	0, 1, 4, 11, 352, 334, 9, 333, 10, 325,
	321, 14, 0, 7, 320, 2, 317, 311, 12, 5,
	308, 307, 290, 269, 303, 302, 301, 297, 33, 188,
	296, 295, 15, 293, 288, 8, 287, 6, 3,
}
var yyR1 = []int{

	0, 21, 21, 24, 24, 24, 24, 22, 22, 23,
	23, 26, 26, 26, 27, 27, 29, 29, 25, 25,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	31, 31, 32, 2, 2, 2, 2, 2, 2, 5,
	5, 6, 33, 33, 10, 10, 11, 11, 8, 8,
	8, 7, 7, 3, 3, 9, 9, 9, 4, 4,
	4, 4, 16, 16, 16, 17, 17, 34, 34, 35,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 13,
	13, 13, 13, 13, 13, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 18, 18, 20, 20, 19, 19,
	15, 15, 36, 36, 37, 37, 1, 1, 28, 28,
	38, 38,
}
var yyR2 = []int{

	0, 4, 4, 0, 1, 1, 1, 0, 3, 0,
	3, 3, 5, 2, 1, 3, 1, 2, 0, 3,
	3, 5, 2, 2, 3, 5, 2, 3, 5, 2,
	1, 3, 2, 1, 4, 3, 5, 5, 3, 1,
	3, 2, 4, 6, 1, 3, 5, 1, 2, 4,
	4, 1, 3, 1, 3, 0, 1, 1, 0, 3,
	4, 6, 0, 2, 4, 1, 3, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	2, 2, 2, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 4, 1, 3, 1, 3,
	1, 1, 1, 3, 1, 3, 1, 3, 0, 1,
	0, 1,
}
var yyChk = []int{

	-1000, -21, 4, 5, -22, 36, -22, -23, 47, -23,
	-24, -26, 38, 43, 46, 37, 6, -25, 6, 10,
	-29, 48, 47, -30, 38, 43, 46, 11, -27, -29,
	48, 6, 10, -32, -33, 47, 10, -35, 47, 10,
	-37, 47, -28, 6, 11, -31, -32, 47, -2, 41,
	-1, 12, 39, 40, 47, 11, -34, -35, 18, 11,
	-36, -37, 18, 11, -29, -28, 6, 14, 49, 13,
	12, 14, 9, -28, 6, -12, -13, -14, 19, 20,
	21, 27, -2, 44, 45, 48, 49, 50, 51, -1,
	10, -28, 6, 48, 11, -32, 15, -10, -11, 47,
	-1, 13, -2, -2, -5, 15, -6, -3, -2, 47,
	11, -35, 28, 29, 16, 17, 30, 31, 32, 33,
	20, 21, 22, 23, 24, 25, 26, 27, 34, 35,
	-13, -13, -13, -13, 10, -18, 14, -12, 11, -37,
	-28, 6, -8, 10, -2, 13, -28, 6, -2, 8,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, 15,
	-20, -19, -15, -12, -18, 11, 15, -11, -4, 42,
	11, -7, -3, -6, -2, 15, -6, -2, 11, -38,
	8, 7, -9, -2, -8, 16, -38, 8, -38, 8,
	15, -19, -15, -12, -16, 14, 17, -2, 11, -6,
	11, 15, -17, -12, 17, 8, -38, 8, -2, 15,
	-12, 17,
}
var yyDef = []int{

	0, -2, 7, 7, 9, 0, 9, 3, 0, 18,
	1, 0, 4, 5, 6, 0, 8, 2, 10, 0,
	13, 16, 0, 0, 0, 0, 0, 11, 118, 14,
	17, 19, 0, 22, 23, 0, 0, 26, 0, 0,
	29, 114, 0, 119, 20, 118, 30, 0, 32, 0,
	33, 0, 0, 0, 116, 24, 118, 67, 0, 27,
	118, 112, 0, 12, 15, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 119, 69, 70, 89, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 99, 100, -2,
	0, 0, 119, 115, 21, 31, 42, 118, 44, 116,
	47, 0, 35, 0, 118, 38, 39, 0, 53, 117,
	25, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 0, 102, 0, 0, 28, 113,
	0, 119, 58, 0, 34, 0, 0, 119, 41, 0,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 0, 104,
	120, 106, 108, 111, 110, 103, 43, 45, 55, 0,
	48, 120, 120, 51, 36, 37, 40, 54, 94, 0,
	121, 0, 62, 56, 57, 0, 0, 121, 0, 121,
	105, 107, 109, 111, 46, 0, 59, 0, 49, 52,
	50, 63, 120, 65, 60, 0, 0, 121, 0, 64,
	66, 61,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 19, 3, 3, 3, 24, 26, 3,
	10, 11, 22, 20, 8, 21, 9, 23, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 7, 6,
	16, 18, 17, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 12, 3, 13, 27, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 14, 25, 15,
}
var yyTok2 = []int{

	2, 3, 4, 5, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		//line grammar.y:166
		{
			lexGenEOF(yylex)
		}
	case 4:
		//line grammar.y:168
		{
			lexGenEOF(yylex)
		}
	case 5:
		//line grammar.y:170
		{
			lexGenEOF(yylex)
		}
	case 6:
		//line grammar.y:172
		{
			lexGenEOF(yylex)
		}
	case 7:
		//line grammar.y:177
		{
			lexPosErrorf(yylex, Pos{}, "file must start with package statement")
		}
	case 8:
		//line grammar.y:179
		{
			lexVDLFile(yylex).PackageDef = NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}
		}
	case 16:
		//line grammar.y:197
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Pos: yyS[yypt-0].strpos.pos}})
		}
	case 17:
		//line grammar.y:202
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 32:
		//line grammar.y:231
		{
			tds := &lexVDLFile(yylex).TypeDefs
			*tds = append(*tds, &TypeDef{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 33:
		//line grammar.y:238
		{
			yyVAL.typeexpr = &TypeNamed{Name: yyS[yypt-0].strpos.str, P: yyS[yypt-0].strpos.pos}
		}
	case 34:
		//line grammar.y:240
		{
			yyVAL.typeexpr = &TypeArray{Len: int(yyS[yypt-2].intpos.int.Int64()), Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-3].pos}
		}
	case 35:
		//line grammar.y:242
		{
			yyVAL.typeexpr = &TypeList{Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-2].pos}
		}
	case 36:
		//line grammar.y:244
		{
			yyVAL.typeexpr = &TypeMap{Key: yyS[yypt-2].typeexpr, Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-4].pos}
		}
	case 37:
		//line grammar.y:246
		{
			yyVAL.typeexpr = &TypeStruct{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 38:
		//line grammar.y:248
		{
			yyVAL.typeexpr = &TypeStruct{P: yyS[yypt-2].pos}
		}
	case 39:
		//line grammar.y:252
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 40:
		//line grammar.y:254
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 41:
		//line grammar.y:292
		{
			if names, ok := typeListToStrList(yylex, yyS[yypt-1].typeexprs); ok {
				for _, n := range names {
					yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: n.str, Pos: n.pos}})
				}
			} else {
				lexPosErrorf(yylex, yyS[yypt-0].typeexpr.Pos(), "perhaps you forgot a comma before %q?.", yyS[yypt-0].typeexpr.String())
			}
		}
	case 42:
		//line grammar.y:305
		{
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{NamePos: NamePos{Name: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos}})
		}
	case 43:
		//line grammar.y:310
		{
			yyS[yypt-2].iface.Name, yyS[yypt-2].iface.Pos = yyS[yypt-5].strpos.str, yyS[yypt-5].strpos.pos
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, yyS[yypt-2].iface)
		}
	case 44:
		//line grammar.y:318
		{
			yyVAL.iface = yyS[yypt-0].iface
		}
	case 45:
		//line grammar.y:320
		{
			yyS[yypt-2].iface.Embeds = append(yyS[yypt-2].iface.Embeds, yyS[yypt-0].iface.Embeds...)
			yyS[yypt-2].iface.Methods = append(yyS[yypt-2].iface.Methods, yyS[yypt-0].iface.Methods...)
			yyVAL.iface = yyS[yypt-2].iface
		}
	case 46:
		//line grammar.y:328
		{
			yyVAL.iface = &Interface{Methods: []*Method{{InArgs: yyS[yypt-3].fields, InStream: yyS[yypt-2].typeexprs[0], OutStream: yyS[yypt-2].typeexprs[1], OutArgs: yyS[yypt-1].fields, Tags: yyS[yypt-0].constexprs, NamePos: NamePos{Name: yyS[yypt-4].strpos.str, Pos: yyS[yypt-4].strpos.pos}}}}
		}
	case 47:
		//line grammar.y:330
		{
			yyVAL.iface = &Interface{Embeds: []*NamePos{{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}}}
		}
	case 48:
		//line grammar.y:334
		{
			yyVAL.fields = nil
		}
	case 49:
		//line grammar.y:336
		{
			yyVAL.fields = yyS[yypt-2].fields
		}
	case 50:
		//line grammar.y:340
		{
			for _, t := range yyS[yypt-2].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
		}
	case 51:
		//line grammar.y:350
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 52:
		//line grammar.y:352
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 53:
		//line grammar.y:356
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 54:
		//line grammar.y:358
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 55:
		//line grammar.y:364
		{
			yyVAL.fields = nil
		}
	case 56:
		//line grammar.y:366
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Pos: yyS[yypt-0].typeexpr.Pos()}}}
		}
	case 57:
		//line grammar.y:368
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 58:
		//line grammar.y:372
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 59:
		//line grammar.y:374
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 60:
		//line grammar.y:376
		{
			yyVAL.typeexprs = []Type{yyS[yypt-1].typeexpr, nil}
		}
	case 61:
		//line grammar.y:378
		{
			yyVAL.typeexprs = []Type{yyS[yypt-3].typeexpr, yyS[yypt-1].typeexpr}
		}
	case 62:
		//line grammar.y:382
		{
			yyVAL.constexprs = nil
		}
	case 63:
		//line grammar.y:384
		{
			yyVAL.constexprs = nil
		}
	case 64:
		//line grammar.y:386
		{
			yyVAL.constexprs = yyS[yypt-2].constexprs
		}
	case 65:
		//line grammar.y:390
		{
			yyVAL.constexprs = []ConstExpr{yyS[yypt-0].constexpr}
		}
	case 66:
		//line grammar.y:392
		{
			yyVAL.constexprs = append(yyS[yypt-2].constexprs, yyS[yypt-0].constexpr)
		}
	case 69:
		//line grammar.y:401
		{
			cds := &lexVDLFile(yylex).ConstDefs
			*cds = append(*cds, &ConstDef{Expr: yyS[yypt-0].constexpr, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 70:
		//line grammar.y:408
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 71:
		//line grammar.y:410
		{
			yyVAL.constexpr = &ConstBinaryOp{"||", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 72:
		//line grammar.y:412
		{
			yyVAL.constexpr = &ConstBinaryOp{"&&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 73:
		//line grammar.y:414
		{
			yyVAL.constexpr = &ConstBinaryOp{"<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 74:
		//line grammar.y:416
		{
			yyVAL.constexpr = &ConstBinaryOp{">", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 75:
		//line grammar.y:418
		{
			yyVAL.constexpr = &ConstBinaryOp{"<=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 76:
		//line grammar.y:420
		{
			yyVAL.constexpr = &ConstBinaryOp{">=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 77:
		//line grammar.y:422
		{
			yyVAL.constexpr = &ConstBinaryOp{"!=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 78:
		//line grammar.y:424
		{
			yyVAL.constexpr = &ConstBinaryOp{"==", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 79:
		//line grammar.y:426
		{
			yyVAL.constexpr = &ConstBinaryOp{"+", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 80:
		//line grammar.y:428
		{
			yyVAL.constexpr = &ConstBinaryOp{"-", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 81:
		//line grammar.y:430
		{
			yyVAL.constexpr = &ConstBinaryOp{"*", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 82:
		//line grammar.y:432
		{
			yyVAL.constexpr = &ConstBinaryOp{"/", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 83:
		//line grammar.y:434
		{
			yyVAL.constexpr = &ConstBinaryOp{"%", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 84:
		//line grammar.y:436
		{
			yyVAL.constexpr = &ConstBinaryOp{"|", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 85:
		//line grammar.y:438
		{
			yyVAL.constexpr = &ConstBinaryOp{"&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 86:
		//line grammar.y:440
		{
			yyVAL.constexpr = &ConstBinaryOp{"^", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 87:
		//line grammar.y:442
		{
			yyVAL.constexpr = &ConstBinaryOp{"<<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 88:
		//line grammar.y:444
		{
			yyVAL.constexpr = &ConstBinaryOp{">>", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 89:
		//line grammar.y:448
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 90:
		//line grammar.y:450
		{
			yyVAL.constexpr = &ConstUnaryOp{"!", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 91:
		//line grammar.y:452
		{
			yyVAL.constexpr = &ConstUnaryOp{"+", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 92:
		//line grammar.y:454
		{
			yyVAL.constexpr = &ConstUnaryOp{"-", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 93:
		//line grammar.y:456
		{
			yyVAL.constexpr = &ConstUnaryOp{"^", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 94:
		//line grammar.y:458
		{
			yyVAL.constexpr = &ConstTypeConv{yyS[yypt-3].typeexpr, yyS[yypt-1].constexpr, yyS[yypt-3].typeexpr.Pos()}
		}
	case 95:
		//line grammar.y:463
		{
			yyVAL.constexpr = &ConstLit{true, yyS[yypt-0].pos}
		}
	case 96:
		//line grammar.y:465
		{
			yyVAL.constexpr = &ConstLit{false, yyS[yypt-0].pos}
		}
	case 97:
		//line grammar.y:467
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 98:
		//line grammar.y:469
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 99:
		//line grammar.y:471
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 100:
		//line grammar.y:473
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].imagpos.imag, yyS[yypt-0].imagpos.pos}
		}
	case 101:
		//line grammar.y:475
		{
			yyVAL.constexpr = &ConstNamed{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 102:
		//line grammar.y:477
		{
			yyVAL.constexpr = &ConstCompositeLit{yyS[yypt-1].typeexpr, yyS[yypt-0].complit.KVList, yyS[yypt-1].typeexpr.Pos()}
		}
	case 103:
		//line grammar.y:479
		{
			yyVAL.constexpr = yyS[yypt-1].constexpr
		}
	case 104:
		//line grammar.y:483
		{
			yyVAL.complit = &ConstCompositeLit{nil, nil, yyS[yypt-1].pos}
		}
	case 105:
		//line grammar.y:485
		{
			yyVAL.complit = &ConstCompositeLit{nil, yyS[yypt-2].kvlits, yyS[yypt-3].pos}
		}
	case 106:
		//line grammar.y:489
		{
			yyVAL.kvlits = []KVLit{yyS[yypt-0].kvlit}
		}
	case 107:
		//line grammar.y:491
		{
			yyVAL.kvlits = append(yyS[yypt-2].kvlits, yyS[yypt-0].kvlit)
		}
	case 108:
		//line grammar.y:495
		{
			yyVAL.kvlit = KVLit{Value: yyS[yypt-0].constexpr}
		}
	case 109:
		//line grammar.y:497
		{
			yyVAL.kvlit = KVLit{Key: yyS[yypt-2].constexpr, Value: yyS[yypt-0].constexpr}
		}
	case 110:
		//line grammar.y:501
		{
			yyVAL.constexpr = yyS[yypt-0].complit
		}
	case 111:
		//line grammar.y:503
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 114:
		//line grammar.y:512
		{
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{NamePos: NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}})
		}
	case 115:
		//line grammar.y:517
		{
			ensureNonEmptyToken(yylex, yyS[yypt-0].strpos, "error id must be non-empty if specified")
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{ID: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 116:
		//line grammar.y:528
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 117:
		//line grammar.y:530
		{
			yyVAL.strpos = strPos{yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, yyS[yypt-2].strpos.pos}
		}
	}
	goto yystack /* stack new state and value */
}
