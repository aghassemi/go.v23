//line grammar.y:18

// This grammar.y.go file was auto-generated by yacc from grammar.y.

package parse

import __yyfmt__ "fmt"

//line grammar.y:20
import (
	"math/big"
	"strings"
)

type strPos struct {
	str string
	pos Pos
}

type intPos struct {
	int *big.Int
	pos Pos
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

type imagPos struct {
	imag *BigImag
	pos  Pos
}

// typeListToStrList converts a slice of Type to a slice of strPos.  Each type
// must be a TypeNamed with an empty PackageName, otherwise errors are reported,
// and ok=false is returned.
func typeListToStrList(yylex yyLexer, typeList []Type) (strList []strPos, ok bool) {
	ok = true
	for _, t := range typeList {
		var tn *TypeNamed
		if tn, ok = t.(*TypeNamed); !ok {
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names)", t.String())
			return
		}
		if strings.ContainsRune(tn.Name, '.') {
			ok = false
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names).", tn.Name)
			return
		}
		strList = append(strList, strPos{tn.Name, tn.P})
	}
	return
}

// ensureNonEmptyToken reports an error if tok is empty.
func ensureNonEmptyToken(yylex yyLexer, tok strPos, errMsg string) {
	if len(tok.str) == 0 {
		lexPosErrorf(yylex, tok.pos, errMsg)
	}
}

//line grammar.y:79
type yySymType struct {
	yys        int
	pos        Pos
	strpos     strPos
	intpos     intPos
	ratpos     ratPos
	imagpos    imagPos
	namepos    NamePos
	nameposes  []NamePos
	typeexpr   Type
	typeexprs  []Type
	fields     []*Field
	iface      *Interface
	constexpr  ConstExpr
	constexprs []ConstExpr
	complit    *ConstCompositeLit
	kvlit      KVLit
	kvlits     []KVLit
}

const startFileImports = 57346
const startFile = 57347
const startConfigImports = 57348
const startConfig = 57349
const startExprs = 57350
const tOROR = 57351
const tANDAND = 57352
const tLE = 57353
const tGE = 57354
const tNE = 57355
const tEQEQ = 57356
const tLSH = 57357
const tRSH = 57358
const tCONST = 57359
const tENUM = 57360
const tERRORID = 57361
const tIMPORT = 57362
const tINTERFACE = 57363
const tMAP = 57364
const tPACKAGE = 57365
const tSET = 57366
const tSTREAM = 57367
const tSTRUCT = 57368
const tTYPE = 57369
const tTYPEOBJECT = 57370
const tUNION = 57371
const tIDENT = 57372
const tSTRLIT = 57373
const tINTLIT = 57374
const tRATLIT = 57375
const tIMAGLIT = 57376
const notPackage = 57377
const notConfig = 57378

var yyToknames = []string{
	"startFileImports",
	"startFile",
	"startConfigImports",
	"startConfig",
	"startExprs",
	"';'",
	"':'",
	"','",
	"'.'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"'<'",
	"'>'",
	"'='",
	"'!'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'|'",
	"'&'",
	"'^'",
	"'?'",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tLSH",
	"tRSH",
	"tCONST",
	"tENUM",
	"tERRORID",
	"tIMPORT",
	"tINTERFACE",
	"tMAP",
	"tPACKAGE",
	"tSET",
	"tSTREAM",
	"tSTRUCT",
	"tTYPE",
	"tTYPEOBJECT",
	"tUNION",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
	"tIMAGLIT",
	"notPackage",
	"notConfig",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 27,
	13, 40,
	17, 40,
	-2, 117,
	-1, 175,
	18, 142,
	-2, 137,
	-1, 278,
	18, 142,
	-2, 137,
}

const yyNprod = 143
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 819

var yyAct = []int{

	14, 27, 13, 192, 235, 189, 139, 251, 150, 165,
	146, 185, 132, 136, 138, 37, 236, 89, 152, 151,
	174, 230, 180, 193, 190, 209, 133, 143, 126, 39,
	77, 21, 42, 11, 233, 157, 249, 158, 88, 177,
	8, 97, 280, 79, 219, 156, 101, 279, 92, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 86, 236,
	89, 30, 122, 216, 88, 125, 266, 127, 152, 151,
	40, 88, 78, 88, 88, 88, 88, 36, 149, 124,
	99, 212, 147, 100, 206, 191, 285, 31, 141, 188,
	215, 33, 260, 32, 86, 34, 30, 87, 35, 39,
	89, 86, 193, 86, 86, 86, 86, 85, 45, 184,
	257, 282, 36, 246, 95, 201, 96, 97, 152, 151,
	190, 88, 31, 209, 94, 193, 33, 102, 32, 190,
	34, 88, 87, 35, 39, 89, 169, 276, 15, 200,
	197, 173, 194, 123, 263, 224, 275, 91, 179, 187,
	130, 86, 134, 135, 140, 140, 67, 68, 69, 70,
	88, 86, 88, 84, 88, 83, 147, 203, 80, 195,
	168, 167, 129, 82, 75, 198, 202, 76, 204, 88,
	81, 74, 287, 286, 214, 218, 208, 270, 268, 240,
	86, 238, 86, 231, 86, 220, 161, 245, 72, 71,
	164, 88, 90, 73, 221, 278, 227, 222, 41, 86,
	171, 259, 47, 225, 48, 175, 237, 228, 43, 44,
	243, 46, 239, 241, 229, 232, 2, 3, 4, 5,
	6, 86, 226, 223, 242, 237, 205, 88, 247, 196,
	88, 140, 252, 199, 88, 183, 182, 181, 88, 88,
	253, 88, 88, 265, 264, 170, 272, 88, 210, 166,
	148, 253, 258, 261, 269, 98, 217, 86, 88, 103,
	86, 88, 88, 30, 86, 273, 274, 213, 86, 86,
	210, 86, 86, 277, 10, 186, 207, 86, 7, 36,
	12, 155, 9, 154, 153, 178, 93, 1, 86, 31,
	145, 86, 86, 33, 28, 32, 262, 34, 16, 87,
	35, 39, 89, 234, 254, 244, 140, 248, 38, 255,
	131, 0, 0, 171, 29, 0, 30, 140, 267, 271,
	140, 199, 0, 17, 18, 19, 171, 0, 0, 0,
	0, 20, 36, 0, 0, 0, 0, 281, 0, 0,
	283, 284, 31, 0, 0, 0, 33, 0, 32, 0,
	34, 0, 22, 35, 39, 23, 24, 25, 26, 29,
	0, 30, 0, 0, 144, 0, 0, 0, 17, 18,
	19, 0, 0, 0, 0, 0, 20, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 31, 0, 0,
	0, 33, 0, 32, 0, 34, 0, 22, 35, 39,
	23, 24, 25, 26, 29, 0, 30, 0, 0, 0,
	0, 0, 0, 17, 18, 19, 0, 0, 0, 0,
	0, 20, 36, 256, 0, 30, 0, 0, 0, 0,
	0, 0, 31, 0, 0, 0, 33, 0, 32, 0,
	34, 36, 22, 35, 39, 23, 24, 25, 26, 250,
	30, 31, 0, 0, 0, 33, 0, 32, 0, 34,
	0, 87, 35, 39, 89, 30, 36, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 31, 0, 0, 0,
	33, 36, 32, 0, 34, 0, 87, 35, 39, 89,
	0, 31, 172, 0, 211, 33, 30, 32, 0, 34,
	0, 87, 35, 39, 89, 59, 60, 61, 0, 63,
	0, 30, 36, 0, 142, 0, 0, 0, 65, 66,
	0, 0, 31, 0, 0, 0, 33, 36, 32, 0,
	34, 0, 87, 35, 39, 89, 30, 31, 0, 137,
	0, 33, 0, 32, 0, 34, 0, 87, 35, 39,
	89, 0, 36, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 31, 0, 0, 0, 33, 176, 32, 0,
	34, 0, 87, 35, 39, 89, 51, 52, 0, 0,
	57, 58, 59, 60, 61, 62, 63, 64, 0, 49,
	50, 53, 54, 55, 56, 65, 66, 163, 0, 0,
	51, 52, 0, 0, 57, 58, 59, 60, 61, 62,
	63, 64, 0, 49, 50, 53, 54, 55, 56, 65,
	66, 162, 0, 0, 51, 52, 0, 0, 57, 58,
	59, 60, 61, 62, 63, 64, 0, 49, 50, 53,
	54, 55, 56, 65, 66, 160, 0, 0, 0, 0,
	51, 52, 0, 0, 57, 58, 59, 60, 61, 62,
	63, 64, 159, 49, 50, 53, 54, 55, 56, 65,
	66, 0, 51, 52, 0, 0, 57, 58, 59, 60,
	61, 62, 63, 64, 0, 49, 50, 53, 54, 55,
	56, 65, 66, 128, 0, 0, 0, 0, 51, 52,
	0, 0, 57, 58, 59, 60, 61, 62, 63, 64,
	0, 49, 50, 53, 54, 55, 56, 65, 66, 51,
	52, 0, 0, 57, 58, 59, 60, 61, 62, 63,
	64, 0, 49, 50, 53, 54, 55, 56, 65, 66,
	51, 52, 0, 0, 57, 58, 59, 60, 61, 62,
	63, 64, 0, 0, 50, 53, 54, 55, 56, 65,
	66, 51, 52, 0, 0, 57, 58, 59, 60, 61,
	62, 63, 64, 0, 0, 0, 53, 54, 55, 56,
	65, 66, 57, 58, 59, 60, 61, 62, 63, 64,
	0, 0, 0, 0, 0, 0, 0, 65, 66,
}
var yyPact = []int{

	232, -1000, -6, -6, -20, -20, 411, -1000, -21, -1000,
	-1000, 97, -1000, 213, 720, -1000, -1000, 411, 411, 411,
	411, 196, 195, 201, -1000, -1000, -1000, 176, 172, 411,
	27, 161, 175, 168, 158, 156, 268, 200, 140, -1000,
	-1000, 84, 266, -2, 84, 411, -2, -1000, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, -1000, -1000, -1000,
	-1000, 411, 268, -24, 411, -25, 411, 699, 166, 268,
	-27, 268, 268, 541, 516, -1000, -1000, -1000, -1000, 201,
	-26, 366, -1000, 261, -1000, -1000, -1000, 75, -1000, -5,
	-1000, 673, -5, 720, 741, 762, 779, 779, 779, 779,
	779, 779, 500, 500, -1000, -1000, -1000, 500, -1000, 500,
	-1000, -1000, 651, 192, 200, 625, -1000, 601, -1000, 268,
	-1000, 260, -1000, -1000, 165, 164, 256, -1000, -1000, 501,
	-1000, 256, -1000, -1000, -1000, 214, -1000, 577, -1000, 25,
	-1000, -1000, -32, 248, 247, 246, 106, 86, 82, -1000,
	-1000, -1000, -1000, -1000, -1000, 134, -27, -1000, 268, 132,
	268, -1000, 268, 131, 107, 411, 411, -1000, 237, -1000,
	-1000, -1000, -1000, -1000, 80, -1000, -1000, 470, 77, -1000,
	79, 59, -1000, 23, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 720, 191, -35, -1000, 234, -1000, 268,
	-1000, 138, -1000, 233, -1000, 411, -1000, 225, -1000, -33,
	-1000, -1000, 189, -28, 16, 187, -29, 720, 185, -30,
	-1000, -1000, -1000, -1000, 221, -1000, 194, -1000, -1000, -1000,
	-1000, -1000, 105, -37, -12, 455, -1000, -1000, 430, 101,
	-1000, 210, 91, -1000, 137, -1000, 268, 56, 184, 268,
	268, 183, -1000, 321, 210, 91, -1000, 136, -1000, -1000,
	-1000, -1000, 204, 19, 14, -1000, 268, 103, 411, 268,
	268, 76, -1000, 179, 178, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 1, 15, 12, 330, 80, 31, 328, 6, 327,
	13, 14, 7, 325, 324, 323, 4, 0, 148, 318,
	316, 2, 314, 10, 310, 307, 298, 218, 48, 90,
	294, 306, 305, 9, 8, 304, 303, 301, 296, 11,
	295, 287, 5, 276, 3, 20,
}
var yyR1 = []int{

	0, 25, 25, 25, 25, 25, 28, 28, 28, 28,
	26, 26, 30, 30, 27, 27, 31, 31, 31, 32,
	32, 34, 34, 29, 29, 29, 29, 35, 35, 35,
	35, 36, 36, 36, 37, 37, 37, 38, 38, 39,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 5, 5, 4, 4, 3, 10, 10, 11, 8,
	8, 40, 40, 15, 15, 16, 16, 13, 13, 13,
	12, 12, 14, 14, 14, 9, 9, 9, 9, 20,
	20, 20, 21, 21, 41, 41, 42, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 18, 18, 18, 18,
	18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 22, 22, 24, 24, 23, 23, 43,
	43, 44, 44, 1, 1, 2, 2, 7, 7, 33,
	33, 45, 45,
}
var yyR2 = []int{

	0, 4, 4, 4, 4, 3, 0, 1, 1, 1,
	0, 3, 0, 4, 0, 3, 3, 5, 2, 1,
	3, 1, 2, 0, 3, 3, 3, 3, 5, 2,
	2, 3, 5, 2, 3, 5, 2, 1, 3, 2,
	1, 4, 3, 5, 4, 5, 5, 3, 5, 3,
	2, 1, 1, 1, 3, 1, 1, 3, 2, 1,
	3, 4, 6, 1, 3, 5, 1, 2, 4, 4,
	1, 3, 1, 6, 6, 0, 3, 4, 6, 0,
	2, 4, 1, 3, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 2, 2, 2,
	2, 4, 4, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 3, 3, 5, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 1, 3, 0, 1, 0,
	1, 0, 1,
}
var yyChk = []int{

	-1000, -25, 4, 5, 6, 7, 8, -26, 46, -26,
	-30, 53, -30, -21, -17, -18, -19, 22, 23, 24,
	30, -6, 51, 54, 55, 56, 57, -1, -22, 13,
	15, 41, 47, 45, 49, 52, 31, -2, -7, 53,
	-5, -27, 53, -27, -27, 21, -27, 9, 11, 32,
	33, 19, 20, 34, 35, 36, 37, 23, 24, 25,
	26, 27, 28, 29, 30, 38, 39, -18, -18, -18,
	-18, 13, 13, 12, 15, 12, 15, -17, 55, 16,
	17, 15, 15, 17, 17, -5, -6, 51, -1, 54,
	12, 17, -28, -31, 50, 40, 42, 43, 9, -29,
	-28, -17, -29, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -5, -2, -17, 53, -17, 14, 16,
	-5, -4, -3, 53, -5, -5, -10, 18, -11, -8,
	-5, -10, 18, 53, 18, -24, -23, -17, 9, 13,
	-34, 54, 53, -35, -36, -37, 50, 40, 42, 9,
	14, 14, 16, 16, -5, -33, 9, 16, 16, -33,
	9, -5, 11, -33, -45, 11, 10, 14, -32, -34,
	54, 9, 9, 9, 13, -39, -40, 53, 13, -42,
	53, 13, -44, 53, 18, -3, -5, 18, -11, -5,
	18, 18, -23, -17, -33, 9, 14, -38, -39, 53,
	-5, 44, 14, -41, -42, 21, 14, -43, -44, 21,
	14, -34, -33, 9, 17, -33, 9, -17, -33, 9,
	54, 14, -39, 18, -15, -16, 53, -1, 14, -42,
	14, -44, -33, 9, -13, 13, 18, -16, -9, 48,
	14, -12, -8, -11, -14, -5, 13, 19, -45, 11,
	11, -45, -20, 17, -12, -8, 20, -5, 14, -11,
	14, 18, -21, -45, -45, 20, 11, -45, 11, 28,
	28, -5, 18, -5, -5, 20, 14, 14,
}
var yyDef = []int{

	0, -2, 10, 10, 12, 12, 137, 14, 0, 14,
	14, 0, 14, 0, 82, 87, 106, 137, 137, 137,
	137, 51, 52, 113, 114, 115, 116, -2, 118, 137,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 135,
	138, 6, 0, 23, 6, 137, 23, 5, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 107, 108, 109,
	110, 137, 0, 0, 137, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 51, 52, 40, 0,
	0, 137, 1, 0, 7, 8, 9, 0, 11, 2,
	3, 0, 4, 83, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 0, 0, 134, 0, 119, 0, 122, 0,
	42, 139, 53, 55, 0, 0, 139, 47, 56, 0,
	59, 139, 49, 136, 123, 141, 125, 127, 15, 0,
	18, 21, 0, 0, 0, 0, 0, 0, 0, 13,
	111, 112, 121, 120, 41, 0, 140, 44, 0, 0,
	140, 58, 0, 0, 0, -2, 137, 16, 139, 19,
	22, 24, 25, 26, 0, 29, 30, 0, 0, 33,
	0, 0, 36, 131, 43, 54, 45, 46, 57, 60,
	48, 124, 126, 128, 0, 140, 27, 139, 37, 0,
	39, 0, 31, 139, 84, 137, 34, 139, 129, 0,
	17, 20, 0, 140, 0, 0, 140, 86, 0, 140,
	132, 28, 38, 61, 139, 63, 135, 66, 32, 85,
	35, 130, 0, 140, 75, 0, 62, 64, 0, 0,
	67, 141, 141, 70, 79, 72, 0, 0, 0, 142,
	142, 0, 65, 137, 141, 141, 76, 0, 68, 71,
	69, 80, 141, 0, 0, 77, 0, 0, -2, 0,
	0, 0, 81, 0, 0, 78, 73, 74,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 22, 3, 3, 3, 27, 29, 3,
	13, 14, 25, 23, 11, 24, 12, 26, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 10, 9,
	19, 21, 20, 31, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 15, 3, 16, 30, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 17, 28, 18,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		//line grammar.y:153
		{
			lexStoreExprs(yylex, yyS[yypt-1].constexprs)
		}
	case 6:
		//line grammar.y:162
		{
			lexGenEOF(yylex)
		}
	case 7:
		//line grammar.y:164
		{
			lexGenEOF(yylex)
		}
	case 8:
		//line grammar.y:166
		{
			lexGenEOF(yylex)
		}
	case 9:
		//line grammar.y:168
		{
			lexGenEOF(yylex)
		}
	case 10:
		//line grammar.y:173
		{
			lexPosErrorf(yylex, Pos{}, "vdl file must start with package clause")
		}
	case 11:
		//line grammar.y:175
		{
			lexVDLFile(yylex).PackageDef = NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}
		}
	case 12:
		//line grammar.y:180
		{
			lexPosErrorf(yylex, Pos{}, "config file must start with config clause")
		}
	case 13:
		//line grammar.y:182
		{
			// We allow "config" as an identifier; it is not a keyword.  So we check
			// manually to make sure the syntax is correct.
			if yyS[yypt-3].strpos.str != "config" {
				lexPosErrorf(yylex, yyS[yypt-3].strpos.pos, "config file must start with config clause")
				return 1 // Any non-zero code indicates an error
			}
			file := lexVDLFile(yylex)
			file.PackageDef = NamePos{Name: "config", Pos: yyS[yypt-3].strpos.pos}
			file.ConstDefs = []*ConstDef{{Expr: yyS[yypt-1].constexpr}}
		}
	case 21:
		//line grammar.y:210
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Pos: yyS[yypt-0].strpos.pos}})
		}
	case 22:
		//line grammar.y:215
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 39:
		//line grammar.y:250
		{
			tds := &lexVDLFile(yylex).TypeDefs
			*tds = append(*tds, &TypeDef{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 40:
		//line grammar.y:272
		{
			yyVAL.typeexpr = &TypeNamed{Name: yyS[yypt-0].strpos.str, P: yyS[yypt-0].strpos.pos}
		}
	case 41:
		//line grammar.y:274
		{
			yyVAL.typeexpr = &TypeArray{Len: int(yyS[yypt-2].intpos.int.Int64()), Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-3].pos}
		}
	case 42:
		//line grammar.y:276
		{
			yyVAL.typeexpr = &TypeList{Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-2].pos}
		}
	case 43:
		//line grammar.y:278
		{
			yyVAL.typeexpr = &TypeEnum{Labels: yyS[yypt-2].nameposes, P: yyS[yypt-4].pos}
		}
	case 44:
		//line grammar.y:280
		{
			yyVAL.typeexpr = &TypeSet{Key: yyS[yypt-1].typeexpr, P: yyS[yypt-3].pos}
		}
	case 45:
		//line grammar.y:282
		{
			yyVAL.typeexpr = &TypeMap{Key: yyS[yypt-2].typeexpr, Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-4].pos}
		}
	case 46:
		//line grammar.y:284
		{
			yyVAL.typeexpr = &TypeStruct{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 47:
		//line grammar.y:286
		{
			yyVAL.typeexpr = &TypeStruct{P: yyS[yypt-2].pos}
		}
	case 48:
		//line grammar.y:288
		{
			yyVAL.typeexpr = &TypeUnion{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 49:
		//line grammar.y:290
		{
			yyVAL.typeexpr = &TypeUnion{P: yyS[yypt-2].pos}
		}
	case 50:
		//line grammar.y:292
		{
			yyVAL.typeexpr = &TypeOptional{Base: yyS[yypt-0].typeexpr, P: yyS[yypt-1].pos}
		}
	case 51:
		//line grammar.y:297
		{
			yyVAL.typeexpr = yyS[yypt-0].typeexpr
		}
	case 52:
		//line grammar.y:299
		{
			yyVAL.typeexpr = &TypeNamed{Name: "typeobject", P: yyS[yypt-0].pos}
		}
	case 53:
		//line grammar.y:303
		{
			yyVAL.nameposes = []NamePos{yyS[yypt-0].namepos}
		}
	case 54:
		//line grammar.y:305
		{
			yyVAL.nameposes = append(yyS[yypt-2].nameposes, yyS[yypt-0].namepos)
		}
	case 55:
		//line grammar.y:309
		{
			yyVAL.namepos = NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}
		}
	case 56:
		//line grammar.y:313
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 57:
		//line grammar.y:315
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 58:
		//line grammar.y:353
		{
			if names, ok := typeListToStrList(yylex, yyS[yypt-1].typeexprs); ok {
				for _, n := range names {
					yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: n.str, Pos: n.pos}})
				}
			} else {
				lexPosErrorf(yylex, yyS[yypt-0].typeexpr.Pos(), "perhaps you forgot a comma before %q?.", yyS[yypt-0].typeexpr.String())
			}
		}
	case 59:
		//line grammar.y:365
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 60:
		//line grammar.y:367
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 61:
		//line grammar.y:372
		{
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{NamePos: NamePos{Name: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos}})
		}
	case 62:
		//line grammar.y:377
		{
			yyS[yypt-2].iface.Name, yyS[yypt-2].iface.Pos = yyS[yypt-5].strpos.str, yyS[yypt-5].strpos.pos
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, yyS[yypt-2].iface)
		}
	case 63:
		//line grammar.y:385
		{
			yyVAL.iface = yyS[yypt-0].iface
		}
	case 64:
		//line grammar.y:387
		{
			yyS[yypt-2].iface.Embeds = append(yyS[yypt-2].iface.Embeds, yyS[yypt-0].iface.Embeds...)
			yyS[yypt-2].iface.Methods = append(yyS[yypt-2].iface.Methods, yyS[yypt-0].iface.Methods...)
			yyVAL.iface = yyS[yypt-2].iface
		}
	case 65:
		//line grammar.y:395
		{
			yyVAL.iface = &Interface{Methods: []*Method{{InArgs: yyS[yypt-3].fields, InStream: yyS[yypt-2].typeexprs[0], OutStream: yyS[yypt-2].typeexprs[1], OutArgs: yyS[yypt-1].fields, Tags: yyS[yypt-0].constexprs, NamePos: NamePos{Name: yyS[yypt-4].strpos.str, Pos: yyS[yypt-4].strpos.pos}}}}
		}
	case 66:
		//line grammar.y:397
		{
			yyVAL.iface = &Interface{Embeds: []*NamePos{{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}}}
		}
	case 67:
		//line grammar.y:401
		{
			yyVAL.fields = nil
		}
	case 68:
		//line grammar.y:403
		{
			yyVAL.fields = yyS[yypt-2].fields
		}
	case 69:
		//line grammar.y:407
		{
			for _, t := range yyS[yypt-2].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
		}
	case 70:
		//line grammar.y:417
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 71:
		//line grammar.y:419
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 72:
		//line grammar.y:437
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Pos: yyS[yypt-0].typeexpr.Pos()}}}
		}
	case 73:
		//line grammar.y:439
		{
			yyVAL.fields = append(yyS[yypt-4].fields, &Field{Type: yyS[yypt-1].typeexpr, NamePos: NamePos{Name: "err", Pos: yyS[yypt-1].typeexpr.Pos()}})
		}
	case 74:
		//line grammar.y:443
		{
			for _, t := range yyS[yypt-4].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
			yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-1].typeexpr, NamePos: NamePos{Pos: yyS[yypt-1].typeexpr.Pos()}})
		}
	case 75:
		//line grammar.y:452
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 76:
		//line grammar.y:454
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 77:
		//line grammar.y:456
		{
			yyVAL.typeexprs = []Type{yyS[yypt-1].typeexpr, nil}
		}
	case 78:
		//line grammar.y:458
		{
			yyVAL.typeexprs = []Type{yyS[yypt-3].typeexpr, yyS[yypt-1].typeexpr}
		}
	case 79:
		//line grammar.y:462
		{
			yyVAL.constexprs = nil
		}
	case 80:
		//line grammar.y:464
		{
			yyVAL.constexprs = nil
		}
	case 81:
		//line grammar.y:466
		{
			yyVAL.constexprs = yyS[yypt-2].constexprs
		}
	case 82:
		//line grammar.y:470
		{
			yyVAL.constexprs = []ConstExpr{yyS[yypt-0].constexpr}
		}
	case 83:
		//line grammar.y:472
		{
			yyVAL.constexprs = append(yyS[yypt-2].constexprs, yyS[yypt-0].constexpr)
		}
	case 86:
		//line grammar.y:481
		{
			cds := &lexVDLFile(yylex).ConstDefs
			*cds = append(*cds, &ConstDef{Expr: yyS[yypt-0].constexpr, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 87:
		//line grammar.y:488
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 88:
		//line grammar.y:490
		{
			yyVAL.constexpr = &ConstBinaryOp{"||", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 89:
		//line grammar.y:492
		{
			yyVAL.constexpr = &ConstBinaryOp{"&&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 90:
		//line grammar.y:494
		{
			yyVAL.constexpr = &ConstBinaryOp{"<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 91:
		//line grammar.y:496
		{
			yyVAL.constexpr = &ConstBinaryOp{">", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 92:
		//line grammar.y:498
		{
			yyVAL.constexpr = &ConstBinaryOp{"<=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 93:
		//line grammar.y:500
		{
			yyVAL.constexpr = &ConstBinaryOp{">=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 94:
		//line grammar.y:502
		{
			yyVAL.constexpr = &ConstBinaryOp{"!=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 95:
		//line grammar.y:504
		{
			yyVAL.constexpr = &ConstBinaryOp{"==", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 96:
		//line grammar.y:506
		{
			yyVAL.constexpr = &ConstBinaryOp{"+", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 97:
		//line grammar.y:508
		{
			yyVAL.constexpr = &ConstBinaryOp{"-", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 98:
		//line grammar.y:510
		{
			yyVAL.constexpr = &ConstBinaryOp{"*", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 99:
		//line grammar.y:512
		{
			yyVAL.constexpr = &ConstBinaryOp{"/", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 100:
		//line grammar.y:514
		{
			yyVAL.constexpr = &ConstBinaryOp{"%", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 101:
		//line grammar.y:516
		{
			yyVAL.constexpr = &ConstBinaryOp{"|", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 102:
		//line grammar.y:518
		{
			yyVAL.constexpr = &ConstBinaryOp{"&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 103:
		//line grammar.y:520
		{
			yyVAL.constexpr = &ConstBinaryOp{"^", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 104:
		//line grammar.y:522
		{
			yyVAL.constexpr = &ConstBinaryOp{"<<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 105:
		//line grammar.y:524
		{
			yyVAL.constexpr = &ConstBinaryOp{">>", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 106:
		//line grammar.y:528
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 107:
		//line grammar.y:530
		{
			yyVAL.constexpr = &ConstUnaryOp{"!", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 108:
		//line grammar.y:532
		{
			yyVAL.constexpr = &ConstUnaryOp{"+", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 109:
		//line grammar.y:534
		{
			yyVAL.constexpr = &ConstUnaryOp{"-", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 110:
		//line grammar.y:536
		{
			yyVAL.constexpr = &ConstUnaryOp{"^", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 111:
		//line grammar.y:538
		{
			yyVAL.constexpr = &ConstTypeConv{yyS[yypt-3].typeexpr, yyS[yypt-1].constexpr, yyS[yypt-3].typeexpr.Pos()}
		}
	case 112:
		//line grammar.y:540
		{
			yyVAL.constexpr = &ConstTypeObject{yyS[yypt-1].typeexpr, yyS[yypt-3].pos}
		}
	case 113:
		//line grammar.y:545
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 114:
		//line grammar.y:547
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 115:
		//line grammar.y:549
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 116:
		//line grammar.y:551
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].imagpos.imag, yyS[yypt-0].imagpos.pos}
		}
	case 117:
		//line grammar.y:553
		{
			yyVAL.constexpr = &ConstNamed{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 118:
		//line grammar.y:555
		{
			yyVAL.constexpr = yyS[yypt-0].complit
		}
	case 119:
		//line grammar.y:557
		{
			lexPosErrorf(yylex, yyS[yypt-1].pos, "cannot apply selector operator to unnamed constant")
		}
	case 120:
		//line grammar.y:559
		{
			lexPosErrorf(yylex, yyS[yypt-2].pos, "cannot apply index operator to unnamed constant")
		}
	case 121:
		//line grammar.y:561
		{
			yyVAL.constexpr = &ConstIndexed{&ConstNamed{yyS[yypt-3].strpos.str, yyS[yypt-3].strpos.pos}, yyS[yypt-1].constexpr, yyS[yypt-3].strpos.pos}
		}
	case 122:
		//line grammar.y:563
		{
			yyVAL.constexpr = yyS[yypt-1].constexpr
		}
	case 123:
		//line grammar.y:567
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-2].typeexpr, nil, yyS[yypt-1].pos}
		}
	case 124:
		//line grammar.y:569
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-4].typeexpr, yyS[yypt-2].kvlits, yyS[yypt-3].pos}
		}
	case 125:
		//line grammar.y:573
		{
			yyVAL.kvlits = []KVLit{yyS[yypt-0].kvlit}
		}
	case 126:
		//line grammar.y:575
		{
			yyVAL.kvlits = append(yyS[yypt-2].kvlits, yyS[yypt-0].kvlit)
		}
	case 127:
		//line grammar.y:579
		{
			yyVAL.kvlit = KVLit{Value: yyS[yypt-0].constexpr}
		}
	case 128:
		//line grammar.y:581
		{
			yyVAL.kvlit = KVLit{Key: yyS[yypt-2].constexpr, Value: yyS[yypt-0].constexpr}
		}
	case 131:
		//line grammar.y:590
		{
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{NamePos: NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}})
		}
	case 132:
		//line grammar.y:595
		{
			ensureNonEmptyToken(yylex, yyS[yypt-0].strpos, "error id must be non-empty if specified")
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{ID: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 133:
		//line grammar.y:611
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 134:
		//line grammar.y:613
		{
			yyVAL.strpos = strPos{"\"" + yyS[yypt-2].strpos.str + "\"." + yyS[yypt-0].strpos.str, yyS[yypt-2].strpos.pos}
		}
	case 135:
		//line grammar.y:618
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 136:
		//line grammar.y:620
		{
			yyVAL.strpos = strPos{yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, yyS[yypt-2].strpos.pos}
		}
	case 137:
		//line grammar.y:624
		{
			yyVAL.typeexpr = nil
		}
	case 138:
		//line grammar.y:626
		{
			yyVAL.typeexpr = yyS[yypt-0].typeexpr
		}
	}
	goto yystack /* stack new state and value */
}
