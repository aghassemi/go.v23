//line grammar.y:20

// This grammar.y.go file was auto-generated by yacc from grammar.y.

package parse

import __yyfmt__ "fmt"

//line grammar.y:22
import (
	"math/big"
	"strings"
)

type strPos struct {
	str string
	pos Pos
}

type intPos struct {
	int *big.Int
	pos Pos
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

type imagPos struct {
	imag *BigImag
	pos  Pos
}

// typeListToStrList converts a slice of Type to a slice of strPos.  Each type
// must be a TypeNamed with an empty PackageName, otherwise errors are reported,
// and ok=false is returned.
func typeListToStrList(yylex yyLexer, typeList []Type) (strList []strPos, ok bool) {
	ok = true
	for _, t := range typeList {
		var tn *TypeNamed
		if tn, ok = t.(*TypeNamed); !ok {
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names)", t.String())
			return
		}
		if strings.ContainsRune(tn.Name, '.') {
			ok = false
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names).", tn.Name)
			return
		}
		strList = append(strList, strPos{tn.Name, tn.P})
	}
	return
}

// ensureNonEmptyToken reports an error if tok is empty.
func ensureNonEmptyToken(yylex yyLexer, tok strPos, errMsg string) {
	if len(tok.str) == 0 {
		lexPosErrorf(yylex, tok.pos, errMsg)
	}
}

//line grammar.y:81
type yySymType struct {
	yys        int
	pos        Pos
	strpos     strPos
	intpos     intPos
	ratpos     ratPos
	imagpos    imagPos
	namepos    NamePos
	nameposes  []NamePos
	typeexpr   Type
	typeexprs  []Type
	fields     []*Field
	iface      *Interface
	constexpr  ConstExpr
	constexprs []ConstExpr
	complit    *ConstCompositeLit
	kvlit      KVLit
	kvlits     []KVLit
}

const startFileImports = 57346
const startFile = 57347
const startConfigImports = 57348
const startConfig = 57349
const tOROR = 57350
const tANDAND = 57351
const tLE = 57352
const tGE = 57353
const tNE = 57354
const tEQEQ = 57355
const tLSH = 57356
const tRSH = 57357
const tPACKAGE = 57358
const tIMPORT = 57359
const tTYPE = 57360
const tENUM = 57361
const tSET = 57362
const tMAP = 57363
const tSTRUCT = 57364
const tONEOF = 57365
const tINTERFACE = 57366
const tSTREAM = 57367
const tCONST = 57368
const tERRORID = 57369
const tIDENT = 57370
const tSTRLIT = 57371
const tINTLIT = 57372
const tRATLIT = 57373
const tIMAGLIT = 57374
const notPackage = 57375
const notConfig = 57376

var yyToknames = []string{
	"startFileImports",
	"startFile",
	"startConfigImports",
	"startConfig",
	" ;",
	" :",
	" ,",
	" .",
	" (",
	" )",
	" [",
	" ]",
	" {",
	" }",
	" <",
	" >",
	" =",
	" !",
	" +",
	" -",
	" *",
	" /",
	" %",
	" |",
	" &",
	" ^",
	" ?",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tLSH",
	"tRSH",
	"tPACKAGE",
	"tIMPORT",
	"tTYPE",
	"tENUM",
	"tSET",
	"tMAP",
	"tSTRUCT",
	"tONEOF",
	"tINTERFACE",
	"tSTREAM",
	"tCONST",
	"tERRORID",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
	"tIMAGLIT",
	"notPackage",
	"notConfig",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 39,
	12, 39,
	16, 39,
	-2, 114,
	-1, 192,
	17, 137,
	-2, 132,
	-1, 260,
	17, 137,
	-2, 132,
}

const yyNprod = 138
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 655

var yyAct = []int{

	160, 39, 229, 191, 220, 161, 152, 153, 117, 114,
	110, 159, 146, 41, 218, 42, 204, 27, 254, 102,
	53, 105, 30, 31, 32, 93, 56, 55, 23, 20,
	33, 48, 60, 221, 118, 34, 54, 21, 22, 23,
	61, 62, 91, 43, 44, 45, 46, 47, 221, 115,
	100, 173, 49, 35, 36, 37, 38, 56, 55, 56,
	55, 234, 116, 92, 169, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 163, 99, 113, 166, 137, 138, 118,
	104, 141, 147, 140, 139, 100, 109, 100, 100, 100,
	100, 118, 115, 13, 10, 74, 75, 76, 7, 78,
	42, 176, 172, 258, 100, 249, 242, 16, 80, 81,
	165, 166, 257, 171, 115, 175, 48, 264, 25, 144,
	262, 148, 149, 154, 156, 112, 231, 213, 43, 44,
	45, 46, 47, 211, 208, 100, 51, 49, 167, 205,
	28, 181, 248, 198, 101, 100, 185, 98, 97, 94,
	184, 189, 18, 183, 143, 96, 89, 95, 100, 90,
	196, 88, 253, 201, 87, 251, 199, 225, 26, 180,
	202, 82, 83, 84, 85, 223, 100, 216, 100, 187,
	100, 194, 100, 209, 215, 206, 230, 12, 86, 195,
	222, 88, 167, 260, 214, 244, 14, 15, 217, 17,
	224, 192, 226, 2, 3, 4, 5, 174, 228, 203,
	207, 200, 154, 197, 210, 227, 212, 190, 186, 182,
	222, 162, 100, 232, 108, 100, 241, 238, 237, 100,
	243, 246, 107, 106, 100, 52, 100, 100, 24, 256,
	6, 252, 245, 170, 8, 111, 42, 9, 164, 259,
	100, 263, 59, 11, 58, 41, 154, 42, 57, 240,
	157, 103, 48, 187, 30, 31, 32, 19, 250, 1,
	154, 210, 33, 48, 43, 44, 45, 46, 47, 158,
	40, 255, 247, 49, 261, 43, 44, 45, 46, 47,
	41, 29, 42, 219, 49, 35, 36, 37, 38, 30,
	31, 32, 239, 236, 150, 233, 155, 33, 48, 230,
	50, 42, 145, 0, 0, 0, 0, 0, 0, 0,
	43, 44, 45, 46, 47, 0, 0, 48, 0, 49,
	35, 36, 37, 38, 235, 42, 0, 0, 0, 43,
	44, 45, 46, 47, 0, 0, 0, 0, 49, 188,
	0, 48, 0, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 44, 45, 46, 47, 0, 48,
	42, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 44, 45, 46, 47, 48, 0, 42, 0,
	49, 151, 0, 0, 0, 0, 0, 0, 43, 44,
	45, 46, 47, 168, 48, 42, 0, 49, 72, 73,
	74, 75, 76, 77, 78, 79, 43, 44, 45, 46,
	47, 48, 0, 80, 81, 49, 0, 0, 0, 0,
	193, 0, 0, 43, 44, 45, 46, 47, 0, 66,
	67, 0, 49, 72, 73, 74, 75, 76, 77, 78,
	79, 0, 64, 65, 68, 69, 70, 71, 80, 81,
	179, 0, 0, 66, 67, 0, 0, 72, 73, 74,
	75, 76, 77, 78, 79, 0, 64, 65, 68, 69,
	70, 71, 80, 81, 178, 0, 0, 66, 67, 0,
	0, 72, 73, 74, 75, 76, 77, 78, 79, 0,
	64, 65, 68, 69, 70, 71, 80, 81, 177, 0,
	0, 0, 0, 66, 67, 0, 0, 72, 73, 74,
	75, 76, 77, 78, 79, 0, 64, 65, 68, 69,
	70, 71, 80, 81, 142, 0, 0, 0, 0, 66,
	67, 0, 0, 72, 73, 74, 75, 76, 77, 78,
	79, 63, 64, 65, 68, 69, 70, 71, 80, 81,
	0, 66, 67, 0, 0, 72, 73, 74, 75, 76,
	77, 78, 79, 0, 64, 65, 68, 69, 70, 71,
	80, 81, 66, 67, 0, 0, 72, 73, 74, 75,
	76, 77, 78, 79, 0, 64, 65, 68, 69, 70,
	71, 80, 81, 66, 67, 0, 0, 72, 73, 74,
	75, 76, 77, 78, 79, 0, 0, 65, 68, 69,
	70, 71, 80, 81, 66, 67, 0, 0, 72, 73,
	74, 75, 76, 77, 78, 79, 0, 0, 0, 68,
	69, 70, 71, 80, 81,
}
var yyPact = []int{

	209, -1000, 69, 69, 53, 53, -1000, 52, -1000, -1000,
	97, -1000, -12, 240, -1, -12, 288, -1, -1000, 237,
	-1000, -1000, -1000, 8, -1000, -9, -1000, 553, -1000, -1000,
	288, 288, 288, 288, 186, -1000, -1000, -1000, -1000, 160,
	155, 288, 10, 143, 153, 151, 142, 141, 401, -1000,
	138, -9, -1000, 6, -1000, -1000, -31, 235, 234, 226,
	84, 73, 50, -1000, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, -1000, -1000, -1000, -1000, 288, 288, 43, 42,
	288, 531, 149, 401, 41, 401, 401, 384, 401, -1000,
	190, 253, -1000, 223, -1000, -1000, -1000, -1000, -1000, 70,
	-1000, -1000, 366, 51, -1000, 92, 38, -1000, 91, 595,
	616, 396, 396, 396, 396, 396, 396, 81, 81, -1000,
	-1000, -1000, 81, -1000, 81, -1000, -1000, 505, 479, -1000,
	-1000, 455, -1000, 401, -1000, 221, -1000, -1000, 148, 145,
	220, -1000, -1000, 349, -1000, 219, -1000, -1000, 201, -1000,
	431, 178, -25, -1000, 215, -1000, 401, -1000, 137, -1000,
	213, -1000, 288, -1000, 211, -1000, -36, -1000, -1000, -1000,
	-1000, 132, 41, -1000, 401, 127, 401, -1000, 401, 126,
	401, 120, 288, 288, -1000, -1000, 174, 35, -3, 172,
	-2, 574, 164, -17, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 574, -1000, -1000, -1000, 210,
	-1000, 184, 190, -1000, -1000, -1000, -1000, 119, -18, 13,
	331, -1000, -1000, 307, 98, -1000, 195, 242, -1000, 136,
	-1000, -1000, 96, 162, 401, 401, 159, -1000, 1, -1000,
	103, -1000, -1000, -1000, -1000, 193, 574, -1000, 401, 113,
	288, 108, -1000, 574, -1000,
}
var yyPgo = []int{

	0, 1, 12, 322, 35, 320, 7, 316, 315, 314,
	6, 313, 2, 312, 303, 4, 0, 150, 301, 292,
	291, 290, 11, 289, 279, 250, 197, 162, 128, 257,
	277, 271, 5, 36, 268, 264, 262, 258, 10, 255,
	253, 9, 217, 8, 3,
}
var yyR1 = []int{

	0, 24, 24, 24, 24, 27, 27, 27, 27, 25,
	25, 29, 29, 26, 26, 30, 30, 30, 31, 31,
	33, 33, 28, 28, 28, 28, 34, 34, 34, 34,
	35, 35, 35, 36, 36, 36, 37, 37, 38, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 2, 9, 9, 10, 6, 6, 7, 7, 39,
	39, 14, 14, 15, 15, 12, 12, 12, 11, 11,
	13, 13, 13, 8, 8, 8, 8, 19, 19, 19,
	20, 20, 40, 40, 41, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 17, 17, 17, 17, 17, 17,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	21, 21, 23, 23, 22, 22, 42, 42, 43, 43,
	1, 1, 5, 5, 32, 32, 44, 44,
}
var yyR2 = []int{

	0, 4, 4, 4, 4, 0, 1, 1, 1, 0,
	3, 0, 4, 0, 3, 3, 5, 2, 1, 3,
	1, 2, 0, 3, 3, 3, 3, 5, 2, 2,
	3, 5, 2, 3, 5, 2, 1, 3, 2, 1,
	4, 3, 5, 4, 5, 5, 3, 5, 2, 1,
	3, 1, 1, 3, 2, 1, 3, 1, 3, 4,
	6, 1, 3, 5, 1, 2, 4, 4, 1, 3,
	0, 1, 1, 0, 3, 4, 6, 0, 2, 4,
	1, 3, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 2, 2, 2, 2, 4,
	1, 1, 1, 1, 1, 1, 3, 4, 4, 3,
	3, 5, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 0, 1, 0, 1, 0, 1,
}
var yyChk = []int{

	-1000, -24, 4, 5, 6, 7, -25, 39, -25, -29,
	51, -29, -26, 51, -26, -26, 20, -26, -27, -30,
	41, 49, 50, 40, 8, -28, -27, -16, -17, -18,
	21, 22, 23, 29, -4, 52, 53, 54, 55, -1,
	-21, 12, 14, 42, 43, 44, 45, 46, 30, 51,
	-5, -28, 8, 12, -33, 52, 51, -34, -35, -36,
	41, 49, 50, 8, 31, 32, 18, 19, 33, 34,
	35, 36, 22, 23, 24, 25, 26, 27, 28, 29,
	37, 38, -17, -17, -17, -17, 12, 14, 11, 11,
	14, -16, 53, 15, 16, 14, 14, 16, 16, -4,
	-1, 16, 13, -31, -33, 52, 8, 8, 8, 12,
	-38, -39, 51, 12, -41, 51, 12, -43, 51, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, 51,
	51, -16, 13, 15, -4, -3, -2, 51, -4, -4,
	-9, 17, -10, -6, -4, -7, -4, 17, -23, -22,
	-16, -32, 8, 13, -37, -38, 51, -4, 47, 13,
	-40, -41, 20, 13, -42, -43, 20, 13, 15, 15,
	-4, -32, 8, 15, 15, -32, 8, -4, 10, -32,
	8, -44, 10, 9, 13, -33, -32, 8, 16, -32,
	8, -16, -32, 8, 52, 17, -2, -4, 17, -10,
	-4, 17, -4, 17, -22, -16, 13, -38, 17, -14,
	-15, 51, -1, 13, -41, 13, -43, -32, 8, -12,
	12, 17, -15, -8, 48, 13, -11, -6, -10, -13,
	-4, -12, 18, -44, 10, 10, -44, -19, 16, 19,
	-4, 13, -10, 13, 17, -20, -16, 19, 10, -44,
	10, -4, 17, -16, 19,
}
var yyDef = []int{

	0, -2, 9, 9, 11, 11, 13, 0, 13, 13,
	0, 13, 5, 0, 22, 5, 132, 22, 1, 0,
	6, 7, 8, 0, 10, 2, 3, 0, 85, 104,
	132, 132, 132, 132, 133, 110, 111, 112, 113, -2,
	115, 132, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 4, 14, 0, 17, 20, 0, 0, 0, 0,
	0, 0, 0, 12, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 105, 106, 107, 108, 132, 132, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	39, 132, 15, 134, 18, 21, 23, 24, 25, 0,
	28, 29, 0, 0, 32, 0, 0, 35, 128, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 0, 0, 131,
	116, 0, 119, 0, 41, 134, 49, 51, 0, 0,
	134, 46, 52, 0, 55, 134, 57, 120, 136, 122,
	124, 0, 135, 26, 134, 36, 0, 38, 0, 30,
	134, 82, 132, 33, 134, 126, 0, 109, 118, 117,
	40, 0, 135, 43, 0, 0, 135, 54, 0, 0,
	135, 0, -2, 132, 16, 19, 0, 135, 0, 0,
	135, 84, 0, 135, 129, 42, 50, 44, 45, 53,
	56, 47, 58, 121, 123, 125, 27, 37, 59, 134,
	61, 130, 64, 31, 83, 34, 127, 0, 135, 73,
	0, 60, 62, 70, 0, 65, 136, 136, 68, 77,
	71, 72, 0, 0, 137, 137, 0, 63, 132, 74,
	0, 66, 69, 67, 78, 136, 80, 75, 0, 0,
	-2, 0, 79, 81, 76,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 21, 3, 3, 3, 26, 28, 3,
	12, 13, 24, 22, 10, 23, 11, 25, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 9, 8,
	18, 20, 19, 30, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 14, 3, 15, 29, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 16, 27, 17,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		//line grammar.y:160
		{
			lexGenEOF(yylex)
		}
	case 6:
		//line grammar.y:162
		{
			lexGenEOF(yylex)
		}
	case 7:
		//line grammar.y:164
		{
			lexGenEOF(yylex)
		}
	case 8:
		//line grammar.y:166
		{
			lexGenEOF(yylex)
		}
	case 9:
		//line grammar.y:171
		{
			lexPosErrorf(yylex, Pos{}, "vdl file must start with package clause")
		}
	case 10:
		//line grammar.y:173
		{
			lexVDLFile(yylex).PackageDef = NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}
		}
	case 11:
		//line grammar.y:178
		{
			lexPosErrorf(yylex, Pos{}, "config file must start with config clause")
		}
	case 12:
		//line grammar.y:180
		{
			// We allow "config" as an identifier; it is not a keyword.  So we check
			// manually to make sure the syntax is correct.
			if yyS[yypt-3].strpos.str != "config" {
				lexPosErrorf(yylex, yyS[yypt-3].strpos.pos, "config file must start with config clause")
				return 1 // Any non-zero code indicates an error
			}
			file := lexVDLFile(yylex)
			file.PackageDef = NamePos{Name: "config", Pos: yyS[yypt-3].strpos.pos}
			file.ConstDefs = []*ConstDef{{Expr: yyS[yypt-1].constexpr}}
		}
	case 20:
		//line grammar.y:208
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Pos: yyS[yypt-0].strpos.pos}})
		}
	case 21:
		//line grammar.y:213
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 38:
		//line grammar.y:248
		{
			tds := &lexVDLFile(yylex).TypeDefs
			*tds = append(*tds, &TypeDef{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 39:
		//line grammar.y:255
		{
			yyVAL.typeexpr = &TypeNamed{Name: yyS[yypt-0].strpos.str, P: yyS[yypt-0].strpos.pos}
		}
	case 40:
		//line grammar.y:257
		{
			yyVAL.typeexpr = &TypeArray{Len: int(yyS[yypt-2].intpos.int.Int64()), Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-3].pos}
		}
	case 41:
		//line grammar.y:259
		{
			yyVAL.typeexpr = &TypeList{Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-2].pos}
		}
	case 42:
		//line grammar.y:261
		{
			yyVAL.typeexpr = &TypeEnum{Labels: yyS[yypt-2].nameposes, P: yyS[yypt-4].pos}
		}
	case 43:
		//line grammar.y:263
		{
			yyVAL.typeexpr = &TypeSet{Key: yyS[yypt-1].typeexpr, P: yyS[yypt-3].pos}
		}
	case 44:
		//line grammar.y:265
		{
			yyVAL.typeexpr = &TypeMap{Key: yyS[yypt-2].typeexpr, Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-4].pos}
		}
	case 45:
		//line grammar.y:267
		{
			yyVAL.typeexpr = &TypeStruct{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 46:
		//line grammar.y:269
		{
			yyVAL.typeexpr = &TypeStruct{P: yyS[yypt-2].pos}
		}
	case 47:
		//line grammar.y:271
		{
			yyVAL.typeexpr = &TypeOneOf{Types: yyS[yypt-2].typeexprs, P: yyS[yypt-4].pos}
		}
	case 48:
		//line grammar.y:273
		{
			yyVAL.typeexpr = &TypeNilable{Base: yyS[yypt-0].typeexpr, P: yyS[yypt-1].pos}
		}
	case 49:
		//line grammar.y:277
		{
			yyVAL.nameposes = []NamePos{yyS[yypt-0].namepos}
		}
	case 50:
		//line grammar.y:279
		{
			yyVAL.nameposes = append(yyS[yypt-2].nameposes, yyS[yypt-0].namepos)
		}
	case 51:
		//line grammar.y:283
		{
			yyVAL.namepos = NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}
		}
	case 52:
		//line grammar.y:287
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 53:
		//line grammar.y:289
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 54:
		//line grammar.y:327
		{
			if names, ok := typeListToStrList(yylex, yyS[yypt-1].typeexprs); ok {
				for _, n := range names {
					yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: n.str, Pos: n.pos}})
				}
			} else {
				lexPosErrorf(yylex, yyS[yypt-0].typeexpr.Pos(), "perhaps you forgot a comma before %q?.", yyS[yypt-0].typeexpr.String())
			}
		}
	case 55:
		//line grammar.y:339
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 56:
		//line grammar.y:341
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 57:
		//line grammar.y:345
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 58:
		//line grammar.y:347
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 59:
		//line grammar.y:353
		{
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{NamePos: NamePos{Name: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos}})
		}
	case 60:
		//line grammar.y:358
		{
			yyS[yypt-2].iface.Name, yyS[yypt-2].iface.Pos = yyS[yypt-5].strpos.str, yyS[yypt-5].strpos.pos
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, yyS[yypt-2].iface)
		}
	case 61:
		//line grammar.y:366
		{
			yyVAL.iface = yyS[yypt-0].iface
		}
	case 62:
		//line grammar.y:368
		{
			yyS[yypt-2].iface.Embeds = append(yyS[yypt-2].iface.Embeds, yyS[yypt-0].iface.Embeds...)
			yyS[yypt-2].iface.Methods = append(yyS[yypt-2].iface.Methods, yyS[yypt-0].iface.Methods...)
			yyVAL.iface = yyS[yypt-2].iface
		}
	case 63:
		//line grammar.y:376
		{
			yyVAL.iface = &Interface{Methods: []*Method{{InArgs: yyS[yypt-3].fields, InStream: yyS[yypt-2].typeexprs[0], OutStream: yyS[yypt-2].typeexprs[1], OutArgs: yyS[yypt-1].fields, Tags: yyS[yypt-0].constexprs, NamePos: NamePos{Name: yyS[yypt-4].strpos.str, Pos: yyS[yypt-4].strpos.pos}}}}
		}
	case 64:
		//line grammar.y:378
		{
			yyVAL.iface = &Interface{Embeds: []*NamePos{{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}}}
		}
	case 65:
		//line grammar.y:382
		{
			yyVAL.fields = nil
		}
	case 66:
		//line grammar.y:384
		{
			yyVAL.fields = yyS[yypt-2].fields
		}
	case 67:
		//line grammar.y:388
		{
			for _, t := range yyS[yypt-2].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
		}
	case 68:
		//line grammar.y:398
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 69:
		//line grammar.y:400
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 70:
		//line grammar.y:406
		{
			yyVAL.fields = nil
		}
	case 71:
		//line grammar.y:408
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Pos: yyS[yypt-0].typeexpr.Pos()}}}
		}
	case 72:
		//line grammar.y:410
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 73:
		//line grammar.y:414
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 74:
		//line grammar.y:416
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 75:
		//line grammar.y:418
		{
			yyVAL.typeexprs = []Type{yyS[yypt-1].typeexpr, nil}
		}
	case 76:
		//line grammar.y:420
		{
			yyVAL.typeexprs = []Type{yyS[yypt-3].typeexpr, yyS[yypt-1].typeexpr}
		}
	case 77:
		//line grammar.y:424
		{
			yyVAL.constexprs = nil
		}
	case 78:
		//line grammar.y:426
		{
			yyVAL.constexprs = nil
		}
	case 79:
		//line grammar.y:428
		{
			yyVAL.constexprs = yyS[yypt-2].constexprs
		}
	case 80:
		//line grammar.y:432
		{
			yyVAL.constexprs = []ConstExpr{yyS[yypt-0].constexpr}
		}
	case 81:
		//line grammar.y:434
		{
			yyVAL.constexprs = append(yyS[yypt-2].constexprs, yyS[yypt-0].constexpr)
		}
	case 84:
		//line grammar.y:443
		{
			cds := &lexVDLFile(yylex).ConstDefs
			*cds = append(*cds, &ConstDef{Expr: yyS[yypt-0].constexpr, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 85:
		//line grammar.y:450
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 86:
		//line grammar.y:452
		{
			yyVAL.constexpr = &ConstBinaryOp{"||", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 87:
		//line grammar.y:454
		{
			yyVAL.constexpr = &ConstBinaryOp{"&&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 88:
		//line grammar.y:456
		{
			yyVAL.constexpr = &ConstBinaryOp{"<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 89:
		//line grammar.y:458
		{
			yyVAL.constexpr = &ConstBinaryOp{">", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 90:
		//line grammar.y:460
		{
			yyVAL.constexpr = &ConstBinaryOp{"<=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 91:
		//line grammar.y:462
		{
			yyVAL.constexpr = &ConstBinaryOp{">=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 92:
		//line grammar.y:464
		{
			yyVAL.constexpr = &ConstBinaryOp{"!=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 93:
		//line grammar.y:466
		{
			yyVAL.constexpr = &ConstBinaryOp{"==", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 94:
		//line grammar.y:468
		{
			yyVAL.constexpr = &ConstBinaryOp{"+", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 95:
		//line grammar.y:470
		{
			yyVAL.constexpr = &ConstBinaryOp{"-", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 96:
		//line grammar.y:472
		{
			yyVAL.constexpr = &ConstBinaryOp{"*", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 97:
		//line grammar.y:474
		{
			yyVAL.constexpr = &ConstBinaryOp{"/", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 98:
		//line grammar.y:476
		{
			yyVAL.constexpr = &ConstBinaryOp{"%", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 99:
		//line grammar.y:478
		{
			yyVAL.constexpr = &ConstBinaryOp{"|", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 100:
		//line grammar.y:480
		{
			yyVAL.constexpr = &ConstBinaryOp{"&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 101:
		//line grammar.y:482
		{
			yyVAL.constexpr = &ConstBinaryOp{"^", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 102:
		//line grammar.y:484
		{
			yyVAL.constexpr = &ConstBinaryOp{"<<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 103:
		//line grammar.y:486
		{
			yyVAL.constexpr = &ConstBinaryOp{">>", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 104:
		//line grammar.y:490
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 105:
		//line grammar.y:492
		{
			yyVAL.constexpr = &ConstUnaryOp{"!", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 106:
		//line grammar.y:494
		{
			yyVAL.constexpr = &ConstUnaryOp{"+", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 107:
		//line grammar.y:496
		{
			yyVAL.constexpr = &ConstUnaryOp{"-", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 108:
		//line grammar.y:498
		{
			yyVAL.constexpr = &ConstUnaryOp{"^", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 109:
		//line grammar.y:500
		{
			yyVAL.constexpr = &ConstTypeConv{yyS[yypt-3].typeexpr, yyS[yypt-1].constexpr, yyS[yypt-3].typeexpr.Pos()}
		}
	case 110:
		//line grammar.y:505
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 111:
		//line grammar.y:507
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 112:
		//line grammar.y:509
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 113:
		//line grammar.y:511
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].imagpos.imag, yyS[yypt-0].imagpos.pos}
		}
	case 114:
		//line grammar.y:513
		{
			yyVAL.constexpr = &ConstNamed{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 115:
		//line grammar.y:515
		{
			yyVAL.constexpr = yyS[yypt-0].complit
		}
	case 116:
		//line grammar.y:517
		{
			lexPosErrorf(yylex, yyS[yypt-1].pos, "cannot apply selector operator to unnamed constant")
		}
	case 117:
		//line grammar.y:519
		{
			lexPosErrorf(yylex, yyS[yypt-2].pos, "cannot apply index operator to unnamed constant")
		}
	case 118:
		//line grammar.y:521
		{
			yyVAL.constexpr = &ConstIndexed{&ConstNamed{yyS[yypt-3].strpos.str, yyS[yypt-3].strpos.pos}, yyS[yypt-1].constexpr, yyS[yypt-3].strpos.pos}
		}
	case 119:
		//line grammar.y:523
		{
			yyVAL.constexpr = yyS[yypt-1].constexpr
		}
	case 120:
		//line grammar.y:527
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-2].typeexpr, nil, yyS[yypt-1].pos}
		}
	case 121:
		//line grammar.y:529
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-4].typeexpr, yyS[yypt-2].kvlits, yyS[yypt-3].pos}
		}
	case 122:
		//line grammar.y:533
		{
			yyVAL.kvlits = []KVLit{yyS[yypt-0].kvlit}
		}
	case 123:
		//line grammar.y:535
		{
			yyVAL.kvlits = append(yyS[yypt-2].kvlits, yyS[yypt-0].kvlit)
		}
	case 124:
		//line grammar.y:539
		{
			yyVAL.kvlit = KVLit{Value: yyS[yypt-0].constexpr}
		}
	case 125:
		//line grammar.y:541
		{
			yyVAL.kvlit = KVLit{Key: yyS[yypt-2].constexpr, Value: yyS[yypt-0].constexpr}
		}
	case 128:
		//line grammar.y:550
		{
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{NamePos: NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}})
		}
	case 129:
		//line grammar.y:555
		{
			ensureNonEmptyToken(yylex, yyS[yypt-0].strpos, "error id must be non-empty if specified")
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{ID: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 130:
		//line grammar.y:566
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 131:
		//line grammar.y:568
		{
			yyVAL.strpos = strPos{yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, yyS[yypt-2].strpos.pos}
		}
	case 132:
		//line grammar.y:572
		{
			yyVAL.typeexpr = nil
		}
	case 133:
		//line grammar.y:574
		{
			yyVAL.typeexpr = yyS[yypt-0].typeexpr
		}
	}
	goto yystack /* stack new state and value */
}
