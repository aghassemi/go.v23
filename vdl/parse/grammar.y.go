//line grammar.y:18

// This grammar.y.go file was auto-generated by yacc from grammar.y.

package parse

import __yyfmt__ "fmt"

//line grammar.y:20
import (
	"math/big"
	"strings"
)

type strPos struct {
	str string
	pos Pos
}

type intPos struct {
	int *big.Int
	pos Pos
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

type imagPos struct {
	imag *BigImag
	pos  Pos
}

// typeListToStrList converts a slice of Type to a slice of strPos.  Each type
// must be a TypeNamed with an empty PackageName, otherwise errors are reported,
// and ok=false is returned.
func typeListToStrList(yylex yyLexer, typeList []Type) (strList []strPos, ok bool) {
	ok = true
	for _, t := range typeList {
		var tn *TypeNamed
		if tn, ok = t.(*TypeNamed); !ok {
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names)", t.String())
			return
		}
		if strings.ContainsRune(tn.Name, '.') {
			ok = false
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names).", tn.Name)
			return
		}
		strList = append(strList, strPos{tn.Name, tn.P})
	}
	return
}

// ensureNonEmptyToken reports an error if tok is empty.
func ensureNonEmptyToken(yylex yyLexer, tok strPos, errMsg string) {
	if len(tok.str) == 0 {
		lexPosErrorf(yylex, tok.pos, errMsg)
	}
}

//line grammar.y:79
type yySymType struct {
	yys        int
	pos        Pos
	strpos     strPos
	intpos     intPos
	ratpos     ratPos
	imagpos    imagPos
	namepos    NamePos
	nameposes  []NamePos
	typeexpr   Type
	typeexprs  []Type
	fields     []*Field
	iface      *Interface
	constexpr  ConstExpr
	constexprs []ConstExpr
	complit    *ConstCompositeLit
	kvlit      KVLit
	kvlits     []KVLit
}

const startFileImports = 57346
const startFile = 57347
const startConfigImports = 57348
const startConfig = 57349
const startExprs = 57350
const tOROR = 57351
const tANDAND = 57352
const tLE = 57353
const tGE = 57354
const tNE = 57355
const tEQEQ = 57356
const tLSH = 57357
const tRSH = 57358
const tCONST = 57359
const tENUM = 57360
const tERRORID = 57361
const tIMPORT = 57362
const tINTERFACE = 57363
const tMAP = 57364
const tPACKAGE = 57365
const tSET = 57366
const tSTREAM = 57367
const tSTRUCT = 57368
const tTYPE = 57369
const tTYPEOBJECT = 57370
const tUNION = 57371
const tIDENT = 57372
const tSTRLIT = 57373
const tINTLIT = 57374
const tRATLIT = 57375
const tIMAGLIT = 57376
const notPackage = 57377
const notConfig = 57378

var yyToknames = []string{
	"startFileImports",
	"startFile",
	"startConfigImports",
	"startConfig",
	"startExprs",
	"';'",
	"':'",
	"','",
	"'.'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"'<'",
	"'>'",
	"'='",
	"'!'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'|'",
	"'&'",
	"'^'",
	"'?'",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tLSH",
	"tRSH",
	"tCONST",
	"tENUM",
	"tERRORID",
	"tIMPORT",
	"tINTERFACE",
	"tMAP",
	"tPACKAGE",
	"tSET",
	"tSTREAM",
	"tSTRUCT",
	"tTYPE",
	"tTYPEOBJECT",
	"tUNION",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
	"tIMAGLIT",
	"notPackage",
	"notConfig",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 27,
	13, 40,
	17, 40,
	-2, 117,
	-1, 171,
	18, 140,
	-2, 135,
	-1, 274,
	18, 140,
	-2, 135,
}

const yyNprod = 141
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 793

var yyAct = []int{

	14, 13, 231, 188, 135, 185, 136, 170, 146, 27,
	142, 247, 133, 226, 129, 148, 147, 176, 181, 232,
	189, 186, 205, 130, 123, 122, 41, 11, 173, 145,
	76, 245, 92, 78, 93, 94, 8, 187, 21, 229,
	212, 208, 91, 202, 184, 98, 87, 180, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 148, 147, 148,
	147, 119, 77, 121, 232, 85, 124, 189, 96, 189,
	186, 87, 205, 89, 186, 94, 276, 183, 87, 143,
	87, 87, 87, 87, 275, 153, 138, 154, 161, 272,
	58, 59, 60, 256, 62, 152, 215, 30, 271, 281,
	85, 211, 44, 64, 65, 253, 278, 85, 242, 85,
	85, 85, 85, 36, 99, 197, 196, 97, 193, 190,
	252, 259, 30, 31, 81, 220, 87, 33, 88, 32,
	83, 34, 82, 86, 35, 37, 87, 79, 36, 164,
	163, 126, 39, 74, 175, 80, 75, 73, 31, 241,
	72, 283, 33, 282, 32, 85, 34, 15, 86, 35,
	37, 194, 143, 199, 87, 85, 87, 191, 87, 266,
	264, 236, 198, 234, 40, 66, 67, 68, 69, 84,
	210, 214, 227, 87, 42, 43, 216, 45, 157, 204,
	71, 70, 73, 85, 46, 85, 47, 85, 274, 255,
	217, 171, 223, 239, 225, 87, 2, 3, 4, 5,
	6, 213, 85, 222, 120, 219, 201, 179, 235, 237,
	233, 127, 165, 131, 132, 137, 137, 169, 228, 178,
	177, 166, 243, 162, 85, 144, 249, 95, 248, 233,
	209, 87, 182, 203, 87, 254, 257, 249, 87, 261,
	265, 268, 87, 87, 260, 87, 87, 151, 269, 270,
	7, 87, 10, 200, 9, 100, 273, 150, 12, 160,
	85, 149, 87, 85, 174, 87, 87, 85, 90, 167,
	1, 85, 85, 141, 85, 85, 28, 258, 16, 230,
	85, 250, 218, 240, 244, 38, 128, 0, 221, 0,
	0, 85, 224, 0, 85, 85, 0, 192, 0, 137,
	0, 195, 0, 29, 0, 30, 0, 0, 267, 238,
	0, 0, 17, 18, 19, 0, 206, 0, 0, 0,
	20, 36, 0, 0, 30, 0, 0, 0, 0, 262,
	0, 31, 246, 30, 0, 33, 0, 32, 206, 34,
	36, 22, 35, 37, 23, 24, 25, 26, 0, 36,
	31, 0, 0, 0, 33, 0, 32, 0, 34, 31,
	86, 35, 37, 33, 0, 32, 0, 34, 0, 86,
	35, 37, 0, 0, 137, 0, 0, 251, 0, 0,
	0, 167, 29, 0, 30, 137, 263, 140, 137, 195,
	0, 17, 18, 19, 167, 0, 0, 0, 0, 20,
	36, 0, 0, 0, 0, 277, 0, 0, 279, 280,
	31, 0, 0, 0, 33, 0, 32, 0, 34, 0,
	22, 35, 37, 23, 24, 25, 26, 29, 0, 30,
	0, 0, 0, 0, 0, 0, 17, 18, 19, 0,
	0, 0, 0, 0, 20, 36, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 31, 0, 0, 0, 33,
	0, 32, 36, 34, 0, 22, 35, 37, 23, 24,
	25, 26, 31, 168, 0, 207, 33, 30, 32, 0,
	34, 0, 86, 35, 37, 0, 30, 0, 0, 139,
	0, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	0, 30, 36, 31, 134, 0, 0, 33, 0, 32,
	30, 34, 31, 86, 35, 37, 33, 36, 32, 0,
	34, 0, 86, 35, 37, 0, 36, 31, 0, 0,
	0, 33, 0, 32, 0, 34, 31, 86, 35, 37,
	33, 172, 32, 0, 34, 0, 86, 35, 37, 0,
	50, 51, 0, 0, 56, 57, 58, 59, 60, 61,
	62, 63, 0, 48, 49, 52, 53, 54, 55, 64,
	65, 159, 0, 0, 50, 51, 0, 0, 56, 57,
	58, 59, 60, 61, 62, 63, 0, 48, 49, 52,
	53, 54, 55, 64, 65, 158, 0, 0, 50, 51,
	0, 0, 56, 57, 58, 59, 60, 61, 62, 63,
	0, 48, 49, 52, 53, 54, 55, 64, 65, 156,
	0, 0, 0, 0, 50, 51, 0, 0, 56, 57,
	58, 59, 60, 61, 62, 63, 155, 48, 49, 52,
	53, 54, 55, 64, 65, 0, 50, 51, 0, 0,
	56, 57, 58, 59, 60, 61, 62, 63, 0, 48,
	49, 52, 53, 54, 55, 64, 65, 125, 0, 0,
	0, 0, 50, 51, 0, 0, 56, 57, 58, 59,
	60, 61, 62, 63, 0, 48, 49, 52, 53, 54,
	55, 64, 65, 50, 51, 0, 0, 56, 57, 58,
	59, 60, 61, 62, 63, 0, 48, 49, 52, 53,
	54, 55, 64, 65, 50, 51, 0, 0, 56, 57,
	58, 59, 60, 61, 62, 63, 0, 0, 49, 52,
	53, 54, 55, 64, 65, 50, 51, 0, 0, 56,
	57, 58, 59, 60, 61, 62, 63, 0, 0, 0,
	52, 53, 54, 55, 64, 65, 56, 57, 58, 59,
	60, 61, 62, 63, 0, 0, 0, 0, 0, 0,
	0, 64, 65,
}
var yyPact = []int{

	212, -1000, -10, -10, -26, -26, 434, -1000, -27, -1000,
	-1000, 91, -1000, 195, 694, -1000, -1000, 434, 434, 434,
	434, 188, 187, -1000, -1000, -1000, -1000, 145, 141, 434,
	17, 130, 140, 119, 125, 123, 515, -1000, 121, -1000,
	-8, 238, 42, -8, 434, 42, -1000, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 434, 434, -1000, -1000, -1000, -1000,
	434, 515, 434, -28, -29, 434, 673, 135, 515, -30,
	515, 515, 506, 491, -1000, -1000, -1000, 190, 389, -1000,
	236, -1000, -1000, -1000, 16, -1000, 55, -1000, 647, 55,
	694, 715, 736, 753, 753, 753, 753, 753, 753, 75,
	75, -1000, -1000, -1000, 75, -1000, 75, -1000, -1000, 625,
	184, 599, -1000, -1000, 575, -1000, 515, -1000, 234, -1000,
	-1000, 134, 133, 232, -1000, -1000, 482, -1000, 232, -1000,
	-1000, 200, -1000, 551, -1000, 14, -1000, -1000, -37, 231,
	230, 218, 34, 31, 24, -1000, -1000, -1000, -1000, -1000,
	-1000, 111, -30, -1000, 515, 110, 515, -1000, 515, 108,
	107, 434, 434, -1000, 217, -1000, -1000, -1000, -1000, -1000,
	29, -1000, -1000, 451, 27, -1000, 90, 26, -1000, 85,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 694,
	182, -38, -1000, 216, -1000, 515, -1000, 118, -1000, 214,
	-1000, 434, -1000, 205, -1000, -41, -1000, -1000, 178, -31,
	21, 169, -32, 694, 167, -33, -1000, -1000, -1000, -1000,
	204, -1000, 146, 190, -1000, -1000, -1000, -1000, 100, -34,
	-17, 338, -1000, -1000, 117, 96, -1000, 198, 92, -1000,
	114, -1000, 515, 329, 166, 515, 515, 165, -1000, 310,
	198, 92, -1000, 88, -1000, -1000, -1000, -1000, 197, 66,
	58, -1000, 515, 98, 434, 515, 515, 89, -1000, 149,
	147, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 9, 14, 306, 152, 38, 305, 6, 304, 12,
	4, 11, 303, 301, 299, 2, 0, 167, 298, 297,
	1, 296, 10, 293, 290, 270, 184, 83, 78, 272,
	288, 284, 98, 8, 281, 277, 267, 253, 18, 252,
	250, 5, 221, 3, 7,
}
var yyR1 = []int{

	0, 24, 24, 24, 24, 24, 27, 27, 27, 27,
	25, 25, 29, 29, 26, 26, 30, 30, 30, 31,
	31, 33, 33, 28, 28, 28, 28, 34, 34, 34,
	34, 35, 35, 35, 36, 36, 36, 37, 37, 38,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 4, 4, 3, 3, 2, 9, 9, 10, 7,
	7, 39, 39, 14, 14, 15, 15, 12, 12, 12,
	11, 11, 13, 13, 13, 8, 8, 8, 8, 19,
	19, 19, 20, 20, 40, 40, 41, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 17, 17, 17, 17,
	17, 17, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 21, 21, 23, 23, 22, 22, 42,
	42, 43, 43, 1, 1, 6, 6, 32, 32, 44,
	44,
}
var yyR2 = []int{

	0, 4, 4, 4, 4, 3, 0, 1, 1, 1,
	0, 3, 0, 4, 0, 3, 3, 5, 2, 1,
	3, 1, 2, 0, 3, 3, 3, 3, 5, 2,
	2, 3, 5, 2, 3, 5, 2, 1, 3, 2,
	1, 4, 3, 5, 4, 5, 5, 3, 5, 3,
	2, 1, 1, 1, 3, 1, 1, 3, 2, 1,
	3, 4, 6, 1, 3, 5, 1, 2, 4, 4,
	1, 3, 1, 6, 6, 0, 3, 4, 6, 0,
	2, 4, 1, 3, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 2, 2, 2,
	2, 4, 4, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 3, 3, 5, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 0, 1, 0, 1, 0,
	1,
}
var yyChk = []int{

	-1000, -24, 4, 5, 6, 7, 8, -25, 46, -25,
	-29, 53, -29, -20, -16, -17, -18, 22, 23, 24,
	30, -5, 51, 54, 55, 56, 57, -1, -21, 13,
	15, 41, 47, 45, 49, 52, 31, 53, -6, -4,
	-26, 53, -26, -26, 21, -26, 9, 11, 32, 33,
	19, 20, 34, 35, 36, 37, 23, 24, 25, 26,
	27, 28, 29, 30, 38, 39, -17, -17, -17, -17,
	13, 13, 15, 12, 12, 15, -16, 55, 16, 17,
	15, 15, 17, 17, -4, -5, 51, -1, 17, -27,
	-30, 50, 40, 42, 43, 9, -28, -27, -16, -28,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-4, -16, 53, 53, -16, 14, 16, -4, -3, -2,
	53, -4, -4, -9, 18, -10, -7, -4, -9, 18,
	18, -23, -22, -16, 9, 13, -33, 54, 53, -34,
	-35, -36, 50, 40, 42, 9, 14, 14, 16, 16,
	-4, -32, 9, 16, 16, -32, 9, -4, 11, -32,
	-44, 11, 10, 14, -31, -33, 54, 9, 9, 9,
	13, -38, -39, 53, 13, -41, 53, 13, -43, 53,
	18, -2, -4, 18, -10, -4, 18, 18, -22, -16,
	-32, 9, 14, -37, -38, 53, -4, 44, 14, -40,
	-41, 21, 14, -42, -43, 21, 14, -33, -32, 9,
	17, -32, 9, -16, -32, 9, 54, 14, -38, 18,
	-14, -15, 53, -1, 14, -41, 14, -43, -32, 9,
	-12, 13, 18, -15, -8, 48, 14, -11, -7, -10,
	-13, -4, 13, 19, -44, 11, 11, -44, -19, 17,
	-11, -7, 20, -4, 14, -10, 14, 18, -20, -44,
	-44, 20, 11, -44, 11, 28, 28, -4, 18, -4,
	-4, 20, 14, 14,
}
var yyDef = []int{

	0, -2, 10, 10, 12, 12, 135, 14, 0, 14,
	14, 0, 14, 0, 82, 87, 106, 135, 135, 135,
	135, 51, 52, 113, 114, 115, 116, -2, 118, 135,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 136,
	6, 0, 23, 6, 135, 23, 5, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 107, 108, 109, 110,
	135, 0, 135, 0, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 51, 52, 40, 135, 1,
	0, 7, 8, 9, 0, 11, 2, 3, 0, 4,
	83, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 0,
	0, 0, 134, 119, 0, 122, 0, 42, 137, 53,
	55, 0, 0, 137, 47, 56, 0, 59, 137, 49,
	123, 139, 125, 127, 15, 0, 18, 21, 0, 0,
	0, 0, 0, 0, 0, 13, 111, 112, 121, 120,
	41, 0, 138, 44, 0, 0, 138, 58, 0, 0,
	0, -2, 135, 16, 137, 19, 22, 24, 25, 26,
	0, 29, 30, 0, 0, 33, 0, 0, 36, 131,
	43, 54, 45, 46, 57, 60, 48, 124, 126, 128,
	0, 138, 27, 137, 37, 0, 39, 0, 31, 137,
	84, 135, 34, 137, 129, 0, 17, 20, 0, 138,
	0, 0, 138, 86, 0, 138, 132, 28, 38, 61,
	137, 63, 133, 66, 32, 85, 35, 130, 0, 138,
	75, 0, 62, 64, 0, 0, 67, 139, 139, 70,
	79, 72, 0, 0, 0, 140, 140, 0, 65, 135,
	139, 139, 76, 0, 68, 71, 69, 80, 139, 0,
	0, 77, 0, 0, -2, 0, 0, 0, 81, 0,
	0, 78, 73, 74,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 22, 3, 3, 3, 27, 29, 3,
	13, 14, 25, 23, 11, 24, 12, 26, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 10, 9,
	19, 21, 20, 31, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 15, 3, 16, 30, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 17, 28, 18,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		//line grammar.y:153
		{
			lexStoreExprs(yylex, yyS[yypt-1].constexprs)
		}
	case 6:
		//line grammar.y:162
		{
			lexGenEOF(yylex)
		}
	case 7:
		//line grammar.y:164
		{
			lexGenEOF(yylex)
		}
	case 8:
		//line grammar.y:166
		{
			lexGenEOF(yylex)
		}
	case 9:
		//line grammar.y:168
		{
			lexGenEOF(yylex)
		}
	case 10:
		//line grammar.y:173
		{
			lexPosErrorf(yylex, Pos{}, "vdl file must start with package clause")
		}
	case 11:
		//line grammar.y:175
		{
			lexVDLFile(yylex).PackageDef = NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}
		}
	case 12:
		//line grammar.y:180
		{
			lexPosErrorf(yylex, Pos{}, "config file must start with config clause")
		}
	case 13:
		//line grammar.y:182
		{
			// We allow "config" as an identifier; it is not a keyword.  So we check
			// manually to make sure the syntax is correct.
			if yyS[yypt-3].strpos.str != "config" {
				lexPosErrorf(yylex, yyS[yypt-3].strpos.pos, "config file must start with config clause")
				return 1 // Any non-zero code indicates an error
			}
			file := lexVDLFile(yylex)
			file.PackageDef = NamePos{Name: "config", Pos: yyS[yypt-3].strpos.pos}
			file.ConstDefs = []*ConstDef{{Expr: yyS[yypt-1].constexpr}}
		}
	case 21:
		//line grammar.y:210
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Pos: yyS[yypt-0].strpos.pos}})
		}
	case 22:
		//line grammar.y:215
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 39:
		//line grammar.y:250
		{
			tds := &lexVDLFile(yylex).TypeDefs
			*tds = append(*tds, &TypeDef{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 40:
		//line grammar.y:272
		{
			yyVAL.typeexpr = &TypeNamed{Name: yyS[yypt-0].strpos.str, P: yyS[yypt-0].strpos.pos}
		}
	case 41:
		//line grammar.y:274
		{
			yyVAL.typeexpr = &TypeArray{Len: int(yyS[yypt-2].intpos.int.Int64()), Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-3].pos}
		}
	case 42:
		//line grammar.y:276
		{
			yyVAL.typeexpr = &TypeList{Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-2].pos}
		}
	case 43:
		//line grammar.y:278
		{
			yyVAL.typeexpr = &TypeEnum{Labels: yyS[yypt-2].nameposes, P: yyS[yypt-4].pos}
		}
	case 44:
		//line grammar.y:280
		{
			yyVAL.typeexpr = &TypeSet{Key: yyS[yypt-1].typeexpr, P: yyS[yypt-3].pos}
		}
	case 45:
		//line grammar.y:282
		{
			yyVAL.typeexpr = &TypeMap{Key: yyS[yypt-2].typeexpr, Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-4].pos}
		}
	case 46:
		//line grammar.y:284
		{
			yyVAL.typeexpr = &TypeStruct{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 47:
		//line grammar.y:286
		{
			yyVAL.typeexpr = &TypeStruct{P: yyS[yypt-2].pos}
		}
	case 48:
		//line grammar.y:288
		{
			yyVAL.typeexpr = &TypeUnion{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 49:
		//line grammar.y:290
		{
			yyVAL.typeexpr = &TypeUnion{P: yyS[yypt-2].pos}
		}
	case 50:
		//line grammar.y:292
		{
			yyVAL.typeexpr = &TypeOptional{Base: yyS[yypt-0].typeexpr, P: yyS[yypt-1].pos}
		}
	case 51:
		//line grammar.y:297
		{
			yyVAL.typeexpr = yyS[yypt-0].typeexpr
		}
	case 52:
		//line grammar.y:299
		{
			yyVAL.typeexpr = &TypeNamed{Name: "typeobject", P: yyS[yypt-0].pos}
		}
	case 53:
		//line grammar.y:303
		{
			yyVAL.nameposes = []NamePos{yyS[yypt-0].namepos}
		}
	case 54:
		//line grammar.y:305
		{
			yyVAL.nameposes = append(yyS[yypt-2].nameposes, yyS[yypt-0].namepos)
		}
	case 55:
		//line grammar.y:309
		{
			yyVAL.namepos = NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}
		}
	case 56:
		//line grammar.y:313
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 57:
		//line grammar.y:315
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 58:
		//line grammar.y:353
		{
			if names, ok := typeListToStrList(yylex, yyS[yypt-1].typeexprs); ok {
				for _, n := range names {
					yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: n.str, Pos: n.pos}})
				}
			} else {
				lexPosErrorf(yylex, yyS[yypt-0].typeexpr.Pos(), "perhaps you forgot a comma before %q?.", yyS[yypt-0].typeexpr.String())
			}
		}
	case 59:
		//line grammar.y:365
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 60:
		//line grammar.y:367
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 61:
		//line grammar.y:372
		{
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{NamePos: NamePos{Name: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos}})
		}
	case 62:
		//line grammar.y:377
		{
			yyS[yypt-2].iface.Name, yyS[yypt-2].iface.Pos = yyS[yypt-5].strpos.str, yyS[yypt-5].strpos.pos
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, yyS[yypt-2].iface)
		}
	case 63:
		//line grammar.y:385
		{
			yyVAL.iface = yyS[yypt-0].iface
		}
	case 64:
		//line grammar.y:387
		{
			yyS[yypt-2].iface.Embeds = append(yyS[yypt-2].iface.Embeds, yyS[yypt-0].iface.Embeds...)
			yyS[yypt-2].iface.Methods = append(yyS[yypt-2].iface.Methods, yyS[yypt-0].iface.Methods...)
			yyVAL.iface = yyS[yypt-2].iface
		}
	case 65:
		//line grammar.y:395
		{
			yyVAL.iface = &Interface{Methods: []*Method{{InArgs: yyS[yypt-3].fields, InStream: yyS[yypt-2].typeexprs[0], OutStream: yyS[yypt-2].typeexprs[1], OutArgs: yyS[yypt-1].fields, Tags: yyS[yypt-0].constexprs, NamePos: NamePos{Name: yyS[yypt-4].strpos.str, Pos: yyS[yypt-4].strpos.pos}}}}
		}
	case 66:
		//line grammar.y:397
		{
			yyVAL.iface = &Interface{Embeds: []*NamePos{{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}}}
		}
	case 67:
		//line grammar.y:401
		{
			yyVAL.fields = nil
		}
	case 68:
		//line grammar.y:403
		{
			yyVAL.fields = yyS[yypt-2].fields
		}
	case 69:
		//line grammar.y:407
		{
			for _, t := range yyS[yypt-2].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
		}
	case 70:
		//line grammar.y:417
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 71:
		//line grammar.y:419
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 72:
		//line grammar.y:437
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Pos: yyS[yypt-0].typeexpr.Pos()}}}
		}
	case 73:
		//line grammar.y:439
		{
			yyVAL.fields = append(yyS[yypt-4].fields, &Field{Type: yyS[yypt-1].typeexpr, NamePos: NamePos{Name: "err", Pos: yyS[yypt-1].typeexpr.Pos()}})
		}
	case 74:
		//line grammar.y:443
		{
			for _, t := range yyS[yypt-4].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
			yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-1].typeexpr, NamePos: NamePos{Pos: yyS[yypt-1].typeexpr.Pos()}})
		}
	case 75:
		//line grammar.y:452
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 76:
		//line grammar.y:454
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 77:
		//line grammar.y:456
		{
			yyVAL.typeexprs = []Type{yyS[yypt-1].typeexpr, nil}
		}
	case 78:
		//line grammar.y:458
		{
			yyVAL.typeexprs = []Type{yyS[yypt-3].typeexpr, yyS[yypt-1].typeexpr}
		}
	case 79:
		//line grammar.y:462
		{
			yyVAL.constexprs = nil
		}
	case 80:
		//line grammar.y:464
		{
			yyVAL.constexprs = nil
		}
	case 81:
		//line grammar.y:466
		{
			yyVAL.constexprs = yyS[yypt-2].constexprs
		}
	case 82:
		//line grammar.y:470
		{
			yyVAL.constexprs = []ConstExpr{yyS[yypt-0].constexpr}
		}
	case 83:
		//line grammar.y:472
		{
			yyVAL.constexprs = append(yyS[yypt-2].constexprs, yyS[yypt-0].constexpr)
		}
	case 86:
		//line grammar.y:481
		{
			cds := &lexVDLFile(yylex).ConstDefs
			*cds = append(*cds, &ConstDef{Expr: yyS[yypt-0].constexpr, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 87:
		//line grammar.y:488
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 88:
		//line grammar.y:490
		{
			yyVAL.constexpr = &ConstBinaryOp{"||", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 89:
		//line grammar.y:492
		{
			yyVAL.constexpr = &ConstBinaryOp{"&&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 90:
		//line grammar.y:494
		{
			yyVAL.constexpr = &ConstBinaryOp{"<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 91:
		//line grammar.y:496
		{
			yyVAL.constexpr = &ConstBinaryOp{">", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 92:
		//line grammar.y:498
		{
			yyVAL.constexpr = &ConstBinaryOp{"<=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 93:
		//line grammar.y:500
		{
			yyVAL.constexpr = &ConstBinaryOp{">=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 94:
		//line grammar.y:502
		{
			yyVAL.constexpr = &ConstBinaryOp{"!=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 95:
		//line grammar.y:504
		{
			yyVAL.constexpr = &ConstBinaryOp{"==", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 96:
		//line grammar.y:506
		{
			yyVAL.constexpr = &ConstBinaryOp{"+", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 97:
		//line grammar.y:508
		{
			yyVAL.constexpr = &ConstBinaryOp{"-", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 98:
		//line grammar.y:510
		{
			yyVAL.constexpr = &ConstBinaryOp{"*", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 99:
		//line grammar.y:512
		{
			yyVAL.constexpr = &ConstBinaryOp{"/", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 100:
		//line grammar.y:514
		{
			yyVAL.constexpr = &ConstBinaryOp{"%", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 101:
		//line grammar.y:516
		{
			yyVAL.constexpr = &ConstBinaryOp{"|", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 102:
		//line grammar.y:518
		{
			yyVAL.constexpr = &ConstBinaryOp{"&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 103:
		//line grammar.y:520
		{
			yyVAL.constexpr = &ConstBinaryOp{"^", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 104:
		//line grammar.y:522
		{
			yyVAL.constexpr = &ConstBinaryOp{"<<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 105:
		//line grammar.y:524
		{
			yyVAL.constexpr = &ConstBinaryOp{">>", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 106:
		//line grammar.y:528
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 107:
		//line grammar.y:530
		{
			yyVAL.constexpr = &ConstUnaryOp{"!", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 108:
		//line grammar.y:532
		{
			yyVAL.constexpr = &ConstUnaryOp{"+", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 109:
		//line grammar.y:534
		{
			yyVAL.constexpr = &ConstUnaryOp{"-", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 110:
		//line grammar.y:536
		{
			yyVAL.constexpr = &ConstUnaryOp{"^", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 111:
		//line grammar.y:538
		{
			yyVAL.constexpr = &ConstTypeConv{yyS[yypt-3].typeexpr, yyS[yypt-1].constexpr, yyS[yypt-3].typeexpr.Pos()}
		}
	case 112:
		//line grammar.y:540
		{
			yyVAL.constexpr = &ConstTypeObject{yyS[yypt-1].typeexpr, yyS[yypt-3].pos}
		}
	case 113:
		//line grammar.y:545
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 114:
		//line grammar.y:547
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 115:
		//line grammar.y:549
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 116:
		//line grammar.y:551
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].imagpos.imag, yyS[yypt-0].imagpos.pos}
		}
	case 117:
		//line grammar.y:553
		{
			yyVAL.constexpr = &ConstNamed{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 118:
		//line grammar.y:555
		{
			yyVAL.constexpr = yyS[yypt-0].complit
		}
	case 119:
		//line grammar.y:557
		{
			lexPosErrorf(yylex, yyS[yypt-1].pos, "cannot apply selector operator to unnamed constant")
		}
	case 120:
		//line grammar.y:559
		{
			lexPosErrorf(yylex, yyS[yypt-2].pos, "cannot apply index operator to unnamed constant")
		}
	case 121:
		//line grammar.y:561
		{
			yyVAL.constexpr = &ConstIndexed{&ConstNamed{yyS[yypt-3].strpos.str, yyS[yypt-3].strpos.pos}, yyS[yypt-1].constexpr, yyS[yypt-3].strpos.pos}
		}
	case 122:
		//line grammar.y:563
		{
			yyVAL.constexpr = yyS[yypt-1].constexpr
		}
	case 123:
		//line grammar.y:567
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-2].typeexpr, nil, yyS[yypt-1].pos}
		}
	case 124:
		//line grammar.y:569
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-4].typeexpr, yyS[yypt-2].kvlits, yyS[yypt-3].pos}
		}
	case 125:
		//line grammar.y:573
		{
			yyVAL.kvlits = []KVLit{yyS[yypt-0].kvlit}
		}
	case 126:
		//line grammar.y:575
		{
			yyVAL.kvlits = append(yyS[yypt-2].kvlits, yyS[yypt-0].kvlit)
		}
	case 127:
		//line grammar.y:579
		{
			yyVAL.kvlit = KVLit{Value: yyS[yypt-0].constexpr}
		}
	case 128:
		//line grammar.y:581
		{
			yyVAL.kvlit = KVLit{Key: yyS[yypt-2].constexpr, Value: yyS[yypt-0].constexpr}
		}
	case 131:
		//line grammar.y:590
		{
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{NamePos: NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}})
		}
	case 132:
		//line grammar.y:595
		{
			ensureNonEmptyToken(yylex, yyS[yypt-0].strpos, "error id must be non-empty if specified")
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{ID: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 133:
		//line grammar.y:606
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 134:
		//line grammar.y:608
		{
			yyVAL.strpos = strPos{yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, yyS[yypt-2].strpos.pos}
		}
	case 135:
		//line grammar.y:612
		{
			yyVAL.typeexpr = nil
		}
	case 136:
		//line grammar.y:614
		{
			yyVAL.typeexpr = yyS[yypt-0].typeexpr
		}
	}
	goto yystack /* stack new state and value */
}
