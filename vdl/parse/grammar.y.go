//line grammar.y:18

// This grammar.y.go file was auto-generated by yacc from grammar.y.

package parse

import __yyfmt__ "fmt"

//line grammar.y:20
import (
	"math/big"
	"strings"
)

type strPos struct {
	str string
	pos Pos
}

type intPos struct {
	int *big.Int
	pos Pos
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

type imagPos struct {
	imag *BigImag
	pos  Pos
}

// typeListToStrList converts a slice of Type to a slice of strPos.  Each type
// must be a TypeNamed with an empty PackageName, otherwise errors are reported,
// and ok=false is returned.
func typeListToStrList(yylex yyLexer, typeList []Type) (strList []strPos, ok bool) {
	ok = true
	for _, t := range typeList {
		var tn *TypeNamed
		if tn, ok = t.(*TypeNamed); !ok {
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names)", t.String())
			return
		}
		if strings.ContainsRune(tn.Name, '.') {
			ok = false
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names).", tn.Name)
			return
		}
		strList = append(strList, strPos{tn.Name, tn.P})
	}
	return
}

// ensureNonEmptyToken reports an error if tok is empty.
func ensureNonEmptyToken(yylex yyLexer, tok strPos, errMsg string) {
	if len(tok.str) == 0 {
		lexPosErrorf(yylex, tok.pos, errMsg)
	}
}

//line grammar.y:79
type yySymType struct {
	yys        int
	pos        Pos
	strpos     strPos
	intpos     intPos
	ratpos     ratPos
	imagpos    imagPos
	namepos    NamePos
	nameposes  []NamePos
	typeexpr   Type
	typeexprs  []Type
	fields     []*Field
	iface      *Interface
	constexpr  ConstExpr
	constexprs []ConstExpr
	complit    *ConstCompositeLit
	kvlit      KVLit
	kvlits     []KVLit
}

const startFileImports = 57346
const startFile = 57347
const startConfigImports = 57348
const startConfig = 57349
const tOROR = 57350
const tANDAND = 57351
const tLE = 57352
const tGE = 57353
const tNE = 57354
const tEQEQ = 57355
const tLSH = 57356
const tRSH = 57357
const tCONST = 57358
const tENUM = 57359
const tERRORID = 57360
const tIMPORT = 57361
const tINTERFACE = 57362
const tMAP = 57363
const tONEOF = 57364
const tPACKAGE = 57365
const tSET = 57366
const tSTREAM = 57367
const tSTRUCT = 57368
const tTYPE = 57369
const tTYPEOBJECT = 57370
const tIDENT = 57371
const tSTRLIT = 57372
const tINTLIT = 57373
const tRATLIT = 57374
const tIMAGLIT = 57375
const notPackage = 57376
const notConfig = 57377

var yyToknames = []string{
	"startFileImports",
	"startFile",
	"startConfigImports",
	"startConfig",
	" ;",
	" :",
	" ,",
	" .",
	" (",
	" )",
	" [",
	" ]",
	" {",
	" }",
	" <",
	" >",
	" =",
	" !",
	" +",
	" -",
	" *",
	" /",
	" %",
	" |",
	" &",
	" ^",
	" ?",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tLSH",
	"tRSH",
	"tCONST",
	"tENUM",
	"tERRORID",
	"tIMPORT",
	"tINTERFACE",
	"tMAP",
	"tONEOF",
	"tPACKAGE",
	"tSET",
	"tSTREAM",
	"tSTRUCT",
	"tTYPE",
	"tTYPEOBJECT",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
	"tIMAGLIT",
	"notPackage",
	"notConfig",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 40,
	12, 39,
	16, 39,
	-2, 116,
	-1, 198,
	17, 139,
	-2, 134,
	-1, 265,
	17, 139,
	-2, 134,
}

const yyNprod = 140
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 753

var yyAct = []int{

	166, 234, 158, 197, 165, 40, 159, 115, 119, 225,
	156, 167, 152, 96, 58, 57, 122, 27, 210, 110,
	226, 42, 123, 43, 223, 120, 259, 179, 172, 153,
	30, 31, 32, 146, 145, 34, 56, 13, 33, 49,
	10, 239, 7, 94, 23, 182, 178, 107, 121, 44,
	16, 175, 95, 46, 48, 105, 45, 55, 47, 226,
	35, 50, 36, 37, 38, 39, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 103, 58, 57, 123, 142,
	120, 144, 109, 118, 147, 105, 269, 58, 57, 253,
	247, 169, 105, 25, 105, 105, 105, 105, 21, 114,
	22, 23, 161, 43, 204, 263, 106, 52, 254, 20,
	267, 53, 171, 105, 262, 103, 236, 177, 218, 49,
	217, 214, 103, 120, 103, 103, 103, 103, 181, 44,
	172, 211, 101, 46, 48, 63, 45, 64, 47, 117,
	104, 50, 100, 103, 97, 105, 62, 76, 77, 78,
	18, 80, 191, 188, 190, 105, 149, 102, 192, 92,
	82, 83, 93, 196, 91, 99, 26, 90, 105, 207,
	98, 12, 202, 258, 256, 103, 230, 228, 205, 28,
	14, 15, 208, 17, 221, 103, 215, 105, 200, 105,
	220, 105, 212, 219, 184, 201, 235, 143, 103, 89,
	227, 222, 88, 91, 150, 229, 154, 155, 160, 160,
	84, 85, 86, 87, 265, 249, 231, 103, 198, 103,
	233, 103, 209, 206, 203, 173, 232, 193, 243, 227,
	246, 105, 242, 237, 105, 248, 251, 189, 105, 168,
	113, 112, 257, 105, 261, 105, 105, 2, 3, 4,
	5, 180, 111, 54, 264, 24, 268, 187, 6, 105,
	9, 103, 8, 176, 103, 116, 11, 194, 103, 170,
	61, 60, 59, 103, 108, 103, 103, 42, 19, 43,
	173, 1, 163, 164, 41, 260, 30, 31, 32, 103,
	252, 29, 224, 250, 33, 49, 244, 43, 241, 213,
	238, 160, 51, 216, 151, 44, 0, 0, 0, 46,
	48, 0, 45, 49, 47, 0, 35, 50, 36, 37,
	38, 39, 0, 44, 0, 0, 0, 46, 48, 0,
	45, 0, 47, 0, 104, 50, 0, 0, 0, 0,
	0, 0, 42, 160, 43, 0, 245, 0, 0, 0,
	194, 30, 31, 32, 0, 255, 0, 160, 216, 33,
	49, 0, 235, 0, 43, 0, 0, 0, 0, 0,
	44, 266, 0, 0, 46, 48, 0, 45, 0, 47,
	49, 35, 50, 36, 37, 38, 39, 240, 43, 0,
	44, 0, 0, 0, 46, 48, 0, 45, 0, 47,
	0, 104, 50, 0, 49, 0, 0, 195, 0, 0,
	0, 43, 0, 0, 44, 0, 0, 0, 46, 48,
	0, 45, 0, 47, 43, 104, 50, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	49, 46, 48, 0, 45, 0, 47, 0, 104, 50,
	44, 0, 0, 174, 46, 48, 0, 45, 0, 47,
	43, 104, 50, 162, 74, 75, 76, 77, 78, 79,
	80, 81, 0, 0, 0, 0, 49, 0, 43, 82,
	83, 157, 0, 0, 0, 0, 44, 0, 0, 0,
	46, 48, 0, 45, 49, 47, 43, 104, 50, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 46, 48,
	0, 45, 49, 47, 0, 104, 50, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 46, 48, 199, 45,
	0, 47, 0, 104, 50, 0, 0, 68, 69, 0,
	0, 74, 75, 76, 77, 78, 79, 80, 81, 0,
	66, 67, 70, 71, 72, 73, 82, 83, 186, 0,
	0, 68, 69, 0, 0, 74, 75, 76, 77, 78,
	79, 80, 81, 0, 66, 67, 70, 71, 72, 73,
	82, 83, 185, 0, 0, 68, 69, 0, 0, 74,
	75, 76, 77, 78, 79, 80, 81, 0, 66, 67,
	70, 71, 72, 73, 82, 83, 183, 0, 0, 0,
	0, 68, 69, 0, 0, 74, 75, 76, 77, 78,
	79, 80, 81, 0, 66, 67, 70, 71, 72, 73,
	82, 83, 148, 0, 0, 0, 0, 68, 69, 0,
	0, 74, 75, 76, 77, 78, 79, 80, 81, 65,
	66, 67, 70, 71, 72, 73, 82, 83, 0, 68,
	69, 0, 0, 74, 75, 76, 77, 78, 79, 80,
	81, 0, 66, 67, 70, 71, 72, 73, 82, 83,
	68, 69, 0, 0, 74, 75, 76, 77, 78, 79,
	80, 81, 0, 66, 67, 70, 71, 72, 73, 82,
	83, 68, 69, 0, 0, 74, 75, 76, 77, 78,
	79, 80, 81, 0, 0, 67, 70, 71, 72, 73,
	82, 83, 68, 69, 0, 0, 74, 75, 76, 77,
	78, 79, 80, 81, 0, 0, 0, 70, 71, 72,
	73, 82, 83,
}
var yyPact = []int{

	253, -1000, -4, -4, -12, -12, -1000, -15, -1000, -1000,
	30, -1000, 69, 257, 2, 69, 340, 2, -1000, 255,
	-1000, -1000, -1000, 45, -1000, 106, -1000, 651, -1000, -1000,
	340, 340, 340, 340, 200, 197, -1000, -1000, -1000, -1000,
	163, 158, 340, -2, 138, 166, 161, 136, 126, 492,
	-1000, 100, -1000, 106, -1000, 34, -1000, -1000, -34, 254,
	243, 242, 97, 81, 36, -1000, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, -1000, -1000, -1000, -1000, 340, 492,
	340, -18, -19, 340, 629, 151, 492, -23, 492, 492,
	474, 456, -1000, -1000, -1000, 202, 275, -1000, 241, -1000,
	-1000, -1000, -1000, -1000, 88, -1000, -1000, 420, 38, -1000,
	26, 14, -1000, 25, 693, 714, 452, 452, 452, 452,
	452, 452, 133, 133, -1000, -1000, -1000, 133, -1000, 133,
	-1000, -1000, 603, 191, 577, -1000, -1000, 553, -1000, 492,
	-1000, 239, -1000, -1000, 149, 147, 229, -1000, -1000, 407,
	-1000, 229, -1000, -1000, 218, -1000, 529, 185, -38, -1000,
	226, -1000, 492, -1000, 98, -1000, 225, -1000, 340, -1000,
	224, -1000, -35, -1000, -1000, -1000, -1000, -1000, 124, -23,
	-1000, 492, 114, 492, -1000, 492, 113, 111, 340, 340,
	-1000, -1000, 181, -24, 7, 174, -27, 672, 173, -30,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	672, -1000, -1000, -1000, 222, -1000, 194, 202, -1000, -1000,
	-1000, -1000, 109, -32, -7, 384, -1000, -1000, 360, 82,
	-1000, 215, 293, -1000, 83, -1000, -1000, 99, 171, 492,
	492, 170, -1000, 9, -1000, 105, -1000, -1000, -1000, -1000,
	214, 672, -1000, 492, 103, 340, 77, -1000, 672, -1000,
}
var yyPgo = []int{

	0, 5, 12, 314, 117, 35, 312, 6, 310, 10,
	2, 308, 1, 306, 302, 9, 0, 189, 301, 300,
	295, 294, 4, 293, 291, 268, 181, 160, 103, 270,
	288, 284, 11, 36, 282, 281, 280, 279, 7, 275,
	273, 8, 261, 16, 3,
}
var yyR1 = []int{

	0, 24, 24, 24, 24, 27, 27, 27, 27, 25,
	25, 29, 29, 26, 26, 30, 30, 30, 31, 31,
	33, 33, 28, 28, 28, 28, 34, 34, 34, 34,
	35, 35, 35, 36, 36, 36, 37, 37, 38, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	4, 4, 3, 3, 2, 9, 9, 10, 7, 7,
	39, 39, 14, 14, 15, 15, 12, 12, 12, 11,
	11, 13, 13, 13, 8, 8, 8, 8, 19, 19,
	19, 20, 20, 40, 40, 41, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 17, 17, 17, 17, 17,
	17, 17, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 21, 21, 23, 23, 22, 22, 42, 42,
	43, 43, 1, 1, 6, 6, 32, 32, 44, 44,
}
var yyR2 = []int{

	0, 4, 4, 4, 4, 0, 1, 1, 1, 0,
	3, 0, 4, 0, 3, 3, 5, 2, 1, 3,
	1, 2, 0, 3, 3, 3, 3, 5, 2, 2,
	3, 5, 2, 3, 5, 2, 1, 3, 2, 1,
	4, 3, 5, 4, 5, 5, 3, 5, 3, 2,
	1, 1, 1, 3, 1, 1, 3, 2, 1, 3,
	4, 6, 1, 3, 5, 1, 2, 4, 4, 1,
	3, 0, 1, 1, 0, 3, 4, 6, 0, 2,
	4, 1, 3, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 2, 2, 2, 2,
	4, 4, 1, 1, 1, 1, 1, 1, 3, 4,
	4, 3, 3, 5, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 0, 1, 0, 1, 0, 1,
}
var yyChk = []int{

	-1000, -24, 4, 5, 6, 7, -25, 46, -25, -29,
	52, -29, -26, 52, -26, -26, 20, -26, -27, -30,
	50, 39, 41, 42, 8, -28, -27, -16, -17, -18,
	21, 22, 23, 29, -5, 51, 53, 54, 55, 56,
	-1, -21, 12, 14, 40, 47, 44, 49, 45, 30,
	52, -6, -4, -28, 8, 12, -33, 53, 52, -34,
	-35, -36, 50, 39, 41, 8, 31, 32, 18, 19,
	33, 34, 35, 36, 22, 23, 24, 25, 26, 27,
	28, 29, 37, 38, -17, -17, -17, -17, 12, 12,
	14, 11, 11, 14, -16, 54, 15, 16, 14, 14,
	16, 16, -4, -5, 51, -1, 16, 13, -31, -33,
	53, 8, 8, 8, 12, -38, -39, 52, 12, -41,
	52, 12, -43, 52, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -4, -16, 52, 52, -16, 13, 15,
	-4, -3, -2, 52, -4, -4, -9, 17, -10, -7,
	-4, -9, 17, 17, -23, -22, -16, -32, 8, 13,
	-37, -38, 52, -4, 43, 13, -40, -41, 20, 13,
	-42, -43, 20, 13, 13, 15, 15, -4, -32, 8,
	15, 15, -32, 8, -4, 10, -32, -44, 10, 9,
	13, -33, -32, 8, 16, -32, 8, -16, -32, 8,
	53, 17, -2, -4, 17, -10, -4, 17, 17, -22,
	-16, 13, -38, 17, -14, -15, 52, -1, 13, -41,
	13, -43, -32, 8, -12, 12, 17, -15, -8, 48,
	13, -11, -7, -10, -13, -4, -12, 18, -44, 10,
	10, -44, -19, 16, 19, -4, 13, -10, 13, 17,
	-20, -16, 19, 10, -44, 10, -4, 17, -16, 19,
}
var yyDef = []int{

	0, -2, 9, 9, 11, 11, 13, 0, 13, 13,
	0, 13, 5, 0, 22, 5, 134, 22, 1, 0,
	6, 7, 8, 0, 10, 2, 3, 0, 86, 105,
	134, 134, 134, 134, 50, 51, 112, 113, 114, 115,
	-2, 117, 134, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 135, 4, 14, 0, 17, 20, 0, 0,
	0, 0, 0, 0, 0, 12, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 106, 107, 108, 109, 134, 0,
	134, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 50, 51, 39, 134, 15, 136, 18,
	21, 23, 24, 25, 0, 28, 29, 0, 0, 32,
	0, 0, 35, 130, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 0, 0, 0, 133, 118, 0, 121, 0,
	41, 136, 52, 54, 0, 0, 136, 46, 55, 0,
	58, 136, 48, 122, 138, 124, 126, 0, 137, 26,
	136, 36, 0, 38, 0, 30, 136, 83, 134, 33,
	136, 128, 0, 110, 111, 120, 119, 40, 0, 137,
	43, 0, 0, 137, 57, 0, 0, 0, -2, 134,
	16, 19, 0, 137, 0, 0, 137, 85, 0, 137,
	131, 42, 53, 44, 45, 56, 59, 47, 123, 125,
	127, 27, 37, 60, 136, 62, 132, 65, 31, 84,
	34, 129, 0, 137, 74, 0, 61, 63, 71, 0,
	66, 138, 138, 69, 78, 72, 73, 0, 0, 139,
	139, 0, 64, 134, 75, 0, 67, 70, 68, 79,
	138, 81, 76, 0, 0, -2, 0, 80, 82, 77,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 21, 3, 3, 3, 26, 28, 3,
	12, 13, 24, 22, 10, 23, 11, 25, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 9, 8,
	18, 20, 19, 30, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 14, 3, 15, 29, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 16, 27, 17,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		//line grammar.y:159
		{
			lexGenEOF(yylex)
		}
	case 6:
		//line grammar.y:161
		{
			lexGenEOF(yylex)
		}
	case 7:
		//line grammar.y:163
		{
			lexGenEOF(yylex)
		}
	case 8:
		//line grammar.y:165
		{
			lexGenEOF(yylex)
		}
	case 9:
		//line grammar.y:170
		{
			lexPosErrorf(yylex, Pos{}, "vdl file must start with package clause")
		}
	case 10:
		//line grammar.y:172
		{
			lexVDLFile(yylex).PackageDef = NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}
		}
	case 11:
		//line grammar.y:177
		{
			lexPosErrorf(yylex, Pos{}, "config file must start with config clause")
		}
	case 12:
		//line grammar.y:179
		{
			// We allow "config" as an identifier; it is not a keyword.  So we check
			// manually to make sure the syntax is correct.
			if yyS[yypt-3].strpos.str != "config" {
				lexPosErrorf(yylex, yyS[yypt-3].strpos.pos, "config file must start with config clause")
				return 1 // Any non-zero code indicates an error
			}
			file := lexVDLFile(yylex)
			file.PackageDef = NamePos{Name: "config", Pos: yyS[yypt-3].strpos.pos}
			file.ConstDefs = []*ConstDef{{Expr: yyS[yypt-1].constexpr}}
		}
	case 20:
		//line grammar.y:207
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Pos: yyS[yypt-0].strpos.pos}})
		}
	case 21:
		//line grammar.y:212
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 38:
		//line grammar.y:247
		{
			tds := &lexVDLFile(yylex).TypeDefs
			*tds = append(*tds, &TypeDef{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 39:
		//line grammar.y:269
		{
			yyVAL.typeexpr = &TypeNamed{Name: yyS[yypt-0].strpos.str, P: yyS[yypt-0].strpos.pos}
		}
	case 40:
		//line grammar.y:271
		{
			yyVAL.typeexpr = &TypeArray{Len: int(yyS[yypt-2].intpos.int.Int64()), Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-3].pos}
		}
	case 41:
		//line grammar.y:273
		{
			yyVAL.typeexpr = &TypeList{Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-2].pos}
		}
	case 42:
		//line grammar.y:275
		{
			yyVAL.typeexpr = &TypeEnum{Labels: yyS[yypt-2].nameposes, P: yyS[yypt-4].pos}
		}
	case 43:
		//line grammar.y:277
		{
			yyVAL.typeexpr = &TypeSet{Key: yyS[yypt-1].typeexpr, P: yyS[yypt-3].pos}
		}
	case 44:
		//line grammar.y:279
		{
			yyVAL.typeexpr = &TypeMap{Key: yyS[yypt-2].typeexpr, Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-4].pos}
		}
	case 45:
		//line grammar.y:281
		{
			yyVAL.typeexpr = &TypeStruct{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 46:
		//line grammar.y:283
		{
			yyVAL.typeexpr = &TypeStruct{P: yyS[yypt-2].pos}
		}
	case 47:
		//line grammar.y:285
		{
			yyVAL.typeexpr = &TypeOneOf{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 48:
		//line grammar.y:287
		{
			yyVAL.typeexpr = &TypeOneOf{P: yyS[yypt-2].pos}
		}
	case 49:
		//line grammar.y:289
		{
			yyVAL.typeexpr = &TypeOptional{Base: yyS[yypt-0].typeexpr, P: yyS[yypt-1].pos}
		}
	case 50:
		//line grammar.y:294
		{
			yyVAL.typeexpr = yyS[yypt-0].typeexpr
		}
	case 51:
		//line grammar.y:296
		{
			yyVAL.typeexpr = &TypeNamed{Name: "typeobject", P: yyS[yypt-0].pos}
		}
	case 52:
		//line grammar.y:300
		{
			yyVAL.nameposes = []NamePos{yyS[yypt-0].namepos}
		}
	case 53:
		//line grammar.y:302
		{
			yyVAL.nameposes = append(yyS[yypt-2].nameposes, yyS[yypt-0].namepos)
		}
	case 54:
		//line grammar.y:306
		{
			yyVAL.namepos = NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}
		}
	case 55:
		//line grammar.y:310
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 56:
		//line grammar.y:312
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 57:
		//line grammar.y:350
		{
			if names, ok := typeListToStrList(yylex, yyS[yypt-1].typeexprs); ok {
				for _, n := range names {
					yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: n.str, Pos: n.pos}})
				}
			} else {
				lexPosErrorf(yylex, yyS[yypt-0].typeexpr.Pos(), "perhaps you forgot a comma before %q?.", yyS[yypt-0].typeexpr.String())
			}
		}
	case 58:
		//line grammar.y:362
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 59:
		//line grammar.y:364
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 60:
		//line grammar.y:370
		{
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{NamePos: NamePos{Name: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos}})
		}
	case 61:
		//line grammar.y:375
		{
			yyS[yypt-2].iface.Name, yyS[yypt-2].iface.Pos = yyS[yypt-5].strpos.str, yyS[yypt-5].strpos.pos
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, yyS[yypt-2].iface)
		}
	case 62:
		//line grammar.y:383
		{
			yyVAL.iface = yyS[yypt-0].iface
		}
	case 63:
		//line grammar.y:385
		{
			yyS[yypt-2].iface.Embeds = append(yyS[yypt-2].iface.Embeds, yyS[yypt-0].iface.Embeds...)
			yyS[yypt-2].iface.Methods = append(yyS[yypt-2].iface.Methods, yyS[yypt-0].iface.Methods...)
			yyVAL.iface = yyS[yypt-2].iface
		}
	case 64:
		//line grammar.y:393
		{
			yyVAL.iface = &Interface{Methods: []*Method{{InArgs: yyS[yypt-3].fields, InStream: yyS[yypt-2].typeexprs[0], OutStream: yyS[yypt-2].typeexprs[1], OutArgs: yyS[yypt-1].fields, Tags: yyS[yypt-0].constexprs, NamePos: NamePos{Name: yyS[yypt-4].strpos.str, Pos: yyS[yypt-4].strpos.pos}}}}
		}
	case 65:
		//line grammar.y:395
		{
			yyVAL.iface = &Interface{Embeds: []*NamePos{{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}}}
		}
	case 66:
		//line grammar.y:399
		{
			yyVAL.fields = nil
		}
	case 67:
		//line grammar.y:401
		{
			yyVAL.fields = yyS[yypt-2].fields
		}
	case 68:
		//line grammar.y:405
		{
			for _, t := range yyS[yypt-2].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
		}
	case 69:
		//line grammar.y:415
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 70:
		//line grammar.y:417
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 71:
		//line grammar.y:423
		{
			yyVAL.fields = nil
		}
	case 72:
		//line grammar.y:425
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Pos: yyS[yypt-0].typeexpr.Pos()}}}
		}
	case 73:
		//line grammar.y:427
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 74:
		//line grammar.y:431
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 75:
		//line grammar.y:433
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 76:
		//line grammar.y:435
		{
			yyVAL.typeexprs = []Type{yyS[yypt-1].typeexpr, nil}
		}
	case 77:
		//line grammar.y:437
		{
			yyVAL.typeexprs = []Type{yyS[yypt-3].typeexpr, yyS[yypt-1].typeexpr}
		}
	case 78:
		//line grammar.y:441
		{
			yyVAL.constexprs = nil
		}
	case 79:
		//line grammar.y:443
		{
			yyVAL.constexprs = nil
		}
	case 80:
		//line grammar.y:445
		{
			yyVAL.constexprs = yyS[yypt-2].constexprs
		}
	case 81:
		//line grammar.y:449
		{
			yyVAL.constexprs = []ConstExpr{yyS[yypt-0].constexpr}
		}
	case 82:
		//line grammar.y:451
		{
			yyVAL.constexprs = append(yyS[yypt-2].constexprs, yyS[yypt-0].constexpr)
		}
	case 85:
		//line grammar.y:460
		{
			cds := &lexVDLFile(yylex).ConstDefs
			*cds = append(*cds, &ConstDef{Expr: yyS[yypt-0].constexpr, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 86:
		//line grammar.y:467
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 87:
		//line grammar.y:469
		{
			yyVAL.constexpr = &ConstBinaryOp{"||", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 88:
		//line grammar.y:471
		{
			yyVAL.constexpr = &ConstBinaryOp{"&&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 89:
		//line grammar.y:473
		{
			yyVAL.constexpr = &ConstBinaryOp{"<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 90:
		//line grammar.y:475
		{
			yyVAL.constexpr = &ConstBinaryOp{">", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 91:
		//line grammar.y:477
		{
			yyVAL.constexpr = &ConstBinaryOp{"<=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 92:
		//line grammar.y:479
		{
			yyVAL.constexpr = &ConstBinaryOp{">=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 93:
		//line grammar.y:481
		{
			yyVAL.constexpr = &ConstBinaryOp{"!=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 94:
		//line grammar.y:483
		{
			yyVAL.constexpr = &ConstBinaryOp{"==", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 95:
		//line grammar.y:485
		{
			yyVAL.constexpr = &ConstBinaryOp{"+", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 96:
		//line grammar.y:487
		{
			yyVAL.constexpr = &ConstBinaryOp{"-", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 97:
		//line grammar.y:489
		{
			yyVAL.constexpr = &ConstBinaryOp{"*", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 98:
		//line grammar.y:491
		{
			yyVAL.constexpr = &ConstBinaryOp{"/", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 99:
		//line grammar.y:493
		{
			yyVAL.constexpr = &ConstBinaryOp{"%", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 100:
		//line grammar.y:495
		{
			yyVAL.constexpr = &ConstBinaryOp{"|", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 101:
		//line grammar.y:497
		{
			yyVAL.constexpr = &ConstBinaryOp{"&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 102:
		//line grammar.y:499
		{
			yyVAL.constexpr = &ConstBinaryOp{"^", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 103:
		//line grammar.y:501
		{
			yyVAL.constexpr = &ConstBinaryOp{"<<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 104:
		//line grammar.y:503
		{
			yyVAL.constexpr = &ConstBinaryOp{">>", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 105:
		//line grammar.y:507
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 106:
		//line grammar.y:509
		{
			yyVAL.constexpr = &ConstUnaryOp{"!", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 107:
		//line grammar.y:511
		{
			yyVAL.constexpr = &ConstUnaryOp{"+", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 108:
		//line grammar.y:513
		{
			yyVAL.constexpr = &ConstUnaryOp{"-", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 109:
		//line grammar.y:515
		{
			yyVAL.constexpr = &ConstUnaryOp{"^", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 110:
		//line grammar.y:517
		{
			yyVAL.constexpr = &ConstTypeConv{yyS[yypt-3].typeexpr, yyS[yypt-1].constexpr, yyS[yypt-3].typeexpr.Pos()}
		}
	case 111:
		//line grammar.y:519
		{
			yyVAL.constexpr = &ConstTypeObject{yyS[yypt-1].typeexpr, yyS[yypt-3].pos}
		}
	case 112:
		//line grammar.y:524
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 113:
		//line grammar.y:526
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 114:
		//line grammar.y:528
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 115:
		//line grammar.y:530
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].imagpos.imag, yyS[yypt-0].imagpos.pos}
		}
	case 116:
		//line grammar.y:532
		{
			yyVAL.constexpr = &ConstNamed{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 117:
		//line grammar.y:534
		{
			yyVAL.constexpr = yyS[yypt-0].complit
		}
	case 118:
		//line grammar.y:536
		{
			lexPosErrorf(yylex, yyS[yypt-1].pos, "cannot apply selector operator to unnamed constant")
		}
	case 119:
		//line grammar.y:538
		{
			lexPosErrorf(yylex, yyS[yypt-2].pos, "cannot apply index operator to unnamed constant")
		}
	case 120:
		//line grammar.y:540
		{
			yyVAL.constexpr = &ConstIndexed{&ConstNamed{yyS[yypt-3].strpos.str, yyS[yypt-3].strpos.pos}, yyS[yypt-1].constexpr, yyS[yypt-3].strpos.pos}
		}
	case 121:
		//line grammar.y:542
		{
			yyVAL.constexpr = yyS[yypt-1].constexpr
		}
	case 122:
		//line grammar.y:546
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-2].typeexpr, nil, yyS[yypt-1].pos}
		}
	case 123:
		//line grammar.y:548
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-4].typeexpr, yyS[yypt-2].kvlits, yyS[yypt-3].pos}
		}
	case 124:
		//line grammar.y:552
		{
			yyVAL.kvlits = []KVLit{yyS[yypt-0].kvlit}
		}
	case 125:
		//line grammar.y:554
		{
			yyVAL.kvlits = append(yyS[yypt-2].kvlits, yyS[yypt-0].kvlit)
		}
	case 126:
		//line grammar.y:558
		{
			yyVAL.kvlit = KVLit{Value: yyS[yypt-0].constexpr}
		}
	case 127:
		//line grammar.y:560
		{
			yyVAL.kvlit = KVLit{Key: yyS[yypt-2].constexpr, Value: yyS[yypt-0].constexpr}
		}
	case 130:
		//line grammar.y:569
		{
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{NamePos: NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}})
		}
	case 131:
		//line grammar.y:574
		{
			ensureNonEmptyToken(yylex, yyS[yypt-0].strpos, "error id must be non-empty if specified")
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{ID: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 132:
		//line grammar.y:585
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 133:
		//line grammar.y:587
		{
			yyVAL.strpos = strPos{yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, yyS[yypt-2].strpos.pos}
		}
	case 134:
		//line grammar.y:591
		{
			yyVAL.typeexpr = nil
		}
	case 135:
		//line grammar.y:593
		{
			yyVAL.typeexpr = yyS[yypt-0].typeexpr
		}
	}
	goto yystack /* stack new state and value */
}
