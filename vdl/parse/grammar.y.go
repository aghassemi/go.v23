//line grammar.y:20

// This grammar.y.go file was auto-generated by yacc from grammar.y.

package parse

import __yyfmt__ "fmt"

//line grammar.y:22
import (
	"math/big"
	"strings"
)

type strPos struct {
	str string
	pos Pos
}

type intPos struct {
	int *big.Int
	pos Pos
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

type imagPos struct {
	imag *BigImag
	pos  Pos
}

// typeListToStrList converts a slice of Type to a slice of strPos.  Each type
// must be a TypeNamed with an empty PackageName, otherwise errors are reported,
// and ok=false is returned.
func typeListToStrList(yylex yyLexer, typeList []Type) (strList []strPos, ok bool) {
	ok = true
	for _, t := range typeList {
		var tn *TypeNamed
		if tn, ok = t.(*TypeNamed); !ok {
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names)", t.String())
			return
		}
		if strings.ContainsRune(tn.Name, '.') {
			ok = false
			lexPosErrorf(yylex, t.Pos(), "%s invalid (expected one or more variable names).", tn.Name)
			return
		}
		strList = append(strList, strPos{tn.Name, tn.P})
	}
	return
}

// ensureNonEmptyToken reports an error if tok is empty.
func ensureNonEmptyToken(yylex yyLexer, tok strPos, errMsg string) {
	if len(tok.str) == 0 {
		lexPosErrorf(yylex, tok.pos, errMsg)
	}
}

//line grammar.y:81
type yySymType struct {
	yys        int
	pos        Pos
	strpos     strPos
	intpos     intPos
	ratpos     ratPos
	imagpos    imagPos
	namepos    NamePos
	nameposes  []NamePos
	typeexpr   Type
	typeexprs  []Type
	fields     []*Field
	iface      *Interface
	constexpr  ConstExpr
	constexprs []ConstExpr
	complit    *ConstCompositeLit
	kvlit      KVLit
	kvlits     []KVLit
}

const startFileImports = 57346
const startFile = 57347
const startConfigImports = 57348
const startConfig = 57349
const tOROR = 57350
const tANDAND = 57351
const tLE = 57352
const tGE = 57353
const tNE = 57354
const tEQEQ = 57355
const tLSH = 57356
const tRSH = 57357
const tPACKAGE = 57358
const tIMPORT = 57359
const tTYPE = 57360
const tENUM = 57361
const tSET = 57362
const tMAP = 57363
const tSTRUCT = 57364
const tONEOF = 57365
const tINTERFACE = 57366
const tSTREAM = 57367
const tCONST = 57368
const tERRORID = 57369
const tIDENT = 57370
const tSTRLIT = 57371
const tINTLIT = 57372
const tRATLIT = 57373
const tIMAGLIT = 57374
const notPackage = 57375
const notConfig = 57376

var yyToknames = []string{
	"startFileImports",
	"startFile",
	"startConfigImports",
	"startConfig",
	" ;",
	" :",
	" ,",
	" .",
	" (",
	" )",
	" [",
	" ]",
	" {",
	" }",
	" <",
	" >",
	" =",
	" !",
	" +",
	" -",
	" *",
	" /",
	" %",
	" |",
	" &",
	" ^",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tLSH",
	"tRSH",
	"tPACKAGE",
	"tIMPORT",
	"tTYPE",
	"tENUM",
	"tSET",
	"tMAP",
	"tSTRUCT",
	"tONEOF",
	"tINTERFACE",
	"tSTREAM",
	"tCONST",
	"tERRORID",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
	"tIMAGLIT",
	"notPackage",
	"notConfig",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 39,
	12, 41,
	16, 41,
	-2, 115,
	-1, 184,
	17, 135,
	-2, 130,
	-1, 252,
	17, 135,
	-2, 130,
}

const yyNprod = 136
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 536

var yyAct = []int{

	153, 39, 221, 183, 212, 109, 145, 155, 112, 152,
	42, 144, 138, 196, 52, 241, 105, 27, 41, 100,
	42, 55, 54, 246, 34, 97, 213, 30, 31, 32,
	113, 53, 57, 110, 160, 33, 139, 43, 44, 45,
	46, 47, 86, 149, 13, 88, 48, 43, 44, 45,
	46, 47, 55, 54, 210, 10, 48, 35, 36, 37,
	38, 111, 55, 54, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 87, 96, 99, 167, 132, 213, 60, 226,
	136, 23, 136, 136, 136, 136, 222, 108, 42, 113,
	7, 170, 23, 20, 234, 163, 237, 157, 166, 136,
	42, 21, 22, 135, 165, 140, 141, 146, 148, 104,
	169, 159, 113, 256, 250, 43, 44, 45, 46, 47,
	16, 240, 161, 249, 48, 110, 136, 43, 44, 45,
	46, 47, 110, 59, 160, 173, 48, 136, 254, 223,
	177, 60, 61, 205, 203, 181, 200, 107, 197, 172,
	190, 95, 136, 93, 92, 89, 188, 193, 176, 175,
	179, 134, 191, 18, 91, 90, 194, 180, 136, 245,
	136, 42, 136, 243, 136, 161, 207, 198, 187, 26,
	201, 217, 214, 215, 206, 94, 222, 85, 216, 208,
	186, 199, 94, 146, 218, 202, 209, 204, 43, 44,
	45, 46, 47, 252, 236, 184, 220, 48, 195, 219,
	192, 189, 214, 182, 136, 224, 178, 136, 233, 229,
	174, 136, 235, 238, 230, 156, 136, 154, 136, 136,
	42, 248, 103, 143, 102, 101, 28, 146, 244, 51,
	232, 251, 136, 255, 179, 41, 24, 42, 168, 242,
	150, 146, 202, 164, 30, 31, 32, 43, 44, 45,
	46, 47, 33, 106, 158, 253, 48, 81, 82, 83,
	84, 41, 58, 42, 43, 44, 45, 46, 47, 56,
	30, 31, 32, 48, 35, 36, 37, 38, 33, 227,
	42, 98, 71, 72, 73, 74, 75, 76, 77, 78,
	43, 44, 45, 46, 47, 42, 79, 80, 9, 48,
	35, 36, 37, 38, 11, 42, 19, 43, 44, 45,
	46, 47, 2, 3, 4, 5, 48, 6, 50, 25,
	1, 8, 43, 44, 45, 46, 47, 162, 151, 185,
	40, 48, 43, 44, 45, 46, 47, 247, 65, 66,
	239, 48, 71, 72, 73, 74, 75, 76, 77, 78,
	63, 64, 67, 68, 69, 70, 79, 80, 171, 29,
	211, 231, 228, 65, 66, 142, 225, 71, 72, 73,
	74, 75, 76, 77, 78, 63, 64, 67, 68, 69,
	70, 79, 80, 133, 147, 49, 137, 0, 65, 66,
	0, 0, 71, 72, 73, 74, 75, 76, 77, 78,
	63, 64, 67, 68, 69, 70, 79, 80, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 66,
	0, 0, 71, 72, 73, 74, 75, 76, 77, 78,
	63, 64, 67, 68, 69, 70, 79, 80, 65, 66,
	0, 0, 71, 72, 73, 74, 75, 76, 77, 78,
	63, 64, 67, 68, 69, 70, 79, 80, 65, 66,
	0, 0, 71, 72, 73, 74, 75, 76, 77, 78,
	0, 64, 67, 68, 69, 70, 79, 80, 65, 66,
	0, 0, 71, 72, 73, 74, 75, 76, 77, 78,
	0, 0, 67, 68, 69, 70, 79, 80, 73, 74,
	75, 0, 77, 12, 0, 0, 0, 0, 0, 0,
	79, 80, 14, 15, 0, 17,
}
var yyPact = []int{

	328, -1000, 62, 62, 5, 5, -1000, -6, -1000, -1000,
	110, -1000, 63, 248, 52, 63, 269, 52, -1000, 241,
	-1000, -1000, -1000, 2, -1000, 103, -1000, 420, -1000, -1000,
	269, 269, 269, 269, 185, -1000, -1000, -1000, -1000, -1000,
	-1000, 269, 30, 149, 161, 160, 148, 147, 191, 145,
	40, -1000, 12, -1000, -1000, -32, 237, 236, 234, 107,
	85, 49, -1000, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, -1000, -1000, -1000, -1000, 269, 390, 156, 311, -14,
	311, 311, 226, 311, -7, 243, 229, -1000, 227, -1000,
	-1000, -1000, -1000, -1000, 94, -1000, -1000, 301, 92, -1000,
	88, 72, -1000, 81, 460, 480, 280, 280, 280, 280,
	280, 280, 494, 494, -1000, -1000, -1000, 494, -1000, 494,
	-1000, -1000, 365, -1000, 311, -1000, -1000, 222, -1000, -1000,
	154, 153, 218, -1000, -1000, 167, -1000, 215, -1000, -1000,
	-1000, 205, -1000, 340, -1000, 187, -29, -1000, 213, -1000,
	311, -1000, 144, -1000, 212, -1000, 269, -1000, 210, -1000,
	-38, -1000, -1000, 141, -14, -1000, 311, 139, 311, -1000,
	311, 137, 311, 136, 269, 269, -1000, -1000, 186, -16,
	37, 180, -17, 440, 178, -20, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 440, -1000, -1000,
	-1000, 208, -1000, 184, -1000, -1000, -1000, -1000, -1000, 132,
	-24, 42, 286, -1000, -1000, 84, 86, -1000, 204, 96,
	-1000, 115, -1000, -1000, -4, 170, 311, 311, 166, -1000,
	6, -1000, 114, -1000, -1000, -1000, -1000, 203, 440, -1000,
	311, 131, 269, 104, -1000, 440, -1000,
}
var yyPgo = []int{

	0, 1, 12, 406, 24, 405, 6, 404, 386, 385,
	11, 382, 2, 381, 380, 4, 0, 246, 379, 360,
	357, 350, 9, 348, 340, 337, 523, 173, 339, 318,
	338, 326, 301, 7, 31, 289, 32, 282, 274, 16,
	273, 263, 5, 258, 8, 3,
}
var yyR1 = []int{

	0, 24, 24, 24, 24, 27, 27, 27, 27, 25,
	25, 29, 29, 26, 26, 31, 31, 31, 32, 32,
	34, 34, 28, 28, 28, 28, 30, 30, 35, 35,
	35, 35, 36, 36, 36, 37, 37, 37, 38, 38,
	39, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 2, 9, 9, 10, 6, 6, 7, 7,
	40, 40, 14, 14, 15, 15, 12, 12, 12, 11,
	11, 13, 13, 13, 8, 8, 8, 8, 19, 19,
	19, 20, 20, 41, 41, 42, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 17, 17, 17, 17, 17,
	17, 18, 18, 18, 18, 18, 18, 18, 21, 21,
	23, 23, 22, 22, 43, 43, 44, 44, 1, 1,
	5, 5, 33, 33, 45, 45,
}
var yyR2 = []int{

	0, 4, 4, 4, 4, 0, 1, 1, 1, 0,
	3, 0, 4, 0, 3, 3, 5, 2, 1, 3,
	1, 2, 0, 3, 3, 3, 0, 3, 3, 5,
	2, 2, 3, 5, 2, 3, 5, 2, 1, 3,
	2, 1, 4, 3, 5, 4, 5, 5, 3, 5,
	1, 3, 1, 1, 3, 2, 1, 3, 1, 3,
	4, 6, 1, 3, 5, 1, 2, 4, 4, 1,
	3, 0, 1, 1, 0, 3, 4, 6, 0, 2,
	4, 1, 3, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 2, 2, 2, 2,
	4, 1, 1, 1, 1, 1, 1, 3, 3, 5,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	0, 1, 0, 1, 0, 1,
}
var yyChk = []int{

	-1000, -24, 4, 5, 6, 7, -25, 38, -25, -29,
	50, -29, -26, 50, -26, -26, 20, -26, -27, -31,
	40, 48, 49, 39, 8, -28, -27, -16, -17, -18,
	21, 22, 23, 29, -4, 51, 52, 53, 54, -1,
	-21, 12, 14, 41, 42, 43, 44, 45, 50, -5,
	-30, 8, 12, -34, 51, 50, -35, -36, -37, 40,
	48, 49, 8, 30, 31, 18, 19, 32, 33, 34,
	35, 22, 23, 24, 25, 26, 27, 28, 29, 36,
	37, -17, -17, -17, -17, 12, -16, 52, 15, 16,
	14, 14, 16, 16, 11, 16, -36, 13, -32, -34,
	51, 8, 8, 8, 12, -39, -40, 50, 12, -42,
	50, 12, -44, 50, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, 13, 15, -4, -1, -3, -2, 50,
	-4, -4, -9, 17, -10, -6, -4, -7, -4, 50,
	17, -23, -22, -16, 8, -33, 8, 13, -38, -39,
	50, -4, 46, 13, -41, -42, 20, 13, -43, -44,
	20, 13, -4, -33, 8, 15, 15, -33, 8, -4,
	10, -33, 8, -45, 10, 9, 13, -34, -33, 8,
	16, -33, 8, -16, -33, 8, 51, 17, -2, -4,
	17, -10, -4, 17, -4, 17, -22, -16, 13, -39,
	17, -14, -15, 50, -1, 13, -42, 13, -44, -33,
	8, -12, 12, 17, -15, -8, 47, 13, -11, -6,
	-10, -13, -4, -12, 18, -45, 10, 10, -45, -19,
	16, 19, -4, 13, -10, 13, 17, -20, -16, 19,
	10, -45, 10, -4, 17, -16, 19,
}
var yyDef = []int{

	0, -2, 9, 9, 11, 11, 13, 0, 13, 13,
	0, 13, 5, 0, 22, 5, 130, 26, 1, 0,
	6, 7, 8, 0, 10, 2, 3, 0, 86, 105,
	130, 130, 130, 130, 131, 111, 112, 113, 114, -2,
	116, 130, 0, 0, 0, 0, 0, 0, 128, 0,
	4, 14, 0, 17, 20, 0, 0, 0, 0, 0,
	0, 0, 12, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 106, 107, 108, 109, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 15, 132, 18,
	21, 23, 24, 25, 0, 30, 31, 0, 0, 34,
	0, 0, 37, 126, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 0, 117, 0, 43, 41, 132, 50, 52,
	0, 0, 132, 48, 53, 0, 56, 132, 58, 129,
	118, 134, 120, 122, 27, 0, 133, 28, 132, 38,
	0, 40, 0, 32, 132, 83, 130, 35, 132, 124,
	0, 110, 42, 0, 133, 45, 0, 0, 133, 55,
	0, 0, 133, 0, -2, 130, 16, 19, 0, 133,
	0, 0, 133, 85, 0, 133, 127, 44, 51, 46,
	47, 54, 57, 49, 59, 119, 121, 123, 29, 39,
	60, 132, 62, 128, 65, 33, 84, 36, 125, 0,
	133, 74, 0, 61, 63, 71, 0, 66, 134, 134,
	69, 78, 72, 73, 0, 0, 135, 135, 0, 64,
	130, 75, 0, 67, 70, 68, 79, 134, 81, 76,
	0, 0, -2, 0, 80, 82, 77,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 21, 3, 3, 3, 26, 28, 3,
	12, 13, 24, 22, 10, 23, 11, 25, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 9, 8,
	18, 20, 19, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 14, 3, 15, 29, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 16, 27, 17,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 5:
		//line grammar.y:157
		{
			lexGenEOF(yylex)
		}
	case 6:
		//line grammar.y:159
		{
			lexGenEOF(yylex)
		}
	case 7:
		//line grammar.y:161
		{
			lexGenEOF(yylex)
		}
	case 8:
		//line grammar.y:163
		{
			lexGenEOF(yylex)
		}
	case 9:
		//line grammar.y:168
		{
			lexPosErrorf(yylex, Pos{}, "vdl file must start with package clause")
		}
	case 10:
		//line grammar.y:170
		{
			lexVDLFile(yylex).PackageDef = NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}
		}
	case 11:
		//line grammar.y:175
		{
			lexPosErrorf(yylex, Pos{}, "config file must start with config clause")
		}
	case 12:
		//line grammar.y:177
		{
			// We allow "config" as an identifier; it is not a keyword.  So we check
			// manually to make sure the syntax is correct.
			if yyS[yypt-3].strpos.str != "config" {
				lexPosErrorf(yylex, yyS[yypt-3].strpos.pos, "config file must start with config clause")
				return 1 // Any non-zero code indicates an error
			}
			file := lexVDLFile(yylex)
			file.PackageDef = NamePos{Name: "config", Pos: yyS[yypt-3].strpos.pos}
			file.ConstDefs = []*ConstDef{{Expr: yyS[yypt-1].constexpr}}
		}
	case 20:
		//line grammar.y:205
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Pos: yyS[yypt-0].strpos.pos}})
		}
	case 21:
		//line grammar.y:210
		{
			imps := &lexVDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 40:
		//line grammar.y:249
		{
			tds := &lexVDLFile(yylex).TypeDefs
			*tds = append(*tds, &TypeDef{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 41:
		//line grammar.y:256
		{
			yyVAL.typeexpr = &TypeNamed{Name: yyS[yypt-0].strpos.str, P: yyS[yypt-0].strpos.pos}
		}
	case 42:
		//line grammar.y:258
		{
			yyVAL.typeexpr = &TypeArray{Len: int(yyS[yypt-2].intpos.int.Int64()), Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-3].pos}
		}
	case 43:
		//line grammar.y:260
		{
			yyVAL.typeexpr = &TypeList{Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-2].pos}
		}
	case 44:
		//line grammar.y:262
		{
			yyVAL.typeexpr = &TypeEnum{Labels: yyS[yypt-2].nameposes, P: yyS[yypt-4].pos}
		}
	case 45:
		//line grammar.y:264
		{
			yyVAL.typeexpr = &TypeSet{Key: yyS[yypt-1].typeexpr, P: yyS[yypt-3].pos}
		}
	case 46:
		//line grammar.y:266
		{
			yyVAL.typeexpr = &TypeMap{Key: yyS[yypt-2].typeexpr, Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-4].pos}
		}
	case 47:
		//line grammar.y:268
		{
			yyVAL.typeexpr = &TypeStruct{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 48:
		//line grammar.y:270
		{
			yyVAL.typeexpr = &TypeStruct{P: yyS[yypt-2].pos}
		}
	case 49:
		//line grammar.y:272
		{
			yyVAL.typeexpr = &TypeOneOf{Types: yyS[yypt-2].typeexprs, P: yyS[yypt-4].pos}
		}
	case 50:
		//line grammar.y:276
		{
			yyVAL.nameposes = []NamePos{yyS[yypt-0].namepos}
		}
	case 51:
		//line grammar.y:278
		{
			yyVAL.nameposes = append(yyS[yypt-2].nameposes, yyS[yypt-0].namepos)
		}
	case 52:
		//line grammar.y:282
		{
			yyVAL.namepos = NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}
		}
	case 53:
		//line grammar.y:286
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 54:
		//line grammar.y:288
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 55:
		//line grammar.y:326
		{
			if names, ok := typeListToStrList(yylex, yyS[yypt-1].typeexprs); ok {
				for _, n := range names {
					yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: n.str, Pos: n.pos}})
				}
			} else {
				lexPosErrorf(yylex, yyS[yypt-0].typeexpr.Pos(), "perhaps you forgot a comma before %q?.", yyS[yypt-0].typeexpr.String())
			}
		}
	case 56:
		//line grammar.y:338
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 57:
		//line grammar.y:340
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 58:
		//line grammar.y:344
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 59:
		//line grammar.y:346
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 60:
		//line grammar.y:352
		{
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{NamePos: NamePos{Name: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos}})
		}
	case 61:
		//line grammar.y:357
		{
			yyS[yypt-2].iface.Name, yyS[yypt-2].iface.Pos = yyS[yypt-5].strpos.str, yyS[yypt-5].strpos.pos
			ifs := &lexVDLFile(yylex).Interfaces
			*ifs = append(*ifs, yyS[yypt-2].iface)
		}
	case 62:
		//line grammar.y:365
		{
			yyVAL.iface = yyS[yypt-0].iface
		}
	case 63:
		//line grammar.y:367
		{
			yyS[yypt-2].iface.Embeds = append(yyS[yypt-2].iface.Embeds, yyS[yypt-0].iface.Embeds...)
			yyS[yypt-2].iface.Methods = append(yyS[yypt-2].iface.Methods, yyS[yypt-0].iface.Methods...)
			yyVAL.iface = yyS[yypt-2].iface
		}
	case 64:
		//line grammar.y:375
		{
			yyVAL.iface = &Interface{Methods: []*Method{{InArgs: yyS[yypt-3].fields, InStream: yyS[yypt-2].typeexprs[0], OutStream: yyS[yypt-2].typeexprs[1], OutArgs: yyS[yypt-1].fields, Tags: yyS[yypt-0].constexprs, NamePos: NamePos{Name: yyS[yypt-4].strpos.str, Pos: yyS[yypt-4].strpos.pos}}}}
		}
	case 65:
		//line grammar.y:377
		{
			yyVAL.iface = &Interface{Embeds: []*NamePos{{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}}}
		}
	case 66:
		//line grammar.y:381
		{
			yyVAL.fields = nil
		}
	case 67:
		//line grammar.y:383
		{
			yyVAL.fields = yyS[yypt-2].fields
		}
	case 68:
		//line grammar.y:387
		{
			for _, t := range yyS[yypt-2].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
		}
	case 69:
		//line grammar.y:397
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 70:
		//line grammar.y:399
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 71:
		//line grammar.y:405
		{
			yyVAL.fields = nil
		}
	case 72:
		//line grammar.y:407
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Pos: yyS[yypt-0].typeexpr.Pos()}}}
		}
	case 73:
		//line grammar.y:409
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 74:
		//line grammar.y:413
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 75:
		//line grammar.y:415
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 76:
		//line grammar.y:417
		{
			yyVAL.typeexprs = []Type{yyS[yypt-1].typeexpr, nil}
		}
	case 77:
		//line grammar.y:419
		{
			yyVAL.typeexprs = []Type{yyS[yypt-3].typeexpr, yyS[yypt-1].typeexpr}
		}
	case 78:
		//line grammar.y:423
		{
			yyVAL.constexprs = nil
		}
	case 79:
		//line grammar.y:425
		{
			yyVAL.constexprs = nil
		}
	case 80:
		//line grammar.y:427
		{
			yyVAL.constexprs = yyS[yypt-2].constexprs
		}
	case 81:
		//line grammar.y:431
		{
			yyVAL.constexprs = []ConstExpr{yyS[yypt-0].constexpr}
		}
	case 82:
		//line grammar.y:433
		{
			yyVAL.constexprs = append(yyS[yypt-2].constexprs, yyS[yypt-0].constexpr)
		}
	case 85:
		//line grammar.y:442
		{
			cds := &lexVDLFile(yylex).ConstDefs
			*cds = append(*cds, &ConstDef{Expr: yyS[yypt-0].constexpr, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 86:
		//line grammar.y:449
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 87:
		//line grammar.y:451
		{
			yyVAL.constexpr = &ConstBinaryOp{"||", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 88:
		//line grammar.y:453
		{
			yyVAL.constexpr = &ConstBinaryOp{"&&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 89:
		//line grammar.y:455
		{
			yyVAL.constexpr = &ConstBinaryOp{"<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 90:
		//line grammar.y:457
		{
			yyVAL.constexpr = &ConstBinaryOp{">", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 91:
		//line grammar.y:459
		{
			yyVAL.constexpr = &ConstBinaryOp{"<=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 92:
		//line grammar.y:461
		{
			yyVAL.constexpr = &ConstBinaryOp{">=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 93:
		//line grammar.y:463
		{
			yyVAL.constexpr = &ConstBinaryOp{"!=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 94:
		//line grammar.y:465
		{
			yyVAL.constexpr = &ConstBinaryOp{"==", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 95:
		//line grammar.y:467
		{
			yyVAL.constexpr = &ConstBinaryOp{"+", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 96:
		//line grammar.y:469
		{
			yyVAL.constexpr = &ConstBinaryOp{"-", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 97:
		//line grammar.y:471
		{
			yyVAL.constexpr = &ConstBinaryOp{"*", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 98:
		//line grammar.y:473
		{
			yyVAL.constexpr = &ConstBinaryOp{"/", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 99:
		//line grammar.y:475
		{
			yyVAL.constexpr = &ConstBinaryOp{"%", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 100:
		//line grammar.y:477
		{
			yyVAL.constexpr = &ConstBinaryOp{"|", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 101:
		//line grammar.y:479
		{
			yyVAL.constexpr = &ConstBinaryOp{"&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 102:
		//line grammar.y:481
		{
			yyVAL.constexpr = &ConstBinaryOp{"^", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 103:
		//line grammar.y:483
		{
			yyVAL.constexpr = &ConstBinaryOp{"<<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 104:
		//line grammar.y:485
		{
			yyVAL.constexpr = &ConstBinaryOp{">>", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 105:
		//line grammar.y:489
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 106:
		//line grammar.y:491
		{
			yyVAL.constexpr = &ConstUnaryOp{"!", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 107:
		//line grammar.y:493
		{
			yyVAL.constexpr = &ConstUnaryOp{"+", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 108:
		//line grammar.y:495
		{
			yyVAL.constexpr = &ConstUnaryOp{"-", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 109:
		//line grammar.y:497
		{
			yyVAL.constexpr = &ConstUnaryOp{"^", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 110:
		//line grammar.y:499
		{
			yyVAL.constexpr = &ConstTypeConv{yyS[yypt-3].typeexpr, yyS[yypt-1].constexpr, yyS[yypt-3].typeexpr.Pos()}
		}
	case 111:
		//line grammar.y:504
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 112:
		//line grammar.y:506
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 113:
		//line grammar.y:508
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 114:
		//line grammar.y:510
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].imagpos.imag, yyS[yypt-0].imagpos.pos}
		}
	case 115:
		//line grammar.y:512
		{
			yyVAL.constexpr = &ConstNamed{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 116:
		//line grammar.y:514
		{
			yyVAL.constexpr = yyS[yypt-0].complit
		}
	case 117:
		//line grammar.y:516
		{
			yyVAL.constexpr = yyS[yypt-1].constexpr
		}
	case 118:
		//line grammar.y:520
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-2].typeexpr, nil, yyS[yypt-1].pos}
		}
	case 119:
		//line grammar.y:522
		{
			yyVAL.complit = &ConstCompositeLit{yyS[yypt-4].typeexpr, yyS[yypt-2].kvlits, yyS[yypt-3].pos}
		}
	case 120:
		//line grammar.y:526
		{
			yyVAL.kvlits = []KVLit{yyS[yypt-0].kvlit}
		}
	case 121:
		//line grammar.y:528
		{
			yyVAL.kvlits = append(yyS[yypt-2].kvlits, yyS[yypt-0].kvlit)
		}
	case 122:
		//line grammar.y:532
		{
			yyVAL.kvlit = KVLit{Value: yyS[yypt-0].constexpr}
		}
	case 123:
		//line grammar.y:534
		{
			yyVAL.kvlit = KVLit{Key: yyS[yypt-2].constexpr, Value: yyS[yypt-0].constexpr}
		}
	case 126:
		//line grammar.y:543
		{
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{NamePos: NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}})
		}
	case 127:
		//line grammar.y:548
		{
			ensureNonEmptyToken(yylex, yyS[yypt-0].strpos, "error id must be non-empty if specified")
			eds := &lexVDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{ID: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 128:
		//line grammar.y:559
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 129:
		//line grammar.y:561
		{
			yyVAL.strpos = strPos{yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, yyS[yypt-2].strpos.pos}
		}
	case 130:
		//line grammar.y:565
		{
			yyVAL.typeexpr = nil
		}
	case 131:
		//line grammar.y:567
		{
			yyVAL.typeexpr = yyS[yypt-0].typeexpr
		}
	}
	goto yystack /* stack new state and value */
}
