// Copyright 2016 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: vdltest

package vdltest

import (
	"fmt"
	"v.io/v23/vdl"
	"v.io/v23/verror"
)

var _ = __VDLInit() // Must be first; see __VDLInit comments for details.

//////////////////////////////////////////////////
// Type definitions

// Entry represents a test entry, which contains a target and source value.
// Each test tries to convert the source value to the type of the target value.
// This conversion will either pass or fail; AllPass returns passing entries,
// while AllFail returns failing entries.
//
// An entry may either be canonical or not.  For a given canonical entry C,
// C.Target==C.Source always holds, and in addition, C.Source is the canonical
// representation of the value.
type Entry struct {
	IsCanonical bool
	Label       string      // Label describes the entry, e.g. Full, Random...
	TargetLabel string      // TargetLabel describes the Target value
	Target      interface{} // Target value for conversion test
	SourceLabel string      // SourceLabel describes the Source value
	Source      interface{} // Source value for conversion test
}

func (Entry) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.Entry"`
}) {
}

func (x Entry) VDLIsZero() bool {
	return x == Entry{}
}

func (x Entry) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*Entry)(nil)).Elem()); err != nil {
		return err
	}
	if x.IsCanonical {
		if err := enc.NextField("IsCanonical"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.BoolType); err != nil {
			return err
		}
		if err := enc.EncodeBool(x.IsCanonical); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.Label != "" {
		if err := enc.NextField("Label"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(x.Label); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.TargetLabel != "" {
		if err := enc.NextField("TargetLabel"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(x.TargetLabel); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.Target != nil {
		if err := enc.NextField("Target"); err != nil {
			return err
		}
		if err := vdl.Write(enc, x.Target); err != nil {
			return err
		}
	}
	if x.SourceLabel != "" {
		if err := enc.NextField("SourceLabel"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(x.SourceLabel); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.Source != nil {
		if err := enc.NextField("Source"); err != nil {
			return err
		}
		if err := vdl.Write(enc, x.Source); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *Entry) VDLRead(dec vdl.Decoder) error {
	*x = Entry{}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "IsCanonical":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.IsCanonical, err = dec.DecodeBool(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "Label":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.Label, err = dec.DecodeString(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "TargetLabel":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.TargetLabel, err = dec.DecodeString(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "Target":
			var readAny interface{}
			if err := vdl.Read(dec, &readAny); err != nil {
				return err
			}
			x.Target = readAny
		case "SourceLabel":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.SourceLabel, err = dec.DecodeString(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "Source":
			var readAny interface{}
			if err := vdl.Read(dec, &readAny); err != nil {
				return err
			}
			x.Source = readAny
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type VBool bool

func (VBool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VBool"`
}) {
}

func (x VBool) VDLIsZero() bool {
	return bool(!x)
}

func (x VBool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VBool)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeBool(bool(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VBool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeBool()
	if err != nil {
		return err
	}
	*x = VBool(tmp)
	return dec.FinishValue()
}

type VString string

func (VString) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VString"`
}) {
}

func (x VString) VDLIsZero() bool {
	return x == ""
}

func (x VString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VString)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeString(string(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VString) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeString()
	if err != nil {
		return err
	}
	*x = VString(tmp)
	return dec.FinishValue()
}

type VByte byte

func (VByte) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VByte"`
}) {
}

func (x VByte) VDLIsZero() bool {
	return x == 0
}

func (x VByte) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VByte)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeUint(uint64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VByte) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeUint(8)
	if err != nil {
		return err
	}
	*x = VByte(tmp)
	return dec.FinishValue()
}

type VEnumAbc int

const (
	VEnumAbcA VEnumAbc = iota
	VEnumAbcB
	VEnumAbcC
)

// VEnumAbcAll holds all labels for VEnumAbc.
var VEnumAbcAll = [...]VEnumAbc{VEnumAbcA, VEnumAbcB, VEnumAbcC}

// VEnumAbcFromString creates a VEnumAbc from a string label.
func VEnumAbcFromString(label string) (x VEnumAbc, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *VEnumAbc) Set(label string) error {
	switch label {
	case "A", "a":
		*x = VEnumAbcA
		return nil
	case "B", "b":
		*x = VEnumAbcB
		return nil
	case "C", "c":
		*x = VEnumAbcC
		return nil
	}
	*x = -1
	return fmt.Errorf("unknown label %q in vdltest.VEnumAbc", label)
}

// String returns the string label of x.
func (x VEnumAbc) String() string {
	switch x {
	case VEnumAbcA:
		return "A"
	case VEnumAbcB:
		return "B"
	case VEnumAbcC:
		return "C"
	}
	return ""
}

func (VEnumAbc) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VEnumAbc"`
	Enum struct{ A, B, C string }
}) {
}

func (x VEnumAbc) VDLIsZero() bool {
	return x == VEnumAbcA
}

func (x VEnumAbc) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VEnumAbc)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeString(x.String()); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VEnumAbc) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	enum, err := dec.DecodeString()
	if err != nil {
		return err
	}
	if err := x.Set(enum); err != nil {
		return err
	}
	return dec.FinishValue()
}

type VEnumBcd int

const (
	VEnumBcdB VEnumBcd = iota
	VEnumBcdC
	VEnumBcdD
)

// VEnumBcdAll holds all labels for VEnumBcd.
var VEnumBcdAll = [...]VEnumBcd{VEnumBcdB, VEnumBcdC, VEnumBcdD}

// VEnumBcdFromString creates a VEnumBcd from a string label.
func VEnumBcdFromString(label string) (x VEnumBcd, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *VEnumBcd) Set(label string) error {
	switch label {
	case "B", "b":
		*x = VEnumBcdB
		return nil
	case "C", "c":
		*x = VEnumBcdC
		return nil
	case "D", "d":
		*x = VEnumBcdD
		return nil
	}
	*x = -1
	return fmt.Errorf("unknown label %q in vdltest.VEnumBcd", label)
}

// String returns the string label of x.
func (x VEnumBcd) String() string {
	switch x {
	case VEnumBcdB:
		return "B"
	case VEnumBcdC:
		return "C"
	case VEnumBcdD:
		return "D"
	}
	return ""
}

func (VEnumBcd) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VEnumBcd"`
	Enum struct{ B, C, D string }
}) {
}

func (x VEnumBcd) VDLIsZero() bool {
	return x == VEnumBcdB
}

func (x VEnumBcd) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VEnumBcd)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeString(x.String()); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VEnumBcd) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	enum, err := dec.DecodeString()
	if err != nil {
		return err
	}
	if err := x.Set(enum); err != nil {
		return err
	}
	return dec.FinishValue()
}

type VStructEmpty struct {
}

func (VStructEmpty) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructEmpty"`
}) {
}

func (x VStructEmpty) VDLIsZero() bool {
	return x == VStructEmpty{}
}

func (x VStructEmpty) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructEmpty)(nil)).Elem()); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructEmpty) VDLRead(dec vdl.Decoder) error {
	*x = VStructEmpty{}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type VUint16 uint16

func (VUint16) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VUint16"`
}) {
}

func (x VUint16) VDLIsZero() bool {
	return x == 0
}

func (x VUint16) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUint16)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeUint(uint64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VUint16) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeUint(16)
	if err != nil {
		return err
	}
	*x = VUint16(tmp)
	return dec.FinishValue()
}

type VUint32 uint32

func (VUint32) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VUint32"`
}) {
}

func (x VUint32) VDLIsZero() bool {
	return x == 0
}

func (x VUint32) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUint32)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeUint(uint64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VUint32) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeUint(32)
	if err != nil {
		return err
	}
	*x = VUint32(tmp)
	return dec.FinishValue()
}

type VUint64 uint64

func (VUint64) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VUint64"`
}) {
}

func (x VUint64) VDLIsZero() bool {
	return x == 0
}

func (x VUint64) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUint64)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeUint(uint64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VUint64) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeUint(64)
	if err != nil {
		return err
	}
	*x = VUint64(tmp)
	return dec.FinishValue()
}

type VInt8 int8

func (VInt8) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VInt8"`
}) {
}

func (x VInt8) VDLIsZero() bool {
	return x == 0
}

func (x VInt8) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VInt8)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeInt(int64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VInt8) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeInt(8)
	if err != nil {
		return err
	}
	*x = VInt8(tmp)
	return dec.FinishValue()
}

type VInt16 int16

func (VInt16) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VInt16"`
}) {
}

func (x VInt16) VDLIsZero() bool {
	return x == 0
}

func (x VInt16) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VInt16)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeInt(int64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VInt16) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeInt(16)
	if err != nil {
		return err
	}
	*x = VInt16(tmp)
	return dec.FinishValue()
}

type VInt32 int32

func (VInt32) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VInt32"`
}) {
}

func (x VInt32) VDLIsZero() bool {
	return x == 0
}

func (x VInt32) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VInt32)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeInt(int64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VInt32) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeInt(32)
	if err != nil {
		return err
	}
	*x = VInt32(tmp)
	return dec.FinishValue()
}

type VInt64 int64

func (VInt64) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VInt64"`
}) {
}

func (x VInt64) VDLIsZero() bool {
	return x == 0
}

func (x VInt64) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VInt64)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeInt(int64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VInt64) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeInt(64)
	if err != nil {
		return err
	}
	*x = VInt64(tmp)
	return dec.FinishValue()
}

type VFloat32 float32

func (VFloat32) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VFloat32"`
}) {
}

func (x VFloat32) VDLIsZero() bool {
	return x == 0
}

func (x VFloat32) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VFloat32)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeFloat(float64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VFloat32) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeFloat(32)
	if err != nil {
		return err
	}
	*x = VFloat32(tmp)
	return dec.FinishValue()
}

type VFloat64 float64

func (VFloat64) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VFloat64"`
}) {
}

func (x VFloat64) VDLIsZero() bool {
	return x == 0
}

func (x VFloat64) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VFloat64)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeFloat(float64(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VFloat64) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	tmp, err := dec.DecodeFloat(64)
	if err != nil {
		return err
	}
	*x = VFloat64(tmp)
	return dec.FinishValue()
}

type VArray3_Any [3]interface{}

func (VArray3_Any) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_Any"`
}) {
}

func (x VArray3_Any) VDLIsZero() bool {
	return x == VArray3_Any{}
}

func (x VArray3_Any) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_Any)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := vdl.Write(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_Any) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		var readAny interface{}
		if err := vdl.Read(dec, &readAny); err != nil {
			return err
		}
		x[index] = readAny
		index++
	}
}

type VArray3_Bool [3]bool

func (VArray3_Bool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_Bool"`
}) {
}

func (x VArray3_Bool) VDLIsZero() bool {
	return x == VArray3_Bool{}
}

func (x VArray3_Bool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_Bool)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.BoolType); err != nil {
			return err
		}
		if err := enc.EncodeBool(x[i]); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_Bool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if x[index], err = dec.DecodeBool(); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		index++
	}
}

type VArray3_VBool [3]VBool

func (VArray3_VBool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_VBool"`
}) {
}

func (x VArray3_VBool) VDLIsZero() bool {
	return x == VArray3_VBool{}
}

func (x VArray3_VBool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_VBool)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_VBool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray1_String [1]string

func (VArray1_String) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_String"`
}) {
}

func (x VArray1_String) VDLIsZero() bool {
	return x == VArray1_String{}
}

func (x VArray1_String) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_String)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(x[i]); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_String) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if x[index], err = dec.DecodeString(); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		index++
	}
}

type VArray3_VString [3]VString

func (VArray3_VString) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_VString"`
}) {
}

func (x VArray3_VString) VDLIsZero() bool {
	return x == VArray3_VString{}
}

func (x VArray3_VString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_VString)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_VString) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray2_TypeObject [2]*vdl.Type

func (VArray2_TypeObject) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray2_TypeObject"`
}) {
}

func (x VArray2_TypeObject) VDLIsZero() bool {
	for _, elem := range x {
		if elem != nil && elem != vdl.AnyType {
			return false
		}
	}
	return true
}

func (x VArray2_TypeObject) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray2_TypeObject)(nil))); err != nil {
		return err
	}
	for i := 0; i < 2; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_TypeObject) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if x[index], err = dec.DecodeTypeObject(); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		index++
	}
}

type VArray1_Byte [1]byte

func (VArray1_Byte) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_Byte"`
}) {
}

func (x VArray1_Byte) VDLIsZero() bool {
	return x == VArray1_Byte{}
}

func (x VArray1_Byte) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_Byte)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeBytes([]byte(x[:])); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_Byte) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	bytes := x[:]
	if err := dec.DecodeBytes(1, &bytes); err != nil {
		return err
	}
	return dec.FinishValue()
}

type VArray2_VByte [2]VByte

func (VArray2_VByte) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray2_VByte"`
}) {
}

func (x VArray2_VByte) VDLIsZero() bool {
	return x == VArray2_VByte{}
}

func (x VArray2_VByte) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray2_VByte)(nil))); err != nil {
		return err
	}
	for i := 0; i < 2; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_VByte) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray2_VEnumAbc [2]VEnumAbc

func (VArray2_VEnumAbc) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray2_VEnumAbc"`
}) {
}

func (x VArray2_VEnumAbc) VDLIsZero() bool {
	return x == VArray2_VEnumAbc{}
}

func (x VArray2_VEnumAbc) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray2_VEnumAbc)(nil))); err != nil {
		return err
	}
	for i := 0; i < 2; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_VEnumAbc) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray2_VEnumBcd [2]VEnumBcd

func (VArray2_VEnumBcd) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray2_VEnumBcd"`
}) {
}

func (x VArray2_VEnumBcd) VDLIsZero() bool {
	return x == VArray2_VEnumBcd{}
}

func (x VArray2_VEnumBcd) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray2_VEnumBcd)(nil))); err != nil {
		return err
	}
	for i := 0; i < 2; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_VEnumBcd) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray1_VStructEmpty [1]VStructEmpty

func (VArray1_VStructEmpty) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_VStructEmpty"`
}) {
}

func (x VArray1_VStructEmpty) VDLIsZero() bool {
	return x == VArray1_VStructEmpty{}
}

func (x VArray1_VStructEmpty) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_VStructEmpty)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_VStructEmpty) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray1_Error [1]error

func (VArray1_Error) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_Error"`
}) {
}

func (x VArray1_Error) VDLIsZero() bool {
	return x == VArray1_Error{}
}

func (x VArray1_Error) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_Error)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := verror.VDLWrite(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_Error) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := verror.VDLRead(dec, &x[index]); err != nil {
			return err
		}
		index++
	}
}

type VArray2_Uint32 [2]uint32

func (VArray2_Uint32) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray2_Uint32"`
}) {
}

func (x VArray2_Uint32) VDLIsZero() bool {
	return x == VArray2_Uint32{}
}

func (x VArray2_Uint32) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray2_Uint32)(nil))); err != nil {
		return err
	}
	for i := 0; i < 2; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Uint32Type); err != nil {
			return err
		}
		if err := enc.EncodeUint(uint64(x[i])); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_Uint32) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeUint(32)
		if err != nil {
			return err
		}
		x[index] = uint32(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		index++
	}
}

type VArray1_Uint64 [1]uint64

func (VArray1_Uint64) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_Uint64"`
}) {
}

func (x VArray1_Uint64) VDLIsZero() bool {
	return x == VArray1_Uint64{}
}

func (x VArray1_Uint64) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_Uint64)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Uint64Type); err != nil {
			return err
		}
		if err := enc.EncodeUint(x[i]); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_Uint64) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if x[index], err = dec.DecodeUint(64); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		index++
	}
}

type VArray3_Int64 [3]int64

func (VArray3_Int64) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_Int64"`
}) {
}

func (x VArray3_Int64) VDLIsZero() bool {
	return x == VArray3_Int64{}
}

func (x VArray3_Int64) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_Int64)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Int64Type); err != nil {
			return err
		}
		if err := enc.EncodeInt(x[i]); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_Int64) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if x[index], err = dec.DecodeInt(64); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		index++
	}
}

type VArray3_OptVStructEmpty [3]*VStructEmpty

func (VArray3_OptVStructEmpty) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_OptVStructEmpty"`
}) {
}

func (x VArray3_OptVStructEmpty) VDLIsZero() bool {
	return x == VArray3_OptVStructEmpty{}
}

func (x VArray3_OptVStructEmpty) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_OptVStructEmpty)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if x[i] == nil {
			if err := enc.NilValue(vdl.TypeOf((**VStructEmpty)(nil))); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()

			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}

		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_OptVStructEmpty) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x[index]), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", x[index], dec.Type())
			}
			x[index] = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			x[index] = new(VStructEmpty)
			dec.IgnoreNextStartValue()
			if err := x[index].VDLRead(dec); err != nil {
				return err
			}
		}
		index++
	}
}

type VList_Any []interface{}

func (VList_Any) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_Any"`
}) {
}

func (x VList_Any) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_Any) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_Any)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := vdl.Write(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Any) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_Any, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem interface{}
		var readAny interface{}
		if err := vdl.Read(dec, &readAny); err != nil {
			return err
		}
		elem = readAny
		*x = append(*x, elem)
	}
}

type VList_Bool []bool

func (VList_Bool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_Bool"`
}) {
}

func (x VList_Bool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_Bool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_Bool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.BoolType); err != nil {
			return err
		}
		if err := enc.EncodeBool(x[i]); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Bool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_Bool, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem bool
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if elem, err = dec.DecodeBool(); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VBool []VBool

func (VList_VBool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VBool"`
}) {
}

func (x VList_VBool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VBool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VBool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VBool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VBool, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VBool
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_String []string

func (VList_String) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_String"`
}) {
}

func (x VList_String) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_String) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_String)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(x[i]); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_String) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_String, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem string
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if elem, err = dec.DecodeString(); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VString []VString

func (VList_VString) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VString"`
}) {
}

func (x VList_VString) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VString)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VString) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VString, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VString
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_TypeObject []*vdl.Type

func (VList_TypeObject) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_TypeObject"`
}) {
}

func (x VList_TypeObject) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_TypeObject) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_TypeObject)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_TypeObject) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_TypeObject, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem *vdl.Type
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if elem, err = dec.DecodeTypeObject(); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_Byte []byte

func (VList_Byte) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_Byte"`
}) {
}

func (x VList_Byte) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_Byte) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_Byte)(nil))); err != nil {
		return err
	}
	if err := enc.EncodeBytes([]byte(x)); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Byte) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	var bytes []byte
	if err := dec.DecodeBytes(-1, &bytes); err != nil {
		return err
	}
	*x = bytes
	return dec.FinishValue()
}

type VList_VByte []VByte

func (VList_VByte) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VByte"`
}) {
}

func (x VList_VByte) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VByte) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VByte)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VByte) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VByte, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VByte
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VEnumAbc []VEnumAbc

func (VList_VEnumAbc) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VEnumAbc"`
}) {
}

func (x VList_VEnumAbc) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VEnumAbc) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VEnumAbc)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VEnumAbc) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VEnumAbc, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VEnumAbc
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VEnumBcd []VEnumBcd

func (VList_VEnumBcd) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VEnumBcd"`
}) {
}

func (x VList_VEnumBcd) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VEnumBcd) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VEnumBcd)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VEnumBcd) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VEnumBcd, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VEnumBcd
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VStructEmpty []VStructEmpty

func (VList_VStructEmpty) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VStructEmpty"`
}) {
}

func (x VList_VStructEmpty) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VStructEmpty) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VStructEmpty)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VStructEmpty) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VStructEmpty, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VStructEmpty
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_Error []error

func (VList_Error) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_Error"`
}) {
}

func (x VList_Error) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_Error) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_Error)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := verror.VDLWrite(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Error) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_Error, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem error
		if err := verror.VDLRead(dec, &elem); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VUint32 []VUint32

func (VList_VUint32) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VUint32"`
}) {
}

func (x VList_VUint32) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VUint32) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VUint32)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VUint32) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VUint32, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VUint32
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VInt32 []VInt32

func (VList_VInt32) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VInt32"`
}) {
}

func (x VList_VInt32) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VInt32) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VInt32)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VInt32) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VInt32, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VInt32
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VFloat64 []VFloat64

func (VList_VFloat64) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VFloat64"`
}) {
}

func (x VList_VFloat64) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VFloat64) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VFloat64)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VFloat64) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VFloat64, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VFloat64
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_OptVStructEmpty []*VStructEmpty

func (VList_OptVStructEmpty) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_OptVStructEmpty"`
}) {
}

func (x VList_OptVStructEmpty) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_OptVStructEmpty) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_OptVStructEmpty)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if x[i] == nil {
			if err := enc.NilValue(vdl.TypeOf((**VStructEmpty)(nil))); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()

			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}

		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_OptVStructEmpty) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_OptVStructEmpty, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem *VStructEmpty
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(elem), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", elem, dec.Type())
			}
			elem = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			elem = new(VStructEmpty)
			dec.IgnoreNextStartValue()
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = append(*x, elem)
	}
}

type VSet_Bool map[bool]struct{}

func (VSet_Bool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_Bool"`
}) {
}

func (x VSet_Bool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_Bool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_Bool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.BoolType); err != nil {
			return err
		}
		if err := enc.EncodeBool(key); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_Bool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_Bool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_Bool, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key bool
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if key, err = dec.DecodeBool(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_Bool)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_VBool map[VBool]struct{}

func (VSet_VBool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VBool"`
}) {
}

func (x VSet_VBool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VBool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VBool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VBool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VBool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VBool, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VBool
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VBool)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_String map[string]struct{}

func (VSet_String) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_String"`
}) {
}

func (x VSet_String) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_String) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_String)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(key); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_String) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_String
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_String, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key string
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if key, err = dec.DecodeString(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_String)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_VString map[VString]struct{}

func (VSet_VString) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VString"`
}) {
}

func (x VSet_VString) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VString)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VString) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VString
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VString, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VString
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VString)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_Byte map[byte]struct{}

func (VSet_Byte) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_Byte"`
}) {
}

func (x VSet_Byte) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_Byte) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_Byte)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.ByteType); err != nil {
			return err
		}
		if err := enc.EncodeUint(uint64(key)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_Byte) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_Byte
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_Byte, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key byte
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeUint(8)
			if err != nil {
				return err
			}
			key = byte(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_Byte)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_VByte map[VByte]struct{}

func (VSet_VByte) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VByte"`
}) {
}

func (x VSet_VByte) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VByte) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VByte)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VByte) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VByte
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VByte, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VByte
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VByte)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_VEnumAbc map[VEnumAbc]struct{}

func (VSet_VEnumAbc) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VEnumAbc"`
}) {
}

func (x VSet_VEnumAbc) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VEnumAbc) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VEnumAbc)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VEnumAbc) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VEnumAbc
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VEnumAbc, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VEnumAbc
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VEnumAbc)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_VEnumBcd map[VEnumBcd]struct{}

func (VSet_VEnumBcd) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VEnumBcd"`
}) {
}

func (x VSet_VEnumBcd) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VEnumBcd) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VEnumBcd)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VEnumBcd) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VEnumBcd
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VEnumBcd, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VEnumBcd
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VEnumBcd)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_VStructEmpty map[VStructEmpty]struct{}

func (VSet_VStructEmpty) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VStructEmpty"`
}) {
}

func (x VSet_VStructEmpty) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VStructEmpty) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VStructEmpty)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VStructEmpty) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VStructEmpty
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VStructEmpty, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VStructEmpty
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VStructEmpty)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_Int64 map[int64]struct{}

func (VSet_Int64) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_Int64"`
}) {
}

func (x VSet_Int64) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_Int64) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_Int64)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Int64Type); err != nil {
			return err
		}
		if err := enc.EncodeInt(key); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_Int64) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_Int64
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_Int64, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key int64
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if key, err = dec.DecodeInt(64); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_Int64)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_Float32 map[float32]struct{}

func (VSet_Float32) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_Float32"`
}) {
}

func (x VSet_Float32) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_Float32) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_Float32)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Float32Type); err != nil {
			return err
		}
		if err := enc.EncodeFloat(float64(key)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_Float32) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_Float32
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_Float32, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key float32
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeFloat(32)
			if err != nil {
				return err
			}
			key = float32(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_Float32)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_VFloat64 map[VFloat64]struct{}

func (VSet_VFloat64) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VFloat64"`
}) {
}

func (x VSet_VFloat64) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VFloat64) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VFloat64)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VFloat64) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VFloat64
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VFloat64, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VFloat64
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VFloat64)
		}
		tmpMap[key] = struct{}{}
	}
}

type VMap_Bool_Bool map[bool]bool

func (VMap_Bool_Bool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_Bool_Bool"`
}) {
}

func (x VMap_Bool_Bool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_Bool_Bool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_Bool_Bool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.BoolType); err != nil {
			return err
		}
		if err := enc.EncodeBool(key); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.BoolType); err != nil {
			return err
		}
		if err := enc.EncodeBool(elem); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_Bool_Bool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_Bool_Bool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_Bool_Bool, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key bool
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if key, err = dec.DecodeBool(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		var elem bool
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if elem, err = dec.DecodeBool(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_Bool_Bool)
		}
		tmpMap[key] = elem
	}
}

type VMap_VBool_VBool map[VBool]VBool

func (VMap_VBool_VBool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VBool_VBool"`
}) {
}

func (x VMap_VBool_VBool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VBool_VBool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VBool_VBool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VBool_VBool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VBool_VBool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VBool_VBool, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VBool
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VBool
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VBool_VBool)
		}
		tmpMap[key] = elem
	}
}

type VMap_String_String map[string]string

func (VMap_String_String) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_String_String"`
}) {
}

func (x VMap_String_String) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_String_String) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_String_String)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(key); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(elem); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_String_String) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_String_String
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_String_String, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key string
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if key, err = dec.DecodeString(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		var elem string
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if elem, err = dec.DecodeString(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_String_String)
		}
		tmpMap[key] = elem
	}
}

type VMap_VString_VString map[VString]VString

func (VMap_VString_VString) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VString_VString"`
}) {
}

func (x VMap_VString_VString) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VString_VString) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VString_VString)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VString_VString) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VString_VString
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VString_VString, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VString
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VString
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VString_VString)
		}
		tmpMap[key] = elem
	}
}

type VMap_Byte_Byte map[byte]byte

func (VMap_Byte_Byte) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_Byte_Byte"`
}) {
}

func (x VMap_Byte_Byte) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_Byte_Byte) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_Byte_Byte)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.ByteType); err != nil {
			return err
		}
		if err := enc.EncodeUint(uint64(key)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.ByteType); err != nil {
			return err
		}
		if err := enc.EncodeUint(uint64(elem)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_Byte_Byte) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_Byte_Byte
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_Byte_Byte, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key byte
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeUint(8)
			if err != nil {
				return err
			}
			key = byte(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		var elem byte
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeUint(8)
			if err != nil {
				return err
			}
			elem = byte(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_Byte_Byte)
		}
		tmpMap[key] = elem
	}
}

type VMap_VByte_VByte map[VByte]VByte

func (VMap_VByte_VByte) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VByte_VByte"`
}) {
}

func (x VMap_VByte_VByte) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VByte_VByte) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VByte_VByte)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VByte_VByte) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VByte_VByte
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VByte_VByte, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VByte
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VByte
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VByte_VByte)
		}
		tmpMap[key] = elem
	}
}

type VMap_VEnumAbc_VEnumAbc map[VEnumAbc]VEnumAbc

func (VMap_VEnumAbc_VEnumAbc) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VEnumAbc_VEnumAbc"`
}) {
}

func (x VMap_VEnumAbc_VEnumAbc) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VEnumAbc_VEnumAbc) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VEnumAbc_VEnumAbc)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VEnumAbc_VEnumAbc) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VEnumAbc_VEnumAbc
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VEnumAbc_VEnumAbc, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VEnumAbc
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VEnumAbc
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VEnumAbc_VEnumAbc)
		}
		tmpMap[key] = elem
	}
}

type VMap_VEnumBcd_VEnumBcd map[VEnumBcd]VEnumBcd

func (VMap_VEnumBcd_VEnumBcd) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VEnumBcd_VEnumBcd"`
}) {
}

func (x VMap_VEnumBcd_VEnumBcd) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VEnumBcd_VEnumBcd) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VEnumBcd_VEnumBcd)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VEnumBcd_VEnumBcd) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VEnumBcd_VEnumBcd
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VEnumBcd_VEnumBcd, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VEnumBcd
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VEnumBcd
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VEnumBcd_VEnumBcd)
		}
		tmpMap[key] = elem
	}
}

type VMap_VStructEmpty_VStructEmpty map[VStructEmpty]VStructEmpty

func (VMap_VStructEmpty_VStructEmpty) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VStructEmpty_VStructEmpty"`
}) {
}

func (x VMap_VStructEmpty_VStructEmpty) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VStructEmpty_VStructEmpty) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VStructEmpty_VStructEmpty)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VStructEmpty_VStructEmpty) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VStructEmpty_VStructEmpty
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VStructEmpty_VStructEmpty, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VStructEmpty
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VStructEmpty
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VStructEmpty_VStructEmpty)
		}
		tmpMap[key] = elem
	}
}

type VMap_VInt16_VInt16 map[VInt16]VInt16

func (VMap_VInt16_VInt16) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VInt16_VInt16"`
}) {
}

func (x VMap_VInt16_VInt16) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VInt16_VInt16) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VInt16_VInt16)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VInt16_VInt16) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VInt16_VInt16
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VInt16_VInt16, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VInt16
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VInt16
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VInt16_VInt16)
		}
		tmpMap[key] = elem
	}
}

type VMap_VInt32_VInt32 map[VInt32]VInt32

func (VMap_VInt32_VInt32) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VInt32_VInt32"`
}) {
}

func (x VMap_VInt32_VInt32) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VInt32_VInt32) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VInt32_VInt32)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VInt32_VInt32) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VInt32_VInt32
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VInt32_VInt32, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VInt32
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VInt32
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VInt32_VInt32)
		}
		tmpMap[key] = elem
	}
}

type VMap_Float64_Float64 map[float64]float64

func (VMap_Float64_Float64) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_Float64_Float64"`
}) {
}

func (x VMap_Float64_Float64) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_Float64_Float64) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_Float64_Float64)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Float64Type); err != nil {
			return err
		}
		if err := enc.EncodeFloat(key); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Float64Type); err != nil {
			return err
		}
		if err := enc.EncodeFloat(elem); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_Float64_Float64) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_Float64_Float64
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_Float64_Float64, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key float64
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if key, err = dec.DecodeFloat(64); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		var elem float64
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if elem, err = dec.DecodeFloat(64); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_Float64_Float64)
		}
		tmpMap[key] = elem
	}
}

type VStructDepth1_All struct {
	F0  interface{}
	F1  bool
	F2  VBool
	F3  string
	F4  VString
	F5  *vdl.Type
	F6  byte
	F7  VByte
	F8  VEnumAbc
	F9  VEnumBcd
	F10 VStructEmpty
	F11 error
	F12 uint16
	F13 VUint16
	F14 uint32
	F15 VUint32
	F16 uint64
	F17 VUint64
	F18 int8
	F19 VInt8
	F20 int16
	F21 VInt16
	F22 int32
	F23 VInt32
	F24 int64
	F25 VInt64
	F26 float32
	F27 VFloat32
	F28 float64
	F29 VFloat64
	F30 *VStructEmpty
}

func (VStructDepth1_All) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructDepth1_All"`
}) {
}

func (x VStructDepth1_All) VDLIsZero() bool {
	if x.F0 != nil {
		return false
	}
	if x.F1 {
		return false
	}
	if x.F2 {
		return false
	}
	if x.F3 != "" {
		return false
	}
	if x.F4 != "" {
		return false
	}
	if x.F5 != nil && x.F5 != vdl.AnyType {
		return false
	}
	if x.F6 != 0 {
		return false
	}
	if x.F7 != 0 {
		return false
	}
	if x.F8 != VEnumAbcA {
		return false
	}
	if x.F9 != VEnumBcdB {
		return false
	}
	if x.F10 != (VStructEmpty{}) {
		return false
	}
	if x.F11 != nil {
		return false
	}
	if x.F12 != 0 {
		return false
	}
	if x.F13 != 0 {
		return false
	}
	if x.F14 != 0 {
		return false
	}
	if x.F15 != 0 {
		return false
	}
	if x.F16 != 0 {
		return false
	}
	if x.F17 != 0 {
		return false
	}
	if x.F18 != 0 {
		return false
	}
	if x.F19 != 0 {
		return false
	}
	if x.F20 != 0 {
		return false
	}
	if x.F21 != 0 {
		return false
	}
	if x.F22 != 0 {
		return false
	}
	if x.F23 != 0 {
		return false
	}
	if x.F24 != 0 {
		return false
	}
	if x.F25 != 0 {
		return false
	}
	if x.F26 != 0 {
		return false
	}
	if x.F27 != 0 {
		return false
	}
	if x.F28 != 0 {
		return false
	}
	if x.F29 != 0 {
		return false
	}
	if x.F30 != nil {
		return false
	}
	return true
}

func (x VStructDepth1_All) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructDepth1_All)(nil)).Elem()); err != nil {
		return err
	}
	if x.F0 != nil {
		if err := enc.NextField("F0"); err != nil {
			return err
		}
		if err := vdl.Write(enc, x.F0); err != nil {
			return err
		}
	}
	if x.F1 {
		if err := enc.NextField("F1"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.BoolType); err != nil {
			return err
		}
		if err := enc.EncodeBool(x.F1); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F2 {
		if err := enc.NextField("F2"); err != nil {
			return err
		}
		if err := x.F2.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F3 != "" {
		if err := enc.NextField("F3"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(x.F3); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F4 != "" {
		if err := enc.NextField("F4"); err != nil {
			return err
		}
		if err := x.F4.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F5 != nil && x.F5 != vdl.AnyType {
		if err := enc.NextField("F5"); err != nil {
			return err
		}
		if err := x.F5.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F6 != 0 {
		if err := enc.NextField("F6"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.ByteType); err != nil {
			return err
		}
		if err := enc.EncodeUint(uint64(x.F6)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F7 != 0 {
		if err := enc.NextField("F7"); err != nil {
			return err
		}
		if err := x.F7.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F8 != VEnumAbcA {
		if err := enc.NextField("F8"); err != nil {
			return err
		}
		if err := x.F8.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F9 != VEnumBcdB {
		if err := enc.NextField("F9"); err != nil {
			return err
		}
		if err := x.F9.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F10 != (VStructEmpty{}) {
		if err := enc.NextField("F10"); err != nil {
			return err
		}
		if err := x.F10.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F11 != nil {
		if err := enc.NextField("F11"); err != nil {
			return err
		}
		if err := verror.VDLWrite(enc, x.F11); err != nil {
			return err
		}
	}
	if x.F12 != 0 {
		if err := enc.NextField("F12"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Uint16Type); err != nil {
			return err
		}
		if err := enc.EncodeUint(uint64(x.F12)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F13 != 0 {
		if err := enc.NextField("F13"); err != nil {
			return err
		}
		if err := x.F13.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F14 != 0 {
		if err := enc.NextField("F14"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Uint32Type); err != nil {
			return err
		}
		if err := enc.EncodeUint(uint64(x.F14)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F15 != 0 {
		if err := enc.NextField("F15"); err != nil {
			return err
		}
		if err := x.F15.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F16 != 0 {
		if err := enc.NextField("F16"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Uint64Type); err != nil {
			return err
		}
		if err := enc.EncodeUint(x.F16); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F17 != 0 {
		if err := enc.NextField("F17"); err != nil {
			return err
		}
		if err := x.F17.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F18 != 0 {
		if err := enc.NextField("F18"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Int8Type); err != nil {
			return err
		}
		if err := enc.EncodeInt(int64(x.F18)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F19 != 0 {
		if err := enc.NextField("F19"); err != nil {
			return err
		}
		if err := x.F19.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F20 != 0 {
		if err := enc.NextField("F20"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Int16Type); err != nil {
			return err
		}
		if err := enc.EncodeInt(int64(x.F20)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F21 != 0 {
		if err := enc.NextField("F21"); err != nil {
			return err
		}
		if err := x.F21.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F22 != 0 {
		if err := enc.NextField("F22"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Int32Type); err != nil {
			return err
		}
		if err := enc.EncodeInt(int64(x.F22)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F23 != 0 {
		if err := enc.NextField("F23"); err != nil {
			return err
		}
		if err := x.F23.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F24 != 0 {
		if err := enc.NextField("F24"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Int64Type); err != nil {
			return err
		}
		if err := enc.EncodeInt(x.F24); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F25 != 0 {
		if err := enc.NextField("F25"); err != nil {
			return err
		}
		if err := x.F25.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F26 != 0 {
		if err := enc.NextField("F26"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Float32Type); err != nil {
			return err
		}
		if err := enc.EncodeFloat(float64(x.F26)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F27 != 0 {
		if err := enc.NextField("F27"); err != nil {
			return err
		}
		if err := x.F27.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F28 != 0 {
		if err := enc.NextField("F28"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Float64Type); err != nil {
			return err
		}
		if err := enc.EncodeFloat(x.F28); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F29 != 0 {
		if err := enc.NextField("F29"); err != nil {
			return err
		}
		if err := x.F29.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F30 != nil {
		if err := enc.NextField("F30"); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()

		if err := x.F30.VDLWrite(enc); err != nil {
			return err
		}

	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_All) VDLRead(dec vdl.Decoder) error {
	*x = VStructDepth1_All{
		F5: vdl.AnyType,
	}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "F0":
			var readAny interface{}
			if err := vdl.Read(dec, &readAny); err != nil {
				return err
			}
			x.F0 = readAny
		case "F1":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.F1, err = dec.DecodeBool(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F2":
			if err := x.F2.VDLRead(dec); err != nil {
				return err
			}
		case "F3":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.F3, err = dec.DecodeString(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F4":
			if err := x.F4.VDLRead(dec); err != nil {
				return err
			}
		case "F5":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.F5, err = dec.DecodeTypeObject(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F6":
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeUint(8)
			if err != nil {
				return err
			}
			x.F6 = byte(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F7":
			if err := x.F7.VDLRead(dec); err != nil {
				return err
			}
		case "F8":
			if err := x.F8.VDLRead(dec); err != nil {
				return err
			}
		case "F9":
			if err := x.F9.VDLRead(dec); err != nil {
				return err
			}
		case "F10":
			if err := x.F10.VDLRead(dec); err != nil {
				return err
			}
		case "F11":
			if err := verror.VDLRead(dec, &x.F11); err != nil {
				return err
			}
		case "F12":
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeUint(16)
			if err != nil {
				return err
			}
			x.F12 = uint16(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F13":
			if err := x.F13.VDLRead(dec); err != nil {
				return err
			}
		case "F14":
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeUint(32)
			if err != nil {
				return err
			}
			x.F14 = uint32(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F15":
			if err := x.F15.VDLRead(dec); err != nil {
				return err
			}
		case "F16":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.F16, err = dec.DecodeUint(64); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F17":
			if err := x.F17.VDLRead(dec); err != nil {
				return err
			}
		case "F18":
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeInt(8)
			if err != nil {
				return err
			}
			x.F18 = int8(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F19":
			if err := x.F19.VDLRead(dec); err != nil {
				return err
			}
		case "F20":
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeInt(16)
			if err != nil {
				return err
			}
			x.F20 = int16(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F21":
			if err := x.F21.VDLRead(dec); err != nil {
				return err
			}
		case "F22":
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeInt(32)
			if err != nil {
				return err
			}
			x.F22 = int32(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F23":
			if err := x.F23.VDLRead(dec); err != nil {
				return err
			}
		case "F24":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.F24, err = dec.DecodeInt(64); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F25":
			if err := x.F25.VDLRead(dec); err != nil {
				return err
			}
		case "F26":
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeFloat(32)
			if err != nil {
				return err
			}
			x.F26 = float32(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F27":
			if err := x.F27.VDLRead(dec); err != nil {
				return err
			}
		case "F28":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.F28, err = dec.DecodeFloat(64); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F29":
			if err := x.F29.VDLRead(dec); err != nil {
				return err
			}
		case "F30":
			if err := dec.StartValue(); err != nil {
				return err
			}
			if dec.IsNil() {
				if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x.F30), dec.Type()) {
					return fmt.Errorf("incompatible optional %T, from %v", x.F30, dec.Type())
				}
				x.F30 = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.F30 = new(VStructEmpty)
				dec.IgnoreNextStartValue()
				if err := x.F30.VDLRead(dec); err != nil {
					return err
				}
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type VStructDepth1_Rand0 struct {
	F4  VString
	F15 VUint32
	F21 VInt16
}

func (VStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructDepth1_Rand0"`
}) {
}

func (x VStructDepth1_Rand0) VDLIsZero() bool {
	return x == VStructDepth1_Rand0{}
}

func (x VStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructDepth1_Rand0)(nil)).Elem()); err != nil {
		return err
	}
	if x.F4 != "" {
		if err := enc.NextField("F4"); err != nil {
			return err
		}
		if err := x.F4.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F15 != 0 {
		if err := enc.NextField("F15"); err != nil {
			return err
		}
		if err := x.F15.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F21 != 0 {
		if err := enc.NextField("F21"); err != nil {
			return err
		}
		if err := x.F21.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	*x = VStructDepth1_Rand0{}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "F4":
			if err := x.F4.VDLRead(dec); err != nil {
				return err
			}
		case "F15":
			if err := x.F15.VDLRead(dec); err != nil {
				return err
			}
		case "F21":
			if err := x.F21.VDLRead(dec); err != nil {
				return err
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type VStructDepth1_Rand1 struct {
	F0  interface{}
	F1  bool
	F7  VByte
	F9  VEnumBcd
	F26 float32
}

func (VStructDepth1_Rand1) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructDepth1_Rand1"`
}) {
}

func (x VStructDepth1_Rand1) VDLIsZero() bool {
	return x == VStructDepth1_Rand1{}
}

func (x VStructDepth1_Rand1) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructDepth1_Rand1)(nil)).Elem()); err != nil {
		return err
	}
	if x.F0 != nil {
		if err := enc.NextField("F0"); err != nil {
			return err
		}
		if err := vdl.Write(enc, x.F0); err != nil {
			return err
		}
	}
	if x.F1 {
		if err := enc.NextField("F1"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.BoolType); err != nil {
			return err
		}
		if err := enc.EncodeBool(x.F1); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if x.F7 != 0 {
		if err := enc.NextField("F7"); err != nil {
			return err
		}
		if err := x.F7.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F9 != VEnumBcdB {
		if err := enc.NextField("F9"); err != nil {
			return err
		}
		if err := x.F9.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F26 != 0 {
		if err := enc.NextField("F26"); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Float32Type); err != nil {
			return err
		}
		if err := enc.EncodeFloat(float64(x.F26)); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth1_Rand1) VDLRead(dec vdl.Decoder) error {
	*x = VStructDepth1_Rand1{}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "F0":
			var readAny interface{}
			if err := vdl.Read(dec, &readAny); err != nil {
				return err
			}
			x.F0 = readAny
		case "F1":
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if x.F1, err = dec.DecodeBool(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		case "F7":
			if err := x.F7.VDLRead(dec); err != nil {
				return err
			}
		case "F9":
			if err := x.F9.VDLRead(dec); err != nil {
				return err
			}
		case "F26":
			if err := dec.StartValue(); err != nil {
				return err
			}
			tmp, err := dec.DecodeFloat(32)
			if err != nil {
				return err
			}
			x.F26 = float32(tmp)
			if err := dec.FinishValue(); err != nil {
				return err
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type (
	// VUnionDepth1_All represents any single field of the VUnionDepth1_All union type.
	VUnionDepth1_All interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the VUnionDepth1_All union type.
		__VDLReflect(__VUnionDepth1_AllReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_AllF0 represents field F0 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF0 struct{ Value interface{} }
	// VUnionDepth1_AllF1 represents field F1 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF1 struct{ Value bool }
	// VUnionDepth1_AllF2 represents field F2 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF2 struct{ Value VBool }
	// VUnionDepth1_AllF3 represents field F3 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF3 struct{ Value string }
	// VUnionDepth1_AllF4 represents field F4 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF4 struct{ Value VString }
	// VUnionDepth1_AllF5 represents field F5 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF5 struct{ Value *vdl.Type }
	// VUnionDepth1_AllF6 represents field F6 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF6 struct{ Value byte }
	// VUnionDepth1_AllF7 represents field F7 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF7 struct{ Value VByte }
	// VUnionDepth1_AllF8 represents field F8 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF8 struct{ Value VEnumAbc }
	// VUnionDepth1_AllF9 represents field F9 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF9 struct{ Value VEnumBcd }
	// VUnionDepth1_AllF10 represents field F10 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF10 struct{ Value VStructEmpty }
	// VUnionDepth1_AllF11 represents field F11 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF11 struct{ Value error }
	// VUnionDepth1_AllF12 represents field F12 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF12 struct{ Value uint16 }
	// VUnionDepth1_AllF13 represents field F13 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF13 struct{ Value VUint16 }
	// VUnionDepth1_AllF14 represents field F14 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF14 struct{ Value uint32 }
	// VUnionDepth1_AllF15 represents field F15 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF15 struct{ Value VUint32 }
	// VUnionDepth1_AllF16 represents field F16 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF16 struct{ Value uint64 }
	// VUnionDepth1_AllF17 represents field F17 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF17 struct{ Value VUint64 }
	// VUnionDepth1_AllF18 represents field F18 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF18 struct{ Value int8 }
	// VUnionDepth1_AllF19 represents field F19 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF19 struct{ Value VInt8 }
	// VUnionDepth1_AllF20 represents field F20 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF20 struct{ Value int16 }
	// VUnionDepth1_AllF21 represents field F21 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF21 struct{ Value VInt16 }
	// VUnionDepth1_AllF22 represents field F22 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF22 struct{ Value int32 }
	// VUnionDepth1_AllF23 represents field F23 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF23 struct{ Value VInt32 }
	// VUnionDepth1_AllF24 represents field F24 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF24 struct{ Value int64 }
	// VUnionDepth1_AllF25 represents field F25 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF25 struct{ Value VInt64 }
	// VUnionDepth1_AllF26 represents field F26 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF26 struct{ Value float32 }
	// VUnionDepth1_AllF27 represents field F27 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF27 struct{ Value VFloat32 }
	// VUnionDepth1_AllF28 represents field F28 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF28 struct{ Value float64 }
	// VUnionDepth1_AllF29 represents field F29 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF29 struct{ Value VFloat64 }
	// VUnionDepth1_AllF30 represents field F30 of the VUnionDepth1_All union type.
	VUnionDepth1_AllF30 struct{ Value *VStructEmpty }
	// __VUnionDepth1_AllReflect describes the VUnionDepth1_All union type.
	__VUnionDepth1_AllReflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VUnionDepth1_All"`
		Type  VUnionDepth1_All
		Union struct {
			F0  VUnionDepth1_AllF0
			F1  VUnionDepth1_AllF1
			F2  VUnionDepth1_AllF2
			F3  VUnionDepth1_AllF3
			F4  VUnionDepth1_AllF4
			F5  VUnionDepth1_AllF5
			F6  VUnionDepth1_AllF6
			F7  VUnionDepth1_AllF7
			F8  VUnionDepth1_AllF8
			F9  VUnionDepth1_AllF9
			F10 VUnionDepth1_AllF10
			F11 VUnionDepth1_AllF11
			F12 VUnionDepth1_AllF12
			F13 VUnionDepth1_AllF13
			F14 VUnionDepth1_AllF14
			F15 VUnionDepth1_AllF15
			F16 VUnionDepth1_AllF16
			F17 VUnionDepth1_AllF17
			F18 VUnionDepth1_AllF18
			F19 VUnionDepth1_AllF19
			F20 VUnionDepth1_AllF20
			F21 VUnionDepth1_AllF21
			F22 VUnionDepth1_AllF22
			F23 VUnionDepth1_AllF23
			F24 VUnionDepth1_AllF24
			F25 VUnionDepth1_AllF25
			F26 VUnionDepth1_AllF26
			F27 VUnionDepth1_AllF27
			F28 VUnionDepth1_AllF28
			F29 VUnionDepth1_AllF29
			F30 VUnionDepth1_AllF30
		}
	}
)

func (x VUnionDepth1_AllF0) Index() int                             { return 0 }
func (x VUnionDepth1_AllF0) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF0) Name() string                           { return "F0" }
func (x VUnionDepth1_AllF0) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF1) Index() int                             { return 1 }
func (x VUnionDepth1_AllF1) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF1) Name() string                           { return "F1" }
func (x VUnionDepth1_AllF1) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF2) Index() int                             { return 2 }
func (x VUnionDepth1_AllF2) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF2) Name() string                           { return "F2" }
func (x VUnionDepth1_AllF2) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF3) Index() int                             { return 3 }
func (x VUnionDepth1_AllF3) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF3) Name() string                           { return "F3" }
func (x VUnionDepth1_AllF3) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF4) Index() int                             { return 4 }
func (x VUnionDepth1_AllF4) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF4) Name() string                           { return "F4" }
func (x VUnionDepth1_AllF4) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF5) Index() int                             { return 5 }
func (x VUnionDepth1_AllF5) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF5) Name() string                           { return "F5" }
func (x VUnionDepth1_AllF5) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF6) Index() int                             { return 6 }
func (x VUnionDepth1_AllF6) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF6) Name() string                           { return "F6" }
func (x VUnionDepth1_AllF6) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF7) Index() int                             { return 7 }
func (x VUnionDepth1_AllF7) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF7) Name() string                           { return "F7" }
func (x VUnionDepth1_AllF7) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF8) Index() int                             { return 8 }
func (x VUnionDepth1_AllF8) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF8) Name() string                           { return "F8" }
func (x VUnionDepth1_AllF8) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF9) Index() int                             { return 9 }
func (x VUnionDepth1_AllF9) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF9) Name() string                           { return "F9" }
func (x VUnionDepth1_AllF9) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF10) Index() int                             { return 10 }
func (x VUnionDepth1_AllF10) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF10) Name() string                           { return "F10" }
func (x VUnionDepth1_AllF10) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF11) Index() int                             { return 11 }
func (x VUnionDepth1_AllF11) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF11) Name() string                           { return "F11" }
func (x VUnionDepth1_AllF11) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF12) Index() int                             { return 12 }
func (x VUnionDepth1_AllF12) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF12) Name() string                           { return "F12" }
func (x VUnionDepth1_AllF12) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF13) Index() int                             { return 13 }
func (x VUnionDepth1_AllF13) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF13) Name() string                           { return "F13" }
func (x VUnionDepth1_AllF13) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF14) Index() int                             { return 14 }
func (x VUnionDepth1_AllF14) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF14) Name() string                           { return "F14" }
func (x VUnionDepth1_AllF14) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF15) Index() int                             { return 15 }
func (x VUnionDepth1_AllF15) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF15) Name() string                           { return "F15" }
func (x VUnionDepth1_AllF15) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF16) Index() int                             { return 16 }
func (x VUnionDepth1_AllF16) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF16) Name() string                           { return "F16" }
func (x VUnionDepth1_AllF16) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF17) Index() int                             { return 17 }
func (x VUnionDepth1_AllF17) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF17) Name() string                           { return "F17" }
func (x VUnionDepth1_AllF17) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF18) Index() int                             { return 18 }
func (x VUnionDepth1_AllF18) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF18) Name() string                           { return "F18" }
func (x VUnionDepth1_AllF18) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF19) Index() int                             { return 19 }
func (x VUnionDepth1_AllF19) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF19) Name() string                           { return "F19" }
func (x VUnionDepth1_AllF19) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF20) Index() int                             { return 20 }
func (x VUnionDepth1_AllF20) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF20) Name() string                           { return "F20" }
func (x VUnionDepth1_AllF20) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF21) Index() int                             { return 21 }
func (x VUnionDepth1_AllF21) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF21) Name() string                           { return "F21" }
func (x VUnionDepth1_AllF21) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF22) Index() int                             { return 22 }
func (x VUnionDepth1_AllF22) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF22) Name() string                           { return "F22" }
func (x VUnionDepth1_AllF22) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF23) Index() int                             { return 23 }
func (x VUnionDepth1_AllF23) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF23) Name() string                           { return "F23" }
func (x VUnionDepth1_AllF23) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF24) Index() int                             { return 24 }
func (x VUnionDepth1_AllF24) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF24) Name() string                           { return "F24" }
func (x VUnionDepth1_AllF24) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF25) Index() int                             { return 25 }
func (x VUnionDepth1_AllF25) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF25) Name() string                           { return "F25" }
func (x VUnionDepth1_AllF25) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF26) Index() int                             { return 26 }
func (x VUnionDepth1_AllF26) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF26) Name() string                           { return "F26" }
func (x VUnionDepth1_AllF26) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF27) Index() int                             { return 27 }
func (x VUnionDepth1_AllF27) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF27) Name() string                           { return "F27" }
func (x VUnionDepth1_AllF27) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF28) Index() int                             { return 28 }
func (x VUnionDepth1_AllF28) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF28) Name() string                           { return "F28" }
func (x VUnionDepth1_AllF28) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF29) Index() int                             { return 29 }
func (x VUnionDepth1_AllF29) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF29) Name() string                           { return "F29" }
func (x VUnionDepth1_AllF29) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF30) Index() int                             { return 30 }
func (x VUnionDepth1_AllF30) Interface() interface{}                 { return x.Value }
func (x VUnionDepth1_AllF30) Name() string                           { return "F30" }
func (x VUnionDepth1_AllF30) __VDLReflect(__VUnionDepth1_AllReflect) {}

func (x VUnionDepth1_AllF0) VDLIsZero() bool {
	return x.Value == nil
}

func (x VUnionDepth1_AllF1) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF2) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF3) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF4) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF5) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF6) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF7) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF8) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF9) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF10) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF11) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF12) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF13) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF14) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF15) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF16) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF17) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF18) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF19) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF20) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF21) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF22) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF23) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF24) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF25) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF26) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF27) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF28) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF29) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF30) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_AllF0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F0"); err != nil {
		return err
	}
	if err := vdl.Write(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF1) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F1"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.BoolType); err != nil {
		return err
	}
	if err := enc.EncodeBool(x.Value); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF2) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F2"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF3) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F3"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.StringType); err != nil {
		return err
	}
	if err := enc.EncodeString(x.Value); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF4) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F4"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF5) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F5"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF6) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F6"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.ByteType); err != nil {
		return err
	}
	if err := enc.EncodeUint(uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF7) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F7"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF8) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F8"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF9) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F9"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF10) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F10"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF11) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F11"); err != nil {
		return err
	}
	if err := verror.VDLWrite(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF12) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F12"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Uint16Type); err != nil {
		return err
	}
	if err := enc.EncodeUint(uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF13) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F13"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF14) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F14"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Uint32Type); err != nil {
		return err
	}
	if err := enc.EncodeUint(uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF15) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F15"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF16) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F16"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Uint64Type); err != nil {
		return err
	}
	if err := enc.EncodeUint(x.Value); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF17) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F17"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF18) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F18"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Int8Type); err != nil {
		return err
	}
	if err := enc.EncodeInt(int64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF19) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F19"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF20) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F20"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Int16Type); err != nil {
		return err
	}
	if err := enc.EncodeInt(int64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF21) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F21"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF22) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F22"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Int32Type); err != nil {
		return err
	}
	if err := enc.EncodeInt(int64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF23) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F23"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF24) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F24"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Int64Type); err != nil {
		return err
	}
	if err := enc.EncodeInt(x.Value); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF25) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F25"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF26) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F26"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Float32Type); err != nil {
		return err
	}
	if err := enc.EncodeFloat(float64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF27) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F27"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF28) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F28"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Float64Type); err != nil {
		return err
	}
	if err := enc.EncodeFloat(x.Value); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF29) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F29"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_AllF30) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F30"); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdl.TypeOf((**VStructEmpty)(nil))); err != nil {
			return err
		}
	} else {
		enc.SetNextStartValueIsOptional()

		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}

	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_All(dec vdl.Decoder, x *VUnionDepth1_All) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x), dec.Type()) {
		return fmt.Errorf("incompatible union %T, from %v", x, dec.Type())
	}
	f, err := dec.NextField()
	if err != nil {
		return err
	}
	switch f {
	case "F0":
		var field VUnionDepth1_AllF0
		var readAny interface{}
		if err := vdl.Read(dec, &readAny); err != nil {
			return err
		}
		field.Value = readAny
		*x = field
	case "F1":
		var field VUnionDepth1_AllF1
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if field.Value, err = dec.DecodeBool(); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F2":
		var field VUnionDepth1_AllF2
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F3":
		var field VUnionDepth1_AllF3
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if field.Value, err = dec.DecodeString(); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F4":
		var field VUnionDepth1_AllF4
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F5":
		var field VUnionDepth1_AllF5
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if field.Value, err = dec.DecodeTypeObject(); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F6":
		var field VUnionDepth1_AllF6
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeUint(8)
		if err != nil {
			return err
		}
		field.Value = byte(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F7":
		var field VUnionDepth1_AllF7
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F8":
		var field VUnionDepth1_AllF8
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F9":
		var field VUnionDepth1_AllF9
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F10":
		var field VUnionDepth1_AllF10
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F11":
		var field VUnionDepth1_AllF11
		if err := verror.VDLRead(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F12":
		var field VUnionDepth1_AllF12
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeUint(16)
		if err != nil {
			return err
		}
		field.Value = uint16(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F13":
		var field VUnionDepth1_AllF13
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F14":
		var field VUnionDepth1_AllF14
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeUint(32)
		if err != nil {
			return err
		}
		field.Value = uint32(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F15":
		var field VUnionDepth1_AllF15
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F16":
		var field VUnionDepth1_AllF16
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if field.Value, err = dec.DecodeUint(64); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F17":
		var field VUnionDepth1_AllF17
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F18":
		var field VUnionDepth1_AllF18
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeInt(8)
		if err != nil {
			return err
		}
		field.Value = int8(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F19":
		var field VUnionDepth1_AllF19
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F20":
		var field VUnionDepth1_AllF20
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeInt(16)
		if err != nil {
			return err
		}
		field.Value = int16(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F21":
		var field VUnionDepth1_AllF21
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F22":
		var field VUnionDepth1_AllF22
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeInt(32)
		if err != nil {
			return err
		}
		field.Value = int32(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F23":
		var field VUnionDepth1_AllF23
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F24":
		var field VUnionDepth1_AllF24
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if field.Value, err = dec.DecodeInt(64); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F25":
		var field VUnionDepth1_AllF25
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F26":
		var field VUnionDepth1_AllF26
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeFloat(32)
		if err != nil {
			return err
		}
		field.Value = float32(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F27":
		var field VUnionDepth1_AllF27
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F28":
		var field VUnionDepth1_AllF28
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if field.Value, err = dec.DecodeFloat(64); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F29":
		var field VUnionDepth1_AllF29
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F30":
		var field VUnionDepth1_AllF30
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(field.Value), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", field.Value, dec.Type())
			}
			field.Value = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			field.Value = new(VStructEmpty)
			dec.IgnoreNextStartValue()
			if err := field.Value.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = field
	case "":
		return fmt.Errorf("missing field in union %T, from %v", x, dec.Type())
	default:
		return fmt.Errorf("field %q not in union %T, from %v", f, x, dec.Type())
	}
	switch f, err := dec.NextField(); {
	case err != nil:
		return err
	case f != "":
		return fmt.Errorf("extra field %q in union %T, from %v", f, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Rand0 represents any single field of the VUnionDepth1_Rand0 union type.
	VUnionDepth1_Rand0 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the VUnionDepth1_Rand0 union type.
		__VDLReflect(__VUnionDepth1_Rand0Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Rand0F8 represents field F8 of the VUnionDepth1_Rand0 union type.
	VUnionDepth1_Rand0F8 struct{ Value VEnumAbc }
	// VUnionDepth1_Rand0F10 represents field F10 of the VUnionDepth1_Rand0 union type.
	VUnionDepth1_Rand0F10 struct{ Value VStructEmpty }
	// VUnionDepth1_Rand0F12 represents field F12 of the VUnionDepth1_Rand0 union type.
	VUnionDepth1_Rand0F12 struct{ Value uint16 }
	// VUnionDepth1_Rand0F16 represents field F16 of the VUnionDepth1_Rand0 union type.
	VUnionDepth1_Rand0F16 struct{ Value uint64 }
	// VUnionDepth1_Rand0F28 represents field F28 of the VUnionDepth1_Rand0 union type.
	VUnionDepth1_Rand0F28 struct{ Value float64 }
	// __VUnionDepth1_Rand0Reflect describes the VUnionDepth1_Rand0 union type.
	__VUnionDepth1_Rand0Reflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VUnionDepth1_Rand0"`
		Type  VUnionDepth1_Rand0
		Union struct {
			F8  VUnionDepth1_Rand0F8
			F10 VUnionDepth1_Rand0F10
			F12 VUnionDepth1_Rand0F12
			F16 VUnionDepth1_Rand0F16
			F28 VUnionDepth1_Rand0F28
		}
	}
)

func (x VUnionDepth1_Rand0F8) Index() int                               { return 0 }
func (x VUnionDepth1_Rand0F8) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand0F8) Name() string                             { return "F8" }
func (x VUnionDepth1_Rand0F8) __VDLReflect(__VUnionDepth1_Rand0Reflect) {}

func (x VUnionDepth1_Rand0F10) Index() int                               { return 1 }
func (x VUnionDepth1_Rand0F10) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand0F10) Name() string                             { return "F10" }
func (x VUnionDepth1_Rand0F10) __VDLReflect(__VUnionDepth1_Rand0Reflect) {}

func (x VUnionDepth1_Rand0F12) Index() int                               { return 2 }
func (x VUnionDepth1_Rand0F12) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand0F12) Name() string                             { return "F12" }
func (x VUnionDepth1_Rand0F12) __VDLReflect(__VUnionDepth1_Rand0Reflect) {}

func (x VUnionDepth1_Rand0F16) Index() int                               { return 3 }
func (x VUnionDepth1_Rand0F16) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand0F16) Name() string                             { return "F16" }
func (x VUnionDepth1_Rand0F16) __VDLReflect(__VUnionDepth1_Rand0Reflect) {}

func (x VUnionDepth1_Rand0F28) Index() int                               { return 4 }
func (x VUnionDepth1_Rand0F28) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand0F28) Name() string                             { return "F28" }
func (x VUnionDepth1_Rand0F28) __VDLReflect(__VUnionDepth1_Rand0Reflect) {}

func (x VUnionDepth1_Rand0F8) VDLIsZero() bool {
	return x.Value == VEnumAbcA
}

func (x VUnionDepth1_Rand0F10) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_Rand0F12) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_Rand0F16) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_Rand0F28) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_Rand0F8) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F8"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_Rand0F10) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F10"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_Rand0F12) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F12"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Uint16Type); err != nil {
		return err
	}
	if err := enc.EncodeUint(uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_Rand0F16) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F16"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Uint64Type); err != nil {
		return err
	}
	if err := enc.EncodeUint(x.Value); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_Rand0F28) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F28"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Float64Type); err != nil {
		return err
	}
	if err := enc.EncodeFloat(x.Value); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Rand0(dec vdl.Decoder, x *VUnionDepth1_Rand0) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x), dec.Type()) {
		return fmt.Errorf("incompatible union %T, from %v", x, dec.Type())
	}
	f, err := dec.NextField()
	if err != nil {
		return err
	}
	switch f {
	case "F8":
		var field VUnionDepth1_Rand0F8
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F10":
		var field VUnionDepth1_Rand0F10
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F12":
		var field VUnionDepth1_Rand0F12
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeUint(16)
		if err != nil {
			return err
		}
		field.Value = uint16(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F16":
		var field VUnionDepth1_Rand0F16
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if field.Value, err = dec.DecodeUint(64); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F28":
		var field VUnionDepth1_Rand0F28
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if field.Value, err = dec.DecodeFloat(64); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "":
		return fmt.Errorf("missing field in union %T, from %v", x, dec.Type())
	default:
		return fmt.Errorf("field %q not in union %T, from %v", f, x, dec.Type())
	}
	switch f, err := dec.NextField(); {
	case err != nil:
		return err
	case f != "":
		return fmt.Errorf("extra field %q in union %T, from %v", f, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth1_Rand1 represents any single field of the VUnionDepth1_Rand1 union type.
	VUnionDepth1_Rand1 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the VUnionDepth1_Rand1 union type.
		__VDLReflect(__VUnionDepth1_Rand1Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth1_Rand1F6 represents field F6 of the VUnionDepth1_Rand1 union type.
	VUnionDepth1_Rand1F6 struct{ Value byte }
	// VUnionDepth1_Rand1F8 represents field F8 of the VUnionDepth1_Rand1 union type.
	VUnionDepth1_Rand1F8 struct{ Value VEnumAbc }
	// VUnionDepth1_Rand1F9 represents field F9 of the VUnionDepth1_Rand1 union type.
	VUnionDepth1_Rand1F9 struct{ Value VEnumBcd }
	// VUnionDepth1_Rand1F11 represents field F11 of the VUnionDepth1_Rand1 union type.
	VUnionDepth1_Rand1F11 struct{ Value error }
	// VUnionDepth1_Rand1F20 represents field F20 of the VUnionDepth1_Rand1 union type.
	VUnionDepth1_Rand1F20 struct{ Value int16 }
	// __VUnionDepth1_Rand1Reflect describes the VUnionDepth1_Rand1 union type.
	__VUnionDepth1_Rand1Reflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VUnionDepth1_Rand1"`
		Type  VUnionDepth1_Rand1
		Union struct {
			F6  VUnionDepth1_Rand1F6
			F8  VUnionDepth1_Rand1F8
			F9  VUnionDepth1_Rand1F9
			F11 VUnionDepth1_Rand1F11
			F20 VUnionDepth1_Rand1F20
		}
	}
)

func (x VUnionDepth1_Rand1F6) Index() int                               { return 0 }
func (x VUnionDepth1_Rand1F6) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand1F6) Name() string                             { return "F6" }
func (x VUnionDepth1_Rand1F6) __VDLReflect(__VUnionDepth1_Rand1Reflect) {}

func (x VUnionDepth1_Rand1F8) Index() int                               { return 1 }
func (x VUnionDepth1_Rand1F8) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand1F8) Name() string                             { return "F8" }
func (x VUnionDepth1_Rand1F8) __VDLReflect(__VUnionDepth1_Rand1Reflect) {}

func (x VUnionDepth1_Rand1F9) Index() int                               { return 2 }
func (x VUnionDepth1_Rand1F9) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand1F9) Name() string                             { return "F9" }
func (x VUnionDepth1_Rand1F9) __VDLReflect(__VUnionDepth1_Rand1Reflect) {}

func (x VUnionDepth1_Rand1F11) Index() int                               { return 3 }
func (x VUnionDepth1_Rand1F11) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand1F11) Name() string                             { return "F11" }
func (x VUnionDepth1_Rand1F11) __VDLReflect(__VUnionDepth1_Rand1Reflect) {}

func (x VUnionDepth1_Rand1F20) Index() int                               { return 4 }
func (x VUnionDepth1_Rand1F20) Interface() interface{}                   { return x.Value }
func (x VUnionDepth1_Rand1F20) Name() string                             { return "F20" }
func (x VUnionDepth1_Rand1F20) __VDLReflect(__VUnionDepth1_Rand1Reflect) {}

func (x VUnionDepth1_Rand1F6) VDLIsZero() bool {
	return x.Value == 0
}

func (x VUnionDepth1_Rand1F8) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_Rand1F9) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_Rand1F11) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_Rand1F20) VDLIsZero() bool {
	return false
}

func (x VUnionDepth1_Rand1F6) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F6"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.ByteType); err != nil {
		return err
	}
	if err := enc.EncodeUint(uint64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_Rand1F8) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F8"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_Rand1F9) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F9"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_Rand1F11) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F11"); err != nil {
		return err
	}
	if err := verror.VDLWrite(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth1_Rand1F20) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth1_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F20"); err != nil {
		return err
	}
	if err := enc.StartValue(vdl.Int16Type); err != nil {
		return err
	}
	if err := enc.EncodeInt(int64(x.Value)); err != nil {
		return err
	}
	if err := enc.FinishValue(); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth1_Rand1(dec vdl.Decoder, x *VUnionDepth1_Rand1) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x), dec.Type()) {
		return fmt.Errorf("incompatible union %T, from %v", x, dec.Type())
	}
	f, err := dec.NextField()
	if err != nil {
		return err
	}
	switch f {
	case "F6":
		var field VUnionDepth1_Rand1F6
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeUint(8)
		if err != nil {
			return err
		}
		field.Value = byte(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "F8":
		var field VUnionDepth1_Rand1F8
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F9":
		var field VUnionDepth1_Rand1F9
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F11":
		var field VUnionDepth1_Rand1F11
		if err := verror.VDLRead(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F20":
		var field VUnionDepth1_Rand1F20
		if err := dec.StartValue(); err != nil {
			return err
		}
		tmp, err := dec.DecodeInt(16)
		if err != nil {
			return err
		}
		field.Value = int16(tmp)
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = field
	case "":
		return fmt.Errorf("missing field in union %T, from %v", x, dec.Type())
	default:
		return fmt.Errorf("field %q not in union %T, from %v", f, x, dec.Type())
	}
	switch f, err := dec.NextField(); {
	case err != nil:
		return err
	case f != "":
		return fmt.Errorf("extra field %q in union %T, from %v", f, x, dec.Type())
	}
	return dec.FinishValue()
}

type VArray1_VArray3_Bool [1]VArray3_Bool

func (VArray1_VArray3_Bool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_VArray3_Bool"`
}) {
}

func (x VArray1_VArray3_Bool) VDLIsZero() bool {
	return x == VArray1_VArray3_Bool{}
}

func (x VArray1_VArray3_Bool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_VArray3_Bool)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_VArray3_Bool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray3_VList_Any [3]VList_Any

func (VArray3_VList_Any) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_VList_Any"`
}) {
}

func (x VArray3_VList_Any) VDLIsZero() bool {
	for _, elem := range x {
		if len(elem) != 0 {
			return false
		}
	}
	return true
}

func (x VArray3_VList_Any) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_VList_Any)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_VList_Any) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray2_VSet_String [2]VSet_String

func (VArray2_VSet_String) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray2_VSet_String"`
}) {
}

func (x VArray2_VSet_String) VDLIsZero() bool {
	for _, elem := range x {
		if len(elem) != 0 {
			return false
		}
	}
	return true
}

func (x VArray2_VSet_String) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray2_VSet_String)(nil))); err != nil {
		return err
	}
	for i := 0; i < 2; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray2_VSet_String) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray3_Map_String_String [3]map[string]string

func (VArray3_Map_String_String) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_Map_String_String"`
}) {
}

func (x VArray3_Map_String_String) VDLIsZero() bool {
	for _, elem := range x {
		if len(elem) != 0 {
			return false
		}
	}
	return true
}

func (x VArray3_Map_String_String) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_Map_String_String)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := __VDLWriteAnon_map_1(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_map_1(enc vdl.Encoder, x map[string]string) error {
	if err := enc.StartValue(vdl.TypeOf((*map[string]string)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(key); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.StringType); err != nil {
			return err
		}
		if err := enc.EncodeString(elem); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_Map_String_String) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := __VDLReadAnon_map_1(dec, &x[index]); err != nil {
			return err
		}
		index++
	}
}

func __VDLReadAnon_map_1(dec vdl.Decoder, x *map[string]string) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap map[string]string
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(map[string]string, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key string
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if key, err = dec.DecodeString(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		var elem string
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if elem, err = dec.DecodeString(); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(map[string]string)
		}
		tmpMap[key] = elem
	}
}

type VArray1_VStructDepth1_Rand0 [1]VStructDepth1_Rand0

func (VArray1_VStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_VStructDepth1_Rand0"`
}) {
}

func (x VArray1_VStructDepth1_Rand0) VDLIsZero() bool {
	return x == VArray1_VStructDepth1_Rand0{}
}

func (x VArray1_VStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_VStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray3_VUnionDepth1_Rand1 [3]VUnionDepth1_Rand1

func (VArray3_VUnionDepth1_Rand1) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_VUnionDepth1_Rand1"`
}) {
}

func (x VArray3_VUnionDepth1_Rand1) VDLIsZero() bool {
	for _, elem := range x {
		if elem != nil && !elem.VDLIsZero() {
			return false
		}
	}
	return true
}

func (x VArray3_VUnionDepth1_Rand1) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_VUnionDepth1_Rand1)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
		switch {
		case x[i] == nil:
			// Write the zero value of the union type.
			if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_Rand1)(nil))).VDLWrite(enc); err != nil {
				return err
			}
		default:
			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_VUnionDepth1_Rand1) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := VDLReadVUnionDepth1_Rand1(dec, &x[index]); err != nil {
			return err
		}
		index++
	}
}

type VArray1_OptVStructDepth1_Rand0 [1]*VStructDepth1_Rand0

func (VArray1_OptVStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_OptVStructDepth1_Rand0"`
}) {
}

func (x VArray1_OptVStructDepth1_Rand0) VDLIsZero() bool {
	return x == VArray1_OptVStructDepth1_Rand0{}
}

func (x VArray1_OptVStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_OptVStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if x[i] == nil {
			if err := enc.NilValue(vdl.TypeOf((**VStructDepth1_Rand0)(nil))); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()

			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}

		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_OptVStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x[index]), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", x[index], dec.Type())
			}
			x[index] = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			x[index] = new(VStructDepth1_Rand0)
			dec.IgnoreNextStartValue()
			if err := x[index].VDLRead(dec); err != nil {
				return err
			}
		}
		index++
	}
}

type VList_VArray1_String []VArray1_String

func (VList_VArray1_String) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VArray1_String"`
}) {
}

func (x VList_VArray1_String) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VArray1_String) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VArray1_String)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VArray1_String) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VArray1_String, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VArray1_String
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_List_VBool [][]VBool

func (VList_List_VBool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_List_VBool"`
}) {
}

func (x VList_List_VBool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_List_VBool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_List_VBool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := __VDLWriteAnon_list_2(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_list_2(enc vdl.Encoder, x []VBool) error {
	if err := enc.StartValue(vdl.TypeOf((*[]VBool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_List_VBool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_List_VBool, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem []VBool
		if err := __VDLReadAnon_list_2(dec, &elem); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

func __VDLReadAnon_list_2(dec vdl.Decoder, x *[]VBool) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make([]VBool, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VBool
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_Set_VInt16 []map[VInt16]struct{}

func (VList_Set_VInt16) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_Set_VInt16"`
}) {
}

func (x VList_Set_VInt16) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_Set_VInt16) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_Set_VInt16)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := __VDLWriteAnon_set_3(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_set_3(enc vdl.Encoder, x map[VInt16]struct{}) error {
	if err := enc.StartValue(vdl.TypeOf((*map[VInt16]struct{})(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Set_VInt16) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_Set_VInt16, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem map[VInt16]struct{}
		if err := __VDLReadAnon_set_3(dec, &elem); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

func __VDLReadAnon_set_3(dec vdl.Decoder, x *map[VInt16]struct{}) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap map[VInt16]struct{}
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(map[VInt16]struct{}, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VInt16
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(map[VInt16]struct{})
		}
		tmpMap[key] = struct{}{}
	}
}

type VList_VMap_VBool_VBool []VMap_VBool_VBool

func (VList_VMap_VBool_VBool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VMap_VBool_VBool"`
}) {
}

func (x VList_VMap_VBool_VBool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VMap_VBool_VBool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VMap_VBool_VBool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VMap_VBool_VBool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VMap_VBool_VBool, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VMap_VBool_VBool
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VStructDepth1_All []VStructDepth1_All

func (VList_VStructDepth1_All) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VStructDepth1_All"`
}) {
}

func (x VList_VStructDepth1_All) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VStructDepth1_All) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VStructDepth1_All)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VStructDepth1_All) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VStructDepth1_All, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VStructDepth1_All
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VUnionDepth1_Rand0 []VUnionDepth1_Rand0

func (VList_VUnionDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VUnionDepth1_Rand0"`
}) {
}

func (x VList_VUnionDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VUnionDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VUnionDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
		switch {
		case x[i] == nil:
			// Write the zero value of the union type.
			if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))).VDLWrite(enc); err != nil {
				return err
			}
		default:
			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VUnionDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VUnionDepth1_Rand0, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VUnionDepth1_Rand0
		if err := VDLReadVUnionDepth1_Rand0(dec, &elem); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_OptVStructDepth1_Rand0 []*VStructDepth1_Rand0

func (VList_OptVStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_OptVStructDepth1_Rand0"`
}) {
}

func (x VList_OptVStructDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_OptVStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_OptVStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if x[i] == nil {
			if err := enc.NilValue(vdl.TypeOf((**VStructDepth1_Rand0)(nil))); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()

			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}

		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_OptVStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_OptVStructDepth1_Rand0, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem *VStructDepth1_Rand0
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(elem), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", elem, dec.Type())
			}
			elem = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			elem = new(VStructDepth1_Rand0)
			dec.IgnoreNextStartValue()
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = append(*x, elem)
	}
}

type VSet_VArray3_Bool map[VArray3_Bool]struct{}

func (VSet_VArray3_Bool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VArray3_Bool"`
}) {
}

func (x VSet_VArray3_Bool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VArray3_Bool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VArray3_Bool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VArray3_Bool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VArray3_Bool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VArray3_Bool, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VArray3_Bool
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VArray3_Bool)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_VStructDepth1_Rand0 map[VStructDepth1_Rand0]struct{}

func (VSet_VStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VStructDepth1_Rand0"`
}) {
}

func (x VSet_VStructDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VStructDepth1_Rand0
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VStructDepth1_Rand0, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VStructDepth1_Rand0
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VStructDepth1_Rand0)
		}
		tmpMap[key] = struct{}{}
	}
}

type VSet_VUnionDepth1_Rand0 map[VUnionDepth1_Rand0]struct{}

func (VSet_VUnionDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VUnionDepth1_Rand0"`
}) {
}

func (x VSet_VUnionDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VUnionDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VUnionDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		switch {
		case key == nil:
			// Write the zero value of the union type.
			if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))).VDLWrite(enc); err != nil {
				return err
			}
		default:
			if err := key.VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VUnionDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VUnionDepth1_Rand0
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VUnionDepth1_Rand0, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VUnionDepth1_Rand0
		{
			if err := VDLReadVUnionDepth1_Rand0(dec, &key); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VUnionDepth1_Rand0)
		}
		tmpMap[key] = struct{}{}
	}
}

type VMap_VArray2_Uint32_VArray2_Uint32 map[VArray2_Uint32]VArray2_Uint32

func (VMap_VArray2_Uint32_VArray2_Uint32) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VArray2_Uint32_VArray2_Uint32"`
}) {
}

func (x VMap_VArray2_Uint32_VArray2_Uint32) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VArray2_Uint32_VArray2_Uint32) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VArray2_Uint32_VArray2_Uint32)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VArray2_Uint32_VArray2_Uint32) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VArray2_Uint32_VArray2_Uint32
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VArray2_Uint32_VArray2_Uint32, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VArray2_Uint32
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VArray2_Uint32
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VArray2_Uint32_VArray2_Uint32)
		}
		tmpMap[key] = elem
	}
}

type VMap_VStructDepth1_Rand0_VStructDepth1_Rand0 map[VStructDepth1_Rand0]VStructDepth1_Rand0

func (VMap_VStructDepth1_Rand0_VStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VStructDepth1_Rand0_VStructDepth1_Rand0"`
}) {
}

func (x VMap_VStructDepth1_Rand0_VStructDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VStructDepth1_Rand0_VStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VStructDepth1_Rand0_VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VStructDepth1_Rand0_VStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VStructDepth1_Rand0_VStructDepth1_Rand0
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VStructDepth1_Rand0_VStructDepth1_Rand0, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VStructDepth1_Rand0
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VStructDepth1_Rand0
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VStructDepth1_Rand0_VStructDepth1_Rand0)
		}
		tmpMap[key] = elem
	}
}

type VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0 map[VUnionDepth1_Rand0]VUnionDepth1_Rand0

func (VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0"`
}) {
}

func (x VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		switch {
		case key == nil:
			// Write the zero value of the union type.
			if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))).VDLWrite(enc); err != nil {
				return err
			}
		default:
			if err := key.VDLWrite(enc); err != nil {
				return err
			}
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
		switch {
		case elem == nil:
			// Write the zero value of the union type.
			if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))).VDLWrite(enc); err != nil {
				return err
			}
		default:
			if err := elem.VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VUnionDepth1_Rand0
		{
			if err := VDLReadVUnionDepth1_Rand0(dec, &key); err != nil {
				return err
			}
		}
		var elem VUnionDepth1_Rand0
		{
			if err := VDLReadVUnionDepth1_Rand0(dec, &elem); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0)
		}
		tmpMap[key] = elem
	}
}

type VStructDepth2_All struct {
	F0  VArray3_Any
	F1  VArray1_String
	F2  VList_VBool
	F3  VList_VInt32
	F4  VSet_VString
	F5  VSet_Float32
	F6  VMap_VByte_VByte
	F7  VMap_VEnumBcd_VEnumBcd
	F8  VStructDepth1_All
	F9  VStructDepth1_Rand1
	F10 VUnionDepth1_Rand0
	F11 VUnionDepth1_Rand1
	F12 *VStructDepth1_All
	F13 *VStructDepth1_Rand0
}

func (VStructDepth2_All) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructDepth2_All"`
}) {
}

func (x VStructDepth2_All) VDLIsZero() bool {
	if x.F0 != (VArray3_Any{}) {
		return false
	}
	if x.F1 != (VArray1_String{}) {
		return false
	}
	if len(x.F2) != 0 {
		return false
	}
	if len(x.F3) != 0 {
		return false
	}
	if len(x.F4) != 0 {
		return false
	}
	if len(x.F5) != 0 {
		return false
	}
	if len(x.F6) != 0 {
		return false
	}
	if len(x.F7) != 0 {
		return false
	}
	if !x.F8.VDLIsZero() {
		return false
	}
	if x.F9 != (VStructDepth1_Rand1{}) {
		return false
	}
	if x.F10 != nil && !x.F10.VDLIsZero() {
		return false
	}
	if x.F11 != nil && !x.F11.VDLIsZero() {
		return false
	}
	if x.F12 != nil {
		return false
	}
	if x.F13 != nil {
		return false
	}
	return true
}

func (x VStructDepth2_All) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructDepth2_All)(nil)).Elem()); err != nil {
		return err
	}
	if x.F0 != (VArray3_Any{}) {
		if err := enc.NextField("F0"); err != nil {
			return err
		}
		if err := x.F0.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F1 != (VArray1_String{}) {
		if err := enc.NextField("F1"); err != nil {
			return err
		}
		if err := x.F1.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F2) != 0 {
		if err := enc.NextField("F2"); err != nil {
			return err
		}
		if err := x.F2.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F3) != 0 {
		if err := enc.NextField("F3"); err != nil {
			return err
		}
		if err := x.F3.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F4) != 0 {
		if err := enc.NextField("F4"); err != nil {
			return err
		}
		if err := x.F4.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F5) != 0 {
		if err := enc.NextField("F5"); err != nil {
			return err
		}
		if err := x.F5.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F6) != 0 {
		if err := enc.NextField("F6"); err != nil {
			return err
		}
		if err := x.F6.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F7) != 0 {
		if err := enc.NextField("F7"); err != nil {
			return err
		}
		if err := x.F7.VDLWrite(enc); err != nil {
			return err
		}
	}
	if !x.F8.VDLIsZero() {
		if err := enc.NextField("F8"); err != nil {
			return err
		}
		if err := x.F8.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F9 != (VStructDepth1_Rand1{}) {
		if err := enc.NextField("F9"); err != nil {
			return err
		}
		if err := x.F9.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F10 != nil && !x.F10.VDLIsZero() {
		if err := enc.NextField("F10"); err != nil {
			return err
		}
		if err := x.F10.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F11 != nil && !x.F11.VDLIsZero() {
		if err := enc.NextField("F11"); err != nil {
			return err
		}
		if err := x.F11.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F12 != nil {
		if err := enc.NextField("F12"); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()

		if err := x.F12.VDLWrite(enc); err != nil {
			return err
		}

	}
	if x.F13 != nil {
		if err := enc.NextField("F13"); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()

		if err := x.F13.VDLWrite(enc); err != nil {
			return err
		}

	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth2_All) VDLRead(dec vdl.Decoder) error {
	*x = VStructDepth2_All{
		F8: VStructDepth1_All{
			F5: vdl.AnyType,
		},
		F10: VUnionDepth1_Rand0F8{},
		F11: VUnionDepth1_Rand1F6{},
	}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "F0":
			if err := x.F0.VDLRead(dec); err != nil {
				return err
			}
		case "F1":
			if err := x.F1.VDLRead(dec); err != nil {
				return err
			}
		case "F2":
			if err := x.F2.VDLRead(dec); err != nil {
				return err
			}
		case "F3":
			if err := x.F3.VDLRead(dec); err != nil {
				return err
			}
		case "F4":
			if err := x.F4.VDLRead(dec); err != nil {
				return err
			}
		case "F5":
			if err := x.F5.VDLRead(dec); err != nil {
				return err
			}
		case "F6":
			if err := x.F6.VDLRead(dec); err != nil {
				return err
			}
		case "F7":
			if err := x.F7.VDLRead(dec); err != nil {
				return err
			}
		case "F8":
			if err := x.F8.VDLRead(dec); err != nil {
				return err
			}
		case "F9":
			if err := x.F9.VDLRead(dec); err != nil {
				return err
			}
		case "F10":
			if err := VDLReadVUnionDepth1_Rand0(dec, &x.F10); err != nil {
				return err
			}
		case "F11":
			if err := VDLReadVUnionDepth1_Rand1(dec, &x.F11); err != nil {
				return err
			}
		case "F12":
			if err := dec.StartValue(); err != nil {
				return err
			}
			if dec.IsNil() {
				if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x.F12), dec.Type()) {
					return fmt.Errorf("incompatible optional %T, from %v", x.F12, dec.Type())
				}
				x.F12 = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.F12 = new(VStructDepth1_All)
				dec.IgnoreNextStartValue()
				if err := x.F12.VDLRead(dec); err != nil {
					return err
				}
			}
		case "F13":
			if err := dec.StartValue(); err != nil {
				return err
			}
			if dec.IsNil() {
				if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x.F13), dec.Type()) {
					return fmt.Errorf("incompatible optional %T, from %v", x.F13, dec.Type())
				}
				x.F13 = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.F13 = new(VStructDepth1_Rand0)
				dec.IgnoreNextStartValue()
				if err := x.F13.VDLRead(dec); err != nil {
					return err
				}
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type VStructDepth2_Rand0 struct {
	F0  VArray3_Any
	F9  VStructDepth1_Rand1
	F10 VUnionDepth1_Rand0
	F11 VUnionDepth1_Rand1
}

func (VStructDepth2_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructDepth2_Rand0"`
}) {
}

func (x VStructDepth2_Rand0) VDLIsZero() bool {
	if x.F0 != (VArray3_Any{}) {
		return false
	}
	if x.F9 != (VStructDepth1_Rand1{}) {
		return false
	}
	if x.F10 != nil && !x.F10.VDLIsZero() {
		return false
	}
	if x.F11 != nil && !x.F11.VDLIsZero() {
		return false
	}
	return true
}

func (x VStructDepth2_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructDepth2_Rand0)(nil)).Elem()); err != nil {
		return err
	}
	if x.F0 != (VArray3_Any{}) {
		if err := enc.NextField("F0"); err != nil {
			return err
		}
		if err := x.F0.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F9 != (VStructDepth1_Rand1{}) {
		if err := enc.NextField("F9"); err != nil {
			return err
		}
		if err := x.F9.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F10 != nil && !x.F10.VDLIsZero() {
		if err := enc.NextField("F10"); err != nil {
			return err
		}
		if err := x.F10.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F11 != nil && !x.F11.VDLIsZero() {
		if err := enc.NextField("F11"); err != nil {
			return err
		}
		if err := x.F11.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth2_Rand0) VDLRead(dec vdl.Decoder) error {
	*x = VStructDepth2_Rand0{
		F10: VUnionDepth1_Rand0F8{},
		F11: VUnionDepth1_Rand1F6{},
	}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "F0":
			if err := x.F0.VDLRead(dec); err != nil {
				return err
			}
		case "F9":
			if err := x.F9.VDLRead(dec); err != nil {
				return err
			}
		case "F10":
			if err := VDLReadVUnionDepth1_Rand0(dec, &x.F10); err != nil {
				return err
			}
		case "F11":
			if err := VDLReadVUnionDepth1_Rand1(dec, &x.F11); err != nil {
				return err
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type VStructDepth2_Rand1 struct {
	F7 VMap_VEnumBcd_VEnumBcd
}

func (VStructDepth2_Rand1) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructDepth2_Rand1"`
}) {
}

func (x VStructDepth2_Rand1) VDLIsZero() bool {
	if len(x.F7) != 0 {
		return false
	}
	return true
}

func (x VStructDepth2_Rand1) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructDepth2_Rand1)(nil)).Elem()); err != nil {
		return err
	}
	if len(x.F7) != 0 {
		if err := enc.NextField("F7"); err != nil {
			return err
		}
		if err := x.F7.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth2_Rand1) VDLRead(dec vdl.Decoder) error {
	*x = VStructDepth2_Rand1{}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "F7":
			if err := x.F7.VDLRead(dec); err != nil {
				return err
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type (
	// VUnionDepth2_All represents any single field of the VUnionDepth2_All union type.
	VUnionDepth2_All interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the VUnionDepth2_All union type.
		__VDLReflect(__VUnionDepth2_AllReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth2_AllF0 represents field F0 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF0 struct{ Value VArray3_Bool }
	// VUnionDepth2_AllF1 represents field F1 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF1 struct{ Value VArray3_OptVStructEmpty }
	// VUnionDepth2_AllF2 represents field F2 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF2 struct{ Value []float64 }
	// VUnionDepth2_AllF3 represents field F3 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF3 struct{ Value VList_VUint32 }
	// VUnionDepth2_AllF4 represents field F4 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF4 struct{ Value map[int64]struct{} }
	// VUnionDepth2_AllF5 represents field F5 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF5 struct{ Value VSet_Byte }
	// VUnionDepth2_AllF6 represents field F6 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF6 struct{ Value VMap_VString_VString }
	// VUnionDepth2_AllF7 represents field F7 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF7 struct{ Value VMap_VEnumAbc_VEnumAbc }
	// VUnionDepth2_AllF8 represents field F8 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF8 struct{ Value VStructDepth1_All }
	// VUnionDepth2_AllF9 represents field F9 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF9 struct{ Value VStructDepth1_Rand0 }
	// VUnionDepth2_AllF10 represents field F10 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF10 struct{ Value VUnionDepth1_All }
	// VUnionDepth2_AllF11 represents field F11 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF11 struct{ Value VUnionDepth1_Rand0 }
	// VUnionDepth2_AllF12 represents field F12 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF12 struct{ Value *VStructDepth1_Rand0 }
	// VUnionDepth2_AllF13 represents field F13 of the VUnionDepth2_All union type.
	VUnionDepth2_AllF13 struct{ Value *VStructDepth1_Rand1 }
	// __VUnionDepth2_AllReflect describes the VUnionDepth2_All union type.
	__VUnionDepth2_AllReflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VUnionDepth2_All"`
		Type  VUnionDepth2_All
		Union struct {
			F0  VUnionDepth2_AllF0
			F1  VUnionDepth2_AllF1
			F2  VUnionDepth2_AllF2
			F3  VUnionDepth2_AllF3
			F4  VUnionDepth2_AllF4
			F5  VUnionDepth2_AllF5
			F6  VUnionDepth2_AllF6
			F7  VUnionDepth2_AllF7
			F8  VUnionDepth2_AllF8
			F9  VUnionDepth2_AllF9
			F10 VUnionDepth2_AllF10
			F11 VUnionDepth2_AllF11
			F12 VUnionDepth2_AllF12
			F13 VUnionDepth2_AllF13
		}
	}
)

func (x VUnionDepth2_AllF0) Index() int                             { return 0 }
func (x VUnionDepth2_AllF0) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF0) Name() string                           { return "F0" }
func (x VUnionDepth2_AllF0) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF1) Index() int                             { return 1 }
func (x VUnionDepth2_AllF1) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF1) Name() string                           { return "F1" }
func (x VUnionDepth2_AllF1) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF2) Index() int                             { return 2 }
func (x VUnionDepth2_AllF2) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF2) Name() string                           { return "F2" }
func (x VUnionDepth2_AllF2) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF3) Index() int                             { return 3 }
func (x VUnionDepth2_AllF3) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF3) Name() string                           { return "F3" }
func (x VUnionDepth2_AllF3) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF4) Index() int                             { return 4 }
func (x VUnionDepth2_AllF4) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF4) Name() string                           { return "F4" }
func (x VUnionDepth2_AllF4) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF5) Index() int                             { return 5 }
func (x VUnionDepth2_AllF5) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF5) Name() string                           { return "F5" }
func (x VUnionDepth2_AllF5) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF6) Index() int                             { return 6 }
func (x VUnionDepth2_AllF6) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF6) Name() string                           { return "F6" }
func (x VUnionDepth2_AllF6) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF7) Index() int                             { return 7 }
func (x VUnionDepth2_AllF7) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF7) Name() string                           { return "F7" }
func (x VUnionDepth2_AllF7) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF8) Index() int                             { return 8 }
func (x VUnionDepth2_AllF8) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF8) Name() string                           { return "F8" }
func (x VUnionDepth2_AllF8) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF9) Index() int                             { return 9 }
func (x VUnionDepth2_AllF9) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF9) Name() string                           { return "F9" }
func (x VUnionDepth2_AllF9) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF10) Index() int                             { return 10 }
func (x VUnionDepth2_AllF10) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF10) Name() string                           { return "F10" }
func (x VUnionDepth2_AllF10) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF11) Index() int                             { return 11 }
func (x VUnionDepth2_AllF11) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF11) Name() string                           { return "F11" }
func (x VUnionDepth2_AllF11) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF12) Index() int                             { return 12 }
func (x VUnionDepth2_AllF12) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF12) Name() string                           { return "F12" }
func (x VUnionDepth2_AllF12) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF13) Index() int                             { return 13 }
func (x VUnionDepth2_AllF13) Interface() interface{}                 { return x.Value }
func (x VUnionDepth2_AllF13) Name() string                           { return "F13" }
func (x VUnionDepth2_AllF13) __VDLReflect(__VUnionDepth2_AllReflect) {}

func (x VUnionDepth2_AllF0) VDLIsZero() bool {
	return x.Value == VArray3_Bool{}
}

func (x VUnionDepth2_AllF1) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF2) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF3) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF4) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF5) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF6) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF7) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF8) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF9) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF10) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF11) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF12) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF13) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_AllF0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F0"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF1) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F1"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF2) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F2"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_list_4(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF3) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F3"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF4) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F4"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_set_5(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF5) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F5"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF6) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F6"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF7) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F7"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF8) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F8"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF9) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F9"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF10) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F10"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	switch {
	case x.Value == nil:
		// Write the zero value of the union type.
		if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_All)(nil))).VDLWrite(enc); err != nil {
			return err
		}
	default:
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF11) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F11"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	switch {
	case x.Value == nil:
		// Write the zero value of the union type.
		if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))).VDLWrite(enc); err != nil {
			return err
		}
	default:
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF12) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F12"); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdl.TypeOf((**VStructDepth1_Rand0)(nil))); err != nil {
			return err
		}
	} else {
		enc.SetNextStartValueIsOptional()

		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}

	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_AllF13) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F13"); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdl.TypeOf((**VStructDepth1_Rand1)(nil))); err != nil {
			return err
		}
	} else {
		enc.SetNextStartValueIsOptional()

		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}

	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_list_4(enc vdl.Encoder, x []float64) error {
	if err := enc.StartValue(vdl.TypeOf((*[]float64)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Float64Type); err != nil {
			return err
		}
		if err := enc.EncodeFloat(x[i]); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_set_5(enc vdl.Encoder, x map[int64]struct{}) error {
	if err := enc.StartValue(vdl.TypeOf((*map[int64]struct{})(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := enc.StartValue(vdl.Int64Type); err != nil {
			return err
		}
		if err := enc.EncodeInt(key); err != nil {
			return err
		}
		if err := enc.FinishValue(); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth2_All(dec vdl.Decoder, x *VUnionDepth2_All) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x), dec.Type()) {
		return fmt.Errorf("incompatible union %T, from %v", x, dec.Type())
	}
	f, err := dec.NextField()
	if err != nil {
		return err
	}
	switch f {
	case "F0":
		var field VUnionDepth2_AllF0
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F1":
		var field VUnionDepth2_AllF1
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F2":
		var field VUnionDepth2_AllF2
		if err := __VDLReadAnon_list_4(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F3":
		var field VUnionDepth2_AllF3
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F4":
		var field VUnionDepth2_AllF4
		if err := __VDLReadAnon_set_5(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F5":
		var field VUnionDepth2_AllF5
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F6":
		var field VUnionDepth2_AllF6
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F7":
		var field VUnionDepth2_AllF7
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F8":
		var field VUnionDepth2_AllF8
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F9":
		var field VUnionDepth2_AllF9
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F10":
		var field VUnionDepth2_AllF10
		if err := VDLReadVUnionDepth1_All(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F11":
		var field VUnionDepth2_AllF11
		if err := VDLReadVUnionDepth1_Rand0(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F12":
		var field VUnionDepth2_AllF12
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(field.Value), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", field.Value, dec.Type())
			}
			field.Value = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			field.Value = new(VStructDepth1_Rand0)
			dec.IgnoreNextStartValue()
			if err := field.Value.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = field
	case "F13":
		var field VUnionDepth2_AllF13
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(field.Value), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", field.Value, dec.Type())
			}
			field.Value = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			field.Value = new(VStructDepth1_Rand1)
			dec.IgnoreNextStartValue()
			if err := field.Value.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = field
	case "":
		return fmt.Errorf("missing field in union %T, from %v", x, dec.Type())
	default:
		return fmt.Errorf("field %q not in union %T, from %v", f, x, dec.Type())
	}
	switch f, err := dec.NextField(); {
	case err != nil:
		return err
	case f != "":
		return fmt.Errorf("extra field %q in union %T, from %v", f, x, dec.Type())
	}
	return dec.FinishValue()
}

func __VDLReadAnon_list_4(dec vdl.Decoder, x *[]float64) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make([]float64, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem float64
		if err := dec.StartValue(); err != nil {
			return err
		}
		var err error
		if elem, err = dec.DecodeFloat(64); err != nil {
			return err
		}
		if err := dec.FinishValue(); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

func __VDLReadAnon_set_5(dec vdl.Decoder, x *map[int64]struct{}) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap map[int64]struct{}
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(map[int64]struct{}, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key int64
		{
			if err := dec.StartValue(); err != nil {
				return err
			}
			var err error
			if key, err = dec.DecodeInt(64); err != nil {
				return err
			}
			if err := dec.FinishValue(); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(map[int64]struct{})
		}
		tmpMap[key] = struct{}{}
	}
}

type (
	// VUnionDepth2_Rand0 represents any single field of the VUnionDepth2_Rand0 union type.
	VUnionDepth2_Rand0 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the VUnionDepth2_Rand0 union type.
		__VDLReflect(__VUnionDepth2_Rand0Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth2_Rand0F2 represents field F2 of the VUnionDepth2_Rand0 union type.
	VUnionDepth2_Rand0F2 struct{ Value []float64 }
	// VUnionDepth2_Rand0F8 represents field F8 of the VUnionDepth2_Rand0 union type.
	VUnionDepth2_Rand0F8 struct{ Value VStructDepth1_All }
	// VUnionDepth2_Rand0F12 represents field F12 of the VUnionDepth2_Rand0 union type.
	VUnionDepth2_Rand0F12 struct{ Value *VStructDepth1_Rand0 }
	// __VUnionDepth2_Rand0Reflect describes the VUnionDepth2_Rand0 union type.
	__VUnionDepth2_Rand0Reflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VUnionDepth2_Rand0"`
		Type  VUnionDepth2_Rand0
		Union struct {
			F2  VUnionDepth2_Rand0F2
			F8  VUnionDepth2_Rand0F8
			F12 VUnionDepth2_Rand0F12
		}
	}
)

func (x VUnionDepth2_Rand0F2) Index() int                               { return 0 }
func (x VUnionDepth2_Rand0F2) Interface() interface{}                   { return x.Value }
func (x VUnionDepth2_Rand0F2) Name() string                             { return "F2" }
func (x VUnionDepth2_Rand0F2) __VDLReflect(__VUnionDepth2_Rand0Reflect) {}

func (x VUnionDepth2_Rand0F8) Index() int                               { return 1 }
func (x VUnionDepth2_Rand0F8) Interface() interface{}                   { return x.Value }
func (x VUnionDepth2_Rand0F8) Name() string                             { return "F8" }
func (x VUnionDepth2_Rand0F8) __VDLReflect(__VUnionDepth2_Rand0Reflect) {}

func (x VUnionDepth2_Rand0F12) Index() int                               { return 2 }
func (x VUnionDepth2_Rand0F12) Interface() interface{}                   { return x.Value }
func (x VUnionDepth2_Rand0F12) Name() string                             { return "F12" }
func (x VUnionDepth2_Rand0F12) __VDLReflect(__VUnionDepth2_Rand0Reflect) {}

func (x VUnionDepth2_Rand0F2) VDLIsZero() bool {
	return len(x.Value) == 0
}

func (x VUnionDepth2_Rand0F8) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_Rand0F12) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_Rand0F2) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F2"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_list_4(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_Rand0F8) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F8"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_Rand0F12) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F12"); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdl.TypeOf((**VStructDepth1_Rand0)(nil))); err != nil {
			return err
		}
	} else {
		enc.SetNextStartValueIsOptional()

		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}

	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth2_Rand0(dec vdl.Decoder, x *VUnionDepth2_Rand0) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x), dec.Type()) {
		return fmt.Errorf("incompatible union %T, from %v", x, dec.Type())
	}
	f, err := dec.NextField()
	if err != nil {
		return err
	}
	switch f {
	case "F2":
		var field VUnionDepth2_Rand0F2
		if err := __VDLReadAnon_list_4(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F8":
		var field VUnionDepth2_Rand0F8
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F12":
		var field VUnionDepth2_Rand0F12
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(field.Value), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", field.Value, dec.Type())
			}
			field.Value = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			field.Value = new(VStructDepth1_Rand0)
			dec.IgnoreNextStartValue()
			if err := field.Value.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = field
	case "":
		return fmt.Errorf("missing field in union %T, from %v", x, dec.Type())
	default:
		return fmt.Errorf("field %q not in union %T, from %v", f, x, dec.Type())
	}
	switch f, err := dec.NextField(); {
	case err != nil:
		return err
	case f != "":
		return fmt.Errorf("extra field %q in union %T, from %v", f, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth2_Rand1 represents any single field of the VUnionDepth2_Rand1 union type.
	VUnionDepth2_Rand1 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the VUnionDepth2_Rand1 union type.
		__VDLReflect(__VUnionDepth2_Rand1Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth2_Rand1F2 represents field F2 of the VUnionDepth2_Rand1 union type.
	VUnionDepth2_Rand1F2 struct{ Value []float64 }
	// VUnionDepth2_Rand1F11 represents field F11 of the VUnionDepth2_Rand1 union type.
	VUnionDepth2_Rand1F11 struct{ Value VUnionDepth1_Rand0 }
	// __VUnionDepth2_Rand1Reflect describes the VUnionDepth2_Rand1 union type.
	__VUnionDepth2_Rand1Reflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VUnionDepth2_Rand1"`
		Type  VUnionDepth2_Rand1
		Union struct {
			F2  VUnionDepth2_Rand1F2
			F11 VUnionDepth2_Rand1F11
		}
	}
)

func (x VUnionDepth2_Rand1F2) Index() int                               { return 0 }
func (x VUnionDepth2_Rand1F2) Interface() interface{}                   { return x.Value }
func (x VUnionDepth2_Rand1F2) Name() string                             { return "F2" }
func (x VUnionDepth2_Rand1F2) __VDLReflect(__VUnionDepth2_Rand1Reflect) {}

func (x VUnionDepth2_Rand1F11) Index() int                               { return 1 }
func (x VUnionDepth2_Rand1F11) Interface() interface{}                   { return x.Value }
func (x VUnionDepth2_Rand1F11) Name() string                             { return "F11" }
func (x VUnionDepth2_Rand1F11) __VDLReflect(__VUnionDepth2_Rand1Reflect) {}

func (x VUnionDepth2_Rand1F2) VDLIsZero() bool {
	return len(x.Value) == 0
}

func (x VUnionDepth2_Rand1F11) VDLIsZero() bool {
	return false
}

func (x VUnionDepth2_Rand1F2) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F2"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_list_4(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth2_Rand1F11) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth2_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F11"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	switch {
	case x.Value == nil:
		// Write the zero value of the union type.
		if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))).VDLWrite(enc); err != nil {
			return err
		}
	default:
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth2_Rand1(dec vdl.Decoder, x *VUnionDepth2_Rand1) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x), dec.Type()) {
		return fmt.Errorf("incompatible union %T, from %v", x, dec.Type())
	}
	f, err := dec.NextField()
	if err != nil {
		return err
	}
	switch f {
	case "F2":
		var field VUnionDepth2_Rand1F2
		if err := __VDLReadAnon_list_4(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F11":
		var field VUnionDepth2_Rand1F11
		if err := VDLReadVUnionDepth1_Rand0(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "":
		return fmt.Errorf("missing field in union %T, from %v", x, dec.Type())
	default:
		return fmt.Errorf("field %q not in union %T, from %v", f, x, dec.Type())
	}
	switch f, err := dec.NextField(); {
	case err != nil:
		return err
	case f != "":
		return fmt.Errorf("extra field %q in union %T, from %v", f, x, dec.Type())
	}
	return dec.FinishValue()
}

type VArray3_VArray1_VStructDepth1_Rand0 [3]VArray1_VStructDepth1_Rand0

func (VArray3_VArray1_VStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_VArray1_VStructDepth1_Rand0"`
}) {
}

func (x VArray3_VArray1_VStructDepth1_Rand0) VDLIsZero() bool {
	return x == VArray3_VArray1_VStructDepth1_Rand0{}
}

func (x VArray3_VArray1_VStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_VArray1_VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_VArray1_VStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray1_VList_VStructDepth1_All [1]VList_VStructDepth1_All

func (VArray1_VList_VStructDepth1_All) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_VList_VStructDepth1_All"`
}) {
}

func (x VArray1_VList_VStructDepth1_All) VDLIsZero() bool {
	for _, elem := range x {
		if len(elem) != 0 {
			return false
		}
	}
	return true
}

func (x VArray1_VList_VStructDepth1_All) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_VList_VStructDepth1_All)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_VList_VStructDepth1_All) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray1_Set_VStructDepth1_Rand0 [1]map[VStructDepth1_Rand0]struct{}

func (VArray1_Set_VStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_Set_VStructDepth1_Rand0"`
}) {
}

func (x VArray1_Set_VStructDepth1_Rand0) VDLIsZero() bool {
	for _, elem := range x {
		if len(elem) != 0 {
			return false
		}
	}
	return true
}

func (x VArray1_Set_VStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_Set_VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := __VDLWriteAnon_set_6(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_set_6(enc vdl.Encoder, x map[VStructDepth1_Rand0]struct{}) error {
	if err := enc.StartValue(vdl.TypeOf((*map[VStructDepth1_Rand0]struct{})(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_Set_VStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := __VDLReadAnon_set_6(dec, &x[index]); err != nil {
			return err
		}
		index++
	}
}

func __VDLReadAnon_set_6(dec vdl.Decoder, x *map[VStructDepth1_Rand0]struct{}) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap map[VStructDepth1_Rand0]struct{}
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(map[VStructDepth1_Rand0]struct{}, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VStructDepth1_Rand0
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(map[VStructDepth1_Rand0]struct{})
		}
		tmpMap[key] = struct{}{}
	}
}

type VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty [1]map[VArray1_VStructEmpty]VArray1_VStructEmpty

func (VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty"`
}) {
}

func (x VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty) VDLIsZero() bool {
	for _, elem := range x {
		if len(elem) != 0 {
			return false
		}
	}
	return true
}

func (x VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := __VDLWriteAnon_map_7(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_map_7(enc vdl.Encoder, x map[VArray1_VStructEmpty]VArray1_VStructEmpty) error {
	if err := enc.StartValue(vdl.TypeOf((*map[VArray1_VStructEmpty]VArray1_VStructEmpty)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := __VDLReadAnon_map_7(dec, &x[index]); err != nil {
			return err
		}
		index++
	}
}

func __VDLReadAnon_map_7(dec vdl.Decoder, x *map[VArray1_VStructEmpty]VArray1_VStructEmpty) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap map[VArray1_VStructEmpty]VArray1_VStructEmpty
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(map[VArray1_VStructEmpty]VArray1_VStructEmpty, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VArray1_VStructEmpty
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VArray1_VStructEmpty
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(map[VArray1_VStructEmpty]VArray1_VStructEmpty)
		}
		tmpMap[key] = elem
	}
}

type VArray1_VStructDepth2_Rand0 [1]VStructDepth2_Rand0

func (VArray1_VStructDepth2_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_VStructDepth2_Rand0"`
}) {
}

func (x VArray1_VStructDepth2_Rand0) VDLIsZero() bool {
	for _, elem := range x {
		if !elem.VDLIsZero() {
			return false
		}
	}
	return true
}

func (x VArray1_VStructDepth2_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_VStructDepth2_Rand0)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_VStructDepth2_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := x[index].VDLRead(dec); err != nil {
			return err
		}
		index++
	}
}

type VArray1_VUnionDepth2_Rand1 [1]VUnionDepth2_Rand1

func (VArray1_VUnionDepth2_Rand1) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray1_VUnionDepth2_Rand1"`
}) {
}

func (x VArray1_VUnionDepth2_Rand1) VDLIsZero() bool {
	for _, elem := range x {
		if elem != nil && !elem.VDLIsZero() {
			return false
		}
	}
	return true
}

func (x VArray1_VUnionDepth2_Rand1) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray1_VUnionDepth2_Rand1)(nil))); err != nil {
		return err
	}
	for i := 0; i < 1; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
		switch {
		case x[i] == nil:
			// Write the zero value of the union type.
			if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth2_Rand1)(nil))).VDLWrite(enc); err != nil {
				return err
			}
		default:
			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray1_VUnionDepth2_Rand1) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := VDLReadVUnionDepth2_Rand1(dec, &x[index]); err != nil {
			return err
		}
		index++
	}
}

type VArray3_OptVStructDepth2_Rand0 [3]*VStructDepth2_Rand0

func (VArray3_OptVStructDepth2_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VArray3_OptVStructDepth2_Rand0"`
}) {
}

func (x VArray3_OptVStructDepth2_Rand0) VDLIsZero() bool {
	return x == VArray3_OptVStructDepth2_Rand0{}
}

func (x VArray3_OptVStructDepth2_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VArray3_OptVStructDepth2_Rand0)(nil))); err != nil {
		return err
	}
	for i := 0; i < 3; i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if x[i] == nil {
			if err := enc.NilValue(vdl.TypeOf((**VStructDepth2_Rand0)(nil))); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()

			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}

		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VArray3_OptVStructDepth2_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible array %T, from %v", *x, dec.Type())
	}
	index := 0
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done != (index >= len(*x)):
			return fmt.Errorf("array len mismatch, got %d, want %T", index, *x)
		case done:
			return dec.FinishValue()
		}
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x[index]), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", x[index], dec.Type())
			}
			x[index] = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			x[index] = new(VStructDepth2_Rand0)
			dec.IgnoreNextStartValue()
			if err := x[index].VDLRead(dec); err != nil {
				return err
			}
		}
		index++
	}
}

type VList_VArray1_OptVStructDepth1_Rand0 []VArray1_OptVStructDepth1_Rand0

func (VList_VArray1_OptVStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VArray1_OptVStructDepth1_Rand0"`
}) {
}

func (x VList_VArray1_OptVStructDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VArray1_OptVStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VArray1_OptVStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VArray1_OptVStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VArray1_OptVStructDepth1_Rand0, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VArray1_OptVStructDepth1_Rand0
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_List_VMap_VEnumBcd_VEnumBcd [][]VMap_VEnumBcd_VEnumBcd

func (VList_List_VMap_VEnumBcd_VEnumBcd) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_List_VMap_VEnumBcd_VEnumBcd"`
}) {
}

func (x VList_List_VMap_VEnumBcd_VEnumBcd) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_List_VMap_VEnumBcd_VEnumBcd) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_List_VMap_VEnumBcd_VEnumBcd)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := __VDLWriteAnon_list_8(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_list_8(enc vdl.Encoder, x []VMap_VEnumBcd_VEnumBcd) error {
	if err := enc.StartValue(vdl.TypeOf((*[]VMap_VEnumBcd_VEnumBcd)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_List_VMap_VEnumBcd_VEnumBcd) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_List_VMap_VEnumBcd_VEnumBcd, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem []VMap_VEnumBcd_VEnumBcd
		if err := __VDLReadAnon_list_8(dec, &elem); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

func __VDLReadAnon_list_8(dec vdl.Decoder, x *[]VMap_VEnumBcd_VEnumBcd) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make([]VMap_VEnumBcd_VEnumBcd, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VMap_VEnumBcd_VEnumBcd
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_Set_VStructDepth1_Rand0 []map[VStructDepth1_Rand0]struct{}

func (VList_Set_VStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_Set_VStructDepth1_Rand0"`
}) {
}

func (x VList_Set_VStructDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_Set_VStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_Set_VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := __VDLWriteAnon_set_6(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_Set_VStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_Set_VStructDepth1_Rand0, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem map[VStructDepth1_Rand0]struct{}
		if err := __VDLReadAnon_set_6(dec, &elem); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0 []VMap_VStructDepth1_Rand0_VStructDepth1_Rand0

func (VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0"`
}) {
}

func (x VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VMap_VStructDepth1_Rand0_VStructDepth1_Rand0
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VStructDepth2_All []VStructDepth2_All

func (VList_VStructDepth2_All) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VStructDepth2_All"`
}) {
}

func (x VList_VStructDepth2_All) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VStructDepth2_All) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VStructDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VStructDepth2_All) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VStructDepth2_All, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VStructDepth2_All
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_VUnionDepth2_All []VUnionDepth2_All

func (VList_VUnionDepth2_All) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_VUnionDepth2_All"`
}) {
}

func (x VList_VUnionDepth2_All) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_VUnionDepth2_All) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_VUnionDepth2_All)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
		switch {
		case x[i] == nil:
			// Write the zero value of the union type.
			if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth2_All)(nil))).VDLWrite(enc); err != nil {
				return err
			}
		default:
			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_VUnionDepth2_All) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_VUnionDepth2_All, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VUnionDepth2_All
		if err := VDLReadVUnionDepth2_All(dec, &elem); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type VList_OptVStructDepth2_Rand0 []*VStructDepth2_Rand0

func (VList_OptVStructDepth2_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VList_OptVStructDepth2_Rand0"`
}) {
}

func (x VList_OptVStructDepth2_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VList_OptVStructDepth2_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VList_OptVStructDepth2_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if x[i] == nil {
			if err := enc.NilValue(vdl.TypeOf((**VStructDepth2_Rand0)(nil))); err != nil {
				return err
			}
		} else {
			enc.SetNextStartValueIsOptional()

			if err := x[i].VDLWrite(enc); err != nil {
				return err
			}

		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VList_OptVStructDepth2_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make(VList_OptVStructDepth2_Rand0, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem *VStructDepth2_Rand0
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(elem), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", elem, dec.Type())
			}
			elem = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			elem = new(VStructDepth2_Rand0)
			dec.IgnoreNextStartValue()
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = append(*x, elem)
	}
}

type VSet_VArray1_VArray3_Bool map[VArray1_VArray3_Bool]struct{}

func (VSet_VArray1_VArray3_Bool) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VSet_VArray1_VArray3_Bool"`
}) {
}

func (x VSet_VArray1_VArray3_Bool) VDLIsZero() bool {
	return len(x) == 0
}

func (x VSet_VArray1_VArray3_Bool) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VSet_VArray1_VArray3_Bool)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VSet_VArray1_VArray3_Bool) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible set %T, from %v", *x, dec.Type())
	}
	var tmpMap VSet_VArray1_VArray3_Bool
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VSet_VArray1_VArray3_Bool, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VArray1_VArray3_Bool
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VSet_VArray1_VArray3_Bool)
		}
		tmpMap[key] = struct{}{}
	}
}

type VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0 map[VArray1_VStructDepth1_Rand0]VArray1_VStructDepth1_Rand0

func (VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0"`
}) {
}

func (x VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0) VDLIsZero() bool {
	return len(x) == 0
}

func (x VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0) VDLRead(dec vdl.Decoder) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VArray1_VStructDepth1_Rand0
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VArray1_VStructDepth1_Rand0
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0)
		}
		tmpMap[key] = elem
	}
}

type VStructDepth3_All struct {
	F0  VArray3_Map_String_String
	F1  VArray1_OptVStructDepth1_Rand0
	F2  []VSet_Byte
	F3  VList_List_VBool
	F4  VSet_VStructDepth1_Rand0
	F5  VSet_VUnionDepth1_Rand0
	F6  map[VStructDepth1_Rand0]VStructDepth1_Rand0
	F7  map[VUnionDepth1_Rand0]VUnionDepth1_Rand0
	F8  VStructDepth2_Rand0
	F9  VStructDepth2_Rand1
	F10 VUnionDepth2_All
	F11 VUnionDepth2_Rand0
	F12 *VStructDepth2_Rand0
}

func (VStructDepth3_All) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructDepth3_All"`
}) {
}

func (x VStructDepth3_All) VDLIsZero() bool {
	if !x.F0.VDLIsZero() {
		return false
	}
	if x.F1 != (VArray1_OptVStructDepth1_Rand0{}) {
		return false
	}
	if len(x.F2) != 0 {
		return false
	}
	if len(x.F3) != 0 {
		return false
	}
	if len(x.F4) != 0 {
		return false
	}
	if len(x.F5) != 0 {
		return false
	}
	if len(x.F6) != 0 {
		return false
	}
	if len(x.F7) != 0 {
		return false
	}
	if !x.F8.VDLIsZero() {
		return false
	}
	if !x.F9.VDLIsZero() {
		return false
	}
	if x.F10 != nil && !x.F10.VDLIsZero() {
		return false
	}
	if x.F11 != nil && !x.F11.VDLIsZero() {
		return false
	}
	if x.F12 != nil {
		return false
	}
	return true
}

func (x VStructDepth3_All) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructDepth3_All)(nil)).Elem()); err != nil {
		return err
	}
	if !x.F0.VDLIsZero() {
		if err := enc.NextField("F0"); err != nil {
			return err
		}
		if err := x.F0.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F1 != (VArray1_OptVStructDepth1_Rand0{}) {
		if err := enc.NextField("F1"); err != nil {
			return err
		}
		if err := x.F1.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F2) != 0 {
		if err := enc.NextField("F2"); err != nil {
			return err
		}
		if err := __VDLWriteAnon_list_9(enc, x.F2); err != nil {
			return err
		}
	}
	if len(x.F3) != 0 {
		if err := enc.NextField("F3"); err != nil {
			return err
		}
		if err := x.F3.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F4) != 0 {
		if err := enc.NextField("F4"); err != nil {
			return err
		}
		if err := x.F4.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F5) != 0 {
		if err := enc.NextField("F5"); err != nil {
			return err
		}
		if err := x.F5.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F6) != 0 {
		if err := enc.NextField("F6"); err != nil {
			return err
		}
		if err := __VDLWriteAnon_map_10(enc, x.F6); err != nil {
			return err
		}
	}
	if len(x.F7) != 0 {
		if err := enc.NextField("F7"); err != nil {
			return err
		}
		if err := __VDLWriteAnon_map_11(enc, x.F7); err != nil {
			return err
		}
	}
	if !x.F8.VDLIsZero() {
		if err := enc.NextField("F8"); err != nil {
			return err
		}
		if err := x.F8.VDLWrite(enc); err != nil {
			return err
		}
	}
	if !x.F9.VDLIsZero() {
		if err := enc.NextField("F9"); err != nil {
			return err
		}
		if err := x.F9.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F10 != nil && !x.F10.VDLIsZero() {
		if err := enc.NextField("F10"); err != nil {
			return err
		}
		if err := x.F10.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F11 != nil && !x.F11.VDLIsZero() {
		if err := enc.NextField("F11"); err != nil {
			return err
		}
		if err := x.F11.VDLWrite(enc); err != nil {
			return err
		}
	}
	if x.F12 != nil {
		if err := enc.NextField("F12"); err != nil {
			return err
		}
		enc.SetNextStartValueIsOptional()

		if err := x.F12.VDLWrite(enc); err != nil {
			return err
		}

	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_list_9(enc vdl.Encoder, x []VSet_Byte) error {
	if err := enc.StartValue(vdl.TypeOf((*[]VSet_Byte)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_map_10(enc vdl.Encoder, x map[VStructDepth1_Rand0]VStructDepth1_Rand0) error {
	if err := enc.StartValue(vdl.TypeOf((*map[VStructDepth1_Rand0]VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_map_11(enc vdl.Encoder, x map[VUnionDepth1_Rand0]VUnionDepth1_Rand0) error {
	if err := enc.StartValue(vdl.TypeOf((*map[VUnionDepth1_Rand0]VUnionDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for key, elem := range x {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := key.VDLWrite(enc); err != nil {
			return err
		}
		switch {
		case key == nil:
			// Write the zero value of the union type.
			if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))).VDLWrite(enc); err != nil {
				return err
			}
		default:
			if err := key.VDLWrite(enc); err != nil {
				return err
			}
		}
		if err := elem.VDLWrite(enc); err != nil {
			return err
		}
		switch {
		case elem == nil:
			// Write the zero value of the union type.
			if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth1_Rand0)(nil))).VDLWrite(enc); err != nil {
				return err
			}
		default:
			if err := elem.VDLWrite(enc); err != nil {
				return err
			}
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth3_All) VDLRead(dec vdl.Decoder) error {
	*x = VStructDepth3_All{
		F8: VStructDepth2_Rand0{
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
		F10: VUnionDepth2_AllF0{},
		F11: VUnionDepth2_Rand0F2{},
	}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "F0":
			if err := x.F0.VDLRead(dec); err != nil {
				return err
			}
		case "F1":
			if err := x.F1.VDLRead(dec); err != nil {
				return err
			}
		case "F2":
			if err := __VDLReadAnon_list_9(dec, &x.F2); err != nil {
				return err
			}
		case "F3":
			if err := x.F3.VDLRead(dec); err != nil {
				return err
			}
		case "F4":
			if err := x.F4.VDLRead(dec); err != nil {
				return err
			}
		case "F5":
			if err := x.F5.VDLRead(dec); err != nil {
				return err
			}
		case "F6":
			if err := __VDLReadAnon_map_10(dec, &x.F6); err != nil {
				return err
			}
		case "F7":
			if err := __VDLReadAnon_map_11(dec, &x.F7); err != nil {
				return err
			}
		case "F8":
			if err := x.F8.VDLRead(dec); err != nil {
				return err
			}
		case "F9":
			if err := x.F9.VDLRead(dec); err != nil {
				return err
			}
		case "F10":
			if err := VDLReadVUnionDepth2_All(dec, &x.F10); err != nil {
				return err
			}
		case "F11":
			if err := VDLReadVUnionDepth2_Rand0(dec, &x.F11); err != nil {
				return err
			}
		case "F12":
			if err := dec.StartValue(); err != nil {
				return err
			}
			if dec.IsNil() {
				if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x.F12), dec.Type()) {
					return fmt.Errorf("incompatible optional %T, from %v", x.F12, dec.Type())
				}
				x.F12 = nil
				if err := dec.FinishValue(); err != nil {
					return err
				}
			} else {
				x.F12 = new(VStructDepth2_Rand0)
				dec.IgnoreNextStartValue()
				if err := x.F12.VDLRead(dec); err != nil {
					return err
				}
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

func __VDLReadAnon_list_9(dec vdl.Decoder, x *[]VSet_Byte) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make([]VSet_Byte, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VSet_Byte
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

func __VDLReadAnon_map_10(dec vdl.Decoder, x *map[VStructDepth1_Rand0]VStructDepth1_Rand0) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap map[VStructDepth1_Rand0]VStructDepth1_Rand0
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(map[VStructDepth1_Rand0]VStructDepth1_Rand0, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VStructDepth1_Rand0
		{
			if err := key.VDLRead(dec); err != nil {
				return err
			}
		}
		var elem VStructDepth1_Rand0
		{
			if err := elem.VDLRead(dec); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(map[VStructDepth1_Rand0]VStructDepth1_Rand0)
		}
		tmpMap[key] = elem
	}
}

func __VDLReadAnon_map_11(dec vdl.Decoder, x *map[VUnionDepth1_Rand0]VUnionDepth1_Rand0) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible map %T, from %v", *x, dec.Type())
	}
	var tmpMap map[VUnionDepth1_Rand0]VUnionDepth1_Rand0
	if len := dec.LenHint(); len > 0 {
		tmpMap = make(map[VUnionDepth1_Rand0]VUnionDepth1_Rand0, len)
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			*x = tmpMap
			return dec.FinishValue()
		}
		var key VUnionDepth1_Rand0
		{
			if err := VDLReadVUnionDepth1_Rand0(dec, &key); err != nil {
				return err
			}
		}
		var elem VUnionDepth1_Rand0
		{
			if err := VDLReadVUnionDepth1_Rand0(dec, &elem); err != nil {
				return err
			}
		}
		if tmpMap == nil {
			tmpMap = make(map[VUnionDepth1_Rand0]VUnionDepth1_Rand0)
		}
		tmpMap[key] = elem
	}
}

type VStructDepth3_Rand0 struct {
	F1 VArray1_OptVStructDepth1_Rand0
	F5 VSet_VUnionDepth1_Rand0
	F7 map[VUnionDepth1_Rand0]VUnionDepth1_Rand0
	F8 VStructDepth2_Rand0
}

func (VStructDepth3_Rand0) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructDepth3_Rand0"`
}) {
}

func (x VStructDepth3_Rand0) VDLIsZero() bool {
	if x.F1 != (VArray1_OptVStructDepth1_Rand0{}) {
		return false
	}
	if len(x.F5) != 0 {
		return false
	}
	if len(x.F7) != 0 {
		return false
	}
	if !x.F8.VDLIsZero() {
		return false
	}
	return true
}

func (x VStructDepth3_Rand0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructDepth3_Rand0)(nil)).Elem()); err != nil {
		return err
	}
	if x.F1 != (VArray1_OptVStructDepth1_Rand0{}) {
		if err := enc.NextField("F1"); err != nil {
			return err
		}
		if err := x.F1.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F5) != 0 {
		if err := enc.NextField("F5"); err != nil {
			return err
		}
		if err := x.F5.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F7) != 0 {
		if err := enc.NextField("F7"); err != nil {
			return err
		}
		if err := __VDLWriteAnon_map_11(enc, x.F7); err != nil {
			return err
		}
	}
	if !x.F8.VDLIsZero() {
		if err := enc.NextField("F8"); err != nil {
			return err
		}
		if err := x.F8.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth3_Rand0) VDLRead(dec vdl.Decoder) error {
	*x = VStructDepth3_Rand0{
		F8: VStructDepth2_Rand0{
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "F1":
			if err := x.F1.VDLRead(dec); err != nil {
				return err
			}
		case "F5":
			if err := x.F5.VDLRead(dec); err != nil {
				return err
			}
		case "F7":
			if err := __VDLReadAnon_map_11(dec, &x.F7); err != nil {
				return err
			}
		case "F8":
			if err := x.F8.VDLRead(dec); err != nil {
				return err
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type VStructDepth3_Rand1 struct {
	F1  VArray1_OptVStructDepth1_Rand0
	F2  []VSet_Byte
	F11 VUnionDepth2_Rand0
}

func (VStructDepth3_Rand1) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/vdl/vdltest.VStructDepth3_Rand1"`
}) {
}

func (x VStructDepth3_Rand1) VDLIsZero() bool {
	if x.F1 != (VArray1_OptVStructDepth1_Rand0{}) {
		return false
	}
	if len(x.F2) != 0 {
		return false
	}
	if x.F11 != nil && !x.F11.VDLIsZero() {
		return false
	}
	return true
}

func (x VStructDepth3_Rand1) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VStructDepth3_Rand1)(nil)).Elem()); err != nil {
		return err
	}
	if x.F1 != (VArray1_OptVStructDepth1_Rand0{}) {
		if err := enc.NextField("F1"); err != nil {
			return err
		}
		if err := x.F1.VDLWrite(enc); err != nil {
			return err
		}
	}
	if len(x.F2) != 0 {
		if err := enc.NextField("F2"); err != nil {
			return err
		}
		if err := __VDLWriteAnon_list_9(enc, x.F2); err != nil {
			return err
		}
	}
	if x.F11 != nil && !x.F11.VDLIsZero() {
		if err := enc.NextField("F11"); err != nil {
			return err
		}
		if err := x.F11.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x *VStructDepth3_Rand1) VDLRead(dec vdl.Decoder) error {
	*x = VStructDepth3_Rand1{
		F11: VUnionDepth2_Rand0F2{},
	}
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible struct %T, from %v", *x, dec.Type())
	}
	for {
		f, err := dec.NextField()
		if err != nil {
			return err
		}
		switch f {
		case "":
			return dec.FinishValue()
		case "F1":
			if err := x.F1.VDLRead(dec); err != nil {
				return err
			}
		case "F2":
			if err := __VDLReadAnon_list_9(dec, &x.F2); err != nil {
				return err
			}
		case "F11":
			if err := VDLReadVUnionDepth2_Rand0(dec, &x.F11); err != nil {
				return err
			}
		default:
			if err := dec.SkipValue(); err != nil {
				return err
			}
		}
	}
}

type (
	// VUnionDepth3_All represents any single field of the VUnionDepth3_All union type.
	VUnionDepth3_All interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the VUnionDepth3_All union type.
		__VDLReflect(__VUnionDepth3_AllReflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth3_AllF0 represents field F0 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF0 struct{ Value VArray1_VStructDepth1_Rand0 }
	// VUnionDepth3_AllF1 represents field F1 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF1 struct{ Value VArray3_VUnionDepth1_Rand1 }
	// VUnionDepth3_AllF2 represents field F2 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF2 struct{ Value [][]VEnumAbc }
	// VUnionDepth3_AllF3 represents field F3 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF3 struct{ Value []VStructDepth1_Rand0 }
	// VUnionDepth3_AllF4 represents field F4 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF4 struct {
		Value map[VStructDepth1_Rand0]struct{}
	}
	// VUnionDepth3_AllF5 represents field F5 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF5 struct{ Value VSet_VArray3_Bool }
	// VUnionDepth3_AllF6 represents field F6 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF6 struct {
		Value map[VStructDepth1_Rand0]VStructDepth1_Rand0
	}
	// VUnionDepth3_AllF7 represents field F7 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF7 struct {
		Value VMap_VStructDepth1_Rand0_VStructDepth1_Rand0
	}
	// VUnionDepth3_AllF8 represents field F8 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF8 struct{ Value VStructDepth2_Rand0 }
	// VUnionDepth3_AllF9 represents field F9 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF9 struct{ Value VStructDepth2_Rand1 }
	// VUnionDepth3_AllF10 represents field F10 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF10 struct{ Value VUnionDepth2_All }
	// VUnionDepth3_AllF11 represents field F11 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF11 struct{ Value VUnionDepth2_Rand0 }
	// VUnionDepth3_AllF12 represents field F12 of the VUnionDepth3_All union type.
	VUnionDepth3_AllF12 struct{ Value *VStructDepth2_Rand0 }
	// __VUnionDepth3_AllReflect describes the VUnionDepth3_All union type.
	__VUnionDepth3_AllReflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VUnionDepth3_All"`
		Type  VUnionDepth3_All
		Union struct {
			F0  VUnionDepth3_AllF0
			F1  VUnionDepth3_AllF1
			F2  VUnionDepth3_AllF2
			F3  VUnionDepth3_AllF3
			F4  VUnionDepth3_AllF4
			F5  VUnionDepth3_AllF5
			F6  VUnionDepth3_AllF6
			F7  VUnionDepth3_AllF7
			F8  VUnionDepth3_AllF8
			F9  VUnionDepth3_AllF9
			F10 VUnionDepth3_AllF10
			F11 VUnionDepth3_AllF11
			F12 VUnionDepth3_AllF12
		}
	}
)

func (x VUnionDepth3_AllF0) Index() int                             { return 0 }
func (x VUnionDepth3_AllF0) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF0) Name() string                           { return "F0" }
func (x VUnionDepth3_AllF0) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF1) Index() int                             { return 1 }
func (x VUnionDepth3_AllF1) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF1) Name() string                           { return "F1" }
func (x VUnionDepth3_AllF1) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF2) Index() int                             { return 2 }
func (x VUnionDepth3_AllF2) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF2) Name() string                           { return "F2" }
func (x VUnionDepth3_AllF2) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF3) Index() int                             { return 3 }
func (x VUnionDepth3_AllF3) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF3) Name() string                           { return "F3" }
func (x VUnionDepth3_AllF3) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF4) Index() int                             { return 4 }
func (x VUnionDepth3_AllF4) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF4) Name() string                           { return "F4" }
func (x VUnionDepth3_AllF4) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF5) Index() int                             { return 5 }
func (x VUnionDepth3_AllF5) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF5) Name() string                           { return "F5" }
func (x VUnionDepth3_AllF5) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF6) Index() int                             { return 6 }
func (x VUnionDepth3_AllF6) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF6) Name() string                           { return "F6" }
func (x VUnionDepth3_AllF6) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF7) Index() int                             { return 7 }
func (x VUnionDepth3_AllF7) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF7) Name() string                           { return "F7" }
func (x VUnionDepth3_AllF7) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF8) Index() int                             { return 8 }
func (x VUnionDepth3_AllF8) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF8) Name() string                           { return "F8" }
func (x VUnionDepth3_AllF8) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF9) Index() int                             { return 9 }
func (x VUnionDepth3_AllF9) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF9) Name() string                           { return "F9" }
func (x VUnionDepth3_AllF9) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF10) Index() int                             { return 10 }
func (x VUnionDepth3_AllF10) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF10) Name() string                           { return "F10" }
func (x VUnionDepth3_AllF10) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF11) Index() int                             { return 11 }
func (x VUnionDepth3_AllF11) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF11) Name() string                           { return "F11" }
func (x VUnionDepth3_AllF11) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF12) Index() int                             { return 12 }
func (x VUnionDepth3_AllF12) Interface() interface{}                 { return x.Value }
func (x VUnionDepth3_AllF12) Name() string                           { return "F12" }
func (x VUnionDepth3_AllF12) __VDLReflect(__VUnionDepth3_AllReflect) {}

func (x VUnionDepth3_AllF0) VDLIsZero() bool {
	return x.Value == VArray1_VStructDepth1_Rand0{}
}

func (x VUnionDepth3_AllF1) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF2) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF3) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF4) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF5) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF6) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF7) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF8) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF9) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF10) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF11) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF12) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_AllF0) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F0"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF1) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F1"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF2) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F2"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_list_12(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF3) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F3"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_list_13(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF4) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F4"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_set_6(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF5) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F5"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF6) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F6"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_map_10(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF7) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F7"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF8) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F8"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF9) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F9"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF10) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F10"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	switch {
	case x.Value == nil:
		// Write the zero value of the union type.
		if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth2_All)(nil))).VDLWrite(enc); err != nil {
			return err
		}
	default:
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF11) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F11"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	switch {
	case x.Value == nil:
		// Write the zero value of the union type.
		if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth2_Rand0)(nil))).VDLWrite(enc); err != nil {
			return err
		}
	default:
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_AllF12) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_All)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F12"); err != nil {
		return err
	}
	if x.Value == nil {
		if err := enc.NilValue(vdl.TypeOf((**VStructDepth2_Rand0)(nil))); err != nil {
			return err
		}
	} else {
		enc.SetNextStartValueIsOptional()

		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}

	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_list_12(enc vdl.Encoder, x [][]VEnumAbc) error {
	if err := enc.StartValue(vdl.TypeOf((*[][]VEnumAbc)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := __VDLWriteAnon_list_14(enc, x[i]); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_list_13(enc vdl.Encoder, x []VStructDepth1_Rand0) error {
	if err := enc.StartValue(vdl.TypeOf((*[]VStructDepth1_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func __VDLWriteAnon_list_14(enc vdl.Encoder, x []VEnumAbc) error {
	if err := enc.StartValue(vdl.TypeOf((*[]VEnumAbc)(nil))); err != nil {
		return err
	}
	if err := enc.SetLenHint(len(x)); err != nil {
		return err
	}
	for i := 0; i < len(x); i++ {
		if err := enc.NextEntry(false); err != nil {
			return err
		}
		if err := x[i].VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextEntry(true); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth3_All(dec vdl.Decoder, x *VUnionDepth3_All) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x), dec.Type()) {
		return fmt.Errorf("incompatible union %T, from %v", x, dec.Type())
	}
	f, err := dec.NextField()
	if err != nil {
		return err
	}
	switch f {
	case "F0":
		var field VUnionDepth3_AllF0
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F1":
		var field VUnionDepth3_AllF1
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F2":
		var field VUnionDepth3_AllF2
		if err := __VDLReadAnon_list_12(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F3":
		var field VUnionDepth3_AllF3
		if err := __VDLReadAnon_list_13(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F4":
		var field VUnionDepth3_AllF4
		if err := __VDLReadAnon_set_6(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F5":
		var field VUnionDepth3_AllF5
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F6":
		var field VUnionDepth3_AllF6
		if err := __VDLReadAnon_map_10(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F7":
		var field VUnionDepth3_AllF7
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F8":
		var field VUnionDepth3_AllF8
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F9":
		var field VUnionDepth3_AllF9
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F10":
		var field VUnionDepth3_AllF10
		if err := VDLReadVUnionDepth2_All(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F11":
		var field VUnionDepth3_AllF11
		if err := VDLReadVUnionDepth2_Rand0(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F12":
		var field VUnionDepth3_AllF12
		if err := dec.StartValue(); err != nil {
			return err
		}
		if dec.IsNil() {
			if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(field.Value), dec.Type()) {
				return fmt.Errorf("incompatible optional %T, from %v", field.Value, dec.Type())
			}
			field.Value = nil
			if err := dec.FinishValue(); err != nil {
				return err
			}
		} else {
			field.Value = new(VStructDepth2_Rand0)
			dec.IgnoreNextStartValue()
			if err := field.Value.VDLRead(dec); err != nil {
				return err
			}
		}
		*x = field
	case "":
		return fmt.Errorf("missing field in union %T, from %v", x, dec.Type())
	default:
		return fmt.Errorf("field %q not in union %T, from %v", f, x, dec.Type())
	}
	switch f, err := dec.NextField(); {
	case err != nil:
		return err
	case f != "":
		return fmt.Errorf("extra field %q in union %T, from %v", f, x, dec.Type())
	}
	return dec.FinishValue()
}

func __VDLReadAnon_list_12(dec vdl.Decoder, x *[][]VEnumAbc) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make([][]VEnumAbc, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem []VEnumAbc
		if err := __VDLReadAnon_list_14(dec, &elem); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

func __VDLReadAnon_list_13(dec vdl.Decoder, x *[]VStructDepth1_Rand0) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make([]VStructDepth1_Rand0, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VStructDepth1_Rand0
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

func __VDLReadAnon_list_14(dec vdl.Decoder, x *[]VEnumAbc) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(*x), dec.Type()) {
		return fmt.Errorf("incompatible list %T, from %v", *x, dec.Type())
	}
	switch len := dec.LenHint(); {
	case len > 0:
		*x = make([]VEnumAbc, 0, len)
	default:
		*x = nil
	}
	for {
		switch done, err := dec.NextEntry(); {
		case err != nil:
			return err
		case done:
			return dec.FinishValue()
		}
		var elem VEnumAbc
		if err := elem.VDLRead(dec); err != nil {
			return err
		}
		*x = append(*x, elem)
	}
}

type (
	// VUnionDepth3_Rand0 represents any single field of the VUnionDepth3_Rand0 union type.
	VUnionDepth3_Rand0 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the VUnionDepth3_Rand0 union type.
		__VDLReflect(__VUnionDepth3_Rand0Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth3_Rand0F2 represents field F2 of the VUnionDepth3_Rand0 union type.
	VUnionDepth3_Rand0F2 struct{ Value [][]VEnumAbc }
	// __VUnionDepth3_Rand0Reflect describes the VUnionDepth3_Rand0 union type.
	__VUnionDepth3_Rand0Reflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VUnionDepth3_Rand0"`
		Type  VUnionDepth3_Rand0
		Union struct {
			F2 VUnionDepth3_Rand0F2
		}
	}
)

func (x VUnionDepth3_Rand0F2) Index() int                               { return 0 }
func (x VUnionDepth3_Rand0F2) Interface() interface{}                   { return x.Value }
func (x VUnionDepth3_Rand0F2) Name() string                             { return "F2" }
func (x VUnionDepth3_Rand0F2) __VDLReflect(__VUnionDepth3_Rand0Reflect) {}

func (x VUnionDepth3_Rand0F2) VDLIsZero() bool {
	return len(x.Value) == 0
}

func (x VUnionDepth3_Rand0F2) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_Rand0)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F2"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_list_12(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth3_Rand0(dec vdl.Decoder, x *VUnionDepth3_Rand0) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x), dec.Type()) {
		return fmt.Errorf("incompatible union %T, from %v", x, dec.Type())
	}
	f, err := dec.NextField()
	if err != nil {
		return err
	}
	switch f {
	case "F2":
		var field VUnionDepth3_Rand0F2
		if err := __VDLReadAnon_list_12(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "":
		return fmt.Errorf("missing field in union %T, from %v", x, dec.Type())
	default:
		return fmt.Errorf("field %q not in union %T, from %v", f, x, dec.Type())
	}
	switch f, err := dec.NextField(); {
	case err != nil:
		return err
	case f != "":
		return fmt.Errorf("extra field %q in union %T, from %v", f, x, dec.Type())
	}
	return dec.FinishValue()
}

type (
	// VUnionDepth3_Rand1 represents any single field of the VUnionDepth3_Rand1 union type.
	VUnionDepth3_Rand1 interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the VUnionDepth3_Rand1 union type.
		__VDLReflect(__VUnionDepth3_Rand1Reflect)
		VDLIsZero() bool
		VDLWrite(vdl.Encoder) error
	}
	// VUnionDepth3_Rand1F1 represents field F1 of the VUnionDepth3_Rand1 union type.
	VUnionDepth3_Rand1F1 struct{ Value VArray3_VUnionDepth1_Rand1 }
	// VUnionDepth3_Rand1F2 represents field F2 of the VUnionDepth3_Rand1 union type.
	VUnionDepth3_Rand1F2 struct{ Value [][]VEnumAbc }
	// VUnionDepth3_Rand1F5 represents field F5 of the VUnionDepth3_Rand1 union type.
	VUnionDepth3_Rand1F5 struct{ Value VSet_VArray3_Bool }
	// VUnionDepth3_Rand1F7 represents field F7 of the VUnionDepth3_Rand1 union type.
	VUnionDepth3_Rand1F7 struct {
		Value VMap_VStructDepth1_Rand0_VStructDepth1_Rand0
	}
	// VUnionDepth3_Rand1F10 represents field F10 of the VUnionDepth3_Rand1 union type.
	VUnionDepth3_Rand1F10 struct{ Value VUnionDepth2_All }
	// __VUnionDepth3_Rand1Reflect describes the VUnionDepth3_Rand1 union type.
	__VUnionDepth3_Rand1Reflect struct {
		Name  string `vdl:"v.io/v23/vdl/vdltest.VUnionDepth3_Rand1"`
		Type  VUnionDepth3_Rand1
		Union struct {
			F1  VUnionDepth3_Rand1F1
			F2  VUnionDepth3_Rand1F2
			F5  VUnionDepth3_Rand1F5
			F7  VUnionDepth3_Rand1F7
			F10 VUnionDepth3_Rand1F10
		}
	}
)

func (x VUnionDepth3_Rand1F1) Index() int                               { return 0 }
func (x VUnionDepth3_Rand1F1) Interface() interface{}                   { return x.Value }
func (x VUnionDepth3_Rand1F1) Name() string                             { return "F1" }
func (x VUnionDepth3_Rand1F1) __VDLReflect(__VUnionDepth3_Rand1Reflect) {}

func (x VUnionDepth3_Rand1F2) Index() int                               { return 1 }
func (x VUnionDepth3_Rand1F2) Interface() interface{}                   { return x.Value }
func (x VUnionDepth3_Rand1F2) Name() string                             { return "F2" }
func (x VUnionDepth3_Rand1F2) __VDLReflect(__VUnionDepth3_Rand1Reflect) {}

func (x VUnionDepth3_Rand1F5) Index() int                               { return 2 }
func (x VUnionDepth3_Rand1F5) Interface() interface{}                   { return x.Value }
func (x VUnionDepth3_Rand1F5) Name() string                             { return "F5" }
func (x VUnionDepth3_Rand1F5) __VDLReflect(__VUnionDepth3_Rand1Reflect) {}

func (x VUnionDepth3_Rand1F7) Index() int                               { return 3 }
func (x VUnionDepth3_Rand1F7) Interface() interface{}                   { return x.Value }
func (x VUnionDepth3_Rand1F7) Name() string                             { return "F7" }
func (x VUnionDepth3_Rand1F7) __VDLReflect(__VUnionDepth3_Rand1Reflect) {}

func (x VUnionDepth3_Rand1F10) Index() int                               { return 4 }
func (x VUnionDepth3_Rand1F10) Interface() interface{}                   { return x.Value }
func (x VUnionDepth3_Rand1F10) Name() string                             { return "F10" }
func (x VUnionDepth3_Rand1F10) __VDLReflect(__VUnionDepth3_Rand1Reflect) {}

func (x VUnionDepth3_Rand1F1) VDLIsZero() bool {
	return x.Value.VDLIsZero()
}

func (x VUnionDepth3_Rand1F2) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_Rand1F5) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_Rand1F7) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_Rand1F10) VDLIsZero() bool {
	return false
}

func (x VUnionDepth3_Rand1F1) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F1"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_Rand1F2) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F2"); err != nil {
		return err
	}
	if err := __VDLWriteAnon_list_12(enc, x.Value); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_Rand1F5) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F5"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_Rand1F7) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F7"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func (x VUnionDepth3_Rand1F10) VDLWrite(enc vdl.Encoder) error {
	if err := enc.StartValue(vdl.TypeOf((*VUnionDepth3_Rand1)(nil))); err != nil {
		return err
	}
	if err := enc.NextField("F10"); err != nil {
		return err
	}
	if err := x.Value.VDLWrite(enc); err != nil {
		return err
	}
	switch {
	case x.Value == nil:
		// Write the zero value of the union type.
		if err := vdl.ZeroValue(vdl.TypeOf((*VUnionDepth2_All)(nil))).VDLWrite(enc); err != nil {
			return err
		}
	default:
		if err := x.Value.VDLWrite(enc); err != nil {
			return err
		}
	}
	if err := enc.NextField(""); err != nil {
		return err
	}
	return enc.FinishValue()
}

func VDLReadVUnionDepth3_Rand1(dec vdl.Decoder, x *VUnionDepth3_Rand1) error {
	if err := dec.StartValue(); err != nil {
		return err
	}
	if (dec.StackDepth() == 1 || dec.IsAny()) && !vdl.Compatible(vdl.TypeOf(x), dec.Type()) {
		return fmt.Errorf("incompatible union %T, from %v", x, dec.Type())
	}
	f, err := dec.NextField()
	if err != nil {
		return err
	}
	switch f {
	case "F1":
		var field VUnionDepth3_Rand1F1
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F2":
		var field VUnionDepth3_Rand1F2
		if err := __VDLReadAnon_list_12(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "F5":
		var field VUnionDepth3_Rand1F5
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F7":
		var field VUnionDepth3_Rand1F7
		if err := field.Value.VDLRead(dec); err != nil {
			return err
		}
		*x = field
	case "F10":
		var field VUnionDepth3_Rand1F10
		if err := VDLReadVUnionDepth2_All(dec, &field.Value); err != nil {
			return err
		}
		*x = field
	case "":
		return fmt.Errorf("missing field in union %T, from %v", x, dec.Type())
	default:
		return fmt.Errorf("field %q not in union %T, from %v", f, x, dec.Type())
	}
	switch f, err := dec.NextField(); {
	case err != nil:
		return err
	case f != "":
		return fmt.Errorf("extra field %q in union %T, from %v", f, x, dec.Type())
	}
	return dec.FinishValue()
}

//////////////////////////////////////////////////
// Const definitions

var vAllFail = []Entry(nil)
var vAllPass = []Entry{
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "any(nil)",
		SourceLabel: "any(nil)",
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "false",
		Target:      false,
		SourceLabel: "false",
		Source:      false,
	},
	{
		Label:       "Zero",
		TargetLabel: "false",
		Target:      false,
		SourceLabel: "VBool(false)",
		Source:      VBool(false),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "true",
		Target:      true,
		SourceLabel: "true",
		Source:      true,
	},
	{
		Label:       "Full",
		TargetLabel: "true",
		Target:      true,
		SourceLabel: "VBool(true)",
		Source:      VBool(true),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VBool(false)",
		Target:      VBool(false),
		SourceLabel: "VBool(false)",
		Source:      VBool(false),
	},
	{
		Label:       "Zero",
		TargetLabel: "VBool(false)",
		Target:      VBool(false),
		SourceLabel: "false",
		Source:      false,
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VBool(true)",
		Target:      VBool(true),
		SourceLabel: "VBool(true)",
		Source:      VBool(true),
	},
	{
		Label:       "Full",
		TargetLabel: "VBool(true)",
		Target:      VBool(true),
		SourceLabel: "true",
		Source:      true,
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "\"\"",
		Target:      "",
		SourceLabel: "\"\"",
		Source:      "",
	},
	{
		Label:       "Zero",
		TargetLabel: "\"\"",
		Target:      "",
		SourceLabel: "VString(\"\")",
		Source:      VString(""),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"",
		Target:      "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		SourceLabel: "\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"",
		Source:      "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
	},
	{
		Label:       "Full",
		TargetLabel: "\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"",
		Target:      "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		SourceLabel: "VString(\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\")",
		Source:      VString("abcdefghijklmnopΔΘΠΣΦ王普澤世界"),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "\"hij\"",
		Target:      "hij",
		SourceLabel: "\"hij\"",
		Source:      "hij",
	},
	{
		Label:       "Random",
		TargetLabel: "\"hij\"",
		Target:      "hij",
		SourceLabel: "VString(\"hij\")",
		Source:      VString("hij"),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "\"bcdefg\"",
		Target:      "bcdefg",
		SourceLabel: "\"bcdefg\"",
		Source:      "bcdefg",
	},
	{
		Label:       "Random",
		TargetLabel: "\"bcdefg\"",
		Target:      "bcdefg",
		SourceLabel: "VString(\"bcdefg\")",
		Source:      VString("bcdefg"),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VString(\"\")",
		Target:      VString(""),
		SourceLabel: "VString(\"\")",
		Source:      VString(""),
	},
	{
		Label:       "Zero",
		TargetLabel: "VString(\"\")",
		Target:      VString(""),
		SourceLabel: "\"\"",
		Source:      "",
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VString(\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\")",
		Target:      VString("abcdefghijklmnopΔΘΠΣΦ王普澤世界"),
		SourceLabel: "VString(\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\")",
		Source:      VString("abcdefghijklmnopΔΘΠΣΦ王普澤世界"),
	},
	{
		Label:       "Full",
		TargetLabel: "VString(\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\")",
		Target:      VString("abcdefghijklmnopΔΘΠΣΦ王普澤世界"),
		SourceLabel: "\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"",
		Source:      "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VString(\"王普\")",
		Target:      VString("王普"),
		SourceLabel: "VString(\"王普\")",
		Source:      VString("王普"),
	},
	{
		Label:       "Random",
		TargetLabel: "VString(\"王普\")",
		Target:      VString("王普"),
		SourceLabel: "\"王普\"",
		Source:      "王普",
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VString(\"fghijkl\")",
		Target:      VString("fghijkl"),
		SourceLabel: "VString(\"fghijkl\")",
		Source:      VString("fghijkl"),
	},
	{
		Label:       "Random",
		TargetLabel: "VString(\"fghijkl\")",
		Target:      VString("fghijkl"),
		SourceLabel: "\"fghijkl\"",
		Source:      "fghijkl",
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "typeobject(any)",
		Target:      vdl.AnyType,
		SourceLabel: "typeobject(any)",
		Source:      vdl.AnyType,
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "typeobject(int64)",
		Target:      vdl.Int64Type,
		SourceLabel: "typeobject(int64)",
		Source:      vdl.Int64Type,
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "typeobject(VArray1_VStructEmpty)",
		Target:      vdl.TypeOf((*VArray1_VStructEmpty)(nil)),
		SourceLabel: "typeobject(VArray1_VStructEmpty)",
		Source:      vdl.TypeOf((*VArray1_VStructEmpty)(nil)),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "typeobject(VMap_VArray2_Uint32_VArray2_Uint32)",
		Target:      vdl.TypeOf((*VMap_VArray2_Uint32_VArray2_Uint32)(nil)),
		SourceLabel: "typeobject(VMap_VArray2_Uint32_VArray2_Uint32)",
		Source:      vdl.TypeOf((*VMap_VArray2_Uint32_VArray2_Uint32)(nil)),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "byte(0)",
		Target:      byte(0),
		SourceLabel: "byte(0)",
		Source:      byte(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "byte(0)",
		Target:      byte(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "byte(0)",
		Target:      byte(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "byte(255)",
		Source:      byte(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "uint16(255)",
		Source:      uint16(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "uint32(255)",
		Source:      uint32(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "uint64(255)",
		Source:      uint64(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "int16(255)",
		Source:      int16(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "int32(255)",
		Source:      int32(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "int64(255)",
		Source:      int64(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "float32(255)",
		Source:      float32(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "float64(255)",
		Source:      float64(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "VByte(255)",
		Source:      VByte(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "byte(255)",
		Target:      byte(255),
		SourceLabel: "VFloat64(255)",
		Source:      VFloat64(255),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "byte(1)",
		Source:      byte(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "uint16(1)",
		Source:      uint16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "uint64(1)",
		Source:      uint64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "int8(1)",
		Source:      int8(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "int16(1)",
		Source:      int16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "int32(1)",
		Source:      int32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "int64(1)",
		Source:      int64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "float64(1)",
		Source:      float64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "VInt16(1)",
		Source:      VInt16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "byte(1)",
		Target:      byte(1),
		SourceLabel: "VInt64(1)",
		Source:      VInt64(1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "byte(123)",
		Target:      byte(123),
		SourceLabel: "byte(123)",
		Source:      byte(123),
	},
	{
		Label:       "Full",
		TargetLabel: "byte(123)",
		Target:      byte(123),
		SourceLabel: "uint64(123)",
		Source:      uint64(123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "byte(117)",
		Target:      byte(117),
		SourceLabel: "byte(117)",
		Source:      byte(117),
	},
	{
		Label:       "Random",
		TargetLabel: "byte(117)",
		Target:      byte(117),
		SourceLabel: "VInt8(117)",
		Source:      VInt8(117),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "byte(251)",
		Target:      byte(251),
		SourceLabel: "byte(251)",
		Source:      byte(251),
	},
	{
		Label:       "Random",
		TargetLabel: "byte(251)",
		Target:      byte(251),
		SourceLabel: "VInt32(251)",
		Source:      VInt32(251),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VByte(0)",
		Target:      VByte(0),
		SourceLabel: "VByte(0)",
		Source:      VByte(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VByte(0)",
		Target:      VByte(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VByte(0)",
		Target:      VByte(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VByte(255)",
		Target:      VByte(255),
		SourceLabel: "VByte(255)",
		Source:      VByte(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "VByte(255)",
		Target:      VByte(255),
		SourceLabel: "uint64(255)",
		Source:      uint64(255),
	},
	{
		Label:       "+Max",
		TargetLabel: "VByte(255)",
		Target:      VByte(255),
		SourceLabel: "VInt16(255)",
		Source:      VInt16(255),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VByte(1)",
		Target:      VByte(1),
		SourceLabel: "VByte(1)",
		Source:      VByte(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VByte(1)",
		Target:      VByte(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VByte(1)",
		Target:      VByte(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VByte(123)",
		Target:      VByte(123),
		SourceLabel: "VByte(123)",
		Source:      VByte(123),
	},
	{
		Label:       "Full",
		TargetLabel: "VByte(123)",
		Target:      VByte(123),
		SourceLabel: "uint64(123)",
		Source:      uint64(123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VByte(208)",
		Target:      VByte(208),
		SourceLabel: "VByte(208)",
		Source:      VByte(208),
	},
	{
		Label:       "Random",
		TargetLabel: "VByte(208)",
		Target:      VByte(208),
		SourceLabel: "VInt32(208)",
		Source:      VInt32(208),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VByte(86)",
		Target:      VByte(86),
		SourceLabel: "VByte(86)",
		Source:      VByte(86),
	},
	{
		Label:       "Random",
		TargetLabel: "VByte(86)",
		Target:      VByte(86),
		SourceLabel: "VInt8(86)",
		Source:      VInt8(86),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VEnumAbc.A",
		Target:      VEnumAbcA,
		SourceLabel: "VEnumAbc.A",
		Source:      VEnumAbcA,
	},
	{
		Label:       "Zero",
		TargetLabel: "VEnumAbc.A",
		Target:      VEnumAbcA,
		SourceLabel: "\"A\"",
		Source:      "A",
	},
	{
		Label:       "Zero",
		TargetLabel: "VEnumAbc.A",
		Target:      VEnumAbcA,
		SourceLabel: "VString(\"A\")",
		Source:      VString("A"),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VEnumAbc.B",
		Target:      VEnumAbcB,
		SourceLabel: "VEnumAbc.B",
		Source:      VEnumAbcB,
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumAbc.B",
		Target:      VEnumAbcB,
		SourceLabel: "\"B\"",
		Source:      "B",
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumAbc.B",
		Target:      VEnumAbcB,
		SourceLabel: "VString(\"B\")",
		Source:      VString("B"),
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumAbc.B",
		Target:      VEnumAbcB,
		SourceLabel: "VEnumBcd.B",
		Source:      VEnumBcdB,
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VEnumAbc.C",
		Target:      VEnumAbcC,
		SourceLabel: "VEnumAbc.C",
		Source:      VEnumAbcC,
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumAbc.C",
		Target:      VEnumAbcC,
		SourceLabel: "\"C\"",
		Source:      "C",
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumAbc.C",
		Target:      VEnumAbcC,
		SourceLabel: "VString(\"C\")",
		Source:      VString("C"),
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumAbc.C",
		Target:      VEnumAbcC,
		SourceLabel: "VEnumBcd.C",
		Source:      VEnumBcdC,
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VEnumBcd.B",
		Target:      VEnumBcdB,
		SourceLabel: "VEnumBcd.B",
		Source:      VEnumBcdB,
	},
	{
		Label:       "Zero",
		TargetLabel: "VEnumBcd.B",
		Target:      VEnumBcdB,
		SourceLabel: "VEnumAbc.B",
		Source:      VEnumAbcB,
	},
	{
		Label:       "Zero",
		TargetLabel: "VEnumBcd.B",
		Target:      VEnumBcdB,
		SourceLabel: "\"B\"",
		Source:      "B",
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VEnumBcd.C",
		Target:      VEnumBcdC,
		SourceLabel: "VEnumBcd.C",
		Source:      VEnumBcdC,
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumBcd.C",
		Target:      VEnumBcdC,
		SourceLabel: "\"C\"",
		Source:      "C",
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumBcd.C",
		Target:      VEnumBcdC,
		SourceLabel: "VString(\"C\")",
		Source:      VString("C"),
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumBcd.C",
		Target:      VEnumBcdC,
		SourceLabel: "VEnumAbc.C",
		Source:      VEnumAbcC,
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VEnumBcd.D",
		Target:      VEnumBcdD,
		SourceLabel: "VEnumBcd.D",
		Source:      VEnumBcdD,
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumBcd.D",
		Target:      VEnumBcdD,
		SourceLabel: "\"D\"",
		Source:      "D",
	},
	{
		Label:       "Full",
		TargetLabel: "VEnumBcd.D",
		Target:      VEnumBcdD,
		SourceLabel: "VString(\"D\")",
		Source:      VString("D"),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructEmpty{}",
		Target:      VStructEmpty{},
		SourceLabel: "VStructEmpty{}",
		Source:      VStructEmpty{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructEmpty{}",
		Target:      VStructEmpty{},
		SourceLabel: "VStructDepth3_Rand1{}",
		Source: VStructDepth3_Rand1{
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructEmpty{}",
		Target:      VStructEmpty{},
		SourceLabel: "VStructDepth1_Rand0{}",
		Source:      VStructDepth1_Rand0{},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "error(nil)",
		Target:      (error)(nil),
		SourceLabel: "error(nil)",
		Source:      (error)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "error(nil)",
		Target:      (error)(nil),
		SourceLabel: "?VStructEmpty(nil)",
		Source:      (*VStructEmpty)(nil),
	},
	{
		Label:       "NilAny",
		TargetLabel: "error(nil)",
		Target:      (error)(nil),
		SourceLabel: "any(nil)",
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "error{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: verror.FromWire(vdl.WireError{
			Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			RetryCode: vdl.WireRetryCodeRetryBackoff,
			Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		}),
		SourceLabel: "error{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: verror.FromWire(vdl.WireError{
			Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			RetryCode: vdl.WireRetryCodeRetryBackoff,
			Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "error{Id: \"abcdefghijklmn\", RetryCode: RetryConnection, Msg: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\"}",
		Target: verror.FromWire(vdl.WireError{
			Id:        "abcdefghijklmn",
			RetryCode: vdl.WireRetryCodeRetryConnection,
			Msg:       "bcdefghijklmnopΔΘΠΣΦ王普澤世",
		}),
		SourceLabel: "error{Id: \"abcdefghijklmn\", RetryCode: RetryConnection, Msg: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\"}",
		Source: verror.FromWire(vdl.WireError{
			Id:        "abcdefghijklmn",
			RetryCode: vdl.WireRetryCodeRetryConnection,
			Msg:       "bcdefghijklmnopΔΘΠΣΦ王普澤世",
		}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "error{Id: \"h\", Msg: \"ΔΘΠΣΦ王普澤世界\"}",
		Target: verror.FromWire(vdl.WireError{
			Id:  "h",
			Msg: "ΔΘΠΣΦ王普澤世界",
		}),
		SourceLabel: "error{Id: \"h\", Msg: \"ΔΘΠΣΦ王普澤世界\"}",
		Source: verror.FromWire(vdl.WireError{
			Id:  "h",
			Msg: "ΔΘΠΣΦ王普澤世界",
		}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "uint16(0)",
		Target:      uint16(0),
		SourceLabel: "uint16(0)",
		Source:      uint16(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "uint16(0)",
		Target:      uint16(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "uint16(0)",
		Target:      uint16(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "uint16(65535)",
		Target:      uint16(65535),
		SourceLabel: "uint16(65535)",
		Source:      uint16(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint16(65535)",
		Target:      uint16(65535),
		SourceLabel: "uint32(65535)",
		Source:      uint32(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint16(65535)",
		Target:      uint16(65535),
		SourceLabel: "uint64(65535)",
		Source:      uint64(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint16(65535)",
		Target:      uint16(65535),
		SourceLabel: "int32(65535)",
		Source:      int32(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint16(65535)",
		Target:      uint16(65535),
		SourceLabel: "int64(65535)",
		Source:      int64(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint16(65535)",
		Target:      uint16(65535),
		SourceLabel: "float32(65535)",
		Source:      float32(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint16(65535)",
		Target:      uint16(65535),
		SourceLabel: "float64(65535)",
		Source:      float64(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint16(65535)",
		Target:      uint16(65535),
		SourceLabel: "VFloat64(65535)",
		Source:      VFloat64(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint16(65535)",
		Target:      uint16(65535),
		SourceLabel: "VFloat32(65535)",
		Source:      VFloat32(65535),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "uint16(1)",
		Source:      uint16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "byte(1)",
		Source:      byte(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "uint64(1)",
		Source:      uint64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "int8(1)",
		Source:      int8(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "int16(1)",
		Source:      int16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "int32(1)",
		Source:      int32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "int64(1)",
		Source:      int64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "float64(1)",
		Source:      float64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "VInt16(1)",
		Source:      VInt16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint16(1)",
		Target:      uint16(1),
		SourceLabel: "VInt64(1)",
		Source:      VInt64(1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "uint16(123)",
		Target:      uint16(123),
		SourceLabel: "uint16(123)",
		Source:      uint16(123),
	},
	{
		Label:       "Full",
		TargetLabel: "uint16(123)",
		Target:      uint16(123),
		SourceLabel: "uint64(123)",
		Source:      uint64(123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "uint16(8865)",
		Target:      uint16(8865),
		SourceLabel: "uint16(8865)",
		Source:      uint16(8865),
	},
	{
		Label:       "Random",
		TargetLabel: "uint16(8865)",
		Target:      uint16(8865),
		SourceLabel: "VInt32(8865)",
		Source:      VInt32(8865),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "uint16(34580)",
		Target:      uint16(34580),
		SourceLabel: "uint16(34580)",
		Source:      uint16(34580),
	},
	{
		Label:       "Random",
		TargetLabel: "uint16(34580)",
		Target:      uint16(34580),
		SourceLabel: "VInt32(34580)",
		Source:      VInt32(34580),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUint16(0)",
		Target:      VUint16(0),
		SourceLabel: "VUint16(0)",
		Source:      VUint16(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUint16(0)",
		Target:      VUint16(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUint16(0)",
		Target:      VUint16(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VUint16(65535)",
		Target:      VUint16(65535),
		SourceLabel: "VUint16(65535)",
		Source:      VUint16(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "VUint16(65535)",
		Target:      VUint16(65535),
		SourceLabel: "uint64(65535)",
		Source:      uint64(65535),
	},
	{
		Label:       "+Max",
		TargetLabel: "VUint16(65535)",
		Target:      VUint16(65535),
		SourceLabel: "int64(65535)",
		Source:      int64(65535),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VUint16(1)",
		Target:      VUint16(1),
		SourceLabel: "VUint16(1)",
		Source:      VUint16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VUint16(1)",
		Target:      VUint16(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VUint16(1)",
		Target:      VUint16(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUint16(123)",
		Target:      VUint16(123),
		SourceLabel: "VUint16(123)",
		Source:      VUint16(123),
	},
	{
		Label:       "Full",
		TargetLabel: "VUint16(123)",
		Target:      VUint16(123),
		SourceLabel: "uint64(123)",
		Source:      uint64(123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUint16(58835)",
		Target:      VUint16(58835),
		SourceLabel: "VUint16(58835)",
		Source:      VUint16(58835),
	},
	{
		Label:       "Random",
		TargetLabel: "VUint16(58835)",
		Target:      VUint16(58835),
		SourceLabel: "VInt32(58835)",
		Source:      VInt32(58835),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUint16(48963)",
		Target:      VUint16(48963),
		SourceLabel: "VUint16(48963)",
		Source:      VUint16(48963),
	},
	{
		Label:       "Random",
		TargetLabel: "VUint16(48963)",
		Target:      VUint16(48963),
		SourceLabel: "VInt32(48963)",
		Source:      VInt32(48963),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "uint32(0)",
		Target:      uint32(0),
		SourceLabel: "uint32(0)",
		Source:      uint32(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "uint32(0)",
		Target:      uint32(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "uint32(0)",
		Target:      uint32(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "uint32(4294967295)",
		Target:      uint32(4294967295),
		SourceLabel: "uint32(4294967295)",
		Source:      uint32(4294967295),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint32(4294967295)",
		Target:      uint32(4294967295),
		SourceLabel: "uint64(4294967295)",
		Source:      uint64(4294967295),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint32(4294967295)",
		Target:      uint32(4294967295),
		SourceLabel: "int64(4294967295)",
		Source:      int64(4294967295),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint32(4294967295)",
		Target:      uint32(4294967295),
		SourceLabel: "float64(4.294967295e+09)",
		Source:      float64(4.294967295e+09),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint32(4294967295)",
		Target:      uint32(4294967295),
		SourceLabel: "VFloat64(4.294967295e+09)",
		Source:      VFloat64(4.294967295e+09),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint32(4294967295)",
		Target:      uint32(4294967295),
		SourceLabel: "VUint32(4294967295)",
		Source:      VUint32(4294967295),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "byte(1)",
		Source:      byte(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "uint16(1)",
		Source:      uint16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "uint64(1)",
		Source:      uint64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "int8(1)",
		Source:      int8(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "int16(1)",
		Source:      int16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "int32(1)",
		Source:      int32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "int64(1)",
		Source:      int64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "float64(1)",
		Source:      float64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "VInt16(1)",
		Source:      VInt16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint32(1)",
		Target:      uint32(1),
		SourceLabel: "VInt64(1)",
		Source:      VInt64(1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "uint32(123)",
		Target:      uint32(123),
		SourceLabel: "uint32(123)",
		Source:      uint32(123),
	},
	{
		Label:       "Full",
		TargetLabel: "uint32(123)",
		Target:      uint32(123),
		SourceLabel: "uint64(123)",
		Source:      uint64(123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "uint32(2854208971)",
		Target:      uint32(2854208971),
		SourceLabel: "uint32(2854208971)",
		Source:      uint32(2854208971),
	},
	{
		Label:       "Random",
		TargetLabel: "uint32(2854208971)",
		Target:      uint32(2854208971),
		SourceLabel: "float64(2.854208971e+09)",
		Source:      float64(2.854208971e+09),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "uint32(3566111313)",
		Target:      uint32(3566111313),
		SourceLabel: "uint32(3566111313)",
		Source:      uint32(3566111313),
	},
	{
		Label:       "Random",
		TargetLabel: "uint32(3566111313)",
		Target:      uint32(3566111313),
		SourceLabel: "float64(3.566111313e+09)",
		Source:      float64(3.566111313e+09),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUint32(0)",
		Target:      VUint32(0),
		SourceLabel: "VUint32(0)",
		Source:      VUint32(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUint32(0)",
		Target:      VUint32(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUint32(0)",
		Target:      VUint32(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VUint32(4294967295)",
		Target:      VUint32(4294967295),
		SourceLabel: "VUint32(4294967295)",
		Source:      VUint32(4294967295),
	},
	{
		Label:       "+Max",
		TargetLabel: "VUint32(4294967295)",
		Target:      VUint32(4294967295),
		SourceLabel: "uint64(4294967295)",
		Source:      uint64(4294967295),
	},
	{
		Label:       "+Max",
		TargetLabel: "VUint32(4294967295)",
		Target:      VUint32(4294967295),
		SourceLabel: "int64(4294967295)",
		Source:      int64(4294967295),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VUint32(1)",
		Target:      VUint32(1),
		SourceLabel: "VUint32(1)",
		Source:      VUint32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VUint32(1)",
		Target:      VUint32(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VUint32(1)",
		Target:      VUint32(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUint32(123)",
		Target:      VUint32(123),
		SourceLabel: "VUint32(123)",
		Source:      VUint32(123),
	},
	{
		Label:       "Full",
		TargetLabel: "VUint32(123)",
		Target:      VUint32(123),
		SourceLabel: "uint64(123)",
		Source:      uint64(123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUint32(3727280803)",
		Target:      VUint32(3727280803),
		SourceLabel: "VUint32(3727280803)",
		Source:      VUint32(3727280803),
	},
	{
		Label:       "Random",
		TargetLabel: "VUint32(3727280803)",
		Target:      VUint32(3727280803),
		SourceLabel: "float64(3.727280803e+09)",
		Source:      float64(3.727280803e+09),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUint32(3249052201)",
		Target:      VUint32(3249052201),
		SourceLabel: "VUint32(3249052201)",
		Source:      VUint32(3249052201),
	},
	{
		Label:       "Random",
		TargetLabel: "VUint32(3249052201)",
		Target:      VUint32(3249052201),
		SourceLabel: "float64(3.249052201e+09)",
		Source:      float64(3.249052201e+09),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "uint64(0)",
		Target:      uint64(0),
		SourceLabel: "uint64(0)",
		Source:      uint64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "uint64(0)",
		Target:      uint64(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "uint64(0)",
		Target:      uint64(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "uint64(18446744073709551615)",
		Target:      uint64(18446744073709551615),
		SourceLabel: "uint64(18446744073709551615)",
		Source:      uint64(18446744073709551615),
	},
	{
		Label:       "+Max",
		TargetLabel: "uint64(18446744073709551615)",
		Target:      uint64(18446744073709551615),
		SourceLabel: "VUint64(18446744073709551615)",
		Source:      VUint64(18446744073709551615),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "uint64(1)",
		Source:      uint64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "byte(1)",
		Source:      byte(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "uint16(1)",
		Source:      uint16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "int8(1)",
		Source:      int8(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "int16(1)",
		Source:      int16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "int32(1)",
		Source:      int32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "int64(1)",
		Source:      int64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "float64(1)",
		Source:      float64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "VInt16(1)",
		Source:      VInt16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "uint64(1)",
		Target:      uint64(1),
		SourceLabel: "VInt64(1)",
		Source:      VInt64(1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "uint64(123)",
		Target:      uint64(123),
		SourceLabel: "uint64(123)",
		Source:      uint64(123),
	},
	{
		Label:       "Full",
		TargetLabel: "uint64(123)",
		Target:      uint64(123),
		SourceLabel: "VInt64(123)",
		Source:      VInt64(123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "uint64(7663981842137236158)",
		Target:      uint64(7663981842137236158),
		SourceLabel: "uint64(7663981842137236158)",
		Source:      uint64(7663981842137236158),
	},
	{
		Label:       "Random",
		TargetLabel: "uint64(7663981842137236158)",
		Target:      uint64(7663981842137236158),
		SourceLabel: "VInt64(7663981842137236158)",
		Source:      VInt64(7663981842137236158),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "uint64(10407893824126201419)",
		Target:      uint64(10407893824126201419),
		SourceLabel: "uint64(10407893824126201419)",
		Source:      uint64(10407893824126201419),
	},
	{
		Label:       "Random",
		TargetLabel: "uint64(10407893824126201419)",
		Target:      uint64(10407893824126201419),
		SourceLabel: "VUint64(10407893824126201419)",
		Source:      VUint64(10407893824126201419),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUint64(0)",
		Target:      VUint64(0),
		SourceLabel: "VUint64(0)",
		Source:      VUint64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUint64(0)",
		Target:      VUint64(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUint64(0)",
		Target:      VUint64(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VUint64(18446744073709551615)",
		Target:      VUint64(18446744073709551615),
		SourceLabel: "VUint64(18446744073709551615)",
		Source:      VUint64(18446744073709551615),
	},
	{
		Label:       "+Max",
		TargetLabel: "VUint64(18446744073709551615)",
		Target:      VUint64(18446744073709551615),
		SourceLabel: "uint64(18446744073709551615)",
		Source:      uint64(18446744073709551615),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VUint64(1)",
		Target:      VUint64(1),
		SourceLabel: "VUint64(1)",
		Source:      VUint64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VUint64(1)",
		Target:      VUint64(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VUint64(1)",
		Target:      VUint64(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUint64(123)",
		Target:      VUint64(123),
		SourceLabel: "VUint64(123)",
		Source:      VUint64(123),
	},
	{
		Label:       "Full",
		TargetLabel: "VUint64(123)",
		Target:      VUint64(123),
		SourceLabel: "uint64(123)",
		Source:      uint64(123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUint64(4354911460219059426)",
		Target:      VUint64(4354911460219059426),
		SourceLabel: "VUint64(4354911460219059426)",
		Source:      VUint64(4354911460219059426),
	},
	{
		Label:       "Random",
		TargetLabel: "VUint64(4354911460219059426)",
		Target:      VUint64(4354911460219059426),
		SourceLabel: "VInt64(4354911460219059426)",
		Source:      VInt64(4354911460219059426),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUint64(7100200013621450088)",
		Target:      VUint64(7100200013621450088),
		SourceLabel: "VUint64(7100200013621450088)",
		Source:      VUint64(7100200013621450088),
	},
	{
		Label:       "Random",
		TargetLabel: "VUint64(7100200013621450088)",
		Target:      VUint64(7100200013621450088),
		SourceLabel: "VInt64(7100200013621450088)",
		Source:      VInt64(7100200013621450088),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "int8(0)",
		Target:      int8(0),
		SourceLabel: "int8(0)",
		Source:      int8(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "int8(0)",
		Target:      int8(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "int8(0)",
		Target:      int8(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "int8(127)",
		Source:      int8(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "byte(127)",
		Source:      byte(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "uint16(127)",
		Source:      uint16(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "uint32(127)",
		Source:      uint32(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "uint64(127)",
		Source:      uint64(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "int16(127)",
		Source:      int16(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "int32(127)",
		Source:      int32(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "int64(127)",
		Source:      int64(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "float32(127)",
		Source:      float32(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "float64(127)",
		Source:      float64(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "VByte(127)",
		Source:      VByte(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "int8(127)",
		Target:      int8(127),
		SourceLabel: "VFloat64(127)",
		Source:      VFloat64(127),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "int8(1)",
		Source:      int8(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "byte(1)",
		Source:      byte(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "uint16(1)",
		Source:      uint16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "uint64(1)",
		Source:      uint64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "int16(1)",
		Source:      int16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "int32(1)",
		Source:      int32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "int64(1)",
		Source:      int64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "float64(1)",
		Source:      float64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "VInt16(1)",
		Source:      VInt16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int8(1)",
		Target:      int8(1),
		SourceLabel: "VInt64(1)",
		Source:      VInt64(1),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "int8(-128)",
		Target:      int8(-128),
		SourceLabel: "int8(-128)",
		Source:      int8(-128),
	},
	{
		Label:       "-Max",
		TargetLabel: "int8(-128)",
		Target:      int8(-128),
		SourceLabel: "int16(-128)",
		Source:      int16(-128),
	},
	{
		Label:       "-Max",
		TargetLabel: "int8(-128)",
		Target:      int8(-128),
		SourceLabel: "int32(-128)",
		Source:      int32(-128),
	},
	{
		Label:       "-Max",
		TargetLabel: "int8(-128)",
		Target:      int8(-128),
		SourceLabel: "int64(-128)",
		Source:      int64(-128),
	},
	{
		Label:       "-Max",
		TargetLabel: "int8(-128)",
		Target:      int8(-128),
		SourceLabel: "float32(-128)",
		Source:      float32(-128),
	},
	{
		Label:       "-Max",
		TargetLabel: "int8(-128)",
		Target:      int8(-128),
		SourceLabel: "float64(-128)",
		Source:      float64(-128),
	},
	{
		Label:       "-Max",
		TargetLabel: "int8(-128)",
		Target:      int8(-128),
		SourceLabel: "VInt32(-128)",
		Source:      VInt32(-128),
	},
	{
		Label:       "-Max",
		TargetLabel: "int8(-128)",
		Target:      int8(-128),
		SourceLabel: "VFloat64(-128)",
		Source:      VFloat64(-128),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "int8(-1)",
		Target:      int8(-1),
		SourceLabel: "int8(-1)",
		Source:      int8(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int8(-1)",
		Target:      int8(-1),
		SourceLabel: "int16(-1)",
		Source:      int16(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int8(-1)",
		Target:      int8(-1),
		SourceLabel: "int32(-1)",
		Source:      int32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int8(-1)",
		Target:      int8(-1),
		SourceLabel: "int64(-1)",
		Source:      int64(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int8(-1)",
		Target:      int8(-1),
		SourceLabel: "float32(-1)",
		Source:      float32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int8(-1)",
		Target:      int8(-1),
		SourceLabel: "float64(-1)",
		Source:      float64(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int8(-1)",
		Target:      int8(-1),
		SourceLabel: "VInt8(-1)",
		Source:      VInt8(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int8(-1)",
		Target:      int8(-1),
		SourceLabel: "VFloat64(-1)",
		Source:      VFloat64(-1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "int8(-123)",
		Target:      int8(-123),
		SourceLabel: "int8(-123)",
		Source:      int8(-123),
	},
	{
		Label:       "Full",
		TargetLabel: "int8(-123)",
		Target:      int8(-123),
		SourceLabel: "VInt64(-123)",
		Source:      VInt64(-123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "int8(61)",
		Target:      int8(61),
		SourceLabel: "int8(61)",
		Source:      int8(61),
	},
	{
		Label:       "Random",
		TargetLabel: "int8(61)",
		Target:      int8(61),
		SourceLabel: "VInt8(61)",
		Source:      VInt8(61),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "int8(-59)",
		Target:      int8(-59),
		SourceLabel: "int8(-59)",
		Source:      int8(-59),
	},
	{
		Label:       "Random",
		TargetLabel: "int8(-59)",
		Target:      int8(-59),
		SourceLabel: "VInt8(-59)",
		Source:      VInt8(-59),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VInt8(0)",
		Target:      VInt8(0),
		SourceLabel: "VInt8(0)",
		Source:      VInt8(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VInt8(0)",
		Target:      VInt8(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VInt8(0)",
		Target:      VInt8(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VInt8(127)",
		Target:      VInt8(127),
		SourceLabel: "VInt8(127)",
		Source:      VInt8(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "VInt8(127)",
		Target:      VInt8(127),
		SourceLabel: "uint64(127)",
		Source:      uint64(127),
	},
	{
		Label:       "+Max",
		TargetLabel: "VInt8(127)",
		Target:      VInt8(127),
		SourceLabel: "VInt16(127)",
		Source:      VInt16(127),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VInt8(1)",
		Target:      VInt8(1),
		SourceLabel: "VInt8(1)",
		Source:      VInt8(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VInt8(1)",
		Target:      VInt8(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VInt8(1)",
		Target:      VInt8(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "VInt8(-128)",
		Target:      VInt8(-128),
		SourceLabel: "VInt8(-128)",
		Source:      VInt8(-128),
	},
	{
		Label:       "-Max",
		TargetLabel: "VInt8(-128)",
		Target:      VInt8(-128),
		SourceLabel: "int64(-128)",
		Source:      int64(-128),
	},
	{
		Label:       "-Max",
		TargetLabel: "VInt8(-128)",
		Target:      VInt8(-128),
		SourceLabel: "VFloat64(-128)",
		Source:      VFloat64(-128),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "VInt8(-1)",
		Target:      VInt8(-1),
		SourceLabel: "VInt8(-1)",
		Source:      VInt8(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "VInt8(-1)",
		Target:      VInt8(-1),
		SourceLabel: "VInt16(-1)",
		Source:      VInt16(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "VInt8(-1)",
		Target:      VInt8(-1),
		SourceLabel: "VFloat32(-1)",
		Source:      VFloat32(-1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VInt8(-123)",
		Target:      VInt8(-123),
		SourceLabel: "VInt8(-123)",
		Source:      VInt8(-123),
	},
	{
		Label:       "Full",
		TargetLabel: "VInt8(-123)",
		Target:      VInt8(-123),
		SourceLabel: "VInt64(-123)",
		Source:      VInt64(-123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VInt8(-52)",
		Target:      VInt8(-52),
		SourceLabel: "VInt8(-52)",
		Source:      VInt8(-52),
	},
	{
		Label:       "Random",
		TargetLabel: "VInt8(-52)",
		Target:      VInt8(-52),
		SourceLabel: "VInt32(-52)",
		Source:      VInt32(-52),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VInt8(-3)",
		Target:      VInt8(-3),
		SourceLabel: "VInt8(-3)",
		Source:      VInt8(-3),
	},
	{
		Label:       "Random",
		TargetLabel: "VInt8(-3)",
		Target:      VInt8(-3),
		SourceLabel: "VInt32(-3)",
		Source:      VInt32(-3),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "int16(0)",
		Target:      int16(0),
		SourceLabel: "int16(0)",
		Source:      int16(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "int16(0)",
		Target:      int16(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "int16(0)",
		Target:      int16(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "int16(32767)",
		Source:      int16(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "uint16(32767)",
		Source:      uint16(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "uint32(32767)",
		Source:      uint32(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "uint64(32767)",
		Source:      uint64(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "int32(32767)",
		Source:      int32(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "int64(32767)",
		Source:      int64(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "float32(32767)",
		Source:      float32(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "float64(32767)",
		Source:      float64(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "VFloat64(32767)",
		Source:      VFloat64(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "int16(32767)",
		Target:      int16(32767),
		SourceLabel: "VFloat32(32767)",
		Source:      VFloat32(32767),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "int16(1)",
		Source:      int16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "byte(1)",
		Source:      byte(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "uint16(1)",
		Source:      uint16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "uint64(1)",
		Source:      uint64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "int8(1)",
		Source:      int8(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "int32(1)",
		Source:      int32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "int64(1)",
		Source:      int64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "float64(1)",
		Source:      float64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "VInt16(1)",
		Source:      VInt16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int16(1)",
		Target:      int16(1),
		SourceLabel: "VInt64(1)",
		Source:      VInt64(1),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "int16(-32768)",
		Target:      int16(-32768),
		SourceLabel: "int16(-32768)",
		Source:      int16(-32768),
	},
	{
		Label:       "-Max",
		TargetLabel: "int16(-32768)",
		Target:      int16(-32768),
		SourceLabel: "int32(-32768)",
		Source:      int32(-32768),
	},
	{
		Label:       "-Max",
		TargetLabel: "int16(-32768)",
		Target:      int16(-32768),
		SourceLabel: "int64(-32768)",
		Source:      int64(-32768),
	},
	{
		Label:       "-Max",
		TargetLabel: "int16(-32768)",
		Target:      int16(-32768),
		SourceLabel: "float32(-32768)",
		Source:      float32(-32768),
	},
	{
		Label:       "-Max",
		TargetLabel: "int16(-32768)",
		Target:      int16(-32768),
		SourceLabel: "float64(-32768)",
		Source:      float64(-32768),
	},
	{
		Label:       "-Max",
		TargetLabel: "int16(-32768)",
		Target:      int16(-32768),
		SourceLabel: "VInt32(-32768)",
		Source:      VInt32(-32768),
	},
	{
		Label:       "-Max",
		TargetLabel: "int16(-32768)",
		Target:      int16(-32768),
		SourceLabel: "VFloat64(-32768)",
		Source:      VFloat64(-32768),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "int16(-1)",
		Target:      int16(-1),
		SourceLabel: "int16(-1)",
		Source:      int16(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int16(-1)",
		Target:      int16(-1),
		SourceLabel: "int8(-1)",
		Source:      int8(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int16(-1)",
		Target:      int16(-1),
		SourceLabel: "int32(-1)",
		Source:      int32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int16(-1)",
		Target:      int16(-1),
		SourceLabel: "int64(-1)",
		Source:      int64(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int16(-1)",
		Target:      int16(-1),
		SourceLabel: "float32(-1)",
		Source:      float32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int16(-1)",
		Target:      int16(-1),
		SourceLabel: "float64(-1)",
		Source:      float64(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int16(-1)",
		Target:      int16(-1),
		SourceLabel: "VInt8(-1)",
		Source:      VInt8(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int16(-1)",
		Target:      int16(-1),
		SourceLabel: "VFloat64(-1)",
		Source:      VFloat64(-1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "int16(-123)",
		Target:      int16(-123),
		SourceLabel: "int16(-123)",
		Source:      int16(-123),
	},
	{
		Label:       "Full",
		TargetLabel: "int16(-123)",
		Target:      int16(-123),
		SourceLabel: "VInt64(-123)",
		Source:      VInt64(-123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "int16(-15718)",
		Target:      int16(-15718),
		SourceLabel: "int16(-15718)",
		Source:      int16(-15718),
	},
	{
		Label:       "Random",
		TargetLabel: "int16(-15718)",
		Target:      int16(-15718),
		SourceLabel: "VInt32(-15718)",
		Source:      VInt32(-15718),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "int16(-7073)",
		Target:      int16(-7073),
		SourceLabel: "int16(-7073)",
		Source:      int16(-7073),
	},
	{
		Label:       "Random",
		TargetLabel: "int16(-7073)",
		Target:      int16(-7073),
		SourceLabel: "VInt32(-7073)",
		Source:      VInt32(-7073),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VInt16(0)",
		Target:      VInt16(0),
		SourceLabel: "VInt16(0)",
		Source:      VInt16(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VInt16(0)",
		Target:      VInt16(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VInt16(0)",
		Target:      VInt16(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VInt16(32767)",
		Target:      VInt16(32767),
		SourceLabel: "VInt16(32767)",
		Source:      VInt16(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "VInt16(32767)",
		Target:      VInt16(32767),
		SourceLabel: "uint64(32767)",
		Source:      uint64(32767),
	},
	{
		Label:       "+Max",
		TargetLabel: "VInt16(32767)",
		Target:      VInt16(32767),
		SourceLabel: "int64(32767)",
		Source:      int64(32767),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VInt16(1)",
		Target:      VInt16(1),
		SourceLabel: "VInt16(1)",
		Source:      VInt16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VInt16(1)",
		Target:      VInt16(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VInt16(1)",
		Target:      VInt16(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "VInt16(-32768)",
		Target:      VInt16(-32768),
		SourceLabel: "VInt16(-32768)",
		Source:      VInt16(-32768),
	},
	{
		Label:       "-Max",
		TargetLabel: "VInt16(-32768)",
		Target:      VInt16(-32768),
		SourceLabel: "int64(-32768)",
		Source:      int64(-32768),
	},
	{
		Label:       "-Max",
		TargetLabel: "VInt16(-32768)",
		Target:      VInt16(-32768),
		SourceLabel: "VFloat64(-32768)",
		Source:      VFloat64(-32768),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "VInt16(-1)",
		Target:      VInt16(-1),
		SourceLabel: "VInt16(-1)",
		Source:      VInt16(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "VInt16(-1)",
		Target:      VInt16(-1),
		SourceLabel: "VFloat32(-1)",
		Source:      VFloat32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "VInt16(-1)",
		Target:      VInt16(-1),
		SourceLabel: "int64(-1)",
		Source:      int64(-1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VInt16(-123)",
		Target:      VInt16(-123),
		SourceLabel: "VInt16(-123)",
		Source:      VInt16(-123),
	},
	{
		Label:       "Full",
		TargetLabel: "VInt16(-123)",
		Target:      VInt16(-123),
		SourceLabel: "VInt64(-123)",
		Source:      VInt64(-123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VInt16(-13054)",
		Target:      VInt16(-13054),
		SourceLabel: "VInt16(-13054)",
		Source:      VInt16(-13054),
	},
	{
		Label:       "Random",
		TargetLabel: "VInt16(-13054)",
		Target:      VInt16(-13054),
		SourceLabel: "VInt32(-13054)",
		Source:      VInt32(-13054),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VInt16(-1878)",
		Target:      VInt16(-1878),
		SourceLabel: "VInt16(-1878)",
		Source:      VInt16(-1878),
	},
	{
		Label:       "Random",
		TargetLabel: "VInt16(-1878)",
		Target:      VInt16(-1878),
		SourceLabel: "VInt32(-1878)",
		Source:      VInt32(-1878),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "int32(0)",
		Target:      int32(0),
		SourceLabel: "int32(0)",
		Source:      int32(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "int32(0)",
		Target:      int32(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "int32(0)",
		Target:      int32(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "int32(2147483647)",
		Target:      int32(2147483647),
		SourceLabel: "int32(2147483647)",
		Source:      int32(2147483647),
	},
	{
		Label:       "+Max",
		TargetLabel: "int32(2147483647)",
		Target:      int32(2147483647),
		SourceLabel: "uint32(2147483647)",
		Source:      uint32(2147483647),
	},
	{
		Label:       "+Max",
		TargetLabel: "int32(2147483647)",
		Target:      int32(2147483647),
		SourceLabel: "uint64(2147483647)",
		Source:      uint64(2147483647),
	},
	{
		Label:       "+Max",
		TargetLabel: "int32(2147483647)",
		Target:      int32(2147483647),
		SourceLabel: "int64(2147483647)",
		Source:      int64(2147483647),
	},
	{
		Label:       "+Max",
		TargetLabel: "int32(2147483647)",
		Target:      int32(2147483647),
		SourceLabel: "float64(2.147483647e+09)",
		Source:      float64(2.147483647e+09),
	},
	{
		Label:       "+Max",
		TargetLabel: "int32(2147483647)",
		Target:      int32(2147483647),
		SourceLabel: "VFloat64(2.147483647e+09)",
		Source:      VFloat64(2.147483647e+09),
	},
	{
		Label:       "+Max",
		TargetLabel: "int32(2147483647)",
		Target:      int32(2147483647),
		SourceLabel: "VUint32(2147483647)",
		Source:      VUint32(2147483647),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "int32(1)",
		Source:      int32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "byte(1)",
		Source:      byte(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "uint16(1)",
		Source:      uint16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "uint64(1)",
		Source:      uint64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "int8(1)",
		Source:      int8(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "int16(1)",
		Source:      int16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "int64(1)",
		Source:      int64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "float64(1)",
		Source:      float64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "VInt16(1)",
		Source:      VInt16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int32(1)",
		Target:      int32(1),
		SourceLabel: "VInt64(1)",
		Source:      VInt64(1),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "int32(-2147483648)",
		Target:      int32(-2147483648),
		SourceLabel: "int32(-2147483648)",
		Source:      int32(-2147483648),
	},
	{
		Label:       "-Max",
		TargetLabel: "int32(-2147483648)",
		Target:      int32(-2147483648),
		SourceLabel: "int64(-2147483648)",
		Source:      int64(-2147483648),
	},
	{
		Label:       "-Max",
		TargetLabel: "int32(-2147483648)",
		Target:      int32(-2147483648),
		SourceLabel: "float64(-2.147483648e+09)",
		Source:      float64(-2.147483648e+09),
	},
	{
		Label:       "-Max",
		TargetLabel: "int32(-2147483648)",
		Target:      int32(-2147483648),
		SourceLabel: "VInt32(-2147483648)",
		Source:      VInt32(-2147483648),
	},
	{
		Label:       "-Max",
		TargetLabel: "int32(-2147483648)",
		Target:      int32(-2147483648),
		SourceLabel: "VFloat64(-2.147483648e+09)",
		Source:      VFloat64(-2.147483648e+09),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "int32(-1)",
		Target:      int32(-1),
		SourceLabel: "int32(-1)",
		Source:      int32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int32(-1)",
		Target:      int32(-1),
		SourceLabel: "int8(-1)",
		Source:      int8(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int32(-1)",
		Target:      int32(-1),
		SourceLabel: "int16(-1)",
		Source:      int16(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int32(-1)",
		Target:      int32(-1),
		SourceLabel: "int64(-1)",
		Source:      int64(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int32(-1)",
		Target:      int32(-1),
		SourceLabel: "float32(-1)",
		Source:      float32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int32(-1)",
		Target:      int32(-1),
		SourceLabel: "float64(-1)",
		Source:      float64(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int32(-1)",
		Target:      int32(-1),
		SourceLabel: "VInt8(-1)",
		Source:      VInt8(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int32(-1)",
		Target:      int32(-1),
		SourceLabel: "VFloat64(-1)",
		Source:      VFloat64(-1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "int32(-123)",
		Target:      int32(-123),
		SourceLabel: "int32(-123)",
		Source:      int32(-123),
	},
	{
		Label:       "Full",
		TargetLabel: "int32(-123)",
		Target:      int32(-123),
		SourceLabel: "VInt64(-123)",
		Source:      VInt64(-123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "int32(-127108721)",
		Target:      int32(-127108721),
		SourceLabel: "int32(-127108721)",
		Source:      int32(-127108721),
	},
	{
		Label:       "Random",
		TargetLabel: "int32(-127108721)",
		Target:      int32(-127108721),
		SourceLabel: "VInt32(-127108721)",
		Source:      VInt32(-127108721),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "int32(-409987374)",
		Target:      int32(-409987374),
		SourceLabel: "int32(-409987374)",
		Source:      int32(-409987374),
	},
	{
		Label:       "Random",
		TargetLabel: "int32(-409987374)",
		Target:      int32(-409987374),
		SourceLabel: "VInt32(-409987374)",
		Source:      VInt32(-409987374),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VInt32(0)",
		Target:      VInt32(0),
		SourceLabel: "VInt32(0)",
		Source:      VInt32(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VInt32(0)",
		Target:      VInt32(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VInt32(0)",
		Target:      VInt32(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VInt32(2147483647)",
		Target:      VInt32(2147483647),
		SourceLabel: "VInt32(2147483647)",
		Source:      VInt32(2147483647),
	},
	{
		Label:       "+Max",
		TargetLabel: "VInt32(2147483647)",
		Target:      VInt32(2147483647),
		SourceLabel: "uint64(2147483647)",
		Source:      uint64(2147483647),
	},
	{
		Label:       "+Max",
		TargetLabel: "VInt32(2147483647)",
		Target:      VInt32(2147483647),
		SourceLabel: "int64(2147483647)",
		Source:      int64(2147483647),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VInt32(1)",
		Target:      VInt32(1),
		SourceLabel: "VInt32(1)",
		Source:      VInt32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VInt32(1)",
		Target:      VInt32(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VInt32(1)",
		Target:      VInt32(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "VInt32(-2147483648)",
		Target:      VInt32(-2147483648),
		SourceLabel: "VInt32(-2147483648)",
		Source:      VInt32(-2147483648),
	},
	{
		Label:       "-Max",
		TargetLabel: "VInt32(-2147483648)",
		Target:      VInt32(-2147483648),
		SourceLabel: "int64(-2147483648)",
		Source:      int64(-2147483648),
	},
	{
		Label:       "-Max",
		TargetLabel: "VInt32(-2147483648)",
		Target:      VInt32(-2147483648),
		SourceLabel: "VFloat64(-2.147483648e+09)",
		Source:      VFloat64(-2.147483648e+09),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "VInt32(-1)",
		Target:      VInt32(-1),
		SourceLabel: "VInt32(-1)",
		Source:      VInt32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "VInt32(-1)",
		Target:      VInt32(-1),
		SourceLabel: "VInt16(-1)",
		Source:      VInt16(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "VInt32(-1)",
		Target:      VInt32(-1),
		SourceLabel: "VFloat32(-1)",
		Source:      VFloat32(-1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VInt32(-123)",
		Target:      VInt32(-123),
		SourceLabel: "VInt32(-123)",
		Source:      VInt32(-123),
	},
	{
		Label:       "Full",
		TargetLabel: "VInt32(-123)",
		Target:      VInt32(-123),
		SourceLabel: "VInt64(-123)",
		Source:      VInt64(-123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VInt32(-280267129)",
		Target:      VInt32(-280267129),
		SourceLabel: "VInt32(-280267129)",
		Source:      VInt32(-280267129),
	},
	{
		Label:       "Random",
		TargetLabel: "VInt32(-280267129)",
		Target:      VInt32(-280267129),
		SourceLabel: "float64(-2.80267129e+08)",
		Source:      float64(-2.80267129e+08),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VInt32(3384205)",
		Target:      VInt32(3384205),
		SourceLabel: "VInt32(3384205)",
		Source:      VInt32(3384205),
	},
	{
		Label:       "Random",
		TargetLabel: "VInt32(3384205)",
		Target:      VInt32(3384205),
		SourceLabel: "float64(3.384205e+06)",
		Source:      float64(3.384205e+06),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "int64(0)",
		Target:      int64(0),
		SourceLabel: "int64(0)",
		Source:      int64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "int64(0)",
		Target:      int64(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "int64(0)",
		Target:      int64(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "int64(9223372036854775807)",
		Target:      int64(9223372036854775807),
		SourceLabel: "int64(9223372036854775807)",
		Source:      int64(9223372036854775807),
	},
	{
		Label:       "+Max",
		TargetLabel: "int64(9223372036854775807)",
		Target:      int64(9223372036854775807),
		SourceLabel: "uint64(9223372036854775807)",
		Source:      uint64(9223372036854775807),
	},
	{
		Label:       "+Max",
		TargetLabel: "int64(9223372036854775807)",
		Target:      int64(9223372036854775807),
		SourceLabel: "VUint64(9223372036854775807)",
		Source:      VUint64(9223372036854775807),
	},
	{
		Label:       "+Max",
		TargetLabel: "int64(9223372036854775807)",
		Target:      int64(9223372036854775807),
		SourceLabel: "VInt64(9223372036854775807)",
		Source:      VInt64(9223372036854775807),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "int64(1)",
		Source:      int64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "byte(1)",
		Source:      byte(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "uint16(1)",
		Source:      uint16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "uint64(1)",
		Source:      uint64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "int8(1)",
		Source:      int8(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "int16(1)",
		Source:      int16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "int32(1)",
		Source:      int32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "float64(1)",
		Source:      float64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "VInt16(1)",
		Source:      VInt16(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "int64(1)",
		Target:      int64(1),
		SourceLabel: "VInt64(1)",
		Source:      VInt64(1),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "int64(-9223372036854775808)",
		Target:      int64(-9223372036854775808),
		SourceLabel: "int64(-9223372036854775808)",
		Source:      int64(-9223372036854775808),
	},
	{
		Label:       "-Max",
		TargetLabel: "int64(-9223372036854775808)",
		Target:      int64(-9223372036854775808),
		SourceLabel: "VInt64(-9223372036854775808)",
		Source:      VInt64(-9223372036854775808),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "int64(-1)",
		Target:      int64(-1),
		SourceLabel: "int64(-1)",
		Source:      int64(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int64(-1)",
		Target:      int64(-1),
		SourceLabel: "int8(-1)",
		Source:      int8(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int64(-1)",
		Target:      int64(-1),
		SourceLabel: "int16(-1)",
		Source:      int16(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int64(-1)",
		Target:      int64(-1),
		SourceLabel: "int32(-1)",
		Source:      int32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int64(-1)",
		Target:      int64(-1),
		SourceLabel: "float32(-1)",
		Source:      float32(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int64(-1)",
		Target:      int64(-1),
		SourceLabel: "float64(-1)",
		Source:      float64(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int64(-1)",
		Target:      int64(-1),
		SourceLabel: "VInt8(-1)",
		Source:      VInt8(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "int64(-1)",
		Target:      int64(-1),
		SourceLabel: "VFloat64(-1)",
		Source:      VFloat64(-1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "int64(-123)",
		Target:      int64(-123),
		SourceLabel: "int64(-123)",
		Source:      int64(-123),
	},
	{
		Label:       "Full",
		TargetLabel: "int64(-123)",
		Target:      int64(-123),
		SourceLabel: "VInt64(-123)",
		Source:      VInt64(-123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "int64(1791361074309236413)",
		Target:      int64(1791361074309236413),
		SourceLabel: "int64(1791361074309236413)",
		Source:      int64(1791361074309236413),
	},
	{
		Label:       "Random",
		TargetLabel: "int64(1791361074309236413)",
		Target:      int64(1791361074309236413),
		SourceLabel: "VInt64(1791361074309236413)",
		Source:      VInt64(1791361074309236413),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "int64(-117421365904711896)",
		Target:      int64(-117421365904711896),
		SourceLabel: "int64(-117421365904711896)",
		Source:      int64(-117421365904711896),
	},
	{
		Label:       "Random",
		TargetLabel: "int64(-117421365904711896)",
		Target:      int64(-117421365904711896),
		SourceLabel: "VInt64(-117421365904711896)",
		Source:      VInt64(-117421365904711896),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VInt64(0)",
		Target:      VInt64(0),
		SourceLabel: "VInt64(0)",
		Source:      VInt64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VInt64(0)",
		Target:      VInt64(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VInt64(0)",
		Target:      VInt64(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VInt64(9223372036854775807)",
		Target:      VInt64(9223372036854775807),
		SourceLabel: "VInt64(9223372036854775807)",
		Source:      VInt64(9223372036854775807),
	},
	{
		Label:       "+Max",
		TargetLabel: "VInt64(9223372036854775807)",
		Target:      VInt64(9223372036854775807),
		SourceLabel: "uint64(9223372036854775807)",
		Source:      uint64(9223372036854775807),
	},
	{
		Label:       "+Max",
		TargetLabel: "VInt64(9223372036854775807)",
		Target:      VInt64(9223372036854775807),
		SourceLabel: "int64(9223372036854775807)",
		Source:      int64(9223372036854775807),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VInt64(1)",
		Target:      VInt64(1),
		SourceLabel: "VInt64(1)",
		Source:      VInt64(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VInt64(1)",
		Target:      VInt64(1),
		SourceLabel: "float32(1)",
		Source:      float32(1),
	},
	{
		Label:       "+Min",
		TargetLabel: "VInt64(1)",
		Target:      VInt64(1),
		SourceLabel: "uint32(1)",
		Source:      uint32(1),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "VInt64(-9223372036854775808)",
		Target:      VInt64(-9223372036854775808),
		SourceLabel: "VInt64(-9223372036854775808)",
		Source:      VInt64(-9223372036854775808),
	},
	{
		Label:       "-Max",
		TargetLabel: "VInt64(-9223372036854775808)",
		Target:      VInt64(-9223372036854775808),
		SourceLabel: "int64(-9223372036854775808)",
		Source:      int64(-9223372036854775808),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "VInt64(-1)",
		Target:      VInt64(-1),
		SourceLabel: "VInt64(-1)",
		Source:      VInt64(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "VInt64(-1)",
		Target:      VInt64(-1),
		SourceLabel: "VInt16(-1)",
		Source:      VInt16(-1),
	},
	{
		Label:       "-Min",
		TargetLabel: "VInt64(-1)",
		Target:      VInt64(-1),
		SourceLabel: "VFloat32(-1)",
		Source:      VFloat32(-1),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VInt64(-123)",
		Target:      VInt64(-123),
		SourceLabel: "VInt64(-123)",
		Source:      VInt64(-123),
	},
	{
		Label:       "Full",
		TargetLabel: "VInt64(-123)",
		Target:      VInt64(-123),
		SourceLabel: "VInt16(-123)",
		Source:      VInt16(-123),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VInt64(1972213572851542418)",
		Target:      VInt64(1972213572851542418),
		SourceLabel: "VInt64(1972213572851542418)",
		Source:      VInt64(1972213572851542418),
	},
	{
		Label:       "Random",
		TargetLabel: "VInt64(1972213572851542418)",
		Target:      VInt64(1972213572851542418),
		SourceLabel: "int64(1972213572851542418)",
		Source:      int64(1972213572851542418),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VInt64(3736661114594839936)",
		Target:      VInt64(3736661114594839936),
		SourceLabel: "VInt64(3736661114594839936)",
		Source:      VInt64(3736661114594839936),
	},
	{
		Label:       "Random",
		TargetLabel: "VInt64(3736661114594839936)",
		Target:      VInt64(3736661114594839936),
		SourceLabel: "int64(3736661114594839936)",
		Source:      int64(3736661114594839936),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "float32(0)",
		Target:      float32(0),
		SourceLabel: "float32(0)",
		Source:      float32(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "float32(0)",
		Target:      float32(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "float32(0)",
		Target:      float32(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "float32(1.7014117e+38)",
		Target:      float32(1.7014117e+38),
		SourceLabel: "float32(1.7014117e+38)",
		Source:      float32(1.7014117e+38),
	},
	{
		Label:       "+Max",
		TargetLabel: "float32(1.7014117e+38)",
		Target:      float32(1.7014117e+38),
		SourceLabel: "float64(1.7014117331926443e+38)",
		Source:      float64(1.7014117331926443e+38),
	},
	{
		Label:       "+Max",
		TargetLabel: "float32(1.7014117e+38)",
		Target:      float32(1.7014117e+38),
		SourceLabel: "VFloat64(1.7014117331926443e+38)",
		Source:      VFloat64(1.7014117331926443e+38),
	},
	{
		Label:       "+Max",
		TargetLabel: "float32(1.7014117e+38)",
		Target:      float32(1.7014117e+38),
		SourceLabel: "VFloat32(1.7014117e+38)",
		Source:      VFloat32(1.7014117e+38),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "float32(1.4e-44)",
		Target:      float32(1.4e-44),
		SourceLabel: "float32(1.4e-44)",
		Source:      float32(1.4e-44),
	},
	{
		Label:       "+Min",
		TargetLabel: "float32(1.4e-44)",
		Target:      float32(1.4e-44),
		SourceLabel: "float64(1.401298464324817e-44)",
		Source:      float64(1.401298464324817e-44),
	},
	{
		Label:       "+Min",
		TargetLabel: "float32(1.4e-44)",
		Target:      float32(1.4e-44),
		SourceLabel: "VFloat64(1.401298464324817e-44)",
		Source:      VFloat64(1.401298464324817e-44),
	},
	{
		Label:       "+Min",
		TargetLabel: "float32(1.4e-44)",
		Target:      float32(1.4e-44),
		SourceLabel: "VFloat32(1.4e-44)",
		Source:      VFloat32(1.4e-44),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "float32(-1.7014117e+38)",
		Target:      float32(-1.7014117e+38),
		SourceLabel: "float32(-1.7014117e+38)",
		Source:      float32(-1.7014117e+38),
	},
	{
		Label:       "-Max",
		TargetLabel: "float32(-1.7014117e+38)",
		Target:      float32(-1.7014117e+38),
		SourceLabel: "float64(-1.7014117331926443e+38)",
		Source:      float64(-1.7014117331926443e+38),
	},
	{
		Label:       "-Max",
		TargetLabel: "float32(-1.7014117e+38)",
		Target:      float32(-1.7014117e+38),
		SourceLabel: "VFloat64(-1.7014117331926443e+38)",
		Source:      VFloat64(-1.7014117331926443e+38),
	},
	{
		Label:       "-Max",
		TargetLabel: "float32(-1.7014117e+38)",
		Target:      float32(-1.7014117e+38),
		SourceLabel: "VFloat32(-1.7014117e+38)",
		Source:      VFloat32(-1.7014117e+38),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "float32(-1.4e-44)",
		Target:      float32(-1.4e-44),
		SourceLabel: "float32(-1.4e-44)",
		Source:      float32(-1.4e-44),
	},
	{
		Label:       "-Min",
		TargetLabel: "float32(-1.4e-44)",
		Target:      float32(-1.4e-44),
		SourceLabel: "float64(-1.401298464324817e-44)",
		Source:      float64(-1.401298464324817e-44),
	},
	{
		Label:       "-Min",
		TargetLabel: "float32(-1.4e-44)",
		Target:      float32(-1.4e-44),
		SourceLabel: "VFloat64(-1.401298464324817e-44)",
		Source:      VFloat64(-1.401298464324817e-44),
	},
	{
		Label:       "-Min",
		TargetLabel: "float32(-1.4e-44)",
		Target:      float32(-1.4e-44),
		SourceLabel: "VFloat32(-1.4e-44)",
		Source:      VFloat32(-1.4e-44),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "float32(1.23)",
		Target:      float32(1.23),
		SourceLabel: "float32(1.23)",
		Source:      float32(1.23),
	},
	{
		Label:       "Full",
		TargetLabel: "float32(1.23)",
		Target:      float32(1.23),
		SourceLabel: "VFloat64(1.23)",
		Source:      VFloat64(1.23),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "float32(-2.9703176e+09)",
		Target:      float32(-2.9703176e+09),
		SourceLabel: "float32(-2.9703176e+09)",
		Source:      float32(-2.9703176e+09),
	},
	{
		Label:       "Random",
		TargetLabel: "float32(-2.9703176e+09)",
		Target:      float32(-2.9703176e+09),
		SourceLabel: "float64(-2.9703175477894535e+09)",
		Source:      float64(-2.9703175477894535e+09),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "float32(2.1855086e+09)",
		Target:      float32(2.1855086e+09),
		SourceLabel: "float32(2.1855086e+09)",
		Source:      float32(2.1855086e+09),
	},
	{
		Label:       "Random",
		TargetLabel: "float32(2.1855086e+09)",
		Target:      float32(2.1855086e+09),
		SourceLabel: "float64(2.1855085956262503e+09)",
		Source:      float64(2.1855085956262503e+09),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VFloat32(0)",
		Target:      VFloat32(0),
		SourceLabel: "VFloat32(0)",
		Source:      VFloat32(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VFloat32(0)",
		Target:      VFloat32(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VFloat32(0)",
		Target:      VFloat32(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VFloat32(1.7014117e+38)",
		Target:      VFloat32(1.7014117e+38),
		SourceLabel: "VFloat32(1.7014117e+38)",
		Source:      VFloat32(1.7014117e+38),
	},
	{
		Label:       "+Max",
		TargetLabel: "VFloat32(1.7014117e+38)",
		Target:      VFloat32(1.7014117e+38),
		SourceLabel: "VFloat64(1.7014117331926443e+38)",
		Source:      VFloat64(1.7014117331926443e+38),
	},
	{
		Label:       "+Max",
		TargetLabel: "VFloat32(1.7014117e+38)",
		Target:      VFloat32(1.7014117e+38),
		SourceLabel: "float32(1.7014117e+38)",
		Source:      float32(1.7014117e+38),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VFloat32(1.4e-44)",
		Target:      VFloat32(1.4e-44),
		SourceLabel: "VFloat32(1.4e-44)",
		Source:      VFloat32(1.4e-44),
	},
	{
		Label:       "+Min",
		TargetLabel: "VFloat32(1.4e-44)",
		Target:      VFloat32(1.4e-44),
		SourceLabel: "float32(1.4e-44)",
		Source:      float32(1.4e-44),
	},
	{
		Label:       "+Min",
		TargetLabel: "VFloat32(1.4e-44)",
		Target:      VFloat32(1.4e-44),
		SourceLabel: "VFloat64(1.401298464324817e-44)",
		Source:      VFloat64(1.401298464324817e-44),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "VFloat32(-1.7014117e+38)",
		Target:      VFloat32(-1.7014117e+38),
		SourceLabel: "VFloat32(-1.7014117e+38)",
		Source:      VFloat32(-1.7014117e+38),
	},
	{
		Label:       "-Max",
		TargetLabel: "VFloat32(-1.7014117e+38)",
		Target:      VFloat32(-1.7014117e+38),
		SourceLabel: "VFloat64(-1.7014117331926443e+38)",
		Source:      VFloat64(-1.7014117331926443e+38),
	},
	{
		Label:       "-Max",
		TargetLabel: "VFloat32(-1.7014117e+38)",
		Target:      VFloat32(-1.7014117e+38),
		SourceLabel: "float64(-1.7014117331926443e+38)",
		Source:      float64(-1.7014117331926443e+38),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "VFloat32(-1.4e-44)",
		Target:      VFloat32(-1.4e-44),
		SourceLabel: "VFloat32(-1.4e-44)",
		Source:      VFloat32(-1.4e-44),
	},
	{
		Label:       "-Min",
		TargetLabel: "VFloat32(-1.4e-44)",
		Target:      VFloat32(-1.4e-44),
		SourceLabel: "float32(-1.4e-44)",
		Source:      float32(-1.4e-44),
	},
	{
		Label:       "-Min",
		TargetLabel: "VFloat32(-1.4e-44)",
		Target:      VFloat32(-1.4e-44),
		SourceLabel: "VFloat64(-1.401298464324817e-44)",
		Source:      VFloat64(-1.401298464324817e-44),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VFloat32(1.23)",
		Target:      VFloat32(1.23),
		SourceLabel: "VFloat32(1.23)",
		Source:      VFloat32(1.23),
	},
	{
		Label:       "Full",
		TargetLabel: "VFloat32(1.23)",
		Target:      VFloat32(1.23),
		SourceLabel: "VFloat64(1.23)",
		Source:      VFloat64(1.23),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VFloat32(-2.6656801e+09)",
		Target:      VFloat32(-2.6656801e+09),
		SourceLabel: "VFloat32(-2.6656801e+09)",
		Source:      VFloat32(-2.6656801e+09),
	},
	{
		Label:       "Random",
		TargetLabel: "VFloat32(-2.6656801e+09)",
		Target:      VFloat32(-2.6656801e+09),
		SourceLabel: "float64(-2.665680028150929e+09)",
		Source:      float64(-2.665680028150929e+09),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VFloat32(-2.1517962e+09)",
		Target:      VFloat32(-2.1517962e+09),
		SourceLabel: "VFloat32(-2.1517962e+09)",
		Source:      VFloat32(-2.1517962e+09),
	},
	{
		Label:       "Random",
		TargetLabel: "VFloat32(-2.1517962e+09)",
		Target:      VFloat32(-2.1517962e+09),
		SourceLabel: "float64(-2.151796264764773e+09)",
		Source:      float64(-2.151796264764773e+09),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "float64(0)",
		Target:      float64(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "float64(0)",
		Target:      float64(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "float64(0)",
		Target:      float64(0),
		SourceLabel: "VInt32(0)",
		Source:      VInt32(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "float64(8.988465674311579e+307)",
		Target:      float64(8.988465674311579e+307),
		SourceLabel: "float64(8.988465674311579e+307)",
		Source:      float64(8.988465674311579e+307),
	},
	{
		Label:       "+Max",
		TargetLabel: "float64(8.988465674311579e+307)",
		Target:      float64(8.988465674311579e+307),
		SourceLabel: "VFloat64(8.988465674311579e+307)",
		Source:      VFloat64(8.988465674311579e+307),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "float64(5e-323)",
		Target:      float64(5e-323),
		SourceLabel: "float64(5e-323)",
		Source:      float64(5e-323),
	},
	{
		Label:       "+Min",
		TargetLabel: "float64(5e-323)",
		Target:      float64(5e-323),
		SourceLabel: "float32(0)",
		Source:      float32(0),
	},
	{
		Label:       "+Min",
		TargetLabel: "float64(5e-323)",
		Target:      float64(5e-323),
		SourceLabel: "VFloat64(5e-323)",
		Source:      VFloat64(5e-323),
	},
	{
		Label:       "+Min",
		TargetLabel: "float64(5e-323)",
		Target:      float64(5e-323),
		SourceLabel: "VFloat32(0)",
		Source:      VFloat32(0),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "float64(-8.988465674311579e+307)",
		Target:      float64(-8.988465674311579e+307),
		SourceLabel: "float64(-8.988465674311579e+307)",
		Source:      float64(-8.988465674311579e+307),
	},
	{
		Label:       "-Max",
		TargetLabel: "float64(-8.988465674311579e+307)",
		Target:      float64(-8.988465674311579e+307),
		SourceLabel: "VFloat64(-8.988465674311579e+307)",
		Source:      VFloat64(-8.988465674311579e+307),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "float64(-5e-323)",
		Target:      float64(-5e-323),
		SourceLabel: "float64(-5e-323)",
		Source:      float64(-5e-323),
	},
	{
		Label:       "-Min",
		TargetLabel: "float64(-5e-323)",
		Target:      float64(-5e-323),
		SourceLabel: "float32(-0)",
		Source:      float32(0),
	},
	{
		Label:       "-Min",
		TargetLabel: "float64(-5e-323)",
		Target:      float64(-5e-323),
		SourceLabel: "VFloat64(-5e-323)",
		Source:      VFloat64(-5e-323),
	},
	{
		Label:       "-Min",
		TargetLabel: "float64(-5e-323)",
		Target:      float64(-5e-323),
		SourceLabel: "VFloat32(-0)",
		Source:      VFloat32(0),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "float64(1.23)",
		Target:      float64(1.23),
		SourceLabel: "float64(1.23)",
		Source:      float64(1.23),
	},
	{
		Label:       "Full",
		TargetLabel: "float64(1.23)",
		Target:      float64(1.23),
		SourceLabel: "VFloat64(1.23)",
		Source:      VFloat64(1.23),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "float64(4.639790963581885e+08)",
		Target:      float64(4.639790963581885e+08),
		SourceLabel: "float64(4.639790963581885e+08)",
		Source:      float64(4.639790963581885e+08),
	},
	{
		Label:       "Random",
		TargetLabel: "float64(4.639790963581885e+08)",
		Target:      float64(4.639790963581885e+08),
		SourceLabel: "VFloat64(4.639790963581885e+08)",
		Source:      VFloat64(4.639790963581885e+08),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "float64(2.3293447472770217e+08)",
		Target:      float64(2.3293447472770217e+08),
		SourceLabel: "float64(2.3293447472770217e+08)",
		Source:      float64(2.3293447472770217e+08),
	},
	{
		Label:       "Random",
		TargetLabel: "float64(2.3293447472770217e+08)",
		Target:      float64(2.3293447472770217e+08),
		SourceLabel: "VFloat64(2.3293447472770217e+08)",
		Source:      VFloat64(2.3293447472770217e+08),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VFloat64(0)",
		Target:      VFloat64(0),
		SourceLabel: "VFloat64(0)",
		Source:      VFloat64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VFloat64(0)",
		Target:      VFloat64(0),
		SourceLabel: "float64(0)",
		Source:      float64(0),
	},
	{
		Label:       "Zero",
		TargetLabel: "VFloat64(0)",
		Target:      VFloat64(0),
		SourceLabel: "VInt32(0)",
		Source:      VInt32(0),
	},
	{
		IsCanonical: true,
		Label:       "+Max",
		TargetLabel: "VFloat64(8.988465674311579e+307)",
		Target:      VFloat64(8.988465674311579e+307),
		SourceLabel: "VFloat64(8.988465674311579e+307)",
		Source:      VFloat64(8.988465674311579e+307),
	},
	{
		Label:       "+Max",
		TargetLabel: "VFloat64(8.988465674311579e+307)",
		Target:      VFloat64(8.988465674311579e+307),
		SourceLabel: "float64(8.988465674311579e+307)",
		Source:      float64(8.988465674311579e+307),
	},
	{
		IsCanonical: true,
		Label:       "+Min",
		TargetLabel: "VFloat64(5e-323)",
		Target:      VFloat64(5e-323),
		SourceLabel: "VFloat64(5e-323)",
		Source:      VFloat64(5e-323),
	},
	{
		Label:       "+Min",
		TargetLabel: "VFloat64(5e-323)",
		Target:      VFloat64(5e-323),
		SourceLabel: "float32(0)",
		Source:      float32(0),
	},
	{
		Label:       "+Min",
		TargetLabel: "VFloat64(5e-323)",
		Target:      VFloat64(5e-323),
		SourceLabel: "VFloat32(0)",
		Source:      VFloat32(0),
	},
	{
		IsCanonical: true,
		Label:       "-Max",
		TargetLabel: "VFloat64(-8.988465674311579e+307)",
		Target:      VFloat64(-8.988465674311579e+307),
		SourceLabel: "VFloat64(-8.988465674311579e+307)",
		Source:      VFloat64(-8.988465674311579e+307),
	},
	{
		Label:       "-Max",
		TargetLabel: "VFloat64(-8.988465674311579e+307)",
		Target:      VFloat64(-8.988465674311579e+307),
		SourceLabel: "float64(-8.988465674311579e+307)",
		Source:      float64(-8.988465674311579e+307),
	},
	{
		IsCanonical: true,
		Label:       "-Min",
		TargetLabel: "VFloat64(-5e-323)",
		Target:      VFloat64(-5e-323),
		SourceLabel: "VFloat64(-5e-323)",
		Source:      VFloat64(-5e-323),
	},
	{
		Label:       "-Min",
		TargetLabel: "VFloat64(-5e-323)",
		Target:      VFloat64(-5e-323),
		SourceLabel: "VFloat32(-0)",
		Source:      VFloat32(0),
	},
	{
		Label:       "-Min",
		TargetLabel: "VFloat64(-5e-323)",
		Target:      VFloat64(-5e-323),
		SourceLabel: "float32(-0)",
		Source:      float32(0),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VFloat64(1.23)",
		Target:      VFloat64(1.23),
		SourceLabel: "VFloat64(1.23)",
		Source:      VFloat64(1.23),
	},
	{
		Label:       "Full",
		TargetLabel: "VFloat64(1.23)",
		Target:      VFloat64(1.23),
		SourceLabel: "VFloat32(1.23)",
		Source:      VFloat32(1.23),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VFloat64(-1.7390083583175156e+09)",
		Target:      VFloat64(-1.7390083583175156e+09),
		SourceLabel: "VFloat64(-1.7390083583175156e+09)",
		Source:      VFloat64(-1.7390083583175156e+09),
	},
	{
		Label:       "Random",
		TargetLabel: "VFloat64(-1.7390083583175156e+09)",
		Target:      VFloat64(-1.7390083583175156e+09),
		SourceLabel: "float64(-1.7390083583175156e+09)",
		Source:      float64(-1.7390083583175156e+09),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VFloat64(-1.2112472683796887e+09)",
		Target:      VFloat64(-1.2112472683796887e+09),
		SourceLabel: "VFloat64(-1.2112472683796887e+09)",
		Source:      VFloat64(-1.2112472683796887e+09),
	},
	{
		Label:       "Random",
		TargetLabel: "VFloat64(-1.2112472683796887e+09)",
		Target:      VFloat64(-1.2112472683796887e+09),
		SourceLabel: "float64(-1.2112472683796887e+09)",
		Source:      float64(-1.2112472683796887e+09),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "?VStructEmpty(nil)",
		Target:      (*VStructEmpty)(nil),
		SourceLabel: "?VStructEmpty(nil)",
		Source:      (*VStructEmpty)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructEmpty(nil)",
		Target:      (*VStructEmpty)(nil),
		SourceLabel: "error(nil)",
		Source:      (error)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructEmpty(nil)",
		Target:      (*VStructEmpty)(nil),
		SourceLabel: "?VStructDepth2_Rand0(nil)",
		Source:      (*VStructDepth2_Rand0)(nil),
	},
	{
		Label:       "NilAny",
		TargetLabel: "?VStructEmpty(nil)",
		Target:      (*VStructEmpty)(nil),
		SourceLabel: "any(nil)",
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "?VStructEmpty{}",
		Target:      &VStructEmpty{},
		SourceLabel: "?VStructEmpty{}",
		Source:      &VStructEmpty{},
	},
	{
		Label:       "Full",
		TargetLabel: "?VStructEmpty{}",
		Target:      &VStructEmpty{},
		SourceLabel: "?VStructDepth1_All{}",
		Source: &VStructDepth1_All{
			F5: vdl.AnyType,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_Any{}",
		Target:      VArray3_Any{},
		SourceLabel: "VArray3_Any{}",
		Source:      VArray3_Any{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_Any{}",
		Target:      VArray3_Any{},
		SourceLabel: "[]any{nil, nil, nil}",
		Source: []interface{}{
			nil,
			nil,
			nil,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_Any{}",
		Target:      VArray3_Any{},
		SourceLabel: "VList_Any{nil, nil, nil}",
		Source: VList_Any{
			nil,
			nil,
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_Any{int64(-123), int64(-123), int64(-123)}",
		Target: VArray3_Any{
			int64(-123),
			int64(-123),
			int64(-123),
		},
		SourceLabel: "VArray3_Any{int64(-123), int64(-123), int64(-123)}",
		Source: VArray3_Any{
			int64(-123),
			int64(-123),
			int64(-123),
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_Any{int64(-123), int64(-123), int64(-123)}",
		Target: VArray3_Any{
			int64(-123),
			int64(-123),
			int64(-123),
		},
		SourceLabel: "VList_VFloat64{-123, -123, -123}",
		Source: VList_VFloat64{
			-123,
			-123,
			-123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_Any{VUnionDepth1_Rand0{F12: 3335}, VArray1_Error{{Id: \"i\", RetryCode: RetryConnection}}, VStructEmpty{}}",
		Target: VArray3_Any{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F12{3335}),
			VArray1_Error{
				verror.FromWire(vdl.WireError{
					Id:        "i",
					RetryCode: vdl.WireRetryCodeRetryConnection,
				}),
			},
			VStructEmpty{},
		},
		SourceLabel: "VArray3_Any{VUnionDepth1_Rand0{F12: 3335}, VArray1_Error{{Id: \"i\", RetryCode: RetryConnection}}, VStructEmpty{}}",
		Source: VArray3_Any{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F12{3335}),
			VArray1_Error{
				verror.FromWire(vdl.WireError{
					Id:        "i",
					RetryCode: vdl.WireRetryCodeRetryConnection,
				}),
			},
			VStructEmpty{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_Any{VUnionDepth1_Rand0{F12: 3335}, VArray1_Error{{Id: \"i\", RetryCode: RetryConnection}}, VStructEmpty{}}",
		Target: VArray3_Any{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F12{3335}),
			VArray1_Error{
				verror.FromWire(vdl.WireError{
					Id:        "i",
					RetryCode: vdl.WireRetryCodeRetryConnection,
				}),
			},
			VStructEmpty{},
		},
		SourceLabel: "[]any{VUnionDepth1_Rand0{F12: 3335}, VArray1_Error{{Id: \"i\", RetryCode: RetryConnection}}, VStructEmpty{}}",
		Source: []interface{}{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F12{3335}),
			VArray1_Error{
				verror.FromWire(vdl.WireError{
					Id:        "i",
					RetryCode: vdl.WireRetryCodeRetryConnection,
				}),
			},
			VStructEmpty{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_Any{VArray3_VString{}, VStructEmpty{}, nil}",
		Target: VArray3_Any{
			VArray3_VString{},
			VStructEmpty{},
			nil,
		},
		SourceLabel: "VArray3_Any{VArray3_VString{}, VStructEmpty{}, nil}",
		Source: VArray3_Any{
			VArray3_VString{},
			VStructEmpty{},
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_Any{VArray3_VString{}, VStructEmpty{}, nil}",
		Target: VArray3_Any{
			VArray3_VString{},
			VStructEmpty{},
			nil,
		},
		SourceLabel: "[]any{VArray3_VString{}, VStructEmpty{}, nil}",
		Source: []interface{}{
			VArray3_VString{},
			VStructEmpty{},
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_Bool{}",
		Target:      VArray3_Bool{},
		SourceLabel: "VArray3_Bool{}",
		Source:      VArray3_Bool{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_Bool{}",
		Target:      VArray3_Bool{},
		SourceLabel: "VList_VBool{false, false, false}",
		Source: VList_VBool{
			false,
			false,
			false,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_Bool{}",
		Target:      VArray3_Bool{},
		SourceLabel: "VArray3_Any{false, false, false}",
		Source: VArray3_Any{
			false,
			false,
			false,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_Bool{true, true, true}",
		Target: VArray3_Bool{
			true,
			true,
			true,
		},
		SourceLabel: "VArray3_Bool{true, true, true}",
		Source: VArray3_Bool{
			true,
			true,
			true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_Bool{true, true, true}",
		Target: VArray3_Bool{
			true,
			true,
			true,
		},
		SourceLabel: "[]VBool{true, true, true}",
		Source: []VBool{
			true,
			true,
			true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_VBool{}",
		Target:      VArray3_VBool{},
		SourceLabel: "VArray3_VBool{}",
		Source:      VArray3_VBool{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VBool{}",
		Target:      VArray3_VBool{},
		SourceLabel: "VList_VBool{false, false, false}",
		Source: VList_VBool{
			false,
			false,
			false,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VBool{}",
		Target:      VArray3_VBool{},
		SourceLabel: "VArray3_Any{VBool(false), VBool(false), VBool(false)}",
		Source: VArray3_Any{
			VBool(false),
			VBool(false),
			VBool(false),
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_VBool{true, true, true}",
		Target: VArray3_VBool{
			true,
			true,
			true,
		},
		SourceLabel: "VArray3_VBool{true, true, true}",
		Source: VArray3_VBool{
			true,
			true,
			true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_VBool{true, true, true}",
		Target: VArray3_VBool{
			true,
			true,
			true,
		},
		SourceLabel: "[]VBool{true, true, true}",
		Source: []VBool{
			true,
			true,
			true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_String{}",
		Target:      VArray1_String{},
		SourceLabel: "VArray1_String{}",
		Source:      VArray1_String{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_String{}",
		Target:      VArray1_String{},
		SourceLabel: "VList_String{\"\"}",
		Source: VList_String{
			"",
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_String{}",
		Target:      VArray1_String{},
		SourceLabel: "VList_VString{\"\"}",
		Source: VList_VString{
			"",
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VArray1_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VArray1_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VArray1_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VArray1_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "[]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: []VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_String{\"bc\"}",
		Target: VArray1_String{
			"bc",
		},
		SourceLabel: "VArray1_String{\"bc\"}",
		Source: VArray1_String{
			"bc",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_String{\"bc\"}",
		Target: VArray1_String{
			"bc",
		},
		SourceLabel: "[]string{\"bc\"}",
		Source: []string{
			"bc",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤\"}",
		Target: VArray1_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤",
		},
		SourceLabel: "VArray1_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤\"}",
		Source: VArray1_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤\"}",
		Target: VArray1_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤",
		},
		SourceLabel: "[]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤\"}",
		Source: []string{
			"abcdefghijklmnopΔΘΠΣΦ王普澤",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_VString{}",
		Target:      VArray3_VString{},
		SourceLabel: "VArray3_VString{}",
		Source:      VArray3_VString{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VString{}",
		Target:      VArray3_VString{},
		SourceLabel: "VList_String{\"\", \"\", \"\"}",
		Source: VList_String{
			"",
			"",
			"",
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VString{}",
		Target:      VArray3_VString{},
		SourceLabel: "VArray3_Any{VString(\"\"), VString(\"\"), VString(\"\")}",
		Source: VArray3_Any{
			VString(""),
			VString(""),
			VString(""),
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VArray3_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VArray3_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VArray3_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VArray3_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "[]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: []VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_VString{\"ΠΣΦ王普澤\", \"\", \"fghijklmnopΔΘΠΣΦ王\"}",
		Target: VArray3_VString{
			"ΠΣΦ王普澤",
			"",
			"fghijklmnopΔΘΠΣΦ王",
		},
		SourceLabel: "VArray3_VString{\"ΠΣΦ王普澤\", \"\", \"fghijklmnopΔΘΠΣΦ王\"}",
		Source: VArray3_VString{
			"ΠΣΦ王普澤",
			"",
			"fghijklmnopΔΘΠΣΦ王",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_VString{\"ΠΣΦ王普澤\", \"\", \"fghijklmnopΔΘΠΣΦ王\"}",
		Target: VArray3_VString{
			"ΠΣΦ王普澤",
			"",
			"fghijklmnopΔΘΠΣΦ王",
		},
		SourceLabel: "[]string{\"ΠΣΦ王普澤\", \"\", \"fghijklmnopΔΘΠΣΦ王\"}",
		Source: []string{
			"ΠΣΦ王普澤",
			"",
			"fghijklmnopΔΘΠΣΦ王",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_VString{\"Π\", \"cdefg\", \"jklmnopΔ\"}",
		Target: VArray3_VString{
			"Π",
			"cdefg",
			"jklmnopΔ",
		},
		SourceLabel: "VArray3_VString{\"Π\", \"cdefg\", \"jklmnopΔ\"}",
		Source: VArray3_VString{
			"Π",
			"cdefg",
			"jklmnopΔ",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_VString{\"Π\", \"cdefg\", \"jklmnopΔ\"}",
		Target: VArray3_VString{
			"Π",
			"cdefg",
			"jklmnopΔ",
		},
		SourceLabel: "[]string{\"Π\", \"cdefg\", \"jklmnopΔ\"}",
		Source: []string{
			"Π",
			"cdefg",
			"jklmnopΔ",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray2_TypeObject{}",
		Target: VArray2_TypeObject{
			vdl.AnyType,
			vdl.AnyType,
		},
		SourceLabel: "VArray2_TypeObject{}",
		Source: VArray2_TypeObject{
			vdl.AnyType,
			vdl.AnyType,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_TypeObject{}",
		Target: VArray2_TypeObject{
			vdl.AnyType,
			vdl.AnyType,
		},
		SourceLabel: "[]any{typeobject(any), typeobject(any)}",
		Source: []interface{}{
			vdl.AnyType,
			vdl.AnyType,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_TypeObject{}",
		Target: VArray2_TypeObject{
			vdl.AnyType,
			vdl.AnyType,
		},
		SourceLabel: "VList_TypeObject{typeobject(any), typeobject(any)}",
		Source: VList_TypeObject{
			vdl.AnyType,
			vdl.AnyType,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray2_TypeObject{typeobject(int64), typeobject(int64)}",
		Target: VArray2_TypeObject{
			vdl.Int64Type,
			vdl.Int64Type,
		},
		SourceLabel: "VArray2_TypeObject{typeobject(int64), typeobject(int64)}",
		Source: VArray2_TypeObject{
			vdl.Int64Type,
			vdl.Int64Type,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray2_TypeObject{typeobject(int64), typeobject(int64)}",
		Target: VArray2_TypeObject{
			vdl.Int64Type,
			vdl.Int64Type,
		},
		SourceLabel: "VList_Any{typeobject(int64), typeobject(int64)}",
		Source: VList_Any{
			vdl.Int64Type,
			vdl.Int64Type,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray2_TypeObject{typeobject(set[int64]), typeobject([]int32)}",
		Target: VArray2_TypeObject{
			vdl.TypeOf((*map[int64]struct{})(nil)),
			vdl.TypeOf((*[]int32)(nil)),
		},
		SourceLabel: "VArray2_TypeObject{typeobject(set[int64]), typeobject([]int32)}",
		Source: VArray2_TypeObject{
			vdl.TypeOf((*map[int64]struct{})(nil)),
			vdl.TypeOf((*[]int32)(nil)),
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray2_TypeObject{typeobject(set[int64]), typeobject([]int32)}",
		Target: VArray2_TypeObject{
			vdl.TypeOf((*map[int64]struct{})(nil)),
			vdl.TypeOf((*[]int32)(nil)),
		},
		SourceLabel: "[]any{typeobject(set[int64]), typeobject([]int32)}",
		Source: []interface{}{
			vdl.TypeOf((*map[int64]struct{})(nil)),
			vdl.TypeOf((*[]int32)(nil)),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray2_TypeObject{typeobject([]VArray1_String), typeobject(VInt16)}",
		Target: VArray2_TypeObject{
			vdl.TypeOf((*[]VArray1_String)(nil)),
			vdl.TypeOf((*VInt16)(nil)),
		},
		SourceLabel: "VArray2_TypeObject{typeobject([]VArray1_String), typeobject(VInt16)}",
		Source: VArray2_TypeObject{
			vdl.TypeOf((*[]VArray1_String)(nil)),
			vdl.TypeOf((*VInt16)(nil)),
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray2_TypeObject{typeobject([]VArray1_String), typeobject(VInt16)}",
		Target: VArray2_TypeObject{
			vdl.TypeOf((*[]VArray1_String)(nil)),
			vdl.TypeOf((*VInt16)(nil)),
		},
		SourceLabel: "[]any{typeobject([]VArray1_String), typeobject(VInt16)}",
		Source: []interface{}{
			vdl.TypeOf((*[]VArray1_String)(nil)),
			vdl.TypeOf((*VInt16)(nil)),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_Byte(\"\\x00\")",
		Target:      VArray1_Byte{},
		SourceLabel: "VArray1_Byte(\"\\x00\")",
		Source:      VArray1_Byte{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Byte(\"\\x00\")",
		Target:      VArray1_Byte{},
		SourceLabel: "VArray1_Uint64{}",
		Source:      VArray1_Uint64{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Byte(\"\\x00\")",
		Target:      VArray1_Byte{},
		SourceLabel: "[]float64{0}",
		Source: []float64{
			0,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_Byte(\"{\")",
		Target: VArray1_Byte{
			123,
		},
		SourceLabel: "VArray1_Byte(\"{\")",
		Source: VArray1_Byte{
			123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_Byte(\"{\")",
		Target: VArray1_Byte{
			123,
		},
		SourceLabel: "VList_VUint32{123}",
		Source: VList_VUint32{
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_Byte(\"U\")",
		Target: VArray1_Byte{
			85,
		},
		SourceLabel: "VArray1_Byte(\"U\")",
		Source: VArray1_Byte{
			85,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_Byte(\"U\")",
		Target: VArray1_Byte{
			85,
		},
		SourceLabel: "VList_Byte(\"U\")",
		Source:      VList_Byte("U"),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_Byte(\"\\x90\")",
		Target: VArray1_Byte{
			144,
		},
		SourceLabel: "VArray1_Byte(\"\\x90\")",
		Source: VArray1_Byte{
			144,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_Byte(\"\\x90\")",
		Target: VArray1_Byte{
			144,
		},
		SourceLabel: "VList_Byte(\"\\x90\")",
		Source:      VList_Byte("\x90"),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray2_VByte(\"\\x00\\x00\")",
		Target:      VArray2_VByte{},
		SourceLabel: "VArray2_VByte(\"\\x00\\x00\")",
		Source:      VArray2_VByte{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_VByte(\"\\x00\\x00\")",
		Target:      VArray2_VByte{},
		SourceLabel: "VArray2_Uint32{}",
		Source:      VArray2_Uint32{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_VByte(\"\\x00\\x00\")",
		Target:      VArray2_VByte{},
		SourceLabel: "[]float64{0, 0}",
		Source: []float64{
			0,
			0,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray2_VByte(\"{{\")",
		Target: VArray2_VByte{
			123,
			123,
		},
		SourceLabel: "VArray2_VByte(\"{{\")",
		Source: VArray2_VByte{
			123,
			123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray2_VByte(\"{{\")",
		Target: VArray2_VByte{
			123,
			123,
		},
		SourceLabel: "VList_VUint32{123, 123}",
		Source: VList_VUint32{
			123,
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray2_VByte(\"&T\")",
		Target: VArray2_VByte{
			38,
			84,
		},
		SourceLabel: "VArray2_VByte(\"&T\")",
		Source: VArray2_VByte{
			38,
			84,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray2_VByte(\"&T\")",
		Target: VArray2_VByte{
			38,
			84,
		},
		SourceLabel: "VList_Byte(\"&T\")",
		Source:      VList_Byte("&T"),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray2_VByte(\":f\")",
		Target: VArray2_VByte{
			58,
			102,
		},
		SourceLabel: "VArray2_VByte(\":f\")",
		Source: VArray2_VByte{
			58,
			102,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray2_VByte(\":f\")",
		Target: VArray2_VByte{
			58,
			102,
		},
		SourceLabel: "VList_Byte(\":f\")",
		Source:      VList_Byte(":f"),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray2_VEnumAbc{}",
		Target:      VArray2_VEnumAbc{},
		SourceLabel: "VArray2_VEnumAbc{}",
		Source:      VArray2_VEnumAbc{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_VEnumAbc{}",
		Target:      VArray2_VEnumAbc{},
		SourceLabel: "VList_String{\"A\", \"A\"}",
		Source: VList_String{
			"A",
			"A",
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_VEnumAbc{}",
		Target:      VArray2_VEnumAbc{},
		SourceLabel: "VList_VString{\"A\", \"A\"}",
		Source: VList_VString{
			"A",
			"A",
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray2_VEnumAbc{C, C}",
		Target: VArray2_VEnumAbc{
			VEnumAbcC,
			VEnumAbcC,
		},
		SourceLabel: "VArray2_VEnumAbc{C, C}",
		Source: VArray2_VEnumAbc{
			VEnumAbcC,
			VEnumAbcC,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray2_VEnumAbc{C, C}",
		Target: VArray2_VEnumAbc{
			VEnumAbcC,
			VEnumAbcC,
		},
		SourceLabel: "[]VEnumBcd{C, C}",
		Source: []VEnumBcd{
			VEnumBcdC,
			VEnumBcdC,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray2_VEnumBcd{}",
		Target:      VArray2_VEnumBcd{},
		SourceLabel: "VArray2_VEnumBcd{}",
		Source:      VArray2_VEnumBcd{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_VEnumBcd{}",
		Target:      VArray2_VEnumBcd{},
		SourceLabel: "VList_String{\"B\", \"B\"}",
		Source: VList_String{
			"B",
			"B",
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_VEnumBcd{}",
		Target:      VArray2_VEnumBcd{},
		SourceLabel: "VList_VEnumBcd{B, B}",
		Source: VList_VEnumBcd{
			VEnumBcdB,
			VEnumBcdB,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray2_VEnumBcd{D, D}",
		Target: VArray2_VEnumBcd{
			VEnumBcdD,
			VEnumBcdD,
		},
		SourceLabel: "VArray2_VEnumBcd{D, D}",
		Source: VArray2_VEnumBcd{
			VEnumBcdD,
			VEnumBcdD,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray2_VEnumBcd{D, D}",
		Target: VArray2_VEnumBcd{
			VEnumBcdD,
			VEnumBcdD,
		},
		SourceLabel: "[]VEnumBcd{D, D}",
		Source: []VEnumBcd{
			VEnumBcdD,
			VEnumBcdD,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_VStructEmpty{}",
		Target:      VArray1_VStructEmpty{},
		SourceLabel: "VArray1_VStructEmpty{}",
		Source:      VArray1_VStructEmpty{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VStructEmpty{}",
		Target:      VArray1_VStructEmpty{},
		SourceLabel: "[]VStructEmpty{{}}",
		Source: []VStructEmpty{
			{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VStructEmpty{}",
		Target:      VArray1_VStructEmpty{},
		SourceLabel: "VList_VStructDepth1_All{{}}",
		Source: VList_VStructDepth1_All{
			{
				F5: vdl.AnyType,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_Error{}",
		Target:      VArray1_Error{},
		SourceLabel: "VArray1_Error{}",
		Source:      VArray1_Error{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Error{}",
		Target:      VArray1_Error{},
		SourceLabel: "[]error{nil}",
		Source: []error{
			nil,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Error{}",
		Target:      VArray1_Error{},
		SourceLabel: "[]any{nil}",
		Source: []interface{}{
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_Error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VArray1_Error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
		SourceLabel: "VArray1_Error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VArray1_Error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_Error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VArray1_Error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
		SourceLabel: "[]error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: []error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_Error{{Id: \"ΘΠ\", RetryCode: RetryConnection, Msg: \"bcdefghijklmno\"}}",
		Target: VArray1_Error{
			verror.FromWire(vdl.WireError{
				Id:        "ΘΠ",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "bcdefghijklmno",
			}),
		},
		SourceLabel: "VArray1_Error{{Id: \"ΘΠ\", RetryCode: RetryConnection, Msg: \"bcdefghijklmno\"}}",
		Source: VArray1_Error{
			verror.FromWire(vdl.WireError{
				Id:        "ΘΠ",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "bcdefghijklmno",
			}),
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_Error{{Id: \"ΘΠ\", RetryCode: RetryConnection, Msg: \"bcdefghijklmno\"}}",
		Target: VArray1_Error{
			verror.FromWire(vdl.WireError{
				Id:        "ΘΠ",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "bcdefghijklmno",
			}),
		},
		SourceLabel: "[]any{error{Id: \"ΘΠ\", RetryCode: RetryConnection, Msg: \"bcdefghijklmno\"}}",
		Source: []interface{}{
			verror.FromWire(vdl.WireError{
				Id:        "ΘΠ",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "bcdefghijklmno",
			}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_Error{{Id: \"efghijklmnopΔΘΠΣΦ王普澤世\", Msg: \"jklmnopΔΘΠΣ\"}}",
		Target: VArray1_Error{
			verror.FromWire(vdl.WireError{
				Id:  "efghijklmnopΔΘΠΣΦ王普澤世",
				Msg: "jklmnopΔΘΠΣ",
			}),
		},
		SourceLabel: "VArray1_Error{{Id: \"efghijklmnopΔΘΠΣΦ王普澤世\", Msg: \"jklmnopΔΘΠΣ\"}}",
		Source: VArray1_Error{
			verror.FromWire(vdl.WireError{
				Id:  "efghijklmnopΔΘΠΣΦ王普澤世",
				Msg: "jklmnopΔΘΠΣ",
			}),
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_Error{{Id: \"efghijklmnopΔΘΠΣΦ王普澤世\", Msg: \"jklmnopΔΘΠΣ\"}}",
		Target: VArray1_Error{
			verror.FromWire(vdl.WireError{
				Id:  "efghijklmnopΔΘΠΣΦ王普澤世",
				Msg: "jklmnopΔΘΠΣ",
			}),
		},
		SourceLabel: "[]any{error{Id: \"efghijklmnopΔΘΠΣΦ王普澤世\", Msg: \"jklmnopΔΘΠΣ\"}}",
		Source: []interface{}{
			verror.FromWire(vdl.WireError{
				Id:  "efghijklmnopΔΘΠΣΦ王普澤世",
				Msg: "jklmnopΔΘΠΣ",
			}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray2_Uint32{}",
		Target:      VArray2_Uint32{},
		SourceLabel: "VArray2_Uint32{}",
		Source:      VArray2_Uint32{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_Uint32{}",
		Target:      VArray2_Uint32{},
		SourceLabel: "[]float64{0, 0}",
		Source: []float64{
			0,
			0,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_Uint32{}",
		Target:      VArray2_Uint32{},
		SourceLabel: "[]int32{0, 0}",
		Source: []int32{
			0,
			0,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray2_Uint32{123, 123}",
		Target: VArray2_Uint32{
			123,
			123,
		},
		SourceLabel: "VArray2_Uint32{123, 123}",
		Source: VArray2_Uint32{
			123,
			123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray2_Uint32{123, 123}",
		Target: VArray2_Uint32{
			123,
			123,
		},
		SourceLabel: "VList_VUint32{123, 123}",
		Source: VList_VUint32{
			123,
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray2_Uint32{1767088296, 712233476}",
		Target: VArray2_Uint32{
			1767088296,
			712233476,
		},
		SourceLabel: "VArray2_Uint32{1767088296, 712233476}",
		Source: VArray2_Uint32{
			1767088296,
			712233476,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray2_Uint32{1767088296, 712233476}",
		Target: VArray2_Uint32{
			1767088296,
			712233476,
		},
		SourceLabel: "[]any{uint32(1767088296), uint32(712233476)}",
		Source: []interface{}{
			uint32(1767088296),
			uint32(712233476),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray2_Uint32{1392933563, 643437080}",
		Target: VArray2_Uint32{
			1392933563,
			643437080,
		},
		SourceLabel: "VArray2_Uint32{1392933563, 643437080}",
		Source: VArray2_Uint32{
			1392933563,
			643437080,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray2_Uint32{1392933563, 643437080}",
		Target: VArray2_Uint32{
			1392933563,
			643437080,
		},
		SourceLabel: "[]any{uint32(1392933563), uint32(643437080)}",
		Source: []interface{}{
			uint32(1392933563),
			uint32(643437080),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_Uint64{}",
		Target:      VArray1_Uint64{},
		SourceLabel: "VArray1_Uint64{}",
		Source:      VArray1_Uint64{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Uint64{}",
		Target:      VArray1_Uint64{},
		SourceLabel: "[]float64{0}",
		Source: []float64{
			0,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Uint64{}",
		Target:      VArray1_Uint64{},
		SourceLabel: "[]int32{0}",
		Source: []int32{
			0,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_Uint64{123}",
		Target: VArray1_Uint64{
			123,
		},
		SourceLabel: "VArray1_Uint64{123}",
		Source: VArray1_Uint64{
			123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_Uint64{123}",
		Target: VArray1_Uint64{
			123,
		},
		SourceLabel: "VArray1_Byte(\"{\")",
		Source: VArray1_Byte{
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_Uint64{4747207760175831629}",
		Target: VArray1_Uint64{
			4747207760175831629,
		},
		SourceLabel: "VArray1_Uint64{4747207760175831629}",
		Source: VArray1_Uint64{
			4747207760175831629,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_Uint64{4747207760175831629}",
		Target: VArray1_Uint64{
			4747207760175831629,
		},
		SourceLabel: "[]any{uint64(4747207760175831629)}",
		Source: []interface{}{
			uint64(4747207760175831629),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_Uint64{2844754190857521241}",
		Target: VArray1_Uint64{
			2844754190857521241,
		},
		SourceLabel: "VArray1_Uint64{2844754190857521241}",
		Source: VArray1_Uint64{
			2844754190857521241,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_Uint64{2844754190857521241}",
		Target: VArray1_Uint64{
			2844754190857521241,
		},
		SourceLabel: "[]any{uint64(2844754190857521241)}",
		Source: []interface{}{
			uint64(2844754190857521241),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_Int64{}",
		Target:      VArray3_Int64{},
		SourceLabel: "VArray3_Int64{}",
		Source:      VArray3_Int64{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_Int64{}",
		Target:      VArray3_Int64{},
		SourceLabel: "[]float64{0, 0, 0}",
		Source: []float64{
			0,
			0,
			0,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_Int64{}",
		Target:      VArray3_Int64{},
		SourceLabel: "VArray3_Any{int64(0), int64(0), int64(0)}",
		Source: VArray3_Any{
			int64(0),
			int64(0),
			int64(0),
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_Int64{-123, -123, -123}",
		Target: VArray3_Int64{
			-123,
			-123,
			-123,
		},
		SourceLabel: "VArray3_Int64{-123, -123, -123}",
		Source: VArray3_Int64{
			-123,
			-123,
			-123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_Int64{-123, -123, -123}",
		Target: VArray3_Int64{
			-123,
			-123,
			-123,
		},
		SourceLabel: "VList_VFloat64{-123, -123, -123}",
		Source: VList_VFloat64{
			-123,
			-123,
			-123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_Int64{3327943681772355304, 0, 4158782168590111366}",
		Target: VArray3_Int64{
			3327943681772355304,
			0,
			4158782168590111366,
		},
		SourceLabel: "VArray3_Int64{3327943681772355304, 0, 4158782168590111366}",
		Source: VArray3_Int64{
			3327943681772355304,
			0,
			4158782168590111366,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_Int64{3327943681772355304, 0, 4158782168590111366}",
		Target: VArray3_Int64{
			3327943681772355304,
			0,
			4158782168590111366,
		},
		SourceLabel: "[]any{int64(3327943681772355304), int64(0), int64(4158782168590111366)}",
		Source: []interface{}{
			int64(3327943681772355304),
			int64(0),
			int64(4158782168590111366),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_Int64{4365689103410177046, 0, 207544921839632639}",
		Target: VArray3_Int64{
			4365689103410177046,
			0,
			207544921839632639,
		},
		SourceLabel: "VArray3_Int64{4365689103410177046, 0, 207544921839632639}",
		Source: VArray3_Int64{
			4365689103410177046,
			0,
			207544921839632639,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_Int64{4365689103410177046, 0, 207544921839632639}",
		Target: VArray3_Int64{
			4365689103410177046,
			0,
			207544921839632639,
		},
		SourceLabel: "[]any{int64(4365689103410177046), int64(0), int64(207544921839632639)}",
		Source: []interface{}{
			int64(4365689103410177046),
			int64(0),
			int64(207544921839632639),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_OptVStructEmpty{}",
		Target:      VArray3_OptVStructEmpty{},
		SourceLabel: "VArray3_OptVStructEmpty{}",
		Source:      VArray3_OptVStructEmpty{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_OptVStructEmpty{}",
		Target:      VArray3_OptVStructEmpty{},
		SourceLabel: "VArray3_Any{}",
		Source:      VArray3_Any{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_OptVStructEmpty{}",
		Target:      VArray3_OptVStructEmpty{},
		SourceLabel: "[]error{nil, nil, nil}",
		Source: []error{
			nil,
			nil,
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_OptVStructEmpty{{}, {}, {}}",
		Target: VArray3_OptVStructEmpty{
			{},
			{},
			{},
		},
		SourceLabel: "VArray3_OptVStructEmpty{{}, {}, {}}",
		Source: VArray3_OptVStructEmpty{
			{},
			{},
			{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_OptVStructEmpty{{}, {}, {}}",
		Target: VArray3_OptVStructEmpty{
			{},
			{},
			{},
		},
		SourceLabel: "VList_VStructEmpty{{}, {}, {}}",
		Source: VList_VStructEmpty{
			{},
			{},
			{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]any{}",
		Target:      []interface{}(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]any{}",
		Target:      []interface{}(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]any{}",
		Target:      []interface{}(nil),
		SourceLabel: "[]VArray1_String{}",
		Source:      []VArray1_String(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]any{int64(-123)}",
		Target: []interface{}{
			int64(-123),
		},
		SourceLabel: "[]any{int64(-123)}",
		Source: []interface{}{
			int64(-123),
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]any{int64(-123)}",
		Target: []interface{}{
			int64(-123),
		},
		SourceLabel: "VList_VFloat64{-123}",
		Source: VList_VFloat64{
			-123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]any{VList_List_VBool{{false, true, true}, {}}, VArray2_VSet_String{{\"\", \"efghijklmnopΔΘΠΣΦ王普\", \"hijklmnop\"}, {\"ΔΘΠΣΦ王普澤世\", \"ΣΦ王普澤世\"}}, VSet_Float32{2.8295354e+08}}",
		Target: []interface{}{
			VList_List_VBool{
				{
					false,
					true,
					true,
				},
				nil,
			},
			VArray2_VSet_String{
				{
					"": struct{}{},
					"efghijklmnopΔΘΠΣΦ王普": struct{}{},
					"hijklmnop":           struct{}{},
				},
				{
					"ΔΘΠΣΦ王普澤世": struct{}{},
					"ΣΦ王普澤世":    struct{}{},
				},
			},
			VSet_Float32{
				2.8295354e+08: struct{}{},
			},
		},
		SourceLabel: "[]any{VList_List_VBool{{false, true, true}, {}}, VArray2_VSet_String{{\"\", \"efghijklmnopΔΘΠΣΦ王普\", \"hijklmnop\"}, {\"ΔΘΠΣΦ王普澤世\", \"ΣΦ王普澤世\"}}, VSet_Float32{2.8295354e+08}}",
		Source: []interface{}{
			VList_List_VBool{
				{
					false,
					true,
					true,
				},
				nil,
			},
			VArray2_VSet_String{
				{
					"": struct{}{},
					"efghijklmnopΔΘΠΣΦ王普": struct{}{},
					"hijklmnop":           struct{}{},
				},
				{
					"ΔΘΠΣΦ王普澤世": struct{}{},
					"ΣΦ王普澤世":    struct{}{},
				},
			},
			VSet_Float32{
				2.8295354e+08: struct{}{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]any{VList_List_VBool{{false, true, true}, {}}, VArray2_VSet_String{{\"\", \"efghijklmnopΔΘΠΣΦ王普\", \"hijklmnop\"}, {\"ΔΘΠΣΦ王普澤世\", \"ΣΦ王普澤世\"}}, VSet_Float32{2.8295354e+08}}",
		Target: []interface{}{
			VList_List_VBool{
				{
					false,
					true,
					true,
				},
				nil,
			},
			VArray2_VSet_String{
				{
					"": struct{}{},
					"efghijklmnopΔΘΠΣΦ王普": struct{}{},
					"hijklmnop":           struct{}{},
				},
				{
					"ΔΘΠΣΦ王普澤世": struct{}{},
					"ΣΦ王普澤世":    struct{}{},
				},
			},
			VSet_Float32{
				2.8295354e+08: struct{}{},
			},
		},
		SourceLabel: "VList_Any{VList_List_VBool{{false, true, true}, {}}, VArray2_VSet_String{{\"\", \"efghijklmnopΔΘΠΣΦ王普\", \"hijklmnop\"}, {\"ΔΘΠΣΦ王普澤世\", \"ΣΦ王普澤世\"}}, VSet_Float32{2.8295354e+08}}",
		Source: VList_Any{
			VList_List_VBool{
				{
					false,
					true,
					true,
				},
				nil,
			},
			VArray2_VSet_String{
				{
					"": struct{}{},
					"efghijklmnopΔΘΠΣΦ王普": struct{}{},
					"hijklmnop":           struct{}{},
				},
				{
					"ΔΘΠΣΦ王普澤世": struct{}{},
					"ΣΦ王普澤世":    struct{}{},
				},
			},
			VSet_Float32{
				2.8295354e+08: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]any{VList_Bool{false, false}}",
		Target: []interface{}{
			VList_Bool{
				false,
				false,
			},
		},
		SourceLabel: "[]any{VList_Bool{false, false}}",
		Source: []interface{}{
			VList_Bool{
				false,
				false,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]any{VList_Bool{false, false}}",
		Target: []interface{}{
			VList_Bool{
				false,
				false,
			},
		},
		SourceLabel: "VList_List_VBool{{false, false}}",
		Source: VList_List_VBool{
			{
				false,
				false,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]bool{}",
		Target:      []bool(nil),
		SourceLabel: "[]bool{}",
		Source:      []bool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]bool{}",
		Target:      []bool(nil),
		SourceLabel: "VList_VBool{}",
		Source:      VList_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]bool{}",
		Target:      []bool(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]bool{true}",
		Target: []bool{
			true,
		},
		SourceLabel: "[]bool{true}",
		Source: []bool{
			true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]bool{true}",
		Target: []bool{
			true,
		},
		SourceLabel: "[]VBool{true}",
		Source: []VBool{
			true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VBool{}",
		Target:      []VBool(nil),
		SourceLabel: "[]VBool{}",
		Source:      []VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VBool{}",
		Target:      []VBool(nil),
		SourceLabel: "VList_VBool{}",
		Source:      VList_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VBool{}",
		Target:      []VBool(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VBool{true}",
		Target: []VBool{
			true,
		},
		SourceLabel: "[]VBool{true}",
		Source: []VBool{
			true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VBool{true}",
		Target: []VBool{
			true,
		},
		SourceLabel: "VList_VBool{true}",
		Source: VList_VBool{
			true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]string{}",
		Target:      []string(nil),
		SourceLabel: "[]string{}",
		Source:      []string(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]string{}",
		Target:      []string(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]string{}",
		Target:      []string(nil),
		SourceLabel: "VList_VEnumBcd{}",
		Source:      VList_VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: []string{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "[]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: []string{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: []string{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "[]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: []VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]string{\"ghijklmnopΔΘ\", \"jk\"}",
		Target: []string{
			"ghijklmnopΔΘ",
			"jk",
		},
		SourceLabel: "[]string{\"ghijklmnopΔΘ\", \"jk\"}",
		Source: []string{
			"ghijklmnopΔΘ",
			"jk",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]string{\"ghijklmnopΔΘ\", \"jk\"}",
		Target: []string{
			"ghijklmnopΔΘ",
			"jk",
		},
		SourceLabel: "[]any{\"ghijklmnopΔΘ\", \"jk\"}",
		Source: []interface{}{
			"ghijklmnopΔΘ",
			"jk",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]string{\"ΘΠΣΦ王普\"}",
		Target: []string{
			"ΘΠΣΦ王普",
		},
		SourceLabel: "[]string{\"ΘΠΣΦ王普\"}",
		Source: []string{
			"ΘΠΣΦ王普",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]string{\"ΘΠΣΦ王普\"}",
		Target: []string{
			"ΘΠΣΦ王普",
		},
		SourceLabel: "[]any{\"ΘΠΣΦ王普\"}",
		Source: []interface{}{
			"ΘΠΣΦ王普",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VString{}",
		Target:      []VString(nil),
		SourceLabel: "[]VString{}",
		Source:      []VString(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VString{}",
		Target:      []VString(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VString{}",
		Target:      []VString(nil),
		SourceLabel: "VList_VEnumBcd{}",
		Source:      VList_VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: []VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "[]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: []VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: []VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VList_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VList_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VString{\"mnop\"}",
		Target: []VString{
			"mnop",
		},
		SourceLabel: "[]VString{\"mnop\"}",
		Source: []VString{
			"mnop",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VString{\"mnop\"}",
		Target: []VString{
			"mnop",
		},
		SourceLabel: "[]string{\"mnop\"}",
		Source: []string{
			"mnop",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VString{\"fghijklmn\", \"nopΔΘΠΣ\", \"efghijklmnopΔΘΠ\"}",
		Target: []VString{
			"fghijklmn",
			"nopΔΘΠΣ",
			"efghijklmnopΔΘΠ",
		},
		SourceLabel: "[]VString{\"fghijklmn\", \"nopΔΘΠΣ\", \"efghijklmnopΔΘΠ\"}",
		Source: []VString{
			"fghijklmn",
			"nopΔΘΠΣ",
			"efghijklmnopΔΘΠ",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VString{\"fghijklmn\", \"nopΔΘΠΣ\", \"efghijklmnopΔΘΠ\"}",
		Target: []VString{
			"fghijklmn",
			"nopΔΘΠΣ",
			"efghijklmnopΔΘΠ",
		},
		SourceLabel: "[]string{\"fghijklmn\", \"nopΔΘΠΣ\", \"efghijklmnopΔΘΠ\"}",
		Source: []string{
			"fghijklmn",
			"nopΔΘΠΣ",
			"efghijklmnopΔΘΠ",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]typeobject{}",
		Target:      []*vdl.Type(nil),
		SourceLabel: "[]typeobject{}",
		Source:      []*vdl.Type(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]typeobject{}",
		Target:      []*vdl.Type(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]typeobject{}",
		Target:      []*vdl.Type(nil),
		SourceLabel: "VList_TypeObject{}",
		Source:      VList_TypeObject(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]typeobject{typeobject(int64)}",
		Target: []*vdl.Type{
			vdl.Int64Type,
		},
		SourceLabel: "[]typeobject{typeobject(int64)}",
		Source: []*vdl.Type{
			vdl.Int64Type,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]typeobject{typeobject(int64)}",
		Target: []*vdl.Type{
			vdl.Int64Type,
		},
		SourceLabel: "VList_Any{typeobject(int64)}",
		Source: VList_Any{
			vdl.Int64Type,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]typeobject{typeobject(any), typeobject(VList_OptVStructDepth2_Rand0), typeobject(VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)}",
		Target: []*vdl.Type{
			vdl.AnyType,
			vdl.TypeOf((*VList_OptVStructDepth2_Rand0)(nil)),
			vdl.TypeOf((*VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)(nil)),
		},
		SourceLabel: "[]typeobject{typeobject(any), typeobject(VList_OptVStructDepth2_Rand0), typeobject(VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)}",
		Source: []*vdl.Type{
			vdl.AnyType,
			vdl.TypeOf((*VList_OptVStructDepth2_Rand0)(nil)),
			vdl.TypeOf((*VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)(nil)),
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]typeobject{typeobject(any), typeobject(VList_OptVStructDepth2_Rand0), typeobject(VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)}",
		Target: []*vdl.Type{
			vdl.AnyType,
			vdl.TypeOf((*VList_OptVStructDepth2_Rand0)(nil)),
			vdl.TypeOf((*VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)(nil)),
		},
		SourceLabel: "[]any{typeobject(any), typeobject(VList_OptVStructDepth2_Rand0), typeobject(VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)}",
		Source: []interface{}{
			vdl.AnyType,
			vdl.TypeOf((*VList_OptVStructDepth2_Rand0)(nil)),
			vdl.TypeOf((*VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)(nil)),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]typeobject{typeobject(VArray3_VBool)}",
		Target: []*vdl.Type{
			vdl.TypeOf((*VArray3_VBool)(nil)),
		},
		SourceLabel: "[]typeobject{typeobject(VArray3_VBool)}",
		Source: []*vdl.Type{
			vdl.TypeOf((*VArray3_VBool)(nil)),
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]typeobject{typeobject(VArray3_VBool)}",
		Target: []*vdl.Type{
			vdl.TypeOf((*VArray3_VBool)(nil)),
		},
		SourceLabel: "[]any{typeobject(VArray3_VBool)}",
		Source: []interface{}{
			vdl.TypeOf((*VArray3_VBool)(nil)),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]byte(\"\")",
		Target:      []byte(nil),
		SourceLabel: "[]byte(\"\")",
		Source:      []byte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]byte(\"\")",
		Target:      []byte(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]byte(\"\")",
		Target:      []byte(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]byte(\"{\")",
		Target:      []byte("{"),
		SourceLabel: "[]byte(\"{\")",
		Source:      []byte("{"),
	},
	{
		Label:       "Full",
		TargetLabel: "[]byte(\"{\")",
		Target:      []byte("{"),
		SourceLabel: "VArray1_Byte(\"{\")",
		Source: VArray1_Byte{
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]byte(\"=\\x81$\")",
		Target:      []byte("=\x81$"),
		SourceLabel: "[]byte(\"=\\x81$\")",
		Source:      []byte("=\x81$"),
	},
	{
		Label:       "Random",
		TargetLabel: "[]byte(\"=\\x81$\")",
		Target:      []byte("=\x81$"),
		SourceLabel: "VList_Byte(\"=\\x81$\")",
		Source:      VList_Byte("=\x81$"),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]byte(\"n\")",
		Target:      []byte("n"),
		SourceLabel: "[]byte(\"n\")",
		Source:      []byte("n"),
	},
	{
		Label:       "Random",
		TargetLabel: "[]byte(\"n\")",
		Target:      []byte("n"),
		SourceLabel: "VList_Byte(\"n\")",
		Source:      VList_Byte("n"),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VByte(\"\")",
		Target:      []VByte(nil),
		SourceLabel: "[]VByte(\"\")",
		Source:      []VByte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VByte(\"\")",
		Target:      []VByte(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VByte(\"\")",
		Target:      []VByte(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VByte(\"{\")",
		Target:      []VByte("{"),
		SourceLabel: "[]VByte(\"{\")",
		Source:      []VByte("{"),
	},
	{
		Label:       "Full",
		TargetLabel: "[]VByte(\"{\")",
		Target:      []VByte("{"),
		SourceLabel: "VArray1_Byte(\"{\")",
		Source: VArray1_Byte{
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VByte(\"\\xe2\")",
		Target:      []VByte("\xe2"),
		SourceLabel: "[]VByte(\"\\xe2\")",
		Source:      []VByte("\xe2"),
	},
	{
		Label:       "Random",
		TargetLabel: "[]VByte(\"\\xe2\")",
		Target:      []VByte("\xe2"),
		SourceLabel: "VList_Byte(\"\\xe2\")",
		Source:      VList_Byte("\xe2"),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VByte(\"Rr\")",
		Target:      []VByte("Rr"),
		SourceLabel: "[]VByte(\"Rr\")",
		Source:      []VByte("Rr"),
	},
	{
		Label:       "Random",
		TargetLabel: "[]VByte(\"Rr\")",
		Target:      []VByte("Rr"),
		SourceLabel: "VList_Byte(\"Rr\")",
		Source:      VList_Byte("Rr"),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VEnumAbc{}",
		Target:      []VEnumAbc(nil),
		SourceLabel: "[]VEnumAbc{}",
		Source:      []VEnumAbc(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VEnumAbc{}",
		Target:      []VEnumAbc(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VEnumAbc{}",
		Target:      []VEnumAbc(nil),
		SourceLabel: "VList_VEnumBcd{}",
		Source:      VList_VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VEnumAbc{C}",
		Target: []VEnumAbc{
			VEnumAbcC,
		},
		SourceLabel: "[]VEnumAbc{C}",
		Source: []VEnumAbc{
			VEnumAbcC,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VEnumAbc{C}",
		Target: []VEnumAbc{
			VEnumAbcC,
		},
		SourceLabel: "[]VEnumBcd{C}",
		Source: []VEnumBcd{
			VEnumBcdC,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VEnumBcd{}",
		Target:      []VEnumBcd(nil),
		SourceLabel: "[]VEnumBcd{}",
		Source:      []VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VEnumBcd{}",
		Target:      []VEnumBcd(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VEnumBcd{}",
		Target:      []VEnumBcd(nil),
		SourceLabel: "VList_VEnumBcd{}",
		Source:      VList_VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VEnumBcd{D}",
		Target: []VEnumBcd{
			VEnumBcdD,
		},
		SourceLabel: "[]VEnumBcd{D}",
		Source: []VEnumBcd{
			VEnumBcdD,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VEnumBcd{D}",
		Target: []VEnumBcd{
			VEnumBcdD,
		},
		SourceLabel: "[]VString{\"D\"}",
		Source: []VString{
			"D",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VStructEmpty{}",
		Target:      []VStructEmpty(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VStructEmpty{}",
		Target:      []VStructEmpty(nil),
		SourceLabel: "VList_VStructDepth1_All{}",
		Source:      VList_VStructDepth1_All(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VStructEmpty{}",
		Target:      []VStructEmpty(nil),
		SourceLabel: "[]VStructDepth1_Rand0{}",
		Source:      []VStructDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VStructEmpty{{}}",
		Target: []VStructEmpty{
			{},
		},
		SourceLabel: "[]VStructEmpty{{}}",
		Source: []VStructEmpty{
			{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VStructEmpty{{}}",
		Target: []VStructEmpty{
			{},
		},
		SourceLabel: "VList_VStructEmpty{{}}",
		Source: VList_VStructEmpty{
			{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]error{}",
		Target:      []error(nil),
		SourceLabel: "[]error{}",
		Source:      []error(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]error{}",
		Target:      []error(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]error{}",
		Target:      []error(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: []error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
		SourceLabel: "[]error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: []error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: []error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
		SourceLabel: "VList_Error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VList_Error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]error{{Id: \"jklmnopΔΘΠ\", RetryCode: RetryConnection}, {Id: \"abcdefghijk\", RetryCode: RetryBackoff, Msg: \"bcdefghijklmnopΔΘΠ\"}, {}}",
		Target: []error{
			verror.FromWire(vdl.WireError{
				Id:        "jklmnopΔΘΠ",
				RetryCode: vdl.WireRetryCodeRetryConnection,
			}),
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijk",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "bcdefghijklmnopΔΘΠ",
			}),
			verror.FromWire(vdl.WireError{}),
		},
		SourceLabel: "[]error{{Id: \"jklmnopΔΘΠ\", RetryCode: RetryConnection}, {Id: \"abcdefghijk\", RetryCode: RetryBackoff, Msg: \"bcdefghijklmnopΔΘΠ\"}, {}}",
		Source: []error{
			verror.FromWire(vdl.WireError{
				Id:        "jklmnopΔΘΠ",
				RetryCode: vdl.WireRetryCodeRetryConnection,
			}),
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijk",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "bcdefghijklmnopΔΘΠ",
			}),
			verror.FromWire(vdl.WireError{}),
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]error{{Id: \"jklmnopΔΘΠ\", RetryCode: RetryConnection}, {Id: \"abcdefghijk\", RetryCode: RetryBackoff, Msg: \"bcdefghijklmnopΔΘΠ\"}, {}}",
		Target: []error{
			verror.FromWire(vdl.WireError{
				Id:        "jklmnopΔΘΠ",
				RetryCode: vdl.WireRetryCodeRetryConnection,
			}),
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijk",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "bcdefghijklmnopΔΘΠ",
			}),
			verror.FromWire(vdl.WireError{}),
		},
		SourceLabel: "[]any{error{Id: \"jklmnopΔΘΠ\", RetryCode: RetryConnection}, error{Id: \"abcdefghijk\", RetryCode: RetryBackoff, Msg: \"bcdefghijklmnopΔΘΠ\"}, error{}}",
		Source: []interface{}{
			verror.FromWire(vdl.WireError{
				Id:        "jklmnopΔΘΠ",
				RetryCode: vdl.WireRetryCodeRetryConnection,
			}),
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijk",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "bcdefghijklmnopΔΘΠ",
			}),
			verror.FromWire(vdl.WireError{}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]error{{Id: \"jklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryConnection, Msg: \"e\"}}",
		Target: []error{
			verror.FromWire(vdl.WireError{
				Id:        "jklmnopΔΘΠΣΦ王普澤",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "e",
			}),
		},
		SourceLabel: "[]error{{Id: \"jklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryConnection, Msg: \"e\"}}",
		Source: []error{
			verror.FromWire(vdl.WireError{
				Id:        "jklmnopΔΘΠΣΦ王普澤",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "e",
			}),
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]error{{Id: \"jklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryConnection, Msg: \"e\"}}",
		Target: []error{
			verror.FromWire(vdl.WireError{
				Id:        "jklmnopΔΘΠΣΦ王普澤",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "e",
			}),
		},
		SourceLabel: "[]any{error{Id: \"jklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryConnection, Msg: \"e\"}}",
		Source: []interface{}{
			verror.FromWire(vdl.WireError{
				Id:        "jklmnopΔΘΠΣΦ王普澤",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "e",
			}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VUint64{}",
		Target:      []VUint64(nil),
		SourceLabel: "[]VUint64{}",
		Source:      []VUint64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VUint64{}",
		Target:      []VUint64(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VUint64{}",
		Target:      []VUint64(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VUint64{123}",
		Target: []VUint64{
			123,
		},
		SourceLabel: "[]VUint64{123}",
		Source: []VUint64{
			123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VUint64{123}",
		Target: []VUint64{
			123,
		},
		SourceLabel: "VArray1_Byte(\"{\")",
		Source: VArray1_Byte{
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VUint64{0}",
		Target: []VUint64{
			0,
		},
		SourceLabel: "[]VUint64{0}",
		Source: []VUint64{
			0,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VUint64{0}",
		Target: []VUint64{
			0,
		},
		SourceLabel: "VList_Byte(\"\\x00\")",
		Source:      VList_Byte("\x00"),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VUint64{0, 10870891830972515370, 5951540801599830693}",
		Target: []VUint64{
			0,
			10870891830972515370,
			5951540801599830693,
		},
		SourceLabel: "[]VUint64{0, 10870891830972515370, 5951540801599830693}",
		Source: []VUint64{
			0,
			10870891830972515370,
			5951540801599830693,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VUint64{0, 10870891830972515370, 5951540801599830693}",
		Target: []VUint64{
			0,
			10870891830972515370,
			5951540801599830693,
		},
		SourceLabel: "[]any{VUint64(0), VUint64(10870891830972515370), VUint64(5951540801599830693)}",
		Source: []interface{}{
			VUint64(0),
			VUint64(10870891830972515370),
			VUint64(5951540801599830693),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]int32{}",
		Target:      []int32(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]int32{}",
		Target:      []int32(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]int32{}",
		Target:      []int32(nil),
		SourceLabel: "[]VByte(\"\")",
		Source:      []VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]int32{-123}",
		Target: []int32{
			-123,
		},
		SourceLabel: "[]int32{-123}",
		Source: []int32{
			-123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]int32{-123}",
		Target: []int32{
			-123,
		},
		SourceLabel: "VList_VFloat64{-123}",
		Source: VList_VFloat64{
			-123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]int32{99023250, 519709942}",
		Target: []int32{
			99023250,
			519709942,
		},
		SourceLabel: "[]int32{99023250, 519709942}",
		Source: []int32{
			99023250,
			519709942,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]int32{99023250, 519709942}",
		Target: []int32{
			99023250,
			519709942,
		},
		SourceLabel: "[]any{int32(99023250), int32(519709942)}",
		Source: []interface{}{
			int32(99023250),
			int32(519709942),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]int32{66221507, -892477347}",
		Target: []int32{
			66221507,
			-892477347,
		},
		SourceLabel: "[]int32{66221507, -892477347}",
		Source: []int32{
			66221507,
			-892477347,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]int32{66221507, -892477347}",
		Target: []int32{
			66221507,
			-892477347,
		},
		SourceLabel: "[]any{int32(66221507), int32(-892477347)}",
		Source: []interface{}{
			int32(66221507),
			int32(-892477347),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]float64{}",
		Target:      []float64(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]float64{}",
		Target:      []float64(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]float64{}",
		Target:      []float64(nil),
		SourceLabel: "[]VByte(\"\")",
		Source:      []VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]float64{1.23}",
		Target: []float64{
			1.23,
		},
		SourceLabel: "[]float64{1.23}",
		Source: []float64{
			1.23,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]float64{1.23}",
		Target: []float64{
			1.23,
		},
		SourceLabel: "VList_VFloat64{1.23}",
		Source: VList_VFloat64{
			1.23,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]float64{2.0822881872305045e+09}",
		Target: []float64{
			2.0822881872305045e+09,
		},
		SourceLabel: "[]float64{2.0822881872305045e+09}",
		Source: []float64{
			2.0822881872305045e+09,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]float64{2.0822881872305045e+09}",
		Target: []float64{
			2.0822881872305045e+09,
		},
		SourceLabel: "[]any{float64(2.0822881872305045e+09)}",
		Source: []interface{}{
			float64(2.0822881872305045e+09),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]float64{6.661065008422354e+08, -8.036410164155792e+08, 9.146643649171848e+08}",
		Target: []float64{
			6.661065008422354e+08,
			-8.036410164155792e+08,
			9.146643649171848e+08,
		},
		SourceLabel: "[]float64{6.661065008422354e+08, -8.036410164155792e+08, 9.146643649171848e+08}",
		Source: []float64{
			6.661065008422354e+08,
			-8.036410164155792e+08,
			9.146643649171848e+08,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]float64{6.661065008422354e+08, -8.036410164155792e+08, 9.146643649171848e+08}",
		Target: []float64{
			6.661065008422354e+08,
			-8.036410164155792e+08,
			9.146643649171848e+08,
		},
		SourceLabel: "[]any{float64(6.661065008422354e+08), float64(-8.036410164155792e+08), float64(9.146643649171848e+08)}",
		Source: []interface{}{
			float64(6.661065008422354e+08),
			float64(-8.036410164155792e+08),
			float64(9.146643649171848e+08),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]?VStructEmpty{}",
		Target:      []*VStructEmpty(nil),
		SourceLabel: "[]?VStructEmpty{}",
		Source:      []*VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]?VStructEmpty{}",
		Target:      []*VStructEmpty(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]?VStructEmpty{}",
		Target:      []*VStructEmpty(nil),
		SourceLabel: "VList_VStructDepth1_All{}",
		Source:      VList_VStructDepth1_All(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]?VStructEmpty{{}}",
		Target: []*VStructEmpty{
			{},
		},
		SourceLabel: "[]?VStructEmpty{{}}",
		Source: []*VStructEmpty{
			{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]?VStructEmpty{{}}",
		Target: []*VStructEmpty{
			{},
		},
		SourceLabel: "VList_VStructEmpty{{}}",
		Source: VList_VStructEmpty{
			{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_Any{}",
		Target:      VList_Any(nil),
		SourceLabel: "VList_Any{}",
		Source:      VList_Any(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Any{}",
		Target:      VList_Any(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Any{}",
		Target:      VList_Any(nil),
		SourceLabel: "[]VArray1_String{}",
		Source:      []VArray1_String(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_Any{int64(-123)}",
		Target: VList_Any{
			int64(-123),
		},
		SourceLabel: "VList_Any{int64(-123)}",
		Source: VList_Any{
			int64(-123),
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_Any{int64(-123)}",
		Target: VList_Any{
			int64(-123),
		},
		SourceLabel: "VList_VFloat64{-123}",
		Source: VList_VFloat64{
			-123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Any{VEnumBcd.B, VList_Bool{true}, map[VInt32]VInt32{112944172: -240708699, 992712510: -522452742}}",
		Target: VList_Any{
			VEnumBcdB,
			VList_Bool{
				true,
			},
			map[VInt32]VInt32{
				112944172: -240708699,
				992712510: -522452742,
			},
		},
		SourceLabel: "VList_Any{VEnumBcd.B, VList_Bool{true}, map[VInt32]VInt32{112944172: -240708699, 992712510: -522452742}}",
		Source: VList_Any{
			VEnumBcdB,
			VList_Bool{
				true,
			},
			map[VInt32]VInt32{
				112944172: -240708699,
				992712510: -522452742,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Any{VEnumBcd.B, VList_Bool{true}, map[VInt32]VInt32{112944172: -240708699, 992712510: -522452742}}",
		Target: VList_Any{
			VEnumBcdB,
			VList_Bool{
				true,
			},
			map[VInt32]VInt32{
				112944172: -240708699,
				992712510: -522452742,
			},
		},
		SourceLabel: "[]any{VEnumBcd.B, VList_Bool{true}, map[VInt32]VInt32{112944172: -240708699, 992712510: -522452742}}",
		Source: []interface{}{
			VEnumBcdB,
			VList_Bool{
				true,
			},
			map[VInt32]VInt32{
				112944172: -240708699,
				992712510: -522452742,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Any{VUnionDepth1_Rand0{F8: A}, VArray1_VUnionDepth2_Rand1{{F2: {4.598040088621417e+07}}}}",
		Target: VList_Any{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F8{}),
			VArray1_VUnionDepth2_Rand1{
				VUnionDepth2_Rand1F2{[]float64{
					4.598040088621417e+07,
				}},
			},
		},
		SourceLabel: "VList_Any{VUnionDepth1_Rand0{F8: A}, VArray1_VUnionDepth2_Rand1{{F2: {4.598040088621417e+07}}}}",
		Source: VList_Any{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F8{}),
			VArray1_VUnionDepth2_Rand1{
				VUnionDepth2_Rand1F2{[]float64{
					4.598040088621417e+07,
				}},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Any{VUnionDepth1_Rand0{F8: A}, VArray1_VUnionDepth2_Rand1{{F2: {4.598040088621417e+07}}}}",
		Target: VList_Any{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F8{}),
			VArray1_VUnionDepth2_Rand1{
				VUnionDepth2_Rand1F2{[]float64{
					4.598040088621417e+07,
				}},
			},
		},
		SourceLabel: "[]any{VUnionDepth1_Rand0{F8: A}, VArray1_VUnionDepth2_Rand1{{F2: {4.598040088621417e+07}}}}",
		Source: []interface{}{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F8{}),
			VArray1_VUnionDepth2_Rand1{
				VUnionDepth2_Rand1F2{[]float64{
					4.598040088621417e+07,
				}},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_Bool{}",
		Target:      VList_Bool(nil),
		SourceLabel: "VList_Bool{}",
		Source:      VList_Bool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Bool{}",
		Target:      VList_Bool(nil),
		SourceLabel: "VList_VBool{}",
		Source:      VList_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Bool{}",
		Target:      VList_Bool(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_Bool{true}",
		Target: VList_Bool{
			true,
		},
		SourceLabel: "VList_Bool{true}",
		Source: VList_Bool{
			true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_Bool{true}",
		Target: VList_Bool{
			true,
		},
		SourceLabel: "[]VBool{true}",
		Source: []VBool{
			true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VBool{}",
		Target:      VList_VBool(nil),
		SourceLabel: "VList_VBool{}",
		Source:      VList_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VBool{}",
		Target:      VList_VBool(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VBool{}",
		Target:      VList_VBool(nil),
		SourceLabel: "VList_Bool{}",
		Source:      VList_Bool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VBool{true}",
		Target: VList_VBool{
			true,
		},
		SourceLabel: "VList_VBool{true}",
		Source: VList_VBool{
			true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VBool{true}",
		Target: VList_VBool{
			true,
		},
		SourceLabel: "[]VBool{true}",
		Source: []VBool{
			true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_String{}",
		Target:      VList_String(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_String{}",
		Target:      VList_String(nil),
		SourceLabel: "VList_VEnumBcd{}",
		Source:      VList_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_String{}",
		Target:      VList_String(nil),
		SourceLabel: "VList_VString{}",
		Source:      VList_VString(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VList_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VList_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VList_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VList_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "[]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: []VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_String{\"\", \"\", \"cdefgh\"}",
		Target: VList_String{
			"",
			"",
			"cdefgh",
		},
		SourceLabel: "VList_String{\"\", \"\", \"cdefgh\"}",
		Source: VList_String{
			"",
			"",
			"cdefgh",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_String{\"\", \"\", \"cdefgh\"}",
		Target: VList_String{
			"",
			"",
			"cdefgh",
		},
		SourceLabel: "[]string{\"\", \"\", \"cdefgh\"}",
		Source: []string{
			"",
			"",
			"cdefgh",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_String{\"defghijklmnop\", \"\"}",
		Target: VList_String{
			"defghijklmnop",
			"",
		},
		SourceLabel: "VList_String{\"defghijklmnop\", \"\"}",
		Source: VList_String{
			"defghijklmnop",
			"",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_String{\"defghijklmnop\", \"\"}",
		Target: VList_String{
			"defghijklmnop",
			"",
		},
		SourceLabel: "[]string{\"defghijklmnop\", \"\"}",
		Source: []string{
			"defghijklmnop",
			"",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VString{}",
		Target:      VList_VString(nil),
		SourceLabel: "VList_VString{}",
		Source:      VList_VString(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VString{}",
		Target:      VList_VString(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VString{}",
		Target:      VList_VString(nil),
		SourceLabel: "VList_VEnumBcd{}",
		Source:      VList_VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VList_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VList_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VList_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VList_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "[]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: []VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VString{\"\", \"hijklmnopΔΘΠΣΦ王普\", \"\"}",
		Target: VList_VString{
			"",
			"hijklmnopΔΘΠΣΦ王普",
			"",
		},
		SourceLabel: "VList_VString{\"\", \"hijklmnopΔΘΠΣΦ王普\", \"\"}",
		Source: VList_VString{
			"",
			"hijklmnopΔΘΠΣΦ王普",
			"",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VString{\"\", \"hijklmnopΔΘΠΣΦ王普\", \"\"}",
		Target: VList_VString{
			"",
			"hijklmnopΔΘΠΣΦ王普",
			"",
		},
		SourceLabel: "[]string{\"\", \"hijklmnopΔΘΠΣΦ王普\", \"\"}",
		Source: []string{
			"",
			"hijklmnopΔΘΠΣΦ王普",
			"",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VString{\"\", \"\", \"efghijklmnopΔΘΠΣΦ王普\"}",
		Target: VList_VString{
			"",
			"",
			"efghijklmnopΔΘΠΣΦ王普",
		},
		SourceLabel: "VList_VString{\"\", \"\", \"efghijklmnopΔΘΠΣΦ王普\"}",
		Source: VList_VString{
			"",
			"",
			"efghijklmnopΔΘΠΣΦ王普",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VString{\"\", \"\", \"efghijklmnopΔΘΠΣΦ王普\"}",
		Target: VList_VString{
			"",
			"",
			"efghijklmnopΔΘΠΣΦ王普",
		},
		SourceLabel: "[]string{\"\", \"\", \"efghijklmnopΔΘΠΣΦ王普\"}",
		Source: []string{
			"",
			"",
			"efghijklmnopΔΘΠΣΦ王普",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_TypeObject{}",
		Target:      VList_TypeObject(nil),
		SourceLabel: "VList_TypeObject{}",
		Source:      VList_TypeObject(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_TypeObject{}",
		Target:      VList_TypeObject(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_TypeObject{}",
		Target:      VList_TypeObject(nil),
		SourceLabel: "VList_Any{}",
		Source:      VList_Any(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_TypeObject{typeobject(int64)}",
		Target: VList_TypeObject{
			vdl.Int64Type,
		},
		SourceLabel: "VList_TypeObject{typeobject(int64)}",
		Source: VList_TypeObject{
			vdl.Int64Type,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_TypeObject{typeobject(int64)}",
		Target: VList_TypeObject{
			vdl.Int64Type,
		},
		SourceLabel: "VList_Any{typeobject(int64)}",
		Source: VList_Any{
			vdl.Int64Type,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_TypeObject{typeobject(VMap_VInt16_VInt16), typeobject(VList_VUnionDepth2_All), typeobject(any)}",
		Target: VList_TypeObject{
			vdl.TypeOf((*VMap_VInt16_VInt16)(nil)),
			vdl.TypeOf((*VList_VUnionDepth2_All)(nil)),
			vdl.AnyType,
		},
		SourceLabel: "VList_TypeObject{typeobject(VMap_VInt16_VInt16), typeobject(VList_VUnionDepth2_All), typeobject(any)}",
		Source: VList_TypeObject{
			vdl.TypeOf((*VMap_VInt16_VInt16)(nil)),
			vdl.TypeOf((*VList_VUnionDepth2_All)(nil)),
			vdl.AnyType,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_TypeObject{typeobject(VMap_VInt16_VInt16), typeobject(VList_VUnionDepth2_All), typeobject(any)}",
		Target: VList_TypeObject{
			vdl.TypeOf((*VMap_VInt16_VInt16)(nil)),
			vdl.TypeOf((*VList_VUnionDepth2_All)(nil)),
			vdl.AnyType,
		},
		SourceLabel: "[]any{typeobject(VMap_VInt16_VInt16), typeobject(VList_VUnionDepth2_All), typeobject(any)}",
		Source: []interface{}{
			vdl.TypeOf((*VMap_VInt16_VInt16)(nil)),
			vdl.TypeOf((*VList_VUnionDepth2_All)(nil)),
			vdl.AnyType,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_TypeObject{typeobject([]VString), typeobject(any), typeobject(VStructDepth2_All)}",
		Target: VList_TypeObject{
			vdl.TypeOf((*[]VString)(nil)),
			vdl.AnyType,
			vdl.TypeOf((*VStructDepth2_All)(nil)).Elem(),
		},
		SourceLabel: "VList_TypeObject{typeobject([]VString), typeobject(any), typeobject(VStructDepth2_All)}",
		Source: VList_TypeObject{
			vdl.TypeOf((*[]VString)(nil)),
			vdl.AnyType,
			vdl.TypeOf((*VStructDepth2_All)(nil)).Elem(),
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_TypeObject{typeobject([]VString), typeobject(any), typeobject(VStructDepth2_All)}",
		Target: VList_TypeObject{
			vdl.TypeOf((*[]VString)(nil)),
			vdl.AnyType,
			vdl.TypeOf((*VStructDepth2_All)(nil)).Elem(),
		},
		SourceLabel: "[]any{typeobject([]VString), typeobject(any), typeobject(VStructDepth2_All)}",
		Source: []interface{}{
			vdl.TypeOf((*[]VString)(nil)),
			vdl.AnyType,
			vdl.TypeOf((*VStructDepth2_All)(nil)).Elem(),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_Byte(\"\")",
		Target:      VList_Byte(nil),
		SourceLabel: "VList_Byte(\"\")",
		Source:      VList_Byte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Byte(\"\")",
		Target:      VList_Byte(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Byte(\"\")",
		Target:      VList_Byte(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_Byte(\"{\")",
		Target:      VList_Byte("{"),
		SourceLabel: "VList_Byte(\"{\")",
		Source:      VList_Byte("{"),
	},
	{
		Label:       "Full",
		TargetLabel: "VList_Byte(\"{\")",
		Target:      VList_Byte("{"),
		SourceLabel: "VArray1_Byte(\"{\")",
		Source: VArray1_Byte{
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Byte(\"\\x89\\x00\")",
		Target:      VList_Byte("\x89\x00"),
		SourceLabel: "VList_Byte(\"\\x89\\x00\")",
		Source:      VList_Byte("\x89\x00"),
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Byte(\"\\x89\\x00\")",
		Target:      VList_Byte("\x89\x00"),
		SourceLabel: "[]any{byte(137), byte(0)}",
		Source: []interface{}{
			byte(137),
			byte(0),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Byte(\"\\x17\")",
		Target:      VList_Byte("\x17"),
		SourceLabel: "VList_Byte(\"\\x17\")",
		Source:      VList_Byte("\x17"),
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Byte(\"\\x17\")",
		Target:      VList_Byte("\x17"),
		SourceLabel: "VArray1_Byte(\"\\x17\")",
		Source: VArray1_Byte{
			23,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VByte(\"\")",
		Target:      VList_VByte(nil),
		SourceLabel: "VList_VByte(\"\")",
		Source:      VList_VByte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VByte(\"\")",
		Target:      VList_VByte(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VByte(\"\")",
		Target:      VList_VByte(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VByte(\"{\")",
		Target:      VList_VByte("{"),
		SourceLabel: "VList_VByte(\"{\")",
		Source:      VList_VByte("{"),
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VByte(\"{\")",
		Target:      VList_VByte("{"),
		SourceLabel: "VArray1_Byte(\"{\")",
		Source: VArray1_Byte{
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VByte(\"7\")",
		Target:      VList_VByte("7"),
		SourceLabel: "VList_VByte(\"7\")",
		Source:      VList_VByte("7"),
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VByte(\"7\")",
		Target:      VList_VByte("7"),
		SourceLabel: "VList_Byte(\"7\")",
		Source:      VList_Byte("7"),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VByte(\"\\xe4\")",
		Target:      VList_VByte("\xe4"),
		SourceLabel: "VList_VByte(\"\\xe4\")",
		Source:      VList_VByte("\xe4"),
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VByte(\"\\xe4\")",
		Target:      VList_VByte("\xe4"),
		SourceLabel: "VList_Byte(\"\\xe4\")",
		Source:      VList_Byte("\xe4"),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VEnumAbc{}",
		Target:      VList_VEnumAbc(nil),
		SourceLabel: "VList_VEnumAbc{}",
		Source:      VList_VEnumAbc(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VEnumAbc{}",
		Target:      VList_VEnumAbc(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VEnumAbc{}",
		Target:      VList_VEnumAbc(nil),
		SourceLabel: "VList_VEnumBcd{}",
		Source:      VList_VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VEnumAbc{C}",
		Target: VList_VEnumAbc{
			VEnumAbcC,
		},
		SourceLabel: "VList_VEnumAbc{C}",
		Source: VList_VEnumAbc{
			VEnumAbcC,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VEnumAbc{C}",
		Target: VList_VEnumAbc{
			VEnumAbcC,
		},
		SourceLabel: "[]VEnumBcd{C}",
		Source: []VEnumBcd{
			VEnumBcdC,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VEnumBcd{}",
		Target:      VList_VEnumBcd(nil),
		SourceLabel: "VList_VEnumBcd{}",
		Source:      VList_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VEnumBcd{}",
		Target:      VList_VEnumBcd(nil),
		SourceLabel: "VList_String{}",
		Source:      VList_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VEnumBcd{}",
		Target:      VList_VEnumBcd(nil),
		SourceLabel: "VList_VString{}",
		Source:      VList_VString(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VEnumBcd{D}",
		Target: VList_VEnumBcd{
			VEnumBcdD,
		},
		SourceLabel: "VList_VEnumBcd{D}",
		Source: VList_VEnumBcd{
			VEnumBcdD,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VEnumBcd{D}",
		Target: VList_VEnumBcd{
			VEnumBcdD,
		},
		SourceLabel: "[]VEnumBcd{D}",
		Source: []VEnumBcd{
			VEnumBcdD,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VStructEmpty{}",
		Target:      VList_VStructEmpty(nil),
		SourceLabel: "VList_VStructEmpty{}",
		Source:      VList_VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VStructEmpty{}",
		Target:      VList_VStructEmpty(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VStructEmpty{}",
		Target:      VList_VStructEmpty(nil),
		SourceLabel: "VList_VStructDepth1_All{}",
		Source:      VList_VStructDepth1_All(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VStructEmpty{{}}",
		Target: VList_VStructEmpty{
			{},
		},
		SourceLabel: "VList_VStructEmpty{{}}",
		Source: VList_VStructEmpty{
			{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VStructEmpty{{}}",
		Target: VList_VStructEmpty{
			{},
		},
		SourceLabel: "[]?VStructDepth2_Rand0{{}}",
		Source: []*VStructDepth2_Rand0{
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_Error{}",
		Target:      VList_Error(nil),
		SourceLabel: "VList_Error{}",
		Source:      VList_Error(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Error{}",
		Target:      VList_Error(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Error{}",
		Target:      VList_Error(nil),
		SourceLabel: "[]error{}",
		Source:      []error(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_Error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VList_Error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
		SourceLabel: "VList_Error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VList_Error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_Error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VList_Error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
		SourceLabel: "[]error{{Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: []error{
			verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Error{nil}",
		Target: VList_Error{
			nil,
		},
		SourceLabel: "VList_Error{nil}",
		Source: VList_Error{
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Error{nil}",
		Target: VList_Error{
			nil,
		},
		SourceLabel: "[]?VStructEmpty{nil}",
		Source: []*VStructEmpty{
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Error{nil}",
		Target: VList_Error{
			nil,
		},
		SourceLabel: "VList_Error{nil}",
		Source: VList_Error{
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Error{nil}",
		Target: VList_Error{
			nil,
		},
		SourceLabel: "[]?VStructEmpty{nil}",
		Source: []*VStructEmpty{
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VUint32{}",
		Target:      VList_VUint32(nil),
		SourceLabel: "VList_VUint32{}",
		Source:      VList_VUint32(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VUint32{}",
		Target:      VList_VUint32(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VUint32{}",
		Target:      VList_VUint32(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VUint32{123}",
		Target: VList_VUint32{
			123,
		},
		SourceLabel: "VList_VUint32{123}",
		Source: VList_VUint32{
			123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VUint32{123}",
		Target: VList_VUint32{
			123,
		},
		SourceLabel: "VArray1_Byte(\"{\")",
		Source: VArray1_Byte{
			123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VUint32{3902057631, 0, 3928053796}",
		Target: VList_VUint32{
			3902057631,
			0,
			3928053796,
		},
		SourceLabel: "VList_VUint32{3902057631, 0, 3928053796}",
		Source: VList_VUint32{
			3902057631,
			0,
			3928053796,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VUint32{3902057631, 0, 3928053796}",
		Target: VList_VUint32{
			3902057631,
			0,
			3928053796,
		},
		SourceLabel: "VArray3_Int64{3902057631, 0, 3928053796}",
		Source: VArray3_Int64{
			3902057631,
			0,
			3928053796,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VUint32{1891975665}",
		Target: VList_VUint32{
			1891975665,
		},
		SourceLabel: "VList_VUint32{1891975665}",
		Source: VList_VUint32{
			1891975665,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VUint32{1891975665}",
		Target: VList_VUint32{
			1891975665,
		},
		SourceLabel: "[]any{VUint32(1891975665)}",
		Source: []interface{}{
			VUint32(1891975665),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VInt32{}",
		Target:      VList_VInt32(nil),
		SourceLabel: "VList_VInt32{}",
		Source:      VList_VInt32(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VInt32{}",
		Target:      VList_VInt32(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VInt32{}",
		Target:      VList_VInt32(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VInt32{-123}",
		Target: VList_VInt32{
			-123,
		},
		SourceLabel: "VList_VInt32{-123}",
		Source: VList_VInt32{
			-123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VInt32{-123}",
		Target: VList_VInt32{
			-123,
		},
		SourceLabel: "VList_VFloat64{-123}",
		Source: VList_VFloat64{
			-123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VInt32{836743213, 0}",
		Target: VList_VInt32{
			836743213,
			0,
		},
		SourceLabel: "VList_VInt32{836743213, 0}",
		Source: VList_VInt32{
			836743213,
			0,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VInt32{836743213, 0}",
		Target: VList_VInt32{
			836743213,
			0,
		},
		SourceLabel: "[]any{VInt32(836743213), VInt32(0)}",
		Source: []interface{}{
			VInt32(836743213),
			VInt32(0),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VInt32{-686771769, 370534936}",
		Target: VList_VInt32{
			-686771769,
			370534936,
		},
		SourceLabel: "VList_VInt32{-686771769, 370534936}",
		Source: VList_VInt32{
			-686771769,
			370534936,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VInt32{-686771769, 370534936}",
		Target: VList_VInt32{
			-686771769,
			370534936,
		},
		SourceLabel: "[]any{VInt32(-686771769), VInt32(370534936)}",
		Source: []interface{}{
			VInt32(-686771769),
			VInt32(370534936),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VFloat64{}",
		Target:      VList_VFloat64(nil),
		SourceLabel: "VList_VFloat64{}",
		Source:      VList_VFloat64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VFloat64{}",
		Target:      VList_VFloat64(nil),
		SourceLabel: "[]float64{}",
		Source:      []float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VFloat64{}",
		Target:      VList_VFloat64(nil),
		SourceLabel: "[]int32{}",
		Source:      []int32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VFloat64{1.23}",
		Target: VList_VFloat64{
			1.23,
		},
		SourceLabel: "VList_VFloat64{1.23}",
		Source: VList_VFloat64{
			1.23,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VFloat64{1.23}",
		Target: VList_VFloat64{
			1.23,
		},
		SourceLabel: "VList_Any{VFloat64(1.23)}",
		Source: VList_Any{
			VFloat64(1.23),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VFloat64{-2.7947936829168825e+09, -2.497628983887713e+09}",
		Target: VList_VFloat64{
			-2.7947936829168825e+09,
			-2.497628983887713e+09,
		},
		SourceLabel: "VList_VFloat64{-2.7947936829168825e+09, -2.497628983887713e+09}",
		Source: VList_VFloat64{
			-2.7947936829168825e+09,
			-2.497628983887713e+09,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VFloat64{-2.7947936829168825e+09, -2.497628983887713e+09}",
		Target: VList_VFloat64{
			-2.7947936829168825e+09,
			-2.497628983887713e+09,
		},
		SourceLabel: "[]any{VFloat64(-2.7947936829168825e+09), VFloat64(-2.497628983887713e+09)}",
		Source: []interface{}{
			VFloat64(-2.7947936829168825e+09),
			VFloat64(-2.497628983887713e+09),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VFloat64{-1.2325975059267828e+09, 8.175475252689426e+08}",
		Target: VList_VFloat64{
			-1.2325975059267828e+09,
			8.175475252689426e+08,
		},
		SourceLabel: "VList_VFloat64{-1.2325975059267828e+09, 8.175475252689426e+08}",
		Source: VList_VFloat64{
			-1.2325975059267828e+09,
			8.175475252689426e+08,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VFloat64{-1.2325975059267828e+09, 8.175475252689426e+08}",
		Target: VList_VFloat64{
			-1.2325975059267828e+09,
			8.175475252689426e+08,
		},
		SourceLabel: "[]any{VFloat64(-1.2325975059267828e+09), VFloat64(8.175475252689426e+08)}",
		Source: []interface{}{
			VFloat64(-1.2325975059267828e+09),
			VFloat64(8.175475252689426e+08),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_OptVStructEmpty{}",
		Target:      VList_OptVStructEmpty(nil),
		SourceLabel: "VList_OptVStructEmpty{}",
		Source:      VList_OptVStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_OptVStructEmpty{}",
		Target:      VList_OptVStructEmpty(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_OptVStructEmpty{}",
		Target:      VList_OptVStructEmpty(nil),
		SourceLabel: "VList_VStructDepth1_All{}",
		Source:      VList_VStructDepth1_All(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_OptVStructEmpty{{}}",
		Target: VList_OptVStructEmpty{
			{},
		},
		SourceLabel: "VList_OptVStructEmpty{{}}",
		Source: VList_OptVStructEmpty{
			{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_OptVStructEmpty{{}}",
		Target: VList_OptVStructEmpty{
			{},
		},
		SourceLabel: "VList_VStructEmpty{{}}",
		Source: VList_VStructEmpty{
			{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[bool]{}",
		Target:      map[bool]struct{}(nil),
		SourceLabel: "set[bool]{}",
		Source:      map[bool]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[bool]{}",
		Target:      map[bool]struct{}(nil),
		SourceLabel: "VSet_VBool{}",
		Source:      VSet_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[bool]{}",
		Target:      map[bool]struct{}(nil),
		SourceLabel: "set[VBool]{}",
		Source:      map[VBool]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[bool]{true}",
		Target: map[bool]struct{}{
			true: struct{}{},
		},
		SourceLabel: "set[bool]{true}",
		Source: map[bool]struct{}{
			true: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[bool]{true}",
		Target: map[bool]struct{}{
			true: struct{}{},
		},
		SourceLabel: "VSet_Bool{true}",
		Source: VSet_Bool{
			true: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VBool]{}",
		Target:      map[VBool]struct{}(nil),
		SourceLabel: "set[VBool]{}",
		Source:      map[VBool]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VBool]{}",
		Target:      map[VBool]struct{}(nil),
		SourceLabel: "VSet_VBool{}",
		Source:      VSet_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VBool]{}",
		Target:      map[VBool]struct{}(nil),
		SourceLabel: "VSet_Bool{}",
		Source:      VSet_Bool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VBool]{true}",
		Target: map[VBool]struct{}{
			true: struct{}{},
		},
		SourceLabel: "set[VBool]{true}",
		Source: map[VBool]struct{}{
			true: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[VBool]{true}",
		Target: map[VBool]struct{}{
			true: struct{}{},
		},
		SourceLabel: "VSet_Bool{true}",
		Source: VSet_Bool{
			true: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[string]{}",
		Target:      map[string]struct{}(nil),
		SourceLabel: "set[string]{}",
		Source:      map[string]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[string]{}",
		Target:      map[string]struct{}(nil),
		SourceLabel: "VSet_VEnumBcd{}",
		Source:      VSet_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[string]{}",
		Target:      map[string]struct{}(nil),
		SourceLabel: "set[VEnumBcd]{}",
		Source:      map[VEnumBcd]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[string]{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: map[string]struct{}{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
		SourceLabel: "set[string]{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: map[string]struct{}{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[string]{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: map[string]struct{}{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
		SourceLabel: "VSet_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VSet_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[string]{\"bcdefghijklmnopΔΘΠΣ\"}",
		Target: map[string]struct{}{
			"bcdefghijklmnopΔΘΠΣ": struct{}{},
		},
		SourceLabel: "set[string]{\"bcdefghijklmnopΔΘΠΣ\"}",
		Source: map[string]struct{}{
			"bcdefghijklmnopΔΘΠΣ": struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[string]{\"bcdefghijklmnopΔΘΠΣ\"}",
		Target: map[string]struct{}{
			"bcdefghijklmnopΔΘΠΣ": struct{}{},
		},
		SourceLabel: "set[VString]{\"bcdefghijklmnopΔΘΠΣ\"}",
		Source: map[VString]struct{}{
			"bcdefghijklmnopΔΘΠΣ": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[string]{\"hijklm\", \"nopΔΘΠΣΦ王普\", \"opΔΘΠΣ\"}",
		Target: map[string]struct{}{
			"hijklm":     struct{}{},
			"nopΔΘΠΣΦ王普": struct{}{},
			"opΔΘΠΣ":     struct{}{},
		},
		SourceLabel: "set[string]{\"hijklm\", \"nopΔΘΠΣΦ王普\", \"opΔΘΠΣ\"}",
		Source: map[string]struct{}{
			"hijklm":     struct{}{},
			"nopΔΘΠΣΦ王普": struct{}{},
			"opΔΘΠΣ":     struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[string]{\"hijklm\", \"nopΔΘΠΣΦ王普\", \"opΔΘΠΣ\"}",
		Target: map[string]struct{}{
			"hijklm":     struct{}{},
			"nopΔΘΠΣΦ王普": struct{}{},
			"opΔΘΠΣ":     struct{}{},
		},
		SourceLabel: "set[VString]{\"hijklm\", \"nopΔΘΠΣΦ王普\", \"opΔΘΠΣ\"}",
		Source: map[VString]struct{}{
			"hijklm":     struct{}{},
			"nopΔΘΠΣΦ王普": struct{}{},
			"opΔΘΠΣ":     struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VString]{}",
		Target:      map[VString]struct{}(nil),
		SourceLabel: "set[VString]{}",
		Source:      map[VString]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VString]{}",
		Target:      map[VString]struct{}(nil),
		SourceLabel: "VSet_VEnumBcd{}",
		Source:      VSet_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VString]{}",
		Target:      map[VString]struct{}(nil),
		SourceLabel: "set[VEnumBcd]{}",
		Source:      map[VEnumBcd]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VString]{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: map[VString]struct{}{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
		SourceLabel: "set[VString]{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: map[VString]struct{}{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[VString]{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: map[VString]struct{}{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
		SourceLabel: "VSet_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VSet_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VString]{\"bcdefghijklmnopΔΘΠΣ\", \"defghijklmnopΔΘΠΣΦ王普澤\"}",
		Target: map[VString]struct{}{
			"bcdefghijklmnopΔΘΠΣ":   struct{}{},
			"defghijklmnopΔΘΠΣΦ王普澤": struct{}{},
		},
		SourceLabel: "set[VString]{\"bcdefghijklmnopΔΘΠΣ\", \"defghijklmnopΔΘΠΣΦ王普澤\"}",
		Source: map[VString]struct{}{
			"bcdefghijklmnopΔΘΠΣ":   struct{}{},
			"defghijklmnopΔΘΠΣΦ王普澤": struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VString]{\"bcdefghijklmnopΔΘΠΣ\", \"defghijklmnopΔΘΠΣΦ王普澤\"}",
		Target: map[VString]struct{}{
			"bcdefghijklmnopΔΘΠΣ":   struct{}{},
			"defghijklmnopΔΘΠΣΦ王普澤": struct{}{},
		},
		SourceLabel: "set[string]{\"bcdefghijklmnopΔΘΠΣ\", \"defghijklmnopΔΘΠΣΦ王普澤\"}",
		Source: map[string]struct{}{
			"bcdefghijklmnopΔΘΠΣ":   struct{}{},
			"defghijklmnopΔΘΠΣΦ王普澤": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VString]{\"mno\", \"pΔ\"}",
		Target: map[VString]struct{}{
			"mno": struct{}{},
			"pΔ":  struct{}{},
		},
		SourceLabel: "set[VString]{\"mno\", \"pΔ\"}",
		Source: map[VString]struct{}{
			"mno": struct{}{},
			"pΔ":  struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VString]{\"mno\", \"pΔ\"}",
		Target: map[VString]struct{}{
			"mno": struct{}{},
			"pΔ":  struct{}{},
		},
		SourceLabel: "set[string]{\"mno\", \"pΔ\"}",
		Source: map[string]struct{}{
			"mno": struct{}{},
			"pΔ":  struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[byte]{}",
		Target:      map[byte]struct{}(nil),
		SourceLabel: "set[byte]{}",
		Source:      map[byte]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[byte]{}",
		Target:      map[byte]struct{}(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[byte]{}",
		Target:      map[byte]struct{}(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[byte]{123}",
		Target: map[byte]struct{}{
			123: struct{}{},
		},
		SourceLabel: "set[byte]{123}",
		Source: map[byte]struct{}{
			123: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[byte]{123}",
		Target: map[byte]struct{}{
			123: struct{}{},
		},
		SourceLabel: "set[int64]{123}",
		Source: map[int64]struct{}{
			123: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[byte]{164, 45, 79}",
		Target: map[byte]struct{}{
			164: struct{}{},
			45:  struct{}{},
			79:  struct{}{},
		},
		SourceLabel: "set[byte]{164, 45, 79}",
		Source: map[byte]struct{}{
			164: struct{}{},
			45:  struct{}{},
			79:  struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[byte]{164, 45, 79}",
		Target: map[byte]struct{}{
			164: struct{}{},
			45:  struct{}{},
			79:  struct{}{},
		},
		SourceLabel: "set[uint16]{164, 45, 79}",
		Source: map[uint16]struct{}{
			164: struct{}{},
			45:  struct{}{},
			79:  struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[byte]{0, 246}",
		Target: map[byte]struct{}{
			0:   struct{}{},
			246: struct{}{},
		},
		SourceLabel: "set[byte]{0, 246}",
		Source: map[byte]struct{}{
			0:   struct{}{},
			246: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[byte]{0, 246}",
		Target: map[byte]struct{}{
			0:   struct{}{},
			246: struct{}{},
		},
		SourceLabel: "set[uint16]{0, 246}",
		Source: map[uint16]struct{}{
			0:   struct{}{},
			246: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VByte]{}",
		Target:      map[VByte]struct{}(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VByte]{}",
		Target:      map[VByte]struct{}(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VByte]{}",
		Target:      map[VByte]struct{}(nil),
		SourceLabel: "set[int64]{}",
		Source:      map[int64]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VByte]{123}",
		Target: map[VByte]struct{}{
			123: struct{}{},
		},
		SourceLabel: "set[VByte]{123}",
		Source: map[VByte]struct{}{
			123: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[VByte]{123}",
		Target: map[VByte]struct{}{
			123: struct{}{},
		},
		SourceLabel: "set[int64]{123}",
		Source: map[int64]struct{}{
			123: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VByte]{197}",
		Target: map[VByte]struct{}{
			197: struct{}{},
		},
		SourceLabel: "set[VByte]{197}",
		Source: map[VByte]struct{}{
			197: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VByte]{197}",
		Target: map[VByte]struct{}{
			197: struct{}{},
		},
		SourceLabel: "set[uint16]{197}",
		Source: map[uint16]struct{}{
			197: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VByte]{152}",
		Target: map[VByte]struct{}{
			152: struct{}{},
		},
		SourceLabel: "set[VByte]{152}",
		Source: map[VByte]struct{}{
			152: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VByte]{152}",
		Target: map[VByte]struct{}{
			152: struct{}{},
		},
		SourceLabel: "set[uint16]{152}",
		Source: map[uint16]struct{}{
			152: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VEnumAbc]{}",
		Target:      map[VEnumAbc]struct{}(nil),
		SourceLabel: "set[VEnumAbc]{}",
		Source:      map[VEnumAbc]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VEnumAbc]{}",
		Target:      map[VEnumAbc]struct{}(nil),
		SourceLabel: "VSet_VEnumBcd{}",
		Source:      VSet_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VEnumAbc]{}",
		Target:      map[VEnumAbc]struct{}(nil),
		SourceLabel: "set[VEnumBcd]{}",
		Source:      map[VEnumBcd]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VEnumAbc]{C}",
		Target: map[VEnumAbc]struct{}{
			VEnumAbcC: struct{}{},
		},
		SourceLabel: "set[VEnumAbc]{C}",
		Source: map[VEnumAbc]struct{}{
			VEnumAbcC: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[VEnumAbc]{C}",
		Target: map[VEnumAbc]struct{}{
			VEnumAbcC: struct{}{},
		},
		SourceLabel: "VSet_VString{\"C\"}",
		Source: VSet_VString{
			"C": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VEnumBcd]{}",
		Target:      map[VEnumBcd]struct{}(nil),
		SourceLabel: "set[VEnumBcd]{}",
		Source:      map[VEnumBcd]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VEnumBcd]{}",
		Target:      map[VEnumBcd]struct{}(nil),
		SourceLabel: "VSet_VEnumBcd{}",
		Source:      VSet_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VEnumBcd]{}",
		Target:      map[VEnumBcd]struct{}(nil),
		SourceLabel: "VSet_String{}",
		Source:      VSet_String(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VEnumBcd]{D}",
		Target: map[VEnumBcd]struct{}{
			VEnumBcdD: struct{}{},
		},
		SourceLabel: "set[VEnumBcd]{D}",
		Source: map[VEnumBcd]struct{}{
			VEnumBcdD: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[VEnumBcd]{D}",
		Target: map[VEnumBcd]struct{}{
			VEnumBcdD: struct{}{},
		},
		SourceLabel: "VSet_VString{\"D\"}",
		Source: VSet_VString{
			"D": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VStructEmpty]{}",
		Target:      map[VStructEmpty]struct{}(nil),
		SourceLabel: "set[VStructEmpty]{}",
		Source:      map[VStructEmpty]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VStructEmpty]{}",
		Target:      map[VStructEmpty]struct{}(nil),
		SourceLabel: "set[VStructDepth1_Rand0]{}",
		Source:      map[VStructDepth1_Rand0]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VStructEmpty]{}",
		Target:      map[VStructEmpty]struct{}(nil),
		SourceLabel: "VSet_VStructDepth1_Rand0{}",
		Source:      VSet_VStructDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VStructEmpty]{{}}",
		Target: map[VStructEmpty]struct{}{
			{}: struct{}{},
		},
		SourceLabel: "set[VStructEmpty]{{}}",
		Source: map[VStructEmpty]struct{}{
			{}: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[VStructEmpty]{{}}",
		Target: map[VStructEmpty]struct{}{
			{}: struct{}{},
		},
		SourceLabel: "VSet_VStructDepth1_Rand0{{}}",
		Source: VSet_VStructDepth1_Rand0{
			{}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[uint16]{}",
		Target:      map[uint16]struct{}(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[uint16]{}",
		Target:      map[uint16]struct{}(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[uint16]{}",
		Target:      map[uint16]struct{}(nil),
		SourceLabel: "set[int64]{}",
		Source:      map[int64]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[uint16]{123}",
		Target: map[uint16]struct{}{
			123: struct{}{},
		},
		SourceLabel: "set[uint16]{123}",
		Source: map[uint16]struct{}{
			123: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[uint16]{123}",
		Target: map[uint16]struct{}{
			123: struct{}{},
		},
		SourceLabel: "set[int64]{123}",
		Source: map[int64]struct{}{
			123: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[uint16]{12265, 45434, 53528}",
		Target: map[uint16]struct{}{
			12265: struct{}{},
			45434: struct{}{},
			53528: struct{}{},
		},
		SourceLabel: "set[uint16]{12265, 45434, 53528}",
		Source: map[uint16]struct{}{
			12265: struct{}{},
			45434: struct{}{},
			53528: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[uint16]{12265, 45434, 53528}",
		Target: map[uint16]struct{}{
			12265: struct{}{},
			45434: struct{}{},
			53528: struct{}{},
		},
		SourceLabel: "set[int64]{12265, 45434, 53528}",
		Source: map[int64]struct{}{
			12265: struct{}{},
			45434: struct{}{},
			53528: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[uint16]{0, 46665, 49186}",
		Target: map[uint16]struct{}{
			0:     struct{}{},
			46665: struct{}{},
			49186: struct{}{},
		},
		SourceLabel: "set[uint16]{0, 46665, 49186}",
		Source: map[uint16]struct{}{
			0:     struct{}{},
			46665: struct{}{},
			49186: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[uint16]{0, 46665, 49186}",
		Target: map[uint16]struct{}{
			0:     struct{}{},
			46665: struct{}{},
			49186: struct{}{},
		},
		SourceLabel: "set[int64]{0, 46665, 49186}",
		Source: map[int64]struct{}{
			0:     struct{}{},
			46665: struct{}{},
			49186: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VInt16]{}",
		Target:      map[VInt16]struct{}(nil),
		SourceLabel: "set[VInt16]{}",
		Source:      map[VInt16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VInt16]{}",
		Target:      map[VInt16]struct{}(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VInt16]{}",
		Target:      map[VInt16]struct{}(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VInt16]{-123}",
		Target: map[VInt16]struct{}{
			-123: struct{}{},
		},
		SourceLabel: "set[VInt16]{-123}",
		Source: map[VInt16]struct{}{
			-123: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[VInt16]{-123}",
		Target: map[VInt16]struct{}{
			-123: struct{}{},
		},
		SourceLabel: "set[int64]{-123}",
		Source: map[int64]struct{}{
			-123: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VInt16]{-3771, 8381}",
		Target: map[VInt16]struct{}{
			-3771: struct{}{},
			8381:  struct{}{},
		},
		SourceLabel: "set[VInt16]{-3771, 8381}",
		Source: map[VInt16]struct{}{
			-3771: struct{}{},
			8381:  struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VInt16]{-3771, 8381}",
		Target: map[VInt16]struct{}{
			-3771: struct{}{},
			8381:  struct{}{},
		},
		SourceLabel: "set[int64]{-3771, 8381}",
		Source: map[int64]struct{}{
			-3771: struct{}{},
			8381:  struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VInt16]{0}",
		Target: map[VInt16]struct{}{
			0: struct{}{},
		},
		SourceLabel: "set[VInt16]{0}",
		Source: map[VInt16]struct{}{
			0: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VInt16]{0}",
		Target: map[VInt16]struct{}{
			0: struct{}{},
		},
		SourceLabel: "set[uint16]{0}",
		Source: map[uint16]struct{}{
			0: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[int64]{}",
		Target:      map[int64]struct{}(nil),
		SourceLabel: "set[int64]{}",
		Source:      map[int64]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[int64]{}",
		Target:      map[int64]struct{}(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[int64]{}",
		Target:      map[int64]struct{}(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[int64]{-123}",
		Target: map[int64]struct{}{
			-123: struct{}{},
		},
		SourceLabel: "set[int64]{-123}",
		Source: map[int64]struct{}{
			-123: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[int64]{-123}",
		Target: map[int64]struct{}{
			-123: struct{}{},
		},
		SourceLabel: "VSet_VFloat64{-123}",
		Source: VSet_VFloat64{
			-123: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[int64]{0}",
		Target: map[int64]struct{}{
			0: struct{}{},
		},
		SourceLabel: "set[int64]{0}",
		Source: map[int64]struct{}{
			0: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[int64]{0}",
		Target: map[int64]struct{}{
			0: struct{}{},
		},
		SourceLabel: "set[uint16]{0}",
		Source: map[uint16]struct{}{
			0: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[int64]{-1989041346661760703, -2421123573229598059}",
		Target: map[int64]struct{}{
			-1989041346661760703: struct{}{},
			-2421123573229598059: struct{}{},
		},
		SourceLabel: "set[int64]{-1989041346661760703, -2421123573229598059}",
		Source: map[int64]struct{}{
			-1989041346661760703: struct{}{},
			-2421123573229598059: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[int64]{-1989041346661760703, -2421123573229598059}",
		Target: map[int64]struct{}{
			-1989041346661760703: struct{}{},
			-2421123573229598059: struct{}{},
		},
		SourceLabel: "VSet_Int64{-1989041346661760703, -2421123573229598059}",
		Source: VSet_Int64{
			-1989041346661760703: struct{}{},
			-2421123573229598059: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_Bool{}",
		Target:      VSet_Bool(nil),
		SourceLabel: "VSet_Bool{}",
		Source:      VSet_Bool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_Bool{}",
		Target:      VSet_Bool(nil),
		SourceLabel: "VSet_VBool{}",
		Source:      VSet_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_Bool{}",
		Target:      VSet_Bool(nil),
		SourceLabel: "set[VBool]{}",
		Source:      map[VBool]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_Bool{true}",
		Target: VSet_Bool{
			true: struct{}{},
		},
		SourceLabel: "VSet_Bool{true}",
		Source: VSet_Bool{
			true: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_Bool{true}",
		Target: VSet_Bool{
			true: struct{}{},
		},
		SourceLabel: "VSet_VBool{true}",
		Source: VSet_VBool{
			true: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VBool{}",
		Target:      VSet_VBool(nil),
		SourceLabel: "VSet_VBool{}",
		Source:      VSet_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VBool{}",
		Target:      VSet_VBool(nil),
		SourceLabel: "set[VBool]{}",
		Source:      map[VBool]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VBool{}",
		Target:      VSet_VBool(nil),
		SourceLabel: "VSet_Bool{}",
		Source:      VSet_Bool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VBool{true}",
		Target: VSet_VBool{
			true: struct{}{},
		},
		SourceLabel: "VSet_VBool{true}",
		Source: VSet_VBool{
			true: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_VBool{true}",
		Target: VSet_VBool{
			true: struct{}{},
		},
		SourceLabel: "VSet_Bool{true}",
		Source: VSet_Bool{
			true: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_String{}",
		Target:      VSet_String(nil),
		SourceLabel: "VSet_String{}",
		Source:      VSet_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_String{}",
		Target:      VSet_String(nil),
		SourceLabel: "VSet_VEnumBcd{}",
		Source:      VSet_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_String{}",
		Target:      VSet_String(nil),
		SourceLabel: "set[VEnumBcd]{}",
		Source:      map[VEnumBcd]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VSet_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
		SourceLabel: "VSet_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VSet_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VSet_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
		SourceLabel: "VSet_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VSet_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_String{\"\", \"o\", \"王普澤世\"}",
		Target: VSet_String{
			"":     struct{}{},
			"o":    struct{}{},
			"王普澤世": struct{}{},
		},
		SourceLabel: "VSet_String{\"\", \"o\", \"王普澤世\"}",
		Source: VSet_String{
			"":     struct{}{},
			"o":    struct{}{},
			"王普澤世": struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_String{\"\", \"o\", \"王普澤世\"}",
		Target: VSet_String{
			"":     struct{}{},
			"o":    struct{}{},
			"王普澤世": struct{}{},
		},
		SourceLabel: "set[string]{\"\", \"o\", \"王普澤世\"}",
		Source: map[string]struct{}{
			"":     struct{}{},
			"o":    struct{}{},
			"王普澤世": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_String{\"\"}",
		Target: VSet_String{
			"": struct{}{},
		},
		SourceLabel: "VSet_String{\"\"}",
		Source: VSet_String{
			"": struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_String{\"\"}",
		Target: VSet_String{
			"": struct{}{},
		},
		SourceLabel: "set[string]{\"\"}",
		Source: map[string]struct{}{
			"": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VString{}",
		Target:      VSet_VString(nil),
		SourceLabel: "VSet_VString{}",
		Source:      VSet_VString(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VString{}",
		Target:      VSet_VString(nil),
		SourceLabel: "VSet_VEnumBcd{}",
		Source:      VSet_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VString{}",
		Target:      VSet_VString(nil),
		SourceLabel: "set[VEnumBcd]{}",
		Source:      map[VEnumBcd]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VSet_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
		SourceLabel: "VSet_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VSet_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VSet_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
		SourceLabel: "VSet_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VSet_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VString{\"\", \"Φ王普澤\"}",
		Target: VSet_VString{
			"":     struct{}{},
			"Φ王普澤": struct{}{},
		},
		SourceLabel: "VSet_VString{\"\", \"Φ王普澤\"}",
		Source: VSet_VString{
			"":     struct{}{},
			"Φ王普澤": struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VString{\"\", \"Φ王普澤\"}",
		Target: VSet_VString{
			"":     struct{}{},
			"Φ王普澤": struct{}{},
		},
		SourceLabel: "set[string]{\"\", \"Φ王普澤\"}",
		Source: map[string]struct{}{
			"":     struct{}{},
			"Φ王普澤": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VString{\"bcdefghijklmnopΔΘΠΣΦ王普\", \"nopΔΘΠΣΦ王普澤世\", \"ΘΠ\"}",
		Target: VSet_VString{
			"bcdefghijklmnopΔΘΠΣΦ王普": struct{}{},
			"nopΔΘΠΣΦ王普澤世":           struct{}{},
			"ΘΠ": struct{}{},
		},
		SourceLabel: "VSet_VString{\"bcdefghijklmnopΔΘΠΣΦ王普\", \"nopΔΘΠΣΦ王普澤世\", \"ΘΠ\"}",
		Source: VSet_VString{
			"bcdefghijklmnopΔΘΠΣΦ王普": struct{}{},
			"nopΔΘΠΣΦ王普澤世":           struct{}{},
			"ΘΠ": struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VString{\"bcdefghijklmnopΔΘΠΣΦ王普\", \"nopΔΘΠΣΦ王普澤世\", \"ΘΠ\"}",
		Target: VSet_VString{
			"bcdefghijklmnopΔΘΠΣΦ王普": struct{}{},
			"nopΔΘΠΣΦ王普澤世":           struct{}{},
			"ΘΠ": struct{}{},
		},
		SourceLabel: "set[string]{\"bcdefghijklmnopΔΘΠΣΦ王普\", \"nopΔΘΠΣΦ王普澤世\", \"ΘΠ\"}",
		Source: map[string]struct{}{
			"bcdefghijklmnopΔΘΠΣΦ王普": struct{}{},
			"nopΔΘΠΣΦ王普澤世":           struct{}{},
			"ΘΠ": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_Byte{}",
		Target:      VSet_Byte(nil),
		SourceLabel: "VSet_Byte{}",
		Source:      VSet_Byte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_Byte{}",
		Target:      VSet_Byte(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_Byte{}",
		Target:      VSet_Byte(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_Byte{123}",
		Target: VSet_Byte{
			123: struct{}{},
		},
		SourceLabel: "VSet_Byte{123}",
		Source: VSet_Byte{
			123: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_Byte{123}",
		Target: VSet_Byte{
			123: struct{}{},
		},
		SourceLabel: "set[int64]{123}",
		Source: map[int64]struct{}{
			123: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_Byte{0, 153, 83}",
		Target: VSet_Byte{
			0:   struct{}{},
			153: struct{}{},
			83:  struct{}{},
		},
		SourceLabel: "VSet_Byte{0, 153, 83}",
		Source: VSet_Byte{
			0:   struct{}{},
			153: struct{}{},
			83:  struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_Byte{0, 153, 83}",
		Target: VSet_Byte{
			0:   struct{}{},
			153: struct{}{},
			83:  struct{}{},
		},
		SourceLabel: "set[uint16]{0, 153, 83}",
		Source: map[uint16]struct{}{
			0:   struct{}{},
			153: struct{}{},
			83:  struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_Byte{82}",
		Target: VSet_Byte{
			82: struct{}{},
		},
		SourceLabel: "VSet_Byte{82}",
		Source: VSet_Byte{
			82: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_Byte{82}",
		Target: VSet_Byte{
			82: struct{}{},
		},
		SourceLabel: "set[uint16]{82}",
		Source: map[uint16]struct{}{
			82: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VByte{}",
		Target:      VSet_VByte(nil),
		SourceLabel: "VSet_VByte{}",
		Source:      VSet_VByte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VByte{}",
		Target:      VSet_VByte(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VByte{}",
		Target:      VSet_VByte(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VByte{123}",
		Target: VSet_VByte{
			123: struct{}{},
		},
		SourceLabel: "VSet_VByte{123}",
		Source: VSet_VByte{
			123: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_VByte{123}",
		Target: VSet_VByte{
			123: struct{}{},
		},
		SourceLabel: "set[int64]{123}",
		Source: map[int64]struct{}{
			123: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VByte{15, 204}",
		Target: VSet_VByte{
			15:  struct{}{},
			204: struct{}{},
		},
		SourceLabel: "VSet_VByte{15, 204}",
		Source: VSet_VByte{
			15:  struct{}{},
			204: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VByte{15, 204}",
		Target: VSet_VByte{
			15:  struct{}{},
			204: struct{}{},
		},
		SourceLabel: "set[uint16]{15, 204}",
		Source: map[uint16]struct{}{
			15:  struct{}{},
			204: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VByte{0, 157, 6}",
		Target: VSet_VByte{
			0:   struct{}{},
			157: struct{}{},
			6:   struct{}{},
		},
		SourceLabel: "VSet_VByte{0, 157, 6}",
		Source: VSet_VByte{
			0:   struct{}{},
			157: struct{}{},
			6:   struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VByte{0, 157, 6}",
		Target: VSet_VByte{
			0:   struct{}{},
			157: struct{}{},
			6:   struct{}{},
		},
		SourceLabel: "set[uint16]{0, 157, 6}",
		Source: map[uint16]struct{}{
			0:   struct{}{},
			157: struct{}{},
			6:   struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VEnumAbc{}",
		Target:      VSet_VEnumAbc(nil),
		SourceLabel: "VSet_VEnumAbc{}",
		Source:      VSet_VEnumAbc(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VEnumAbc{}",
		Target:      VSet_VEnumAbc(nil),
		SourceLabel: "VSet_VEnumBcd{}",
		Source:      VSet_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VEnumAbc{}",
		Target:      VSet_VEnumAbc(nil),
		SourceLabel: "set[VEnumBcd]{}",
		Source:      map[VEnumBcd]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VEnumAbc{C}",
		Target: VSet_VEnumAbc{
			VEnumAbcC: struct{}{},
		},
		SourceLabel: "VSet_VEnumAbc{C}",
		Source: VSet_VEnumAbc{
			VEnumAbcC: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_VEnumAbc{C}",
		Target: VSet_VEnumAbc{
			VEnumAbcC: struct{}{},
		},
		SourceLabel: "set[VEnumAbc]{C}",
		Source: map[VEnumAbc]struct{}{
			VEnumAbcC: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VEnumBcd{}",
		Target:      VSet_VEnumBcd(nil),
		SourceLabel: "VSet_VEnumBcd{}",
		Source:      VSet_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VEnumBcd{}",
		Target:      VSet_VEnumBcd(nil),
		SourceLabel: "set[VEnumBcd]{}",
		Source:      map[VEnumBcd]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VEnumBcd{}",
		Target:      VSet_VEnumBcd(nil),
		SourceLabel: "VSet_String{}",
		Source:      VSet_String(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VEnumBcd{D}",
		Target: VSet_VEnumBcd{
			VEnumBcdD: struct{}{},
		},
		SourceLabel: "VSet_VEnumBcd{D}",
		Source: VSet_VEnumBcd{
			VEnumBcdD: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_VEnumBcd{D}",
		Target: VSet_VEnumBcd{
			VEnumBcdD: struct{}{},
		},
		SourceLabel: "VSet_VString{\"D\"}",
		Source: VSet_VString{
			"D": struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VStructEmpty{}",
		Target:      VSet_VStructEmpty(nil),
		SourceLabel: "VSet_VStructEmpty{}",
		Source:      VSet_VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VStructEmpty{}",
		Target:      VSet_VStructEmpty(nil),
		SourceLabel: "set[VStructDepth1_Rand0]{}",
		Source:      map[VStructDepth1_Rand0]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VStructEmpty{}",
		Target:      VSet_VStructEmpty(nil),
		SourceLabel: "VSet_VStructDepth1_Rand0{}",
		Source:      VSet_VStructDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VStructEmpty{{}}",
		Target: VSet_VStructEmpty{
			{}: struct{}{},
		},
		SourceLabel: "VSet_VStructEmpty{{}}",
		Source: VSet_VStructEmpty{
			{}: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_VStructEmpty{{}}",
		Target: VSet_VStructEmpty{
			{}: struct{}{},
		},
		SourceLabel: "VSet_VStructDepth1_Rand0{{}}",
		Source: VSet_VStructDepth1_Rand0{
			{}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_Int64{}",
		Target:      VSet_Int64(nil),
		SourceLabel: "VSet_Int64{}",
		Source:      VSet_Int64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_Int64{}",
		Target:      VSet_Int64(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_Int64{}",
		Target:      VSet_Int64(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_Int64{-123}",
		Target: VSet_Int64{
			-123: struct{}{},
		},
		SourceLabel: "VSet_Int64{-123}",
		Source: VSet_Int64{
			-123: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_Int64{-123}",
		Target: VSet_Int64{
			-123: struct{}{},
		},
		SourceLabel: "set[int64]{-123}",
		Source: map[int64]struct{}{
			-123: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_Int64{3030093883856212693}",
		Target: VSet_Int64{
			3030093883856212693: struct{}{},
		},
		SourceLabel: "VSet_Int64{3030093883856212693}",
		Source: VSet_Int64{
			3030093883856212693: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_Int64{3030093883856212693}",
		Target: VSet_Int64{
			3030093883856212693: struct{}{},
		},
		SourceLabel: "set[int64]{3030093883856212693}",
		Source: map[int64]struct{}{
			3030093883856212693: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_Int64{-3569737435079611430, 0}",
		Target: VSet_Int64{
			-3569737435079611430: struct{}{},
			0:                    struct{}{},
		},
		SourceLabel: "VSet_Int64{-3569737435079611430, 0}",
		Source: VSet_Int64{
			-3569737435079611430: struct{}{},
			0:                    struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_Int64{-3569737435079611430, 0}",
		Target: VSet_Int64{
			-3569737435079611430: struct{}{},
			0:                    struct{}{},
		},
		SourceLabel: "set[int64]{-3569737435079611430, 0}",
		Source: map[int64]struct{}{
			-3569737435079611430: struct{}{},
			0:                    struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_Float32{}",
		Target:      VSet_Float32(nil),
		SourceLabel: "VSet_Float32{}",
		Source:      VSet_Float32(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_Float32{}",
		Target:      VSet_Float32(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_Float32{}",
		Target:      VSet_Float32(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_Float32{1.23}",
		Target: VSet_Float32{
			1.23: struct{}{},
		},
		SourceLabel: "VSet_Float32{1.23}",
		Source: VSet_Float32{
			1.23: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_Float32{1.23}",
		Target: VSet_Float32{
			1.23: struct{}{},
		},
		SourceLabel: "VSet_VFloat64{1.23}",
		Source: VSet_VFloat64{
			1.23: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_Float32{-3.092125e+09, -7.3709344e+08, 1.8202662e+08}",
		Target: VSet_Float32{
			-3.092125e+09:  struct{}{},
			-7.3709344e+08: struct{}{},
			1.8202662e+08:  struct{}{},
		},
		SourceLabel: "VSet_Float32{-3.092125e+09, -7.3709344e+08, 1.8202662e+08}",
		Source: VSet_Float32{
			-3.092125e+09:  struct{}{},
			-7.3709344e+08: struct{}{},
			1.8202662e+08:  struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_Float32{-3.092125e+09, -7.3709344e+08, 1.8202662e+08}",
		Target: VSet_Float32{
			-3.092125e+09:  struct{}{},
			-7.3709344e+08: struct{}{},
			1.8202662e+08:  struct{}{},
		},
		SourceLabel: "VSet_VFloat64{-3.0921249025552764e+09, -7.370934456167369e+08, 1.8202662152700508e+08}",
		Source: VSet_VFloat64{
			-3.0921249025552764e+09: struct{}{},
			-7.370934456167369e+08:  struct{}{},
			1.8202662152700508e+08:  struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_Float32{-5.1212332e+07, 0, 1.4743214e+09}",
		Target: VSet_Float32{
			-5.1212332e+07: struct{}{},
			0:              struct{}{},
			1.4743214e+09:  struct{}{},
		},
		SourceLabel: "VSet_Float32{-5.1212332e+07, 0, 1.4743214e+09}",
		Source: VSet_Float32{
			-5.1212332e+07: struct{}{},
			0:              struct{}{},
			1.4743214e+09:  struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_Float32{-5.1212332e+07, 0, 1.4743214e+09}",
		Target: VSet_Float32{
			-5.1212332e+07: struct{}{},
			0:              struct{}{},
			1.4743214e+09:  struct{}{},
		},
		SourceLabel: "VSet_VFloat64{-5.1212332120216936e+07, 0, 1.474321399104024e+09}",
		Source: VSet_VFloat64{
			-5.1212332120216936e+07: struct{}{},
			0: struct{}{},
			1.474321399104024e+09: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VFloat64{}",
		Target:      VSet_VFloat64(nil),
		SourceLabel: "VSet_VFloat64{}",
		Source:      VSet_VFloat64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VFloat64{}",
		Target:      VSet_VFloat64(nil),
		SourceLabel: "set[uint16]{}",
		Source:      map[uint16]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VFloat64{}",
		Target:      VSet_VFloat64(nil),
		SourceLabel: "set[VByte]{}",
		Source:      map[VByte]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VFloat64{1.23}",
		Target: VSet_VFloat64{
			1.23: struct{}{},
		},
		SourceLabel: "VSet_VFloat64{1.23}",
		Source: VSet_VFloat64{
			1.23: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_VFloat64{1.23}",
		Target: VSet_VFloat64{
			1.23: struct{}{},
		},
		SourceLabel: "VSet_Float32{1.23}",
		Source: VSet_Float32{
			1.23: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VFloat64{9.845689108936584e+08}",
		Target: VSet_VFloat64{
			9.845689108936584e+08: struct{}{},
		},
		SourceLabel: "VSet_VFloat64{9.845689108936584e+08}",
		Source: VSet_VFloat64{
			9.845689108936584e+08: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VFloat64{9.845689108936584e+08}",
		Target: VSet_VFloat64{
			9.845689108936584e+08: struct{}{},
		},
		SourceLabel: "VSet_Float32{9.845689e+08}",
		Source: VSet_Float32{
			9.845689e+08: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VFloat64{-3.144840157694642e+09, -3.247292473933508e+08}",
		Target: VSet_VFloat64{
			-3.144840157694642e+09: struct{}{},
			-3.247292473933508e+08: struct{}{},
		},
		SourceLabel: "VSet_VFloat64{-3.144840157694642e+09, -3.247292473933508e+08}",
		Source: VSet_VFloat64{
			-3.144840157694642e+09: struct{}{},
			-3.247292473933508e+08: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VFloat64{-3.144840157694642e+09, -3.247292473933508e+08}",
		Target: VSet_VFloat64{
			-3.144840157694642e+09: struct{}{},
			-3.247292473933508e+08: struct{}{},
		},
		SourceLabel: "VSet_Float32{-3.1448402e+09, -3.2472925e+08}",
		Source: VSet_Float32{
			-3.1448402e+09: struct{}{},
			-3.2472925e+08: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[bool]bool{}",
		Target:      map[bool]bool(nil),
		SourceLabel: "map[bool]bool{}",
		Source:      map[bool]bool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[bool]bool{}",
		Target:      map[bool]bool(nil),
		SourceLabel: "VMap_VBool_VBool{}",
		Source:      VMap_VBool_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[bool]bool{}",
		Target:      map[bool]bool(nil),
		SourceLabel: "map[VBool]VBool{}",
		Source:      map[VBool]VBool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[bool]bool{true: true}",
		Target: map[bool]bool{
			true: true,
		},
		SourceLabel: "map[bool]bool{true: true}",
		Source: map[bool]bool{
			true: true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[bool]bool{true: true}",
		Target: map[bool]bool{
			true: true,
		},
		SourceLabel: "VMap_Bool_Bool{true: true}",
		Source: VMap_Bool_Bool{
			true: true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VBool]VBool{}",
		Target:      map[VBool]VBool(nil),
		SourceLabel: "map[VBool]VBool{}",
		Source:      map[VBool]VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VBool]VBool{}",
		Target:      map[VBool]VBool(nil),
		SourceLabel: "VMap_VBool_VBool{}",
		Source:      VMap_VBool_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VBool]VBool{}",
		Target:      map[VBool]VBool(nil),
		SourceLabel: "VMap_Bool_Bool{}",
		Source:      VMap_Bool_Bool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VBool]VBool{true: true}",
		Target: map[VBool]VBool{
			true: true,
		},
		SourceLabel: "map[VBool]VBool{true: true}",
		Source: map[VBool]VBool{
			true: true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VBool]VBool{true: true}",
		Target: map[VBool]VBool{
			true: true,
		},
		SourceLabel: "VMap_Bool_Bool{true: true}",
		Source: VMap_Bool_Bool{
			true: true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[string]string{}",
		Target:      map[string]string(nil),
		SourceLabel: "map[string]string{}",
		Source:      map[string]string(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[string]string{}",
		Target:      map[string]string(nil),
		SourceLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Source:      VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[string]string{}",
		Target:      map[string]string(nil),
		SourceLabel: "map[VEnumBcd]VEnumBcd{}",
		Source:      map[VEnumBcd]VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[string]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: map[string]string{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "map[string]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: map[string]string{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[string]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: map[string]string{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VMap_VString_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VMap_VString_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[string]string{\"abcdefg\": \"nop\"}",
		Target: map[string]string{
			"abcdefg": "nop",
		},
		SourceLabel: "map[string]string{\"abcdefg\": \"nop\"}",
		Source: map[string]string{
			"abcdefg": "nop",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[string]string{\"abcdefg\": \"nop\"}",
		Target: map[string]string{
			"abcdefg": "nop",
		},
		SourceLabel: "map[VString]VString{\"abcdefg\": \"nop\"}",
		Source: map[VString]VString{
			"abcdefg": "nop",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[string]string{\"abcdefghi\": \"defgh\", \"ghijklmnopΔΘΠΣ\": \"bcdef\", \"jklmnopΔ\": \"jklm\"}",
		Target: map[string]string{
			"abcdefghi":      "defgh",
			"ghijklmnopΔΘΠΣ": "bcdef",
			"jklmnopΔ":       "jklm",
		},
		SourceLabel: "map[string]string{\"abcdefghi\": \"defgh\", \"ghijklmnopΔΘΠΣ\": \"bcdef\", \"jklmnopΔ\": \"jklm\"}",
		Source: map[string]string{
			"abcdefghi":      "defgh",
			"ghijklmnopΔΘΠΣ": "bcdef",
			"jklmnopΔ":       "jklm",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[string]string{\"abcdefghi\": \"defgh\", \"ghijklmnopΔΘΠΣ\": \"bcdef\", \"jklmnopΔ\": \"jklm\"}",
		Target: map[string]string{
			"abcdefghi":      "defgh",
			"ghijklmnopΔΘΠΣ": "bcdef",
			"jklmnopΔ":       "jklm",
		},
		SourceLabel: "map[VString]VString{\"abcdefghi\": \"defgh\", \"ghijklmnopΔΘΠΣ\": \"bcdef\", \"jklmnopΔ\": \"jklm\"}",
		Source: map[VString]VString{
			"abcdefghi":      "defgh",
			"ghijklmnopΔΘΠΣ": "bcdef",
			"jklmnopΔ":       "jklm",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VString]VString{}",
		Target:      map[VString]VString(nil),
		SourceLabel: "map[VString]VString{}",
		Source:      map[VString]VString(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VString]VString{}",
		Target:      map[VString]VString(nil),
		SourceLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Source:      VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VString]VString{}",
		Target:      map[VString]VString(nil),
		SourceLabel: "map[VEnumBcd]VEnumBcd{}",
		Source:      map[VEnumBcd]VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VString]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: map[VString]VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "map[VString]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: map[VString]VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VString]VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: map[VString]VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VMap_VString_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VMap_VString_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VString]VString{\"bcdefghijklmnopΔΘΠΣΦ王\": \"bcdefghijklmno\"}",
		Target: map[VString]VString{
			"bcdefghijklmnopΔΘΠΣΦ王": "bcdefghijklmno",
		},
		SourceLabel: "map[VString]VString{\"bcdefghijklmnopΔΘΠΣΦ王\": \"bcdefghijklmno\"}",
		Source: map[VString]VString{
			"bcdefghijklmnopΔΘΠΣΦ王": "bcdefghijklmno",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VString]VString{\"bcdefghijklmnopΔΘΠΣΦ王\": \"bcdefghijklmno\"}",
		Target: map[VString]VString{
			"bcdefghijklmnopΔΘΠΣΦ王": "bcdefghijklmno",
		},
		SourceLabel: "map[string]string{\"bcdefghijklmnopΔΘΠΣΦ王\": \"bcdefghijklmno\"}",
		Source: map[string]string{
			"bcdefghijklmnopΔΘΠΣΦ王": "bcdefghijklmno",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VString]VString{\"de\": \"lmnopΔΘΠΣΦ王\"}",
		Target: map[VString]VString{
			"de": "lmnopΔΘΠΣΦ王",
		},
		SourceLabel: "map[VString]VString{\"de\": \"lmnopΔΘΠΣΦ王\"}",
		Source: map[VString]VString{
			"de": "lmnopΔΘΠΣΦ王",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VString]VString{\"de\": \"lmnopΔΘΠΣΦ王\"}",
		Target: map[VString]VString{
			"de": "lmnopΔΘΠΣΦ王",
		},
		SourceLabel: "map[string]string{\"de\": \"lmnopΔΘΠΣΦ王\"}",
		Source: map[string]string{
			"de": "lmnopΔΘΠΣΦ王",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[byte]byte{}",
		Target:      map[byte]byte(nil),
		SourceLabel: "map[byte]byte{}",
		Source:      map[byte]byte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[byte]byte{}",
		Target:      map[byte]byte(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[byte]byte{}",
		Target:      map[byte]byte(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[byte]byte{123: 123}",
		Target: map[byte]byte{
			123: 123,
		},
		SourceLabel: "map[byte]byte{123: 123}",
		Source: map[byte]byte{
			123: 123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[byte]byte{123: 123}",
		Target: map[byte]byte{
			123: 123,
		},
		SourceLabel: "map[VInt32]VInt32{123: 123}",
		Source: map[VInt32]VInt32{
			123: 123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[byte]byte{0: 146}",
		Target: map[byte]byte{
			0: 146,
		},
		SourceLabel: "map[byte]byte{0: 146}",
		Source: map[byte]byte{
			0: 146,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[byte]byte{0: 146}",
		Target: map[byte]byte{
			0: 146,
		},
		SourceLabel: "map[uint16]uint16{0: 146}",
		Source: map[uint16]uint16{
			0: 146,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[byte]byte{254: 140}",
		Target: map[byte]byte{
			254: 140,
		},
		SourceLabel: "map[byte]byte{254: 140}",
		Source: map[byte]byte{
			254: 140,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[byte]byte{254: 140}",
		Target: map[byte]byte{
			254: 140,
		},
		SourceLabel: "map[uint16]uint16{254: 140}",
		Source: map[uint16]uint16{
			254: 140,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VByte]VByte{}",
		Target:      map[VByte]VByte(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VByte]VByte{}",
		Target:      map[VByte]VByte(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VByte]VByte{}",
		Target:      map[VByte]VByte(nil),
		SourceLabel: "map[VInt32]VInt32{}",
		Source:      map[VInt32]VInt32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VByte]VByte{123: 123}",
		Target: map[VByte]VByte{
			123: 123,
		},
		SourceLabel: "map[VByte]VByte{123: 123}",
		Source: map[VByte]VByte{
			123: 123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VByte]VByte{123: 123}",
		Target: map[VByte]VByte{
			123: 123,
		},
		SourceLabel: "map[VInt32]VInt32{123: 123}",
		Source: map[VInt32]VInt32{
			123: 123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VByte]VByte{0: 0, 127: 235}",
		Target: map[VByte]VByte{
			0:   0,
			127: 235,
		},
		SourceLabel: "map[VByte]VByte{0: 0, 127: 235}",
		Source: map[VByte]VByte{
			0:   0,
			127: 235,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VByte]VByte{0: 0, 127: 235}",
		Target: map[VByte]VByte{
			0:   0,
			127: 235,
		},
		SourceLabel: "map[uint16]uint16{0: 0, 127: 235}",
		Source: map[uint16]uint16{
			0:   0,
			127: 235,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VByte]VByte{160: 0, 83: 0}",
		Target: map[VByte]VByte{
			160: 0,
			83:  0,
		},
		SourceLabel: "map[VByte]VByte{160: 0, 83: 0}",
		Source: map[VByte]VByte{
			160: 0,
			83:  0,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VByte]VByte{160: 0, 83: 0}",
		Target: map[VByte]VByte{
			160: 0,
			83:  0,
		},
		SourceLabel: "map[uint16]uint16{160: 0, 83: 0}",
		Source: map[uint16]uint16{
			160: 0,
			83:  0,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VEnumAbc]VEnumAbc{}",
		Target:      map[VEnumAbc]VEnumAbc(nil),
		SourceLabel: "map[VEnumAbc]VEnumAbc{}",
		Source:      map[VEnumAbc]VEnumAbc(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VEnumAbc]VEnumAbc{}",
		Target:      map[VEnumAbc]VEnumAbc(nil),
		SourceLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Source:      VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VEnumAbc]VEnumAbc{}",
		Target:      map[VEnumAbc]VEnumAbc(nil),
		SourceLabel: "map[VEnumBcd]VEnumBcd{}",
		Source:      map[VEnumBcd]VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VEnumAbc]VEnumAbc{C: C}",
		Target: map[VEnumAbc]VEnumAbc{
			VEnumAbcC: VEnumAbcC,
		},
		SourceLabel: "map[VEnumAbc]VEnumAbc{C: C}",
		Source: map[VEnumAbc]VEnumAbc{
			VEnumAbcC: VEnumAbcC,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VEnumAbc]VEnumAbc{C: C}",
		Target: map[VEnumAbc]VEnumAbc{
			VEnumAbcC: VEnumAbcC,
		},
		SourceLabel: "VMap_VString_VString{\"C\": \"C\"}",
		Source: VMap_VString_VString{
			"C": "C",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VEnumBcd]VEnumBcd{}",
		Target:      map[VEnumBcd]VEnumBcd(nil),
		SourceLabel: "map[VEnumBcd]VEnumBcd{}",
		Source:      map[VEnumBcd]VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VEnumBcd]VEnumBcd{}",
		Target:      map[VEnumBcd]VEnumBcd(nil),
		SourceLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Source:      VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VEnumBcd]VEnumBcd{}",
		Target:      map[VEnumBcd]VEnumBcd(nil),
		SourceLabel: "VMap_String_String{}",
		Source:      VMap_String_String(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VEnumBcd]VEnumBcd{D: D}",
		Target: map[VEnumBcd]VEnumBcd{
			VEnumBcdD: VEnumBcdD,
		},
		SourceLabel: "map[VEnumBcd]VEnumBcd{D: D}",
		Source: map[VEnumBcd]VEnumBcd{
			VEnumBcdD: VEnumBcdD,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VEnumBcd]VEnumBcd{D: D}",
		Target: map[VEnumBcd]VEnumBcd{
			VEnumBcdD: VEnumBcdD,
		},
		SourceLabel: "VMap_VString_VString{\"D\": \"D\"}",
		Source: VMap_VString_VString{
			"D": "D",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VStructEmpty]VStructEmpty{}",
		Target:      map[VStructEmpty]VStructEmpty(nil),
		SourceLabel: "map[VStructEmpty]VStructEmpty{}",
		Source:      map[VStructEmpty]VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VStructEmpty]VStructEmpty{}",
		Target:      map[VStructEmpty]VStructEmpty(nil),
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Source:      map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VStructEmpty]VStructEmpty{}",
		Target:      map[VStructEmpty]VStructEmpty(nil),
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Source:      VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VStructEmpty]VStructEmpty{{}: {}}",
		Target: map[VStructEmpty]VStructEmpty{
			{}: {},
		},
		SourceLabel: "map[VStructEmpty]VStructEmpty{{}: {}}",
		Source: map[VStructEmpty]VStructEmpty{
			{}: {},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VStructEmpty]VStructEmpty{{}: {}}",
		Target: map[VStructEmpty]VStructEmpty{
			{}: {},
		},
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{}: {}}",
		Source: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{}: {},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[uint16]uint16{}",
		Target:      map[uint16]uint16(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[uint16]uint16{}",
		Target:      map[uint16]uint16(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[uint16]uint16{}",
		Target:      map[uint16]uint16(nil),
		SourceLabel: "map[VInt32]VInt32{}",
		Source:      map[VInt32]VInt32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[uint16]uint16{123: 123}",
		Target: map[uint16]uint16{
			123: 123,
		},
		SourceLabel: "map[uint16]uint16{123: 123}",
		Source: map[uint16]uint16{
			123: 123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[uint16]uint16{123: 123}",
		Target: map[uint16]uint16{
			123: 123,
		},
		SourceLabel: "map[VInt32]VInt32{123: 123}",
		Source: map[VInt32]VInt32{
			123: 123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[uint16]uint16{27252: 0, 63720: 64889}",
		Target: map[uint16]uint16{
			27252: 0,
			63720: 64889,
		},
		SourceLabel: "map[uint16]uint16{27252: 0, 63720: 64889}",
		Source: map[uint16]uint16{
			27252: 0,
			63720: 64889,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[uint16]uint16{27252: 0, 63720: 64889}",
		Target: map[uint16]uint16{
			27252: 0,
			63720: 64889,
		},
		SourceLabel: "map[VInt32]VInt32{27252: 0, 63720: 64889}",
		Source: map[VInt32]VInt32{
			27252: 0,
			63720: 64889,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[uint16]uint16{12730: 5184}",
		Target: map[uint16]uint16{
			12730: 5184,
		},
		SourceLabel: "map[uint16]uint16{12730: 5184}",
		Source: map[uint16]uint16{
			12730: 5184,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[uint16]uint16{12730: 5184}",
		Target: map[uint16]uint16{
			12730: 5184,
		},
		SourceLabel: "map[VInt32]VInt32{12730: 5184}",
		Source: map[VInt32]VInt32{
			12730: 5184,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[int16]int16{}",
		Target:      map[int16]int16(nil),
		SourceLabel: "map[int16]int16{}",
		Source:      map[int16]int16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[int16]int16{}",
		Target:      map[int16]int16(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[int16]int16{}",
		Target:      map[int16]int16(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[int16]int16{-123: -123}",
		Target: map[int16]int16{
			-123: -123,
		},
		SourceLabel: "map[int16]int16{-123: -123}",
		Source: map[int16]int16{
			-123: -123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[int16]int16{-123: -123}",
		Target: map[int16]int16{
			-123: -123,
		},
		SourceLabel: "map[VInt32]VInt32{-123: -123}",
		Source: map[VInt32]VInt32{
			-123: -123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[int16]int16{-11080: 13964, 0: -9990}",
		Target: map[int16]int16{
			-11080: 13964,
			0:      -9990,
		},
		SourceLabel: "map[int16]int16{-11080: 13964, 0: -9990}",
		Source: map[int16]int16{
			-11080: 13964,
			0:      -9990,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[int16]int16{-11080: 13964, 0: -9990}",
		Target: map[int16]int16{
			-11080: 13964,
			0:      -9990,
		},
		SourceLabel: "map[VInt32]VInt32{-11080: 13964, 0: -9990}",
		Source: map[VInt32]VInt32{
			-11080: 13964,
			0:      -9990,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[int16]int16{-1477: 1286}",
		Target: map[int16]int16{
			-1477: 1286,
		},
		SourceLabel: "map[int16]int16{-1477: 1286}",
		Source: map[int16]int16{
			-1477: 1286,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[int16]int16{-1477: 1286}",
		Target: map[int16]int16{
			-1477: 1286,
		},
		SourceLabel: "map[VInt32]VInt32{-1477: 1286}",
		Source: map[VInt32]VInt32{
			-1477: 1286,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VInt32]VInt32{}",
		Target:      map[VInt32]VInt32(nil),
		SourceLabel: "map[VInt32]VInt32{}",
		Source:      map[VInt32]VInt32(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VInt32]VInt32{}",
		Target:      map[VInt32]VInt32(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VInt32]VInt32{}",
		Target:      map[VInt32]VInt32(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VInt32]VInt32{-123: -123}",
		Target: map[VInt32]VInt32{
			-123: -123,
		},
		SourceLabel: "map[VInt32]VInt32{-123: -123}",
		Source: map[VInt32]VInt32{
			-123: -123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VInt32]VInt32{-123: -123}",
		Target: map[VInt32]VInt32{
			-123: -123,
		},
		SourceLabel: "VMap_Float64_Float64{-123: -123}",
		Source: VMap_Float64_Float64{
			-123: -123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VInt32]VInt32{-306220721: 967189589}",
		Target: map[VInt32]VInt32{
			-306220721: 967189589,
		},
		SourceLabel: "map[VInt32]VInt32{-306220721: 967189589}",
		Source: map[VInt32]VInt32{
			-306220721: 967189589,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VInt32]VInt32{-306220721: 967189589}",
		Target: map[VInt32]VInt32{
			-306220721: 967189589,
		},
		SourceLabel: "VMap_Float64_Float64{-3.06220721e+08: 9.67189589e+08}",
		Source: VMap_Float64_Float64{
			-3.06220721e+08: 9.67189589e+08,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VInt32]VInt32{-590656869: 914868396, 0: 730721371, 583122045: 0}",
		Target: map[VInt32]VInt32{
			-590656869: 914868396,
			0:          730721371,
			583122045:  0,
		},
		SourceLabel: "map[VInt32]VInt32{-590656869: 914868396, 0: 730721371, 583122045: 0}",
		Source: map[VInt32]VInt32{
			-590656869: 914868396,
			0:          730721371,
			583122045:  0,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VInt32]VInt32{-590656869: 914868396, 0: 730721371, 583122045: 0}",
		Target: map[VInt32]VInt32{
			-590656869: 914868396,
			0:          730721371,
			583122045:  0,
		},
		SourceLabel: "VMap_Float64_Float64{-5.90656869e+08: 9.14868396e+08, 0: 7.30721371e+08, 5.83122045e+08: 0}",
		Source: VMap_Float64_Float64{
			-5.90656869e+08: 9.14868396e+08,
			0:               7.30721371e+08,
			5.83122045e+08:  0,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_Bool_Bool{}",
		Target:      VMap_Bool_Bool(nil),
		SourceLabel: "VMap_Bool_Bool{}",
		Source:      VMap_Bool_Bool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_Bool_Bool{}",
		Target:      VMap_Bool_Bool(nil),
		SourceLabel: "VMap_VBool_VBool{}",
		Source:      VMap_VBool_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_Bool_Bool{}",
		Target:      VMap_Bool_Bool(nil),
		SourceLabel: "map[VBool]VBool{}",
		Source:      map[VBool]VBool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_Bool_Bool{true: true}",
		Target: VMap_Bool_Bool{
			true: true,
		},
		SourceLabel: "VMap_Bool_Bool{true: true}",
		Source: VMap_Bool_Bool{
			true: true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_Bool_Bool{true: true}",
		Target: VMap_Bool_Bool{
			true: true,
		},
		SourceLabel: "VMap_VBool_VBool{true: true}",
		Source: VMap_VBool_VBool{
			true: true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VBool_VBool{}",
		Target:      VMap_VBool_VBool(nil),
		SourceLabel: "VMap_VBool_VBool{}",
		Source:      VMap_VBool_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VBool_VBool{}",
		Target:      VMap_VBool_VBool(nil),
		SourceLabel: "map[VBool]VBool{}",
		Source:      map[VBool]VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VBool_VBool{}",
		Target:      VMap_VBool_VBool(nil),
		SourceLabel: "VMap_Bool_Bool{}",
		Source:      VMap_Bool_Bool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VBool_VBool{true: true}",
		Target: VMap_VBool_VBool{
			true: true,
		},
		SourceLabel: "VMap_VBool_VBool{true: true}",
		Source: VMap_VBool_VBool{
			true: true,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VBool_VBool{true: true}",
		Target: VMap_VBool_VBool{
			true: true,
		},
		SourceLabel: "VMap_Bool_Bool{true: true}",
		Source: VMap_Bool_Bool{
			true: true,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_String_String{}",
		Target:      VMap_String_String(nil),
		SourceLabel: "VMap_String_String{}",
		Source:      VMap_String_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_String_String{}",
		Target:      VMap_String_String(nil),
		SourceLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Source:      VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_String_String{}",
		Target:      VMap_String_String(nil),
		SourceLabel: "map[VEnumBcd]VEnumBcd{}",
		Source:      map[VEnumBcd]VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_String_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VMap_String_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VMap_String_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VMap_String_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_String_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VMap_String_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VMap_VString_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VMap_VString_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_String_String{\"jklm\": \"\"}",
		Target: VMap_String_String{
			"jklm": "",
		},
		SourceLabel: "VMap_String_String{\"jklm\": \"\"}",
		Source: VMap_String_String{
			"jklm": "",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_String_String{\"jklm\": \"\"}",
		Target: VMap_String_String{
			"jklm": "",
		},
		SourceLabel: "map[string]string{\"jklm\": \"\"}",
		Source: map[string]string{
			"jklm": "",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_String_String{\"cdefghijklmnopΔΘ\": \"hijklmnopΔΘΠΣ\"}",
		Target: VMap_String_String{
			"cdefghijklmnopΔΘ": "hijklmnopΔΘΠΣ",
		},
		SourceLabel: "VMap_String_String{\"cdefghijklmnopΔΘ\": \"hijklmnopΔΘΠΣ\"}",
		Source: VMap_String_String{
			"cdefghijklmnopΔΘ": "hijklmnopΔΘΠΣ",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_String_String{\"cdefghijklmnopΔΘ\": \"hijklmnopΔΘΠΣ\"}",
		Target: VMap_String_String{
			"cdefghijklmnopΔΘ": "hijklmnopΔΘΠΣ",
		},
		SourceLabel: "map[string]string{\"cdefghijklmnopΔΘ\": \"hijklmnopΔΘΠΣ\"}",
		Source: map[string]string{
			"cdefghijklmnopΔΘ": "hijklmnopΔΘΠΣ",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VString_VString{}",
		Target:      VMap_VString_VString(nil),
		SourceLabel: "VMap_VString_VString{}",
		Source:      VMap_VString_VString(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VString_VString{}",
		Target:      VMap_VString_VString(nil),
		SourceLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Source:      VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VString_VString{}",
		Target:      VMap_VString_VString(nil),
		SourceLabel: "map[VEnumBcd]VEnumBcd{}",
		Source:      map[VEnumBcd]VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VString_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VMap_VString_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VMap_VString_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VMap_VString_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VString_VString{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Target: VMap_VString_VString{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
		SourceLabel: "VMap_String_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}",
		Source: VMap_String_String{
			"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VString_VString{\"\": \"abcdefgh\", \"jklmnopΔΘΠΣΦ王\": \"fghijklmnopΔΘΠΣΦ王普澤世\"}",
		Target: VMap_VString_VString{
			"": "abcdefgh",
			"jklmnopΔΘΠΣΦ王": "fghijklmnopΔΘΠΣΦ王普澤世",
		},
		SourceLabel: "VMap_VString_VString{\"\": \"abcdefgh\", \"jklmnopΔΘΠΣΦ王\": \"fghijklmnopΔΘΠΣΦ王普澤世\"}",
		Source: VMap_VString_VString{
			"": "abcdefgh",
			"jklmnopΔΘΠΣΦ王": "fghijklmnopΔΘΠΣΦ王普澤世",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VString_VString{\"\": \"abcdefgh\", \"jklmnopΔΘΠΣΦ王\": \"fghijklmnopΔΘΠΣΦ王普澤世\"}",
		Target: VMap_VString_VString{
			"": "abcdefgh",
			"jklmnopΔΘΠΣΦ王": "fghijklmnopΔΘΠΣΦ王普澤世",
		},
		SourceLabel: "map[string]string{\"\": \"abcdefgh\", \"jklmnopΔΘΠΣΦ王\": \"fghijklmnopΔΘΠΣΦ王普澤世\"}",
		Source: map[string]string{
			"": "abcdefgh",
			"jklmnopΔΘΠΣΦ王": "fghijklmnopΔΘΠΣΦ王普澤世",
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VString_VString{\"ghijk\": \"no\", \"hijklmnopΔΘΠΣΦ王普澤\": \"ghijklmnopΔΘΠ\"}",
		Target: VMap_VString_VString{
			"ghijk": "no",
			"hijklmnopΔΘΠΣΦ王普澤": "ghijklmnopΔΘΠ",
		},
		SourceLabel: "VMap_VString_VString{\"ghijk\": \"no\", \"hijklmnopΔΘΠΣΦ王普澤\": \"ghijklmnopΔΘΠ\"}",
		Source: VMap_VString_VString{
			"ghijk": "no",
			"hijklmnopΔΘΠΣΦ王普澤": "ghijklmnopΔΘΠ",
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VString_VString{\"ghijk\": \"no\", \"hijklmnopΔΘΠΣΦ王普澤\": \"ghijklmnopΔΘΠ\"}",
		Target: VMap_VString_VString{
			"ghijk": "no",
			"hijklmnopΔΘΠΣΦ王普澤": "ghijklmnopΔΘΠ",
		},
		SourceLabel: "map[string]string{\"ghijk\": \"no\", \"hijklmnopΔΘΠΣΦ王普澤\": \"ghijklmnopΔΘΠ\"}",
		Source: map[string]string{
			"ghijk": "no",
			"hijklmnopΔΘΠΣΦ王普澤": "ghijklmnopΔΘΠ",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_Byte_Byte{}",
		Target:      VMap_Byte_Byte(nil),
		SourceLabel: "VMap_Byte_Byte{}",
		Source:      VMap_Byte_Byte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_Byte_Byte{}",
		Target:      VMap_Byte_Byte(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_Byte_Byte{}",
		Target:      VMap_Byte_Byte(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_Byte_Byte{123: 123}",
		Target: VMap_Byte_Byte{
			123: 123,
		},
		SourceLabel: "VMap_Byte_Byte{123: 123}",
		Source: VMap_Byte_Byte{
			123: 123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_Byte_Byte{123: 123}",
		Target: VMap_Byte_Byte{
			123: 123,
		},
		SourceLabel: "map[VInt32]VInt32{123: 123}",
		Source: map[VInt32]VInt32{
			123: 123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_Byte_Byte{132: 150, 171: 179, 241: 0}",
		Target: VMap_Byte_Byte{
			132: 150,
			171: 179,
			241: 0,
		},
		SourceLabel: "VMap_Byte_Byte{132: 150, 171: 179, 241: 0}",
		Source: VMap_Byte_Byte{
			132: 150,
			171: 179,
			241: 0,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_Byte_Byte{132: 150, 171: 179, 241: 0}",
		Target: VMap_Byte_Byte{
			132: 150,
			171: 179,
			241: 0,
		},
		SourceLabel: "map[uint16]uint16{132: 150, 171: 179, 241: 0}",
		Source: map[uint16]uint16{
			132: 150,
			171: 179,
			241: 0,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_Byte_Byte{222: 249, 52: 249, 66: 35}",
		Target: VMap_Byte_Byte{
			222: 249,
			52:  249,
			66:  35,
		},
		SourceLabel: "VMap_Byte_Byte{222: 249, 52: 249, 66: 35}",
		Source: VMap_Byte_Byte{
			222: 249,
			52:  249,
			66:  35,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_Byte_Byte{222: 249, 52: 249, 66: 35}",
		Target: VMap_Byte_Byte{
			222: 249,
			52:  249,
			66:  35,
		},
		SourceLabel: "map[uint16]uint16{222: 249, 52: 249, 66: 35}",
		Source: map[uint16]uint16{
			222: 249,
			52:  249,
			66:  35,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VByte_VByte{}",
		Target:      VMap_VByte_VByte(nil),
		SourceLabel: "VMap_VByte_VByte{}",
		Source:      VMap_VByte_VByte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VByte_VByte{}",
		Target:      VMap_VByte_VByte(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VByte_VByte{}",
		Target:      VMap_VByte_VByte(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VByte_VByte{123: 123}",
		Target: VMap_VByte_VByte{
			123: 123,
		},
		SourceLabel: "VMap_VByte_VByte{123: 123}",
		Source: VMap_VByte_VByte{
			123: 123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VByte_VByte{123: 123}",
		Target: VMap_VByte_VByte{
			123: 123,
		},
		SourceLabel: "map[VInt32]VInt32{123: 123}",
		Source: map[VInt32]VInt32{
			123: 123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VByte_VByte{190: 0, 28: 37}",
		Target: VMap_VByte_VByte{
			190: 0,
			28:  37,
		},
		SourceLabel: "VMap_VByte_VByte{190: 0, 28: 37}",
		Source: VMap_VByte_VByte{
			190: 0,
			28:  37,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VByte_VByte{190: 0, 28: 37}",
		Target: VMap_VByte_VByte{
			190: 0,
			28:  37,
		},
		SourceLabel: "map[uint16]uint16{190: 0, 28: 37}",
		Source: map[uint16]uint16{
			190: 0,
			28:  37,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VByte_VByte{0: 119, 160: 11, 191: 0}",
		Target: VMap_VByte_VByte{
			0:   119,
			160: 11,
			191: 0,
		},
		SourceLabel: "VMap_VByte_VByte{0: 119, 160: 11, 191: 0}",
		Source: VMap_VByte_VByte{
			0:   119,
			160: 11,
			191: 0,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VByte_VByte{0: 119, 160: 11, 191: 0}",
		Target: VMap_VByte_VByte{
			0:   119,
			160: 11,
			191: 0,
		},
		SourceLabel: "map[uint16]uint16{0: 119, 160: 11, 191: 0}",
		Source: map[uint16]uint16{
			0:   119,
			160: 11,
			191: 0,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VEnumAbc_VEnumAbc{}",
		Target:      VMap_VEnumAbc_VEnumAbc(nil),
		SourceLabel: "VMap_VEnumAbc_VEnumAbc{}",
		Source:      VMap_VEnumAbc_VEnumAbc(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VEnumAbc_VEnumAbc{}",
		Target:      VMap_VEnumAbc_VEnumAbc(nil),
		SourceLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Source:      VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VEnumAbc_VEnumAbc{}",
		Target:      VMap_VEnumAbc_VEnumAbc(nil),
		SourceLabel: "map[VEnumBcd]VEnumBcd{}",
		Source:      map[VEnumBcd]VEnumBcd(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VEnumAbc_VEnumAbc{C: C}",
		Target: VMap_VEnumAbc_VEnumAbc{
			VEnumAbcC: VEnumAbcC,
		},
		SourceLabel: "VMap_VEnumAbc_VEnumAbc{C: C}",
		Source: VMap_VEnumAbc_VEnumAbc{
			VEnumAbcC: VEnumAbcC,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VEnumAbc_VEnumAbc{C: C}",
		Target: VMap_VEnumAbc_VEnumAbc{
			VEnumAbcC: VEnumAbcC,
		},
		SourceLabel: "map[VEnumAbc]VEnumAbc{C: C}",
		Source: map[VEnumAbc]VEnumAbc{
			VEnumAbcC: VEnumAbcC,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Target:      VMap_VEnumBcd_VEnumBcd(nil),
		SourceLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Source:      VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Target:      VMap_VEnumBcd_VEnumBcd(nil),
		SourceLabel: "map[VEnumBcd]VEnumBcd{}",
		Source:      map[VEnumBcd]VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VEnumBcd_VEnumBcd{}",
		Target:      VMap_VEnumBcd_VEnumBcd(nil),
		SourceLabel: "VMap_String_String{}",
		Source:      VMap_String_String(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VEnumBcd_VEnumBcd{D: D}",
		Target: VMap_VEnumBcd_VEnumBcd{
			VEnumBcdD: VEnumBcdD,
		},
		SourceLabel: "VMap_VEnumBcd_VEnumBcd{D: D}",
		Source: VMap_VEnumBcd_VEnumBcd{
			VEnumBcdD: VEnumBcdD,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VEnumBcd_VEnumBcd{D: D}",
		Target: VMap_VEnumBcd_VEnumBcd{
			VEnumBcdD: VEnumBcdD,
		},
		SourceLabel: "VMap_VString_VString{\"D\": \"D\"}",
		Source: VMap_VString_VString{
			"D": "D",
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VStructEmpty_VStructEmpty{}",
		Target:      VMap_VStructEmpty_VStructEmpty(nil),
		SourceLabel: "VMap_VStructEmpty_VStructEmpty{}",
		Source:      VMap_VStructEmpty_VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VStructEmpty_VStructEmpty{}",
		Target:      VMap_VStructEmpty_VStructEmpty(nil),
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Source:      map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VStructEmpty_VStructEmpty{}",
		Target:      VMap_VStructEmpty_VStructEmpty(nil),
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Source:      VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VStructEmpty_VStructEmpty{{}: {}}",
		Target: VMap_VStructEmpty_VStructEmpty{
			{}: {},
		},
		SourceLabel: "VMap_VStructEmpty_VStructEmpty{{}: {}}",
		Source: VMap_VStructEmpty_VStructEmpty{
			{}: {},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VStructEmpty_VStructEmpty{{}: {}}",
		Target: VMap_VStructEmpty_VStructEmpty{
			{}: {},
		},
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{}: {}}",
		Source: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{}: {},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VInt16_VInt16{}",
		Target:      VMap_VInt16_VInt16(nil),
		SourceLabel: "VMap_VInt16_VInt16{}",
		Source:      VMap_VInt16_VInt16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VInt16_VInt16{}",
		Target:      VMap_VInt16_VInt16(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VInt16_VInt16{}",
		Target:      VMap_VInt16_VInt16(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VInt16_VInt16{-123: -123}",
		Target: VMap_VInt16_VInt16{
			-123: -123,
		},
		SourceLabel: "VMap_VInt16_VInt16{-123: -123}",
		Source: VMap_VInt16_VInt16{
			-123: -123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VInt16_VInt16{-123: -123}",
		Target: VMap_VInt16_VInt16{
			-123: -123,
		},
		SourceLabel: "map[VInt32]VInt32{-123: -123}",
		Source: map[VInt32]VInt32{
			-123: -123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VInt16_VInt16{15687: 3845, 692: 5861}",
		Target: VMap_VInt16_VInt16{
			15687: 3845,
			692:   5861,
		},
		SourceLabel: "VMap_VInt16_VInt16{15687: 3845, 692: 5861}",
		Source: VMap_VInt16_VInt16{
			15687: 3845,
			692:   5861,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VInt16_VInt16{15687: 3845, 692: 5861}",
		Target: VMap_VInt16_VInt16{
			15687: 3845,
			692:   5861,
		},
		SourceLabel: "map[uint16]uint16{15687: 3845, 692: 5861}",
		Source: map[uint16]uint16{
			15687: 3845,
			692:   5861,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VInt16_VInt16{-5258: 9837, 0: -5221}",
		Target: VMap_VInt16_VInt16{
			-5258: 9837,
			0:     -5221,
		},
		SourceLabel: "VMap_VInt16_VInt16{-5258: 9837, 0: -5221}",
		Source: VMap_VInt16_VInt16{
			-5258: 9837,
			0:     -5221,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VInt16_VInt16{-5258: 9837, 0: -5221}",
		Target: VMap_VInt16_VInt16{
			-5258: 9837,
			0:     -5221,
		},
		SourceLabel: "map[VInt32]VInt32{-5258: 9837, 0: -5221}",
		Source: map[VInt32]VInt32{
			-5258: 9837,
			0:     -5221,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VInt32_VInt32{}",
		Target:      VMap_VInt32_VInt32(nil),
		SourceLabel: "VMap_VInt32_VInt32{}",
		Source:      VMap_VInt32_VInt32(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VInt32_VInt32{}",
		Target:      VMap_VInt32_VInt32(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VInt32_VInt32{}",
		Target:      VMap_VInt32_VInt32(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VInt32_VInt32{-123: -123}",
		Target: VMap_VInt32_VInt32{
			-123: -123,
		},
		SourceLabel: "VMap_VInt32_VInt32{-123: -123}",
		Source: VMap_VInt32_VInt32{
			-123: -123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VInt32_VInt32{-123: -123}",
		Target: VMap_VInt32_VInt32{
			-123: -123,
		},
		SourceLabel: "map[VInt32]VInt32{-123: -123}",
		Source: map[VInt32]VInt32{
			-123: -123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VInt32_VInt32{0: 946427867, 814099731: -955789572, 910889070: 298810917}",
		Target: VMap_VInt32_VInt32{
			0:         946427867,
			814099731: -955789572,
			910889070: 298810917,
		},
		SourceLabel: "VMap_VInt32_VInt32{0: 946427867, 814099731: -955789572, 910889070: 298810917}",
		Source: VMap_VInt32_VInt32{
			0:         946427867,
			814099731: -955789572,
			910889070: 298810917,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VInt32_VInt32{0: 946427867, 814099731: -955789572, 910889070: 298810917}",
		Target: VMap_VInt32_VInt32{
			0:         946427867,
			814099731: -955789572,
			910889070: 298810917,
		},
		SourceLabel: "map[VInt32]VInt32{0: 946427867, 814099731: -955789572, 910889070: 298810917}",
		Source: map[VInt32]VInt32{
			0:         946427867,
			814099731: -955789572,
			910889070: 298810917,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VInt32_VInt32{-346481670: -528449206, -571009222: 0, 0: 942828024}",
		Target: VMap_VInt32_VInt32{
			-346481670: -528449206,
			-571009222: 0,
			0:          942828024,
		},
		SourceLabel: "VMap_VInt32_VInt32{-346481670: -528449206, -571009222: 0, 0: 942828024}",
		Source: VMap_VInt32_VInt32{
			-346481670: -528449206,
			-571009222: 0,
			0:          942828024,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VInt32_VInt32{-346481670: -528449206, -571009222: 0, 0: 942828024}",
		Target: VMap_VInt32_VInt32{
			-346481670: -528449206,
			-571009222: 0,
			0:          942828024,
		},
		SourceLabel: "map[VInt32]VInt32{-346481670: -528449206, -571009222: 0, 0: 942828024}",
		Source: map[VInt32]VInt32{
			-346481670: -528449206,
			-571009222: 0,
			0:          942828024,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_Float64_Float64{}",
		Target:      VMap_Float64_Float64(nil),
		SourceLabel: "VMap_Float64_Float64{}",
		Source:      VMap_Float64_Float64(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_Float64_Float64{}",
		Target:      VMap_Float64_Float64(nil),
		SourceLabel: "map[uint16]uint16{}",
		Source:      map[uint16]uint16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_Float64_Float64{}",
		Target:      VMap_Float64_Float64(nil),
		SourceLabel: "map[VByte]VByte{}",
		Source:      map[VByte]VByte(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_Float64_Float64{1.23: 1.23}",
		Target: VMap_Float64_Float64{
			1.23: 1.23,
		},
		SourceLabel: "VMap_Float64_Float64{1.23: 1.23}",
		Source: VMap_Float64_Float64{
			1.23: 1.23,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_Float64_Float64{5.836528661428543e+07: 8.542479532760347e+08}",
		Target: VMap_Float64_Float64{
			5.836528661428543e+07: 8.542479532760347e+08,
		},
		SourceLabel: "VMap_Float64_Float64{5.836528661428543e+07: 8.542479532760347e+08}",
		Source: VMap_Float64_Float64{
			5.836528661428543e+07: 8.542479532760347e+08,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_Float64_Float64{-1.3763839582861245e+09: 1.4772868065791667e+09, -6.401015590563765e+06: -1.1526308806418068e+09}",
		Target: VMap_Float64_Float64{
			-1.3763839582861245e+09: 1.4772868065791667e+09,
			-6.401015590563765e+06:  -1.1526308806418068e+09,
		},
		SourceLabel: "VMap_Float64_Float64{-1.3763839582861245e+09: 1.4772868065791667e+09, -6.401015590563765e+06: -1.1526308806418068e+09}",
		Source: VMap_Float64_Float64{
			-1.3763839582861245e+09: 1.4772868065791667e+09,
			-6.401015590563765e+06:  -1.1526308806418068e+09,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructDepth1_All{}",
		Target: VStructDepth1_All{
			F5: vdl.AnyType,
		},
		SourceLabel: "VStructDepth1_All{}",
		Source: VStructDepth1_All{
			F5: vdl.AnyType,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth1_All{}",
		Target: VStructDepth1_All{
			F5: vdl.AnyType,
		},
		SourceLabel: "VStructDepth1_Rand0{}",
		Source:      VStructDepth1_Rand0{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth1_All{}",
		Target: VStructDepth1_All{
			F5: vdl.AnyType,
		},
		SourceLabel: "?VStructDepth1_Rand0{}",
		Source:      &VStructDepth1_Rand0{},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VStructDepth1_All{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}",
		Target: VStructDepth1_All{
			F0: int64(-123),
			F1: true,
			F2: true,
			F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5: vdl.Int64Type,
			F6: 123,
			F7: 123,
			F8: VEnumAbcC,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
			F12: 123,
			F13: 123,
			F14: 123,
			F15: 123,
			F16: 123,
			F17: 123,
			F18: -123,
			F19: -123,
			F20: -123,
			F21: -123,
			F22: -123,
			F23: -123,
			F24: -123,
			F25: -123,
			F26: 1.23,
			F27: 1.23,
			F28: 1.23,
			F29: 1.23,
			F30: &VStructEmpty{},
		},
		SourceLabel: "VStructDepth1_All{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}",
		Source: VStructDepth1_All{
			F0: int64(-123),
			F1: true,
			F2: true,
			F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5: vdl.Int64Type,
			F6: 123,
			F7: 123,
			F8: VEnumAbcC,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
			F12: 123,
			F13: 123,
			F14: 123,
			F15: 123,
			F16: 123,
			F17: 123,
			F18: -123,
			F19: -123,
			F20: -123,
			F21: -123,
			F22: -123,
			F23: -123,
			F24: -123,
			F25: -123,
			F26: 1.23,
			F27: 1.23,
			F28: 1.23,
			F29: 1.23,
			F30: &VStructEmpty{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VStructDepth1_All{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}",
		Target: VStructDepth1_All{
			F0: int64(-123),
			F1: true,
			F2: true,
			F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5: vdl.Int64Type,
			F6: 123,
			F7: 123,
			F8: VEnumAbcC,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
			F12: 123,
			F13: 123,
			F14: 123,
			F15: 123,
			F16: 123,
			F17: 123,
			F18: -123,
			F19: -123,
			F20: -123,
			F21: -123,
			F22: -123,
			F23: -123,
			F24: -123,
			F25: -123,
			F26: 1.23,
			F27: 1.23,
			F28: 1.23,
			F29: 1.23,
			F30: &VStructEmpty{},
		},
		SourceLabel: "?VStructDepth1_All{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}",
		Source: &VStructDepth1_All{
			F0: int64(-123),
			F1: true,
			F2: true,
			F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5: vdl.Int64Type,
			F6: 123,
			F7: 123,
			F8: VEnumAbcC,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
			F12: 123,
			F13: 123,
			F14: 123,
			F15: 123,
			F16: 123,
			F17: 123,
			F18: -123,
			F19: -123,
			F20: -123,
			F21: -123,
			F22: -123,
			F23: -123,
			F24: -123,
			F25: -123,
			F26: 1.23,
			F27: 1.23,
			F28: 1.23,
			F29: 1.23,
			F30: &VStructEmpty{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth1_All{F0: map[VByte]VByte{105: 206, 13: 52}, F2: true, F3: \"m\", F4: \"jklmn\", F7: 252, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王\", Msg: \"fghijklmno\"}, F12: 43773, F13: 59566, F14: 552385561, F15: 4066350924, F16: 809890089465425783, F17: 12503912605015209097, F18: -57, F19: 28, F21: -7099, F22: -109003160, F23: 744896779, F24: 2477876929661157205, F25: -61816698145917948, F27: 1.9869143e+09, F28: 2.451693003444509e+09}",
		Target: VStructDepth1_All{
			F0: map[VByte]VByte{
				105: 206,
				13:  52,
			},
			F2: true,
			F3: "m",
			F4: "jklmn",
			F5: vdl.AnyType,
			F7: 252,
			F11: verror.FromWire(vdl.WireError{
				Id:  "abcdefghijklmnopΔΘΠΣΦ王",
				Msg: "fghijklmno",
			}),
			F12: 43773,
			F13: 59566,
			F14: 552385561,
			F15: 4066350924,
			F16: 809890089465425783,
			F17: 12503912605015209097,
			F18: -57,
			F19: 28,
			F21: -7099,
			F22: -109003160,
			F23: 744896779,
			F24: 2477876929661157205,
			F25: -61816698145917948,
			F27: 1.9869143e+09,
			F28: 2.451693003444509e+09,
		},
		SourceLabel: "VStructDepth1_All{F0: map[VByte]VByte{105: 206, 13: 52}, F2: true, F3: \"m\", F4: \"jklmn\", F7: 252, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王\", Msg: \"fghijklmno\"}, F12: 43773, F13: 59566, F14: 552385561, F15: 4066350924, F16: 809890089465425783, F17: 12503912605015209097, F18: -57, F19: 28, F21: -7099, F22: -109003160, F23: 744896779, F24: 2477876929661157205, F25: -61816698145917948, F27: 1.9869143e+09, F28: 2.451693003444509e+09}",
		Source: VStructDepth1_All{
			F0: map[VByte]VByte{
				105: 206,
				13:  52,
			},
			F2: true,
			F3: "m",
			F4: "jklmn",
			F5: vdl.AnyType,
			F7: 252,
			F11: verror.FromWire(vdl.WireError{
				Id:  "abcdefghijklmnopΔΘΠΣΦ王",
				Msg: "fghijklmno",
			}),
			F12: 43773,
			F13: 59566,
			F14: 552385561,
			F15: 4066350924,
			F16: 809890089465425783,
			F17: 12503912605015209097,
			F18: -57,
			F19: 28,
			F21: -7099,
			F22: -109003160,
			F23: 744896779,
			F24: 2477876929661157205,
			F25: -61816698145917948,
			F27: 1.9869143e+09,
			F28: 2.451693003444509e+09,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth1_All{F0: map[VByte]VByte{105: 206, 13: 52}, F2: true, F3: \"m\", F4: \"jklmn\", F7: 252, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王\", Msg: \"fghijklmno\"}, F12: 43773, F13: 59566, F14: 552385561, F15: 4066350924, F16: 809890089465425783, F17: 12503912605015209097, F18: -57, F19: 28, F21: -7099, F22: -109003160, F23: 744896779, F24: 2477876929661157205, F25: -61816698145917948, F27: 1.9869143e+09, F28: 2.451693003444509e+09}",
		Target: VStructDepth1_All{
			F0: map[VByte]VByte{
				105: 206,
				13:  52,
			},
			F2: true,
			F3: "m",
			F4: "jklmn",
			F5: vdl.AnyType,
			F7: 252,
			F11: verror.FromWire(vdl.WireError{
				Id:  "abcdefghijklmnopΔΘΠΣΦ王",
				Msg: "fghijklmno",
			}),
			F12: 43773,
			F13: 59566,
			F14: 552385561,
			F15: 4066350924,
			F16: 809890089465425783,
			F17: 12503912605015209097,
			F18: -57,
			F19: 28,
			F21: -7099,
			F22: -109003160,
			F23: 744896779,
			F24: 2477876929661157205,
			F25: -61816698145917948,
			F27: 1.9869143e+09,
			F28: 2.451693003444509e+09,
		},
		SourceLabel: "?VStructDepth1_All{F0: map[VByte]VByte{105: 206, 13: 52}, F2: true, F3: \"m\", F4: \"jklmn\", F7: 252, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王\", Msg: \"fghijklmno\"}, F12: 43773, F13: 59566, F14: 552385561, F15: 4066350924, F16: 809890089465425783, F17: 12503912605015209097, F18: -57, F19: 28, F21: -7099, F22: -109003160, F23: 744896779, F24: 2477876929661157205, F25: -61816698145917948, F27: 1.9869143e+09, F28: 2.451693003444509e+09}",
		Source: &VStructDepth1_All{
			F0: map[VByte]VByte{
				105: 206,
				13:  52,
			},
			F2: true,
			F3: "m",
			F4: "jklmn",
			F5: vdl.AnyType,
			F7: 252,
			F11: verror.FromWire(vdl.WireError{
				Id:  "abcdefghijklmnopΔΘΠΣΦ王",
				Msg: "fghijklmno",
			}),
			F12: 43773,
			F13: 59566,
			F14: 552385561,
			F15: 4066350924,
			F16: 809890089465425783,
			F17: 12503912605015209097,
			F18: -57,
			F19: 28,
			F21: -7099,
			F22: -109003160,
			F23: 744896779,
			F24: 2477876929661157205,
			F25: -61816698145917948,
			F27: 1.9869143e+09,
			F28: 2.451693003444509e+09,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth1_All{F0: set[int64]{-7706878767009313, 1475996685678812416}, F3: \"ΔΘΠΣΦ\", F4: \"defghijklmnopΔΘΠΣ\", F5: typeobject(VUnionDepth3_All), F6: 5, F7: 216, F11: {}, F12: 43946, F13: 38942, F14: 3183987309, F16: 5096238814079584737, F17: 15186021141646047899, F18: -57, F20: 4240, F22: 25935447, F23: 439142236, F24: -839402267662222009, F25: -2318343178433367627, F28: 1.4009696113901052e+08, F29: 7.60205125999782e+07, F30: {}}",
		Target: VStructDepth1_All{
			F0: map[int64]struct{}{
				-7706878767009313:   struct{}{},
				1475996685678812416: struct{}{},
			},
			F3:  "ΔΘΠΣΦ",
			F4:  "defghijklmnopΔΘΠΣ",
			F5:  vdl.TypeOf((*VUnionDepth3_All)(nil)),
			F6:  5,
			F7:  216,
			F11: verror.FromWire(vdl.WireError{}),
			F12: 43946,
			F13: 38942,
			F14: 3183987309,
			F16: 5096238814079584737,
			F17: 15186021141646047899,
			F18: -57,
			F20: 4240,
			F22: 25935447,
			F23: 439142236,
			F24: -839402267662222009,
			F25: -2318343178433367627,
			F28: 1.4009696113901052e+08,
			F29: 7.60205125999782e+07,
			F30: &VStructEmpty{},
		},
		SourceLabel: "VStructDepth1_All{F0: set[int64]{-7706878767009313, 1475996685678812416}, F3: \"ΔΘΠΣΦ\", F4: \"defghijklmnopΔΘΠΣ\", F5: typeobject(VUnionDepth3_All), F6: 5, F7: 216, F11: {}, F12: 43946, F13: 38942, F14: 3183987309, F16: 5096238814079584737, F17: 15186021141646047899, F18: -57, F20: 4240, F22: 25935447, F23: 439142236, F24: -839402267662222009, F25: -2318343178433367627, F28: 1.4009696113901052e+08, F29: 7.60205125999782e+07, F30: {}}",
		Source: VStructDepth1_All{
			F0: map[int64]struct{}{
				-7706878767009313:   struct{}{},
				1475996685678812416: struct{}{},
			},
			F3:  "ΔΘΠΣΦ",
			F4:  "defghijklmnopΔΘΠΣ",
			F5:  vdl.TypeOf((*VUnionDepth3_All)(nil)),
			F6:  5,
			F7:  216,
			F11: verror.FromWire(vdl.WireError{}),
			F12: 43946,
			F13: 38942,
			F14: 3183987309,
			F16: 5096238814079584737,
			F17: 15186021141646047899,
			F18: -57,
			F20: 4240,
			F22: 25935447,
			F23: 439142236,
			F24: -839402267662222009,
			F25: -2318343178433367627,
			F28: 1.4009696113901052e+08,
			F29: 7.60205125999782e+07,
			F30: &VStructEmpty{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth1_All{F0: set[int64]{-7706878767009313, 1475996685678812416}, F3: \"ΔΘΠΣΦ\", F4: \"defghijklmnopΔΘΠΣ\", F5: typeobject(VUnionDepth3_All), F6: 5, F7: 216, F11: {}, F12: 43946, F13: 38942, F14: 3183987309, F16: 5096238814079584737, F17: 15186021141646047899, F18: -57, F20: 4240, F22: 25935447, F23: 439142236, F24: -839402267662222009, F25: -2318343178433367627, F28: 1.4009696113901052e+08, F29: 7.60205125999782e+07, F30: {}}",
		Target: VStructDepth1_All{
			F0: map[int64]struct{}{
				-7706878767009313:   struct{}{},
				1475996685678812416: struct{}{},
			},
			F3:  "ΔΘΠΣΦ",
			F4:  "defghijklmnopΔΘΠΣ",
			F5:  vdl.TypeOf((*VUnionDepth3_All)(nil)),
			F6:  5,
			F7:  216,
			F11: verror.FromWire(vdl.WireError{}),
			F12: 43946,
			F13: 38942,
			F14: 3183987309,
			F16: 5096238814079584737,
			F17: 15186021141646047899,
			F18: -57,
			F20: 4240,
			F22: 25935447,
			F23: 439142236,
			F24: -839402267662222009,
			F25: -2318343178433367627,
			F28: 1.4009696113901052e+08,
			F29: 7.60205125999782e+07,
			F30: &VStructEmpty{},
		},
		SourceLabel: "?VStructDepth1_All{F0: set[int64]{-7706878767009313, 1475996685678812416}, F3: \"ΔΘΠΣΦ\", F4: \"defghijklmnopΔΘΠΣ\", F5: typeobject(VUnionDepth3_All), F6: 5, F7: 216, F11: {}, F12: 43946, F13: 38942, F14: 3183987309, F16: 5096238814079584737, F17: 15186021141646047899, F18: -57, F20: 4240, F22: 25935447, F23: 439142236, F24: -839402267662222009, F25: -2318343178433367627, F28: 1.4009696113901052e+08, F29: 7.60205125999782e+07, F30: {}}",
		Source: &VStructDepth1_All{
			F0: map[int64]struct{}{
				-7706878767009313:   struct{}{},
				1475996685678812416: struct{}{},
			},
			F3:  "ΔΘΠΣΦ",
			F4:  "defghijklmnopΔΘΠΣ",
			F5:  vdl.TypeOf((*VUnionDepth3_All)(nil)),
			F6:  5,
			F7:  216,
			F11: verror.FromWire(vdl.WireError{}),
			F12: 43946,
			F13: 38942,
			F14: 3183987309,
			F16: 5096238814079584737,
			F17: 15186021141646047899,
			F18: -57,
			F20: 4240,
			F22: 25935447,
			F23: 439142236,
			F24: -839402267662222009,
			F25: -2318343178433367627,
			F28: 1.4009696113901052e+08,
			F29: 7.60205125999782e+07,
			F30: &VStructEmpty{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructDepth1_Rand0{}",
		Target:      VStructDepth1_Rand0{},
		SourceLabel: "VStructDepth1_Rand0{}",
		Source:      VStructDepth1_Rand0{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth1_Rand0{}",
		Target:      VStructDepth1_Rand0{},
		SourceLabel: "?VStructDepth1_Rand0{}",
		Source:      &VStructDepth1_Rand0{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth1_Rand0{}",
		Target:      VStructDepth1_Rand0{},
		SourceLabel: "?VStructEmpty{}",
		Source:      &VStructEmpty{},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VStructDepth1_Rand0{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}",
		Target: VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		},
		SourceLabel: "VStructDepth1_Rand0{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}",
		Source: VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VStructDepth1_Rand0{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}",
		Target: VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		},
		SourceLabel: "?VStructDepth1_All{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}",
		Source: &VStructDepth1_All{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5:  vdl.AnyType,
			F15: 123,
			F21: -123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth1_Rand0{F4: \"efghijklmnopΔΘΠΣ\", F15: 1077353282, F21: -8043}",
		Target: VStructDepth1_Rand0{
			F4:  "efghijklmnopΔΘΠΣ",
			F15: 1077353282,
			F21: -8043,
		},
		SourceLabel: "VStructDepth1_Rand0{F4: \"efghijklmnopΔΘΠΣ\", F15: 1077353282, F21: -8043}",
		Source: VStructDepth1_Rand0{
			F4:  "efghijklmnopΔΘΠΣ",
			F15: 1077353282,
			F21: -8043,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth1_Rand0{F4: \"efghijklmnopΔΘΠΣ\", F15: 1077353282, F21: -8043}",
		Target: VStructDepth1_Rand0{
			F4:  "efghijklmnopΔΘΠΣ",
			F15: 1077353282,
			F21: -8043,
		},
		SourceLabel: "VStructDepth1_All{F4: \"efghijklmnopΔΘΠΣ\", F15: 1077353282, F21: -8043}",
		Source: VStructDepth1_All{
			F4:  "efghijklmnopΔΘΠΣ",
			F5:  vdl.AnyType,
			F15: 1077353282,
			F21: -8043,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth1_Rand0{F4: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\", F15: 1414165488, F21: -7650}",
		Target: VStructDepth1_Rand0{
			F4:  "bcdefghijklmnopΔΘΠΣΦ王普澤世",
			F15: 1414165488,
			F21: -7650,
		},
		SourceLabel: "VStructDepth1_Rand0{F4: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\", F15: 1414165488, F21: -7650}",
		Source: VStructDepth1_Rand0{
			F4:  "bcdefghijklmnopΔΘΠΣΦ王普澤世",
			F15: 1414165488,
			F21: -7650,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth1_Rand0{F4: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\", F15: 1414165488, F21: -7650}",
		Target: VStructDepth1_Rand0{
			F4:  "bcdefghijklmnopΔΘΠΣΦ王普澤世",
			F15: 1414165488,
			F21: -7650,
		},
		SourceLabel: "VStructDepth1_All{F4: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\", F15: 1414165488, F21: -7650}",
		Source: VStructDepth1_All{
			F4:  "bcdefghijklmnopΔΘΠΣΦ王普澤世",
			F5:  vdl.AnyType,
			F15: 1414165488,
			F21: -7650,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructDepth1_Rand1{}",
		Target:      VStructDepth1_Rand1{},
		SourceLabel: "VStructDepth1_Rand1{}",
		Source:      VStructDepth1_Rand1{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth1_Rand1{}",
		Target:      VStructDepth1_Rand1{},
		SourceLabel: "?VStructEmpty{}",
		Source:      &VStructEmpty{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth1_Rand1{}",
		Target:      VStructDepth1_Rand1{},
		SourceLabel: "?VStructDepth1_Rand1{}",
		Source:      &VStructDepth1_Rand1{},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VStructDepth1_Rand1{F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}",
		Target: VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		},
		SourceLabel: "VStructDepth1_Rand1{F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}",
		Source: VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VStructDepth1_Rand1{F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}",
		Target: VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		},
		SourceLabel: "?VStructDepth1_All{F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}",
		Source: &VStructDepth1_All{
			F0:  int64(-123),
			F1:  true,
			F5:  vdl.AnyType,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth1_Rand1{F0: VArray1_VStructEmpty{}, F7: 2, F26: -5.902806e+07}",
		Target: VStructDepth1_Rand1{
			F0:  VArray1_VStructEmpty{},
			F7:  2,
			F26: -5.902806e+07,
		},
		SourceLabel: "VStructDepth1_Rand1{F0: VArray1_VStructEmpty{}, F7: 2, F26: -5.902806e+07}",
		Source: VStructDepth1_Rand1{
			F0:  VArray1_VStructEmpty{},
			F7:  2,
			F26: -5.902806e+07,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth1_Rand1{F0: VArray1_VStructEmpty{}, F7: 2, F26: -5.902806e+07}",
		Target: VStructDepth1_Rand1{
			F0:  VArray1_VStructEmpty{},
			F7:  2,
			F26: -5.902806e+07,
		},
		SourceLabel: "VStructDepth1_All{F0: VArray1_VStructEmpty{}, F7: 2, F26: -5.902806e+07}",
		Source: VStructDepth1_All{
			F0:  VArray1_VStructEmpty{},
			F5:  vdl.AnyType,
			F7:  2,
			F26: -5.902806e+07,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth1_Rand1{F0: VArray3_OptVStructDepth2_Rand0{nil, {F9: {F0: true, F7: 251, F26: -5.558691e+08}, F10: {F16: 10583390271970772726}, F11: {F9: C}}, {F0: {set[byte]{243, 72}, nil, VFloat32(8.914599e+07)}, F9: {F0: VUnionDepth2_All{F2: {}}, F7: 31, F9: D, F26: 1.1784538e+09}, F10: {F28: 7.057399360312642e+07}}}, F1: true, F7: 108, F26: 1.2211224e+09}",
		Target: VStructDepth1_Rand1{
			F0: VArray3_OptVStructDepth2_Rand0{
				nil,
				{
					F9: VStructDepth1_Rand1{
						F0:  true,
						F7:  251,
						F26: -5.558691e+08,
					},
					F10: VUnionDepth1_Rand0F16{10583390271970772726},
					F11: VUnionDepth1_Rand1F9{VEnumBcdC},
				},
				{
					F0: VArray3_Any{
						map[byte]struct{}{
							243: struct{}{},
							72:  struct{}{},
						},
						nil,
						VFloat32(8.914599e+07),
					},
					F9: VStructDepth1_Rand1{
						F0:  VUnionDepth2_All(VUnionDepth2_AllF2{}),
						F7:  31,
						F9:  VEnumBcdD,
						F26: 1.1784538e+09,
					},
					F10: VUnionDepth1_Rand0F28{7.057399360312642e+07},
					F11: VUnionDepth1_Rand1F6{},
				},
			},
			F1:  true,
			F7:  108,
			F26: 1.2211224e+09,
		},
		SourceLabel: "VStructDepth1_Rand1{F0: VArray3_OptVStructDepth2_Rand0{nil, {F9: {F0: true, F7: 251, F26: -5.558691e+08}, F10: {F16: 10583390271970772726}, F11: {F9: C}}, {F0: {set[byte]{243, 72}, nil, VFloat32(8.914599e+07)}, F9: {F0: VUnionDepth2_All{F2: {}}, F7: 31, F9: D, F26: 1.1784538e+09}, F10: {F28: 7.057399360312642e+07}}}, F1: true, F7: 108, F26: 1.2211224e+09}",
		Source: VStructDepth1_Rand1{
			F0: VArray3_OptVStructDepth2_Rand0{
				nil,
				{
					F9: VStructDepth1_Rand1{
						F0:  true,
						F7:  251,
						F26: -5.558691e+08,
					},
					F10: VUnionDepth1_Rand0F16{10583390271970772726},
					F11: VUnionDepth1_Rand1F9{VEnumBcdC},
				},
				{
					F0: VArray3_Any{
						map[byte]struct{}{
							243: struct{}{},
							72:  struct{}{},
						},
						nil,
						VFloat32(8.914599e+07),
					},
					F9: VStructDepth1_Rand1{
						F0:  VUnionDepth2_All(VUnionDepth2_AllF2{}),
						F7:  31,
						F9:  VEnumBcdD,
						F26: 1.1784538e+09,
					},
					F10: VUnionDepth1_Rand0F28{7.057399360312642e+07},
					F11: VUnionDepth1_Rand1F6{},
				},
			},
			F1:  true,
			F7:  108,
			F26: 1.2211224e+09,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth1_Rand1{F0: VArray3_OptVStructDepth2_Rand0{nil, {F9: {F0: true, F7: 251, F26: -5.558691e+08}, F10: {F16: 10583390271970772726}, F11: {F9: C}}, {F0: {set[byte]{243, 72}, nil, VFloat32(8.914599e+07)}, F9: {F0: VUnionDepth2_All{F2: {}}, F7: 31, F9: D, F26: 1.1784538e+09}, F10: {F28: 7.057399360312642e+07}}}, F1: true, F7: 108, F26: 1.2211224e+09}",
		Target: VStructDepth1_Rand1{
			F0: VArray3_OptVStructDepth2_Rand0{
				nil,
				{
					F9: VStructDepth1_Rand1{
						F0:  true,
						F7:  251,
						F26: -5.558691e+08,
					},
					F10: VUnionDepth1_Rand0F16{10583390271970772726},
					F11: VUnionDepth1_Rand1F9{VEnumBcdC},
				},
				{
					F0: VArray3_Any{
						map[byte]struct{}{
							243: struct{}{},
							72:  struct{}{},
						},
						nil,
						VFloat32(8.914599e+07),
					},
					F9: VStructDepth1_Rand1{
						F0:  VUnionDepth2_All(VUnionDepth2_AllF2{}),
						F7:  31,
						F9:  VEnumBcdD,
						F26: 1.1784538e+09,
					},
					F10: VUnionDepth1_Rand0F28{7.057399360312642e+07},
					F11: VUnionDepth1_Rand1F6{},
				},
			},
			F1:  true,
			F7:  108,
			F26: 1.2211224e+09,
		},
		SourceLabel: "VStructDepth1_All{F0: VArray3_OptVStructDepth2_Rand0{nil, {F9: {F0: true, F7: 251, F26: -5.558691e+08}, F10: {F16: 10583390271970772726}, F11: {F9: C}}, {F0: {set[byte]{243, 72}, nil, VFloat32(8.914599e+07)}, F9: {F0: VUnionDepth2_All{F2: {}}, F7: 31, F9: D, F26: 1.1784538e+09}, F10: {F28: 7.057399360312642e+07}}}, F1: true, F7: 108, F26: 1.2211224e+09}",
		Source: VStructDepth1_All{
			F0: VArray3_OptVStructDepth2_Rand0{
				nil,
				{
					F9: VStructDepth1_Rand1{
						F0:  true,
						F7:  251,
						F26: -5.558691e+08,
					},
					F10: VUnionDepth1_Rand0F16{10583390271970772726},
					F11: VUnionDepth1_Rand1F9{VEnumBcdC},
				},
				{
					F0: VArray3_Any{
						map[byte]struct{}{
							243: struct{}{},
							72:  struct{}{},
						},
						nil,
						VFloat32(8.914599e+07),
					},
					F9: VStructDepth1_Rand1{
						F0:  VUnionDepth2_All(VUnionDepth2_AllF2{}),
						F7:  31,
						F9:  VEnumBcdD,
						F26: 1.1784538e+09,
					},
					F10: VUnionDepth1_Rand0F28{7.057399360312642e+07},
					F11: VUnionDepth1_Rand1F6{},
				},
			},
			F1:  true,
			F5:  vdl.AnyType,
			F7:  108,
			F26: 1.2211224e+09,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUnionDepth1_All{F0: nil}",
		Target:      VUnionDepth1_All(VUnionDepth1_AllF0{}),
		SourceLabel: "VUnionDepth1_All{F0: nil}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF0{}),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUnionDepth1_All{F30: {}}",
		Target:      VUnionDepth1_All(VUnionDepth1_AllF30{&VStructEmpty{}}),
		SourceLabel: "VUnionDepth1_All{F30: {}}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF30{&VStructEmpty{}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth1_All{F12: 65126}",
		Target:      VUnionDepth1_All(VUnionDepth1_AllF12{65126}),
		SourceLabel: "VUnionDepth1_All{F12: 65126}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF12{65126}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth1_All{F12: 65126}",
		Target:      VUnionDepth1_All(VUnionDepth1_AllF12{65126}),
		SourceLabel: "VUnionDepth1_Rand0{F12: 65126}",
		Source:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F12{65126}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth1_All{F7: 116}",
		Target:      VUnionDepth1_All(VUnionDepth1_AllF7{116}),
		SourceLabel: "VUnionDepth1_All{F7: 116}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF7{116}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUnionDepth1_Rand0{F8: A}",
		Target:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F8{}),
		SourceLabel: "VUnionDepth1_Rand0{F8: A}",
		Source:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F8{}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth1_Rand0{F8: A}",
		Target:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F8{}),
		SourceLabel: "VUnionDepth1_All{F8: A}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF8{}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth1_Rand0{F8: A}",
		Target:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F8{}),
		SourceLabel: "VUnionDepth1_Rand1{F8: A}",
		Source:      VUnionDepth1_Rand1(VUnionDepth1_Rand1F8{}),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUnionDepth1_Rand0{F28: 1.23}",
		Target:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F28{1.23}),
		SourceLabel: "VUnionDepth1_Rand0{F28: 1.23}",
		Source:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F28{1.23}),
	},
	{
		Label:       "Full",
		TargetLabel: "VUnionDepth1_Rand0{F28: 1.23}",
		Target:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F28{1.23}),
		SourceLabel: "VUnionDepth1_All{F28: 1.23}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF28{1.23}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth1_Rand0{F12: 39125}",
		Target:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F12{39125}),
		SourceLabel: "VUnionDepth1_Rand0{F12: 39125}",
		Source:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F12{39125}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth1_Rand0{F12: 39125}",
		Target:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F12{39125}),
		SourceLabel: "VUnionDepth1_All{F12: 39125}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF12{39125}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth1_Rand0{F16: 9674491730224451075}",
		Target:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F16{9674491730224451075}),
		SourceLabel: "VUnionDepth1_Rand0{F16: 9674491730224451075}",
		Source:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F16{9674491730224451075}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth1_Rand0{F16: 9674491730224451075}",
		Target:      VUnionDepth1_Rand0(VUnionDepth1_Rand0F16{9674491730224451075}),
		SourceLabel: "VUnionDepth1_All{F16: 9674491730224451075}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF16{9674491730224451075}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUnionDepth1_Rand1{F6: 0}",
		Target:      VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
		SourceLabel: "VUnionDepth1_Rand1{F6: 0}",
		Source:      VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth1_Rand1{F6: 0}",
		Target:      VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
		SourceLabel: "VUnionDepth1_All{F6: 0}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF6{}),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUnionDepth1_Rand1{F20: -123}",
		Target:      VUnionDepth1_Rand1(VUnionDepth1_Rand1F20{-123}),
		SourceLabel: "VUnionDepth1_Rand1{F20: -123}",
		Source:      VUnionDepth1_Rand1(VUnionDepth1_Rand1F20{-123}),
	},
	{
		Label:       "Full",
		TargetLabel: "VUnionDepth1_Rand1{F20: -123}",
		Target:      VUnionDepth1_Rand1(VUnionDepth1_Rand1F20{-123}),
		SourceLabel: "VUnionDepth1_All{F20: -123}",
		Source:      VUnionDepth1_All(VUnionDepth1_AllF20{-123}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth1_Rand1{F11: {Id: \"kl\", RetryCode: RetryConnection, Msg: \"lmnopΔΘΠΣΦ王普澤世\"}}",
		Target: VUnionDepth1_Rand1(VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
			Id:        "kl",
			RetryCode: vdl.WireRetryCodeRetryConnection,
			Msg:       "lmnopΔΘΠΣΦ王普澤世",
		})}),
		SourceLabel: "VUnionDepth1_Rand1{F11: {Id: \"kl\", RetryCode: RetryConnection, Msg: \"lmnopΔΘΠΣΦ王普澤世\"}}",
		Source: VUnionDepth1_Rand1(VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
			Id:        "kl",
			RetryCode: vdl.WireRetryCodeRetryConnection,
			Msg:       "lmnopΔΘΠΣΦ王普澤世",
		})}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth1_Rand1{F11: {Id: \"kl\", RetryCode: RetryConnection, Msg: \"lmnopΔΘΠΣΦ王普澤世\"}}",
		Target: VUnionDepth1_Rand1(VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
			Id:        "kl",
			RetryCode: vdl.WireRetryCodeRetryConnection,
			Msg:       "lmnopΔΘΠΣΦ王普澤世",
		})}),
		SourceLabel: "VUnionDepth1_All{F11: {Id: \"kl\", RetryCode: RetryConnection, Msg: \"lmnopΔΘΠΣΦ王普澤世\"}}",
		Source: VUnionDepth1_All(VUnionDepth1_AllF11{verror.FromWire(vdl.WireError{
			Id:        "kl",
			RetryCode: vdl.WireRetryCodeRetryConnection,
			Msg:       "lmnopΔΘΠΣΦ王普澤世",
		})}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth1_Rand1{F11: {Id: \"cdefghi\", Msg: \"ghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VUnionDepth1_Rand1(VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
			Id:  "cdefghi",
			Msg: "ghijklmnopΔΘΠΣΦ王普澤世界",
		})}),
		SourceLabel: "VUnionDepth1_Rand1{F11: {Id: \"cdefghi\", Msg: \"ghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VUnionDepth1_Rand1(VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
			Id:  "cdefghi",
			Msg: "ghijklmnopΔΘΠΣΦ王普澤世界",
		})}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth1_Rand1{F11: {Id: \"cdefghi\", Msg: \"ghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VUnionDepth1_Rand1(VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
			Id:  "cdefghi",
			Msg: "ghijklmnopΔΘΠΣΦ王普澤世界",
		})}),
		SourceLabel: "VUnionDepth1_All{F11: {Id: \"cdefghi\", Msg: \"ghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VUnionDepth1_All(VUnionDepth1_AllF11{verror.FromWire(vdl.WireError{
			Id:  "cdefghi",
			Msg: "ghijklmnopΔΘΠΣΦ王普澤世界",
		})}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "?VStructDepth1_All(nil)",
		Target:      (*VStructDepth1_All)(nil),
		SourceLabel: "?VStructDepth1_All(nil)",
		Source:      (*VStructDepth1_All)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructDepth1_All(nil)",
		Target:      (*VStructDepth1_All)(nil),
		SourceLabel: "?VStructDepth1_Rand0(nil)",
		Source:      (*VStructDepth1_Rand0)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructDepth1_All(nil)",
		Target:      (*VStructDepth1_All)(nil),
		SourceLabel: "?VStructEmpty(nil)",
		Source:      (*VStructEmpty)(nil),
	},
	{
		Label:       "NilAny",
		TargetLabel: "?VStructDepth1_All(nil)",
		Target:      (*VStructDepth1_All)(nil),
		SourceLabel: "any(nil)",
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "?VStructDepth1_All{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}",
		Target: &VStructDepth1_All{
			F0: int64(-123),
			F1: true,
			F2: true,
			F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5: vdl.Int64Type,
			F6: 123,
			F7: 123,
			F8: VEnumAbcC,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
			F12: 123,
			F13: 123,
			F14: 123,
			F15: 123,
			F16: 123,
			F17: 123,
			F18: -123,
			F19: -123,
			F20: -123,
			F21: -123,
			F22: -123,
			F23: -123,
			F24: -123,
			F25: -123,
			F26: 1.23,
			F27: 1.23,
			F28: 1.23,
			F29: 1.23,
			F30: &VStructEmpty{},
		},
		SourceLabel: "?VStructDepth1_All{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}",
		Source: &VStructDepth1_All{
			F0: int64(-123),
			F1: true,
			F2: true,
			F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5: vdl.Int64Type,
			F6: 123,
			F7: 123,
			F8: VEnumAbcC,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
			F12: 123,
			F13: 123,
			F14: 123,
			F15: 123,
			F16: 123,
			F17: 123,
			F18: -123,
			F19: -123,
			F20: -123,
			F21: -123,
			F22: -123,
			F23: -123,
			F24: -123,
			F25: -123,
			F26: 1.23,
			F27: 1.23,
			F28: 1.23,
			F29: 1.23,
			F30: &VStructEmpty{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "?VStructDepth1_All{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}",
		Target: &VStructDepth1_All{
			F0: int64(-123),
			F1: true,
			F2: true,
			F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5: vdl.Int64Type,
			F6: 123,
			F7: 123,
			F8: VEnumAbcC,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
			F12: 123,
			F13: 123,
			F14: 123,
			F15: 123,
			F16: 123,
			F17: 123,
			F18: -123,
			F19: -123,
			F20: -123,
			F21: -123,
			F22: -123,
			F23: -123,
			F24: -123,
			F25: -123,
			F26: 1.23,
			F27: 1.23,
			F28: 1.23,
			F29: 1.23,
			F30: &VStructEmpty{},
		},
		SourceLabel: "VStructDepth1_All{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}",
		Source: VStructDepth1_All{
			F0: int64(-123),
			F1: true,
			F2: true,
			F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5: vdl.Int64Type,
			F6: 123,
			F7: 123,
			F8: VEnumAbcC,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				RetryCode: vdl.WireRetryCodeRetryBackoff,
				Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			}),
			F12: 123,
			F13: 123,
			F14: 123,
			F15: 123,
			F16: 123,
			F17: 123,
			F18: -123,
			F19: -123,
			F20: -123,
			F21: -123,
			F22: -123,
			F23: -123,
			F24: -123,
			F25: -123,
			F26: 1.23,
			F27: 1.23,
			F28: 1.23,
			F29: 1.23,
			F30: &VStructEmpty{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth1_All{F0: ?VStructDepth3_Rand0{F1: {{}}, F5: {{F12: 2061}, {F28: 2.0780525009739957e+09}}, F8: {F0: {set[VArray1_VStructDepth1_Rand0]{{}}, float32(-8.119746e+07), VList_VUnionDepth2_All{{F13: {F7: 48, F26: -1.25231816e+08}}, {F1: {{}, {}, {}}}}}, F9: {F0: set[VStructEmpty]{{}}, F9: C, F26: 9.0644224e+08}, F10: {F28: -4.02086314783479e+08}, F11: {F11: {}}}}, F2: true, F5: typeobject(VStructDepth3_Rand1), F6: 129, F7: 191, F9: D, F11: {Id: \"fghijklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryConnection, Msg: \"defghijklmnopΔΘΠΣ\"}, F13: 48403, F14: 3913260502, F15: 705746368, F17: 17898695929006030954, F18: -31, F19: 60, F20: 7668, F21: 6622, F22: 653543082, F23: -969888584, F24: -791746282283847192, F25: 3957405280026048584, F27: 1.2754492e+08, F28: -1.8133996485452944e+08, F29: 5.817727906339282e+08, F30: {}}",
		Target: &VStructDepth1_All{
			F0: &VStructDepth3_Rand0{
				F1: VArray1_OptVStructDepth1_Rand0{
					{},
				},
				F5: VSet_VUnionDepth1_Rand0{
					VUnionDepth1_Rand0F12{2061}:                   struct{}{},
					VUnionDepth1_Rand0F28{2.0780525009739957e+09}: struct{}{},
				},
				F8: VStructDepth2_Rand0{
					F0: VArray3_Any{
						map[VArray1_VStructDepth1_Rand0]struct{}{
							{}: struct{}{},
						},
						float32(-8.119746e+07),
						VList_VUnionDepth2_All{
							VUnionDepth2_AllF13{&VStructDepth1_Rand1{
								F7:  48,
								F26: -1.25231816e+08,
							}},
							VUnionDepth2_AllF1{VArray3_OptVStructEmpty{
								{},
								{},
								{},
							}},
						},
					},
					F9: VStructDepth1_Rand1{
						F0: map[VStructEmpty]struct{}{
							{}: struct{}{},
						},
						F9:  VEnumBcdC,
						F26: 9.0644224e+08,
					},
					F10: VUnionDepth1_Rand0F28{-4.02086314783479e+08},
					F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
				},
			},
			F2: true,
			F5: vdl.TypeOf((*VStructDepth3_Rand1)(nil)).Elem(),
			F6: 129,
			F7: 191,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "fghijklmnopΔΘΠΣΦ王普澤",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "defghijklmnopΔΘΠΣ",
			}),
			F13: 48403,
			F14: 3913260502,
			F15: 705746368,
			F17: 17898695929006030954,
			F18: -31,
			F19: 60,
			F20: 7668,
			F21: 6622,
			F22: 653543082,
			F23: -969888584,
			F24: -791746282283847192,
			F25: 3957405280026048584,
			F27: 1.2754492e+08,
			F28: -1.8133996485452944e+08,
			F29: 5.817727906339282e+08,
			F30: &VStructEmpty{},
		},
		SourceLabel: "?VStructDepth1_All{F0: ?VStructDepth3_Rand0{F1: {{}}, F5: {{F12: 2061}, {F28: 2.0780525009739957e+09}}, F8: {F0: {set[VArray1_VStructDepth1_Rand0]{{}}, float32(-8.119746e+07), VList_VUnionDepth2_All{{F13: {F7: 48, F26: -1.25231816e+08}}, {F1: {{}, {}, {}}}}}, F9: {F0: set[VStructEmpty]{{}}, F9: C, F26: 9.0644224e+08}, F10: {F28: -4.02086314783479e+08}, F11: {F11: {}}}}, F2: true, F5: typeobject(VStructDepth3_Rand1), F6: 129, F7: 191, F9: D, F11: {Id: \"fghijklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryConnection, Msg: \"defghijklmnopΔΘΠΣ\"}, F13: 48403, F14: 3913260502, F15: 705746368, F17: 17898695929006030954, F18: -31, F19: 60, F20: 7668, F21: 6622, F22: 653543082, F23: -969888584, F24: -791746282283847192, F25: 3957405280026048584, F27: 1.2754492e+08, F28: -1.8133996485452944e+08, F29: 5.817727906339282e+08, F30: {}}",
		Source: &VStructDepth1_All{
			F0: &VStructDepth3_Rand0{
				F1: VArray1_OptVStructDepth1_Rand0{
					{},
				},
				F5: VSet_VUnionDepth1_Rand0{
					VUnionDepth1_Rand0F12{2061}:                   struct{}{},
					VUnionDepth1_Rand0F28{2.0780525009739957e+09}: struct{}{},
				},
				F8: VStructDepth2_Rand0{
					F0: VArray3_Any{
						map[VArray1_VStructDepth1_Rand0]struct{}{
							{}: struct{}{},
						},
						float32(-8.119746e+07),
						VList_VUnionDepth2_All{
							VUnionDepth2_AllF13{&VStructDepth1_Rand1{
								F7:  48,
								F26: -1.25231816e+08,
							}},
							VUnionDepth2_AllF1{VArray3_OptVStructEmpty{
								{},
								{},
								{},
							}},
						},
					},
					F9: VStructDepth1_Rand1{
						F0: map[VStructEmpty]struct{}{
							{}: struct{}{},
						},
						F9:  VEnumBcdC,
						F26: 9.0644224e+08,
					},
					F10: VUnionDepth1_Rand0F28{-4.02086314783479e+08},
					F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
				},
			},
			F2: true,
			F5: vdl.TypeOf((*VStructDepth3_Rand1)(nil)).Elem(),
			F6: 129,
			F7: 191,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "fghijklmnopΔΘΠΣΦ王普澤",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "defghijklmnopΔΘΠΣ",
			}),
			F13: 48403,
			F14: 3913260502,
			F15: 705746368,
			F17: 17898695929006030954,
			F18: -31,
			F19: 60,
			F20: 7668,
			F21: 6622,
			F22: 653543082,
			F23: -969888584,
			F24: -791746282283847192,
			F25: 3957405280026048584,
			F27: 1.2754492e+08,
			F28: -1.8133996485452944e+08,
			F29: 5.817727906339282e+08,
			F30: &VStructEmpty{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth1_All{F0: ?VStructDepth3_Rand0{F1: {{}}, F5: {{F12: 2061}, {F28: 2.0780525009739957e+09}}, F8: {F0: {set[VArray1_VStructDepth1_Rand0]{{}}, float32(-8.119746e+07), VList_VUnionDepth2_All{{F13: {F7: 48, F26: -1.25231816e+08}}, {F1: {{}, {}, {}}}}}, F9: {F0: set[VStructEmpty]{{}}, F9: C, F26: 9.0644224e+08}, F10: {F28: -4.02086314783479e+08}, F11: {F11: {}}}}, F2: true, F5: typeobject(VStructDepth3_Rand1), F6: 129, F7: 191, F9: D, F11: {Id: \"fghijklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryConnection, Msg: \"defghijklmnopΔΘΠΣ\"}, F13: 48403, F14: 3913260502, F15: 705746368, F17: 17898695929006030954, F18: -31, F19: 60, F20: 7668, F21: 6622, F22: 653543082, F23: -969888584, F24: -791746282283847192, F25: 3957405280026048584, F27: 1.2754492e+08, F28: -1.8133996485452944e+08, F29: 5.817727906339282e+08, F30: {}}",
		Target: &VStructDepth1_All{
			F0: &VStructDepth3_Rand0{
				F1: VArray1_OptVStructDepth1_Rand0{
					{},
				},
				F5: VSet_VUnionDepth1_Rand0{
					VUnionDepth1_Rand0F12{2061}:                   struct{}{},
					VUnionDepth1_Rand0F28{2.0780525009739957e+09}: struct{}{},
				},
				F8: VStructDepth2_Rand0{
					F0: VArray3_Any{
						map[VArray1_VStructDepth1_Rand0]struct{}{
							{}: struct{}{},
						},
						float32(-8.119746e+07),
						VList_VUnionDepth2_All{
							VUnionDepth2_AllF13{&VStructDepth1_Rand1{
								F7:  48,
								F26: -1.25231816e+08,
							}},
							VUnionDepth2_AllF1{VArray3_OptVStructEmpty{
								{},
								{},
								{},
							}},
						},
					},
					F9: VStructDepth1_Rand1{
						F0: map[VStructEmpty]struct{}{
							{}: struct{}{},
						},
						F9:  VEnumBcdC,
						F26: 9.0644224e+08,
					},
					F10: VUnionDepth1_Rand0F28{-4.02086314783479e+08},
					F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
				},
			},
			F2: true,
			F5: vdl.TypeOf((*VStructDepth3_Rand1)(nil)).Elem(),
			F6: 129,
			F7: 191,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "fghijklmnopΔΘΠΣΦ王普澤",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "defghijklmnopΔΘΠΣ",
			}),
			F13: 48403,
			F14: 3913260502,
			F15: 705746368,
			F17: 17898695929006030954,
			F18: -31,
			F19: 60,
			F20: 7668,
			F21: 6622,
			F22: 653543082,
			F23: -969888584,
			F24: -791746282283847192,
			F25: 3957405280026048584,
			F27: 1.2754492e+08,
			F28: -1.8133996485452944e+08,
			F29: 5.817727906339282e+08,
			F30: &VStructEmpty{},
		},
		SourceLabel: "VStructDepth1_All{F0: ?VStructDepth3_Rand0{F1: {{}}, F5: {{F12: 2061}, {F28: 2.0780525009739957e+09}}, F8: {F0: {set[VArray1_VStructDepth1_Rand0]{{}}, float32(-8.119746e+07), VList_VUnionDepth2_All{{F13: {F7: 48, F26: -1.25231816e+08}}, {F1: {{}, {}, {}}}}}, F9: {F0: set[VStructEmpty]{{}}, F9: C, F26: 9.0644224e+08}, F10: {F28: -4.02086314783479e+08}, F11: {F11: {}}}}, F2: true, F5: typeobject(VStructDepth3_Rand1), F6: 129, F7: 191, F9: D, F11: {Id: \"fghijklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryConnection, Msg: \"defghijklmnopΔΘΠΣ\"}, F13: 48403, F14: 3913260502, F15: 705746368, F17: 17898695929006030954, F18: -31, F19: 60, F20: 7668, F21: 6622, F22: 653543082, F23: -969888584, F24: -791746282283847192, F25: 3957405280026048584, F27: 1.2754492e+08, F28: -1.8133996485452944e+08, F29: 5.817727906339282e+08, F30: {}}",
		Source: VStructDepth1_All{
			F0: &VStructDepth3_Rand0{
				F1: VArray1_OptVStructDepth1_Rand0{
					{},
				},
				F5: VSet_VUnionDepth1_Rand0{
					VUnionDepth1_Rand0F12{2061}:                   struct{}{},
					VUnionDepth1_Rand0F28{2.0780525009739957e+09}: struct{}{},
				},
				F8: VStructDepth2_Rand0{
					F0: VArray3_Any{
						map[VArray1_VStructDepth1_Rand0]struct{}{
							{}: struct{}{},
						},
						float32(-8.119746e+07),
						VList_VUnionDepth2_All{
							VUnionDepth2_AllF13{&VStructDepth1_Rand1{
								F7:  48,
								F26: -1.25231816e+08,
							}},
							VUnionDepth2_AllF1{VArray3_OptVStructEmpty{
								{},
								{},
								{},
							}},
						},
					},
					F9: VStructDepth1_Rand1{
						F0: map[VStructEmpty]struct{}{
							{}: struct{}{},
						},
						F9:  VEnumBcdC,
						F26: 9.0644224e+08,
					},
					F10: VUnionDepth1_Rand0F28{-4.02086314783479e+08},
					F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
				},
			},
			F2: true,
			F5: vdl.TypeOf((*VStructDepth3_Rand1)(nil)).Elem(),
			F6: 129,
			F7: 191,
			F9: VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{
				Id:        "fghijklmnopΔΘΠΣΦ王普澤",
				RetryCode: vdl.WireRetryCodeRetryConnection,
				Msg:       "defghijklmnopΔΘΠΣ",
			}),
			F13: 48403,
			F14: 3913260502,
			F15: 705746368,
			F17: 17898695929006030954,
			F18: -31,
			F19: 60,
			F20: 7668,
			F21: 6622,
			F22: 653543082,
			F23: -969888584,
			F24: -791746282283847192,
			F25: 3957405280026048584,
			F27: 1.2754492e+08,
			F28: -1.8133996485452944e+08,
			F29: 5.817727906339282e+08,
			F30: &VStructEmpty{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth1_All{F0: set[VEnumAbc]{}, F3: \"mnopΔΘΠΣΦ\", F4: \"ΣΦ王\", F5: typeobject(VArray1_VStructDepth1_Rand0), F6: 61, F7: 136, F8: C, F9: C, F12: 60853, F13: 826, F14: 733432635, F15: 1070903580, F16: 6311866462315254278, F17: 6676822197620610655, F18: 54, F19: 13, F20: -549, F21: -11540, F22: -264652056, F25: -890125684197465000, F26: 4.276271e+08, F27: -8.2610784e+08, F28: 1.0030611097261338e+09, F29: -9.691717872266108e+08, F30: {}}",
		Target: &VStructDepth1_All{
			F0:  map[VEnumAbc]struct{}(nil),
			F3:  "mnopΔΘΠΣΦ",
			F4:  "ΣΦ王",
			F5:  vdl.TypeOf((*VArray1_VStructDepth1_Rand0)(nil)),
			F6:  61,
			F7:  136,
			F8:  VEnumAbcC,
			F9:  VEnumBcdC,
			F12: 60853,
			F13: 826,
			F14: 733432635,
			F15: 1070903580,
			F16: 6311866462315254278,
			F17: 6676822197620610655,
			F18: 54,
			F19: 13,
			F20: -549,
			F21: -11540,
			F22: -264652056,
			F25: -890125684197465000,
			F26: 4.276271e+08,
			F27: -8.2610784e+08,
			F28: 1.0030611097261338e+09,
			F29: -9.691717872266108e+08,
			F30: &VStructEmpty{},
		},
		SourceLabel: "?VStructDepth1_All{F0: set[VEnumAbc]{}, F3: \"mnopΔΘΠΣΦ\", F4: \"ΣΦ王\", F5: typeobject(VArray1_VStructDepth1_Rand0), F6: 61, F7: 136, F8: C, F9: C, F12: 60853, F13: 826, F14: 733432635, F15: 1070903580, F16: 6311866462315254278, F17: 6676822197620610655, F18: 54, F19: 13, F20: -549, F21: -11540, F22: -264652056, F25: -890125684197465000, F26: 4.276271e+08, F27: -8.2610784e+08, F28: 1.0030611097261338e+09, F29: -9.691717872266108e+08, F30: {}}",
		Source: &VStructDepth1_All{
			F0:  map[VEnumAbc]struct{}(nil),
			F3:  "mnopΔΘΠΣΦ",
			F4:  "ΣΦ王",
			F5:  vdl.TypeOf((*VArray1_VStructDepth1_Rand0)(nil)),
			F6:  61,
			F7:  136,
			F8:  VEnumAbcC,
			F9:  VEnumBcdC,
			F12: 60853,
			F13: 826,
			F14: 733432635,
			F15: 1070903580,
			F16: 6311866462315254278,
			F17: 6676822197620610655,
			F18: 54,
			F19: 13,
			F20: -549,
			F21: -11540,
			F22: -264652056,
			F25: -890125684197465000,
			F26: 4.276271e+08,
			F27: -8.2610784e+08,
			F28: 1.0030611097261338e+09,
			F29: -9.691717872266108e+08,
			F30: &VStructEmpty{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth1_All{F0: set[VEnumAbc]{}, F3: \"mnopΔΘΠΣΦ\", F4: \"ΣΦ王\", F5: typeobject(VArray1_VStructDepth1_Rand0), F6: 61, F7: 136, F8: C, F9: C, F12: 60853, F13: 826, F14: 733432635, F15: 1070903580, F16: 6311866462315254278, F17: 6676822197620610655, F18: 54, F19: 13, F20: -549, F21: -11540, F22: -264652056, F25: -890125684197465000, F26: 4.276271e+08, F27: -8.2610784e+08, F28: 1.0030611097261338e+09, F29: -9.691717872266108e+08, F30: {}}",
		Target: &VStructDepth1_All{
			F0:  map[VEnumAbc]struct{}(nil),
			F3:  "mnopΔΘΠΣΦ",
			F4:  "ΣΦ王",
			F5:  vdl.TypeOf((*VArray1_VStructDepth1_Rand0)(nil)),
			F6:  61,
			F7:  136,
			F8:  VEnumAbcC,
			F9:  VEnumBcdC,
			F12: 60853,
			F13: 826,
			F14: 733432635,
			F15: 1070903580,
			F16: 6311866462315254278,
			F17: 6676822197620610655,
			F18: 54,
			F19: 13,
			F20: -549,
			F21: -11540,
			F22: -264652056,
			F25: -890125684197465000,
			F26: 4.276271e+08,
			F27: -8.2610784e+08,
			F28: 1.0030611097261338e+09,
			F29: -9.691717872266108e+08,
			F30: &VStructEmpty{},
		},
		SourceLabel: "VStructDepth1_All{F0: set[VEnumAbc]{}, F3: \"mnopΔΘΠΣΦ\", F4: \"ΣΦ王\", F5: typeobject(VArray1_VStructDepth1_Rand0), F6: 61, F7: 136, F8: C, F9: C, F12: 60853, F13: 826, F14: 733432635, F15: 1070903580, F16: 6311866462315254278, F17: 6676822197620610655, F18: 54, F19: 13, F20: -549, F21: -11540, F22: -264652056, F25: -890125684197465000, F26: 4.276271e+08, F27: -8.2610784e+08, F28: 1.0030611097261338e+09, F29: -9.691717872266108e+08, F30: {}}",
		Source: VStructDepth1_All{
			F0:  map[VEnumAbc]struct{}(nil),
			F3:  "mnopΔΘΠΣΦ",
			F4:  "ΣΦ王",
			F5:  vdl.TypeOf((*VArray1_VStructDepth1_Rand0)(nil)),
			F6:  61,
			F7:  136,
			F8:  VEnumAbcC,
			F9:  VEnumBcdC,
			F12: 60853,
			F13: 826,
			F14: 733432635,
			F15: 1070903580,
			F16: 6311866462315254278,
			F17: 6676822197620610655,
			F18: 54,
			F19: 13,
			F20: -549,
			F21: -11540,
			F22: -264652056,
			F25: -890125684197465000,
			F26: 4.276271e+08,
			F27: -8.2610784e+08,
			F28: 1.0030611097261338e+09,
			F29: -9.691717872266108e+08,
			F30: &VStructEmpty{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "?VStructDepth1_Rand0(nil)",
		Target:      (*VStructDepth1_Rand0)(nil),
		SourceLabel: "?VStructDepth1_Rand0(nil)",
		Source:      (*VStructDepth1_Rand0)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructDepth1_Rand0(nil)",
		Target:      (*VStructDepth1_Rand0)(nil),
		SourceLabel: "?VStructEmpty(nil)",
		Source:      (*VStructEmpty)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructDepth1_Rand0(nil)",
		Target:      (*VStructDepth1_Rand0)(nil),
		SourceLabel: "?VStructDepth1_All(nil)",
		Source:      (*VStructDepth1_All)(nil),
	},
	{
		Label:       "NilAny",
		TargetLabel: "?VStructDepth1_Rand0(nil)",
		Target:      (*VStructDepth1_Rand0)(nil),
		SourceLabel: "any(nil)",
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "?VStructDepth1_Rand0{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}",
		Target: &VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		},
		SourceLabel: "?VStructDepth1_Rand0{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}",
		Source: &VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "?VStructDepth1_Rand0{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}",
		Target: &VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		},
		SourceLabel: "?VStructDepth1_All{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}",
		Source: &VStructDepth1_All{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F5:  vdl.AnyType,
			F15: 123,
			F21: -123,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth1_Rand0{F4: \"pΔΘΠΣΦ王普澤\", F21: 12507}",
		Target: &VStructDepth1_Rand0{
			F4:  "pΔΘΠΣΦ王普澤",
			F21: 12507,
		},
		SourceLabel: "?VStructDepth1_Rand0{F4: \"pΔΘΠΣΦ王普澤\", F21: 12507}",
		Source: &VStructDepth1_Rand0{
			F4:  "pΔΘΠΣΦ王普澤",
			F21: 12507,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth1_Rand0{F4: \"pΔΘΠΣΦ王普澤\", F21: 12507}",
		Target: &VStructDepth1_Rand0{
			F4:  "pΔΘΠΣΦ王普澤",
			F21: 12507,
		},
		SourceLabel: "VStructDepth1_All{F4: \"pΔΘΠΣΦ王普澤\", F21: 12507}",
		Source: VStructDepth1_All{
			F4:  "pΔΘΠΣΦ王普澤",
			F5:  vdl.AnyType,
			F21: 12507,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth1_Rand0{F4: \"ΘΠΣΦ王普\", F15: 2438621989, F21: 7815}",
		Target: &VStructDepth1_Rand0{
			F4:  "ΘΠΣΦ王普",
			F15: 2438621989,
			F21: 7815,
		},
		SourceLabel: "?VStructDepth1_Rand0{F4: \"ΘΠΣΦ王普\", F15: 2438621989, F21: 7815}",
		Source: &VStructDepth1_Rand0{
			F4:  "ΘΠΣΦ王普",
			F15: 2438621989,
			F21: 7815,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth1_Rand0{F4: \"ΘΠΣΦ王普\", F15: 2438621989, F21: 7815}",
		Target: &VStructDepth1_Rand0{
			F4:  "ΘΠΣΦ王普",
			F15: 2438621989,
			F21: 7815,
		},
		SourceLabel: "VStructDepth1_All{F4: \"ΘΠΣΦ王普\", F15: 2438621989, F21: 7815}",
		Source: VStructDepth1_All{
			F4:  "ΘΠΣΦ王普",
			F5:  vdl.AnyType,
			F15: 2438621989,
			F21: 7815,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "?VStructDepth1_Rand1(nil)",
		Target:      (*VStructDepth1_Rand1)(nil),
		SourceLabel: "?VStructDepth1_Rand1(nil)",
		Source:      (*VStructDepth1_Rand1)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructDepth1_Rand1(nil)",
		Target:      (*VStructDepth1_Rand1)(nil),
		SourceLabel: "?VStructEmpty(nil)",
		Source:      (*VStructEmpty)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructDepth1_Rand1(nil)",
		Target:      (*VStructDepth1_Rand1)(nil),
		SourceLabel: "?VStructDepth1_All(nil)",
		Source:      (*VStructDepth1_All)(nil),
	},
	{
		Label:       "NilAny",
		TargetLabel: "?VStructDepth1_Rand1(nil)",
		Target:      (*VStructDepth1_Rand1)(nil),
		SourceLabel: "any(nil)",
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "?VStructDepth1_Rand1{F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}",
		Target: &VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		},
		SourceLabel: "?VStructDepth1_Rand1{F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}",
		Source: &VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		},
	},
	{
		Label:       "Full",
		TargetLabel: "?VStructDepth1_Rand1{F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}",
		Target: &VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		},
		SourceLabel: "?VStructDepth1_All{F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}",
		Source: &VStructDepth1_All{
			F0:  int64(-123),
			F1:  true,
			F5:  vdl.AnyType,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth1_Rand1{F0: VList_VFloat64{-2.3718026055053744e+09, -3.1622557581587976e+08}, F7: 182, F26: -7.3872236e+08}",
		Target: &VStructDepth1_Rand1{
			F0: VList_VFloat64{
				-2.3718026055053744e+09,
				-3.1622557581587976e+08,
			},
			F7:  182,
			F26: -7.3872236e+08,
		},
		SourceLabel: "?VStructDepth1_Rand1{F0: VList_VFloat64{-2.3718026055053744e+09, -3.1622557581587976e+08}, F7: 182, F26: -7.3872236e+08}",
		Source: &VStructDepth1_Rand1{
			F0: VList_VFloat64{
				-2.3718026055053744e+09,
				-3.1622557581587976e+08,
			},
			F7:  182,
			F26: -7.3872236e+08,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth1_Rand1{F0: VList_VFloat64{-2.3718026055053744e+09, -3.1622557581587976e+08}, F7: 182, F26: -7.3872236e+08}",
		Target: &VStructDepth1_Rand1{
			F0: VList_VFloat64{
				-2.3718026055053744e+09,
				-3.1622557581587976e+08,
			},
			F7:  182,
			F26: -7.3872236e+08,
		},
		SourceLabel: "VStructDepth1_All{F0: VList_VFloat64{-2.3718026055053744e+09, -3.1622557581587976e+08}, F7: 182, F26: -7.3872236e+08}",
		Source: VStructDepth1_All{
			F0: VList_VFloat64{
				-2.3718026055053744e+09,
				-3.1622557581587976e+08,
			},
			F5:  vdl.AnyType,
			F7:  182,
			F26: -7.3872236e+08,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth1_Rand1{F0: VInt8(37), F7: 177, F26: -2.715575e+08}",
		Target: &VStructDepth1_Rand1{
			F0:  VInt8(37),
			F7:  177,
			F26: -2.715575e+08,
		},
		SourceLabel: "?VStructDepth1_Rand1{F0: VInt8(37), F7: 177, F26: -2.715575e+08}",
		Source: &VStructDepth1_Rand1{
			F0:  VInt8(37),
			F7:  177,
			F26: -2.715575e+08,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth1_Rand1{F0: VInt8(37), F7: 177, F26: -2.715575e+08}",
		Target: &VStructDepth1_Rand1{
			F0:  VInt8(37),
			F7:  177,
			F26: -2.715575e+08,
		},
		SourceLabel: "VStructDepth1_All{F0: VInt8(37), F7: 177, F26: -2.715575e+08}",
		Source: VStructDepth1_All{
			F0:  VInt8(37),
			F5:  vdl.AnyType,
			F7:  177,
			F26: -2.715575e+08,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_VArray3_Bool{}",
		Target:      VArray1_VArray3_Bool{},
		SourceLabel: "VArray1_VArray3_Bool{}",
		Source:      VArray1_VArray3_Bool{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VArray3_Bool{}",
		Target:      VArray1_VArray3_Bool{},
		SourceLabel: "[]any{VArray3_Bool{}}",
		Source: []interface{}{
			VArray3_Bool{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VArray3_Bool{}",
		Target:      VArray1_VArray3_Bool{},
		SourceLabel: "VList_List_VBool{{false, false, false}}",
		Source: VList_List_VBool{
			{
				false,
				false,
				false,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_VArray3_Bool{{true, true, true}}",
		Target: VArray1_VArray3_Bool{
			{
				true,
				true,
				true,
			},
		},
		SourceLabel: "VArray1_VArray3_Bool{{true, true, true}}",
		Source: VArray1_VArray3_Bool{
			{
				true,
				true,
				true,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_VArray3_Bool{{true, true, true}}",
		Target: VArray1_VArray3_Bool{
			{
				true,
				true,
				true,
			},
		},
		SourceLabel: "VList_Any{VArray3_Bool{true, true, true}}",
		Source: VList_Any{
			VArray3_Bool{
				true,
				true,
				true,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_VList_Any{}",
		Target:      VArray3_VList_Any{},
		SourceLabel: "VArray3_VList_Any{}",
		Source:      VArray3_VList_Any{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VList_Any{}",
		Target:      VArray3_VList_Any{},
		SourceLabel: "[]VList_VArray1_String{{}, {}, {}}",
		Source: []VList_VArray1_String{
			nil,
			nil,
			nil,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VList_Any{}",
		Target:      VArray3_VList_Any{},
		SourceLabel: "VArray3_Any{VList_Any{}, VList_Any{}, VList_Any{}}",
		Source: VArray3_Any{
			VList_Any(nil),
			VList_Any(nil),
			VList_Any(nil),
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_VList_Any{{int64(-123)}, {int64(-123)}, {int64(-123)}}",
		Target: VArray3_VList_Any{
			{
				int64(-123),
			},
			{
				int64(-123),
			},
			{
				int64(-123),
			},
		},
		SourceLabel: "VArray3_VList_Any{{int64(-123)}, {int64(-123)}, {int64(-123)}}",
		Source: VArray3_VList_Any{
			{
				int64(-123),
			},
			{
				int64(-123),
			},
			{
				int64(-123),
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_VList_Any{{int64(-123)}, {int64(-123)}, {int64(-123)}}",
		Target: VArray3_VList_Any{
			{
				int64(-123),
			},
			{
				int64(-123),
			},
			{
				int64(-123),
			},
		},
		SourceLabel: "VArray3_Any{VList_Any{int64(-123)}, VList_Any{int64(-123)}, VList_Any{int64(-123)}}",
		Source: VArray3_Any{
			VList_Any{
				int64(-123),
			},
			VList_Any{
				int64(-123),
			},
			VList_Any{
				int64(-123),
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_VList_Any{{[]VBool{false, false, true}, VList_VString{\"ghijklmnopΔΘΠΣΦ王普\"}, nil}, {VSet_VBool{true}}, {VUnionDepth1_All{F13: 6563}, VBool(false), []error{nil, {Id: \"opΔΘΠ\", RetryCode: RetryRefetch, Msg: \"jklmnopΔΘΠΣΦ\"}, {Id: \"mno\", RetryCode: RetryRefetch}}}}",
		Target: VArray3_VList_Any{
			{
				[]VBool{
					false,
					false,
					true,
				},
				VList_VString{
					"ghijklmnopΔΘΠΣΦ王普",
				},
				nil,
			},
			{
				VSet_VBool{
					true: struct{}{},
				},
			},
			{
				VUnionDepth1_All(VUnionDepth1_AllF13{6563}),
				VBool(false),
				[]error{
					nil,
					verror.FromWire(vdl.WireError{
						Id:        "opΔΘΠ",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
						Msg:       "jklmnopΔΘΠΣΦ",
					}),
					verror.FromWire(vdl.WireError{
						Id:        "mno",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
					}),
				},
			},
		},
		SourceLabel: "VArray3_VList_Any{{[]VBool{false, false, true}, VList_VString{\"ghijklmnopΔΘΠΣΦ王普\"}, nil}, {VSet_VBool{true}}, {VUnionDepth1_All{F13: 6563}, VBool(false), []error{nil, {Id: \"opΔΘΠ\", RetryCode: RetryRefetch, Msg: \"jklmnopΔΘΠΣΦ\"}, {Id: \"mno\", RetryCode: RetryRefetch}}}}",
		Source: VArray3_VList_Any{
			{
				[]VBool{
					false,
					false,
					true,
				},
				VList_VString{
					"ghijklmnopΔΘΠΣΦ王普",
				},
				nil,
			},
			{
				VSet_VBool{
					true: struct{}{},
				},
			},
			{
				VUnionDepth1_All(VUnionDepth1_AllF13{6563}),
				VBool(false),
				[]error{
					nil,
					verror.FromWire(vdl.WireError{
						Id:        "opΔΘΠ",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
						Msg:       "jklmnopΔΘΠΣΦ",
					}),
					verror.FromWire(vdl.WireError{
						Id:        "mno",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
					}),
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_VList_Any{{[]VBool{false, false, true}, VList_VString{\"ghijklmnopΔΘΠΣΦ王普\"}, nil}, {VSet_VBool{true}}, {VUnionDepth1_All{F13: 6563}, VBool(false), []error{nil, {Id: \"opΔΘΠ\", RetryCode: RetryRefetch, Msg: \"jklmnopΔΘΠΣΦ\"}, {Id: \"mno\", RetryCode: RetryRefetch}}}}",
		Target: VArray3_VList_Any{
			{
				[]VBool{
					false,
					false,
					true,
				},
				VList_VString{
					"ghijklmnopΔΘΠΣΦ王普",
				},
				nil,
			},
			{
				VSet_VBool{
					true: struct{}{},
				},
			},
			{
				VUnionDepth1_All(VUnionDepth1_AllF13{6563}),
				VBool(false),
				[]error{
					nil,
					verror.FromWire(vdl.WireError{
						Id:        "opΔΘΠ",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
						Msg:       "jklmnopΔΘΠΣΦ",
					}),
					verror.FromWire(vdl.WireError{
						Id:        "mno",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
					}),
				},
			},
		},
		SourceLabel: "[]any{VList_Any{[]VBool{false, false, true}, VList_VString{\"ghijklmnopΔΘΠΣΦ王普\"}, nil}, VList_Any{VSet_VBool{true}}, VList_Any{VUnionDepth1_All{F13: 6563}, VBool(false), []error{nil, {Id: \"opΔΘΠ\", RetryCode: RetryRefetch, Msg: \"jklmnopΔΘΠΣΦ\"}, {Id: \"mno\", RetryCode: RetryRefetch}}}}",
		Source: []interface{}{
			VList_Any{
				[]VBool{
					false,
					false,
					true,
				},
				VList_VString{
					"ghijklmnopΔΘΠΣΦ王普",
				},
				nil,
			},
			VList_Any{
				VSet_VBool{
					true: struct{}{},
				},
			},
			VList_Any{
				VUnionDepth1_All(VUnionDepth1_AllF13{6563}),
				VBool(false),
				[]error{
					nil,
					verror.FromWire(vdl.WireError{
						Id:        "opΔΘΠ",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
						Msg:       "jklmnopΔΘΠΣΦ",
					}),
					verror.FromWire(vdl.WireError{
						Id:        "mno",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
					}),
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_VList_Any{{nil, VArray3_Bool{}}, {nil, VMap_Byte_Byte{129: 0, 37: 138}, VList_VArray1_String{}}, {VMap_VEnumBcd_VEnumBcd{B: B, C: B, D: C}}}",
		Target: VArray3_VList_Any{
			{
				nil,
				VArray3_Bool{},
			},
			{
				nil,
				VMap_Byte_Byte{
					129: 0,
					37:  138,
				},
				VList_VArray1_String(nil),
			},
			{
				VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
					VEnumBcdC: VEnumBcdB,
					VEnumBcdD: VEnumBcdC,
				},
			},
		},
		SourceLabel: "VArray3_VList_Any{{nil, VArray3_Bool{}}, {nil, VMap_Byte_Byte{129: 0, 37: 138}, VList_VArray1_String{}}, {VMap_VEnumBcd_VEnumBcd{B: B, C: B, D: C}}}",
		Source: VArray3_VList_Any{
			{
				nil,
				VArray3_Bool{},
			},
			{
				nil,
				VMap_Byte_Byte{
					129: 0,
					37:  138,
				},
				VList_VArray1_String(nil),
			},
			{
				VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
					VEnumBcdC: VEnumBcdB,
					VEnumBcdD: VEnumBcdC,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_VList_Any{{nil, VArray3_Bool{}}, {nil, VMap_Byte_Byte{129: 0, 37: 138}, VList_VArray1_String{}}, {VMap_VEnumBcd_VEnumBcd{B: B, C: B, D: C}}}",
		Target: VArray3_VList_Any{
			{
				nil,
				VArray3_Bool{},
			},
			{
				nil,
				VMap_Byte_Byte{
					129: 0,
					37:  138,
				},
				VList_VArray1_String(nil),
			},
			{
				VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
					VEnumBcdC: VEnumBcdB,
					VEnumBcdD: VEnumBcdC,
				},
			},
		},
		SourceLabel: "[]any{VList_Any{nil, VArray3_Bool{}}, VList_Any{nil, VMap_Byte_Byte{129: 0, 37: 138}, VList_VArray1_String{}}, VList_Any{VMap_VEnumBcd_VEnumBcd{B: B, C: B, D: C}}}",
		Source: []interface{}{
			VList_Any{
				nil,
				VArray3_Bool{},
			},
			VList_Any{
				nil,
				VMap_Byte_Byte{
					129: 0,
					37:  138,
				},
				VList_VArray1_String(nil),
			},
			VList_Any{
				VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
					VEnumBcdC: VEnumBcdB,
					VEnumBcdD: VEnumBcdC,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray2_VSet_String{}",
		Target:      VArray2_VSet_String{},
		SourceLabel: "VArray2_VSet_String{}",
		Source:      VArray2_VSet_String{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_VSet_String{}",
		Target:      VArray2_VSet_String{},
		SourceLabel: "[]any{VSet_String{}, VSet_String{}}",
		Source: []interface{}{
			VSet_String(nil),
			VSet_String(nil),
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray2_VSet_String{}",
		Target:      VArray2_VSet_String{},
		SourceLabel: "VList_Any{VSet_String{}, VSet_String{}}",
		Source: VList_Any{
			VSet_String(nil),
			VSet_String(nil),
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray2_VSet_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VArray2_VSet_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
		},
		SourceLabel: "VArray2_VSet_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VArray2_VSet_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray2_VSet_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VArray2_VSet_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
		},
		SourceLabel: "VList_Any{VSet_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, VSet_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VList_Any{
			VSet_String{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
			VSet_String{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray2_VSet_String{{\"fghij\", \"ghijklmnopΔΘΠ\", \"jklmnopΔΘΠΣΦ\"}, {}}",
		Target: VArray2_VSet_String{
			{
				"fghij":         struct{}{},
				"ghijklmnopΔΘΠ": struct{}{},
				"jklmnopΔΘΠΣΦ":  struct{}{},
			},
			nil,
		},
		SourceLabel: "VArray2_VSet_String{{\"fghij\", \"ghijklmnopΔΘΠ\", \"jklmnopΔΘΠΣΦ\"}, {}}",
		Source: VArray2_VSet_String{
			{
				"fghij":         struct{}{},
				"ghijklmnopΔΘΠ": struct{}{},
				"jklmnopΔΘΠΣΦ":  struct{}{},
			},
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray2_VSet_String{{\"fghij\", \"ghijklmnopΔΘΠ\", \"jklmnopΔΘΠΣΦ\"}, {}}",
		Target: VArray2_VSet_String{
			{
				"fghij":         struct{}{},
				"ghijklmnopΔΘΠ": struct{}{},
				"jklmnopΔΘΠΣΦ":  struct{}{},
			},
			nil,
		},
		SourceLabel: "[]any{VSet_String{\"fghij\", \"ghijklmnopΔΘΠ\", \"jklmnopΔΘΠΣΦ\"}, VSet_String{}}",
		Source: []interface{}{
			VSet_String{
				"fghij":         struct{}{},
				"ghijklmnopΔΘΠ": struct{}{},
				"jklmnopΔΘΠΣΦ":  struct{}{},
			},
			VSet_String(nil),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray2_VSet_String{{\"\", \"abcdefghijk\", \"lmnop\"}, {}}",
		Target: VArray2_VSet_String{
			{
				"":            struct{}{},
				"abcdefghijk": struct{}{},
				"lmnop":       struct{}{},
			},
			nil,
		},
		SourceLabel: "VArray2_VSet_String{{\"\", \"abcdefghijk\", \"lmnop\"}, {}}",
		Source: VArray2_VSet_String{
			{
				"":            struct{}{},
				"abcdefghijk": struct{}{},
				"lmnop":       struct{}{},
			},
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray2_VSet_String{{\"\", \"abcdefghijk\", \"lmnop\"}, {}}",
		Target: VArray2_VSet_String{
			{
				"":            struct{}{},
				"abcdefghijk": struct{}{},
				"lmnop":       struct{}{},
			},
			nil,
		},
		SourceLabel: "[]any{VSet_String{\"\", \"abcdefghijk\", \"lmnop\"}, VSet_String{}}",
		Source: []interface{}{
			VSet_String{
				"":            struct{}{},
				"abcdefghijk": struct{}{},
				"lmnop":       struct{}{},
			},
			VSet_String(nil),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_Map_String_String{}",
		Target:      VArray3_Map_String_String{},
		SourceLabel: "VArray3_Map_String_String{}",
		Source:      VArray3_Map_String_String{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_Map_String_String{}",
		Target:      VArray3_Map_String_String{},
		SourceLabel: "[]VMap_VEnumBcd_VEnumBcd{{}, {}, {}}",
		Source: []VMap_VEnumBcd_VEnumBcd{
			nil,
			nil,
			nil,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_Map_String_String{}",
		Target:      VArray3_Map_String_String{},
		SourceLabel: "VArray3_Any{map[string]string{}, map[string]string{}, map[string]string{}}",
		Source: VArray3_Any{
			map[string]string(nil),
			map[string]string(nil),
			map[string]string(nil),
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_Map_String_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VArray3_Map_String_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
		SourceLabel: "VArray3_Map_String_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VArray3_Map_String_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_Map_String_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VArray3_Map_String_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
		SourceLabel: "VArray3_Any{map[string]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, map[string]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, map[string]string{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VArray3_Any{
			map[string]string{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			map[string]string{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			map[string]string{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_Map_String_String{{\"hijklmno\": \"hijklmnopΔΘΠΣΦ\", \"opΔΘΠ\": \"lmnopΔΘΠΣΦ王\"}, {\"王普澤\": \"defghijklmn\"}, {\"\": \"klmno\"}}",
		Target: VArray3_Map_String_String{
			{
				"hijklmno": "hijklmnopΔΘΠΣΦ",
				"opΔΘΠ":    "lmnopΔΘΠΣΦ王",
			},
			{
				"王普澤": "defghijklmn",
			},
			{
				"": "klmno",
			},
		},
		SourceLabel: "VArray3_Map_String_String{{\"hijklmno\": \"hijklmnopΔΘΠΣΦ\", \"opΔΘΠ\": \"lmnopΔΘΠΣΦ王\"}, {\"王普澤\": \"defghijklmn\"}, {\"\": \"klmno\"}}",
		Source: VArray3_Map_String_String{
			{
				"hijklmno": "hijklmnopΔΘΠΣΦ",
				"opΔΘΠ":    "lmnopΔΘΠΣΦ王",
			},
			{
				"王普澤": "defghijklmn",
			},
			{
				"": "klmno",
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_Map_String_String{{\"hijklmno\": \"hijklmnopΔΘΠΣΦ\", \"opΔΘΠ\": \"lmnopΔΘΠΣΦ王\"}, {\"王普澤\": \"defghijklmn\"}, {\"\": \"klmno\"}}",
		Target: VArray3_Map_String_String{
			{
				"hijklmno": "hijklmnopΔΘΠΣΦ",
				"opΔΘΠ":    "lmnopΔΘΠΣΦ王",
			},
			{
				"王普澤": "defghijklmn",
			},
			{
				"": "klmno",
			},
		},
		SourceLabel: "[]any{map[string]string{\"hijklmno\": \"hijklmnopΔΘΠΣΦ\", \"opΔΘΠ\": \"lmnopΔΘΠΣΦ王\"}, map[string]string{\"王普澤\": \"defghijklmn\"}, map[string]string{\"\": \"klmno\"}}",
		Source: []interface{}{
			map[string]string{
				"hijklmno": "hijklmnopΔΘΠΣΦ",
				"opΔΘΠ":    "lmnopΔΘΠΣΦ王",
			},
			map[string]string{
				"王普澤": "defghijklmn",
			},
			map[string]string{
				"": "klmno",
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_Map_String_String{{\"e\": \"efghijklmnopΔΘΠΣ\"}, {\"\": \"mnop\", \"abcdefg\": \"opΔΘ\"}, {}}",
		Target: VArray3_Map_String_String{
			{
				"e": "efghijklmnopΔΘΠΣ",
			},
			{
				"":        "mnop",
				"abcdefg": "opΔΘ",
			},
			nil,
		},
		SourceLabel: "VArray3_Map_String_String{{\"e\": \"efghijklmnopΔΘΠΣ\"}, {\"\": \"mnop\", \"abcdefg\": \"opΔΘ\"}, {}}",
		Source: VArray3_Map_String_String{
			{
				"e": "efghijklmnopΔΘΠΣ",
			},
			{
				"":        "mnop",
				"abcdefg": "opΔΘ",
			},
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_Map_String_String{{\"e\": \"efghijklmnopΔΘΠΣ\"}, {\"\": \"mnop\", \"abcdefg\": \"opΔΘ\"}, {}}",
		Target: VArray3_Map_String_String{
			{
				"e": "efghijklmnopΔΘΠΣ",
			},
			{
				"":        "mnop",
				"abcdefg": "opΔΘ",
			},
			nil,
		},
		SourceLabel: "[]any{map[string]string{\"e\": \"efghijklmnopΔΘΠΣ\"}, map[string]string{\"\": \"mnop\", \"abcdefg\": \"opΔΘ\"}, map[string]string{}}",
		Source: []interface{}{
			map[string]string{
				"e": "efghijklmnopΔΘΠΣ",
			},
			map[string]string{
				"":        "mnop",
				"abcdefg": "opΔΘ",
			},
			map[string]string(nil),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_VStructDepth1_Rand0{}",
		Target:      VArray1_VStructDepth1_Rand0{},
		SourceLabel: "VArray1_VStructDepth1_Rand0{}",
		Source:      VArray1_VStructDepth1_Rand0{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VStructDepth1_Rand0{}",
		Target:      VArray1_VStructDepth1_Rand0{},
		SourceLabel: "[]VStructEmpty{{}}",
		Source: []VStructEmpty{
			{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VStructDepth1_Rand0{}",
		Target:      VArray1_VStructDepth1_Rand0{},
		SourceLabel: "VList_VStructDepth1_All{{}}",
		Source: VList_VStructDepth1_All{
			{
				F5: vdl.AnyType,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VArray1_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VArray1_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VArray1_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VArray1_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VList_VStructDepth1_All{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VList_VStructDepth1_All{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5:  vdl.AnyType,
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_VStructDepth1_Rand0{{F4: \"bcdefghijklmnopΔΘΠΣ\", F15: 2890239673}}",
		Target: VArray1_VStructDepth1_Rand0{
			{
				F4:  "bcdefghijklmnopΔΘΠΣ",
				F15: 2890239673,
			},
		},
		SourceLabel: "VArray1_VStructDepth1_Rand0{{F4: \"bcdefghijklmnopΔΘΠΣ\", F15: 2890239673}}",
		Source: VArray1_VStructDepth1_Rand0{
			{
				F4:  "bcdefghijklmnopΔΘΠΣ",
				F15: 2890239673,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_VStructDepth1_Rand0{{F4: \"bcdefghijklmnopΔΘΠΣ\", F15: 2890239673}}",
		Target: VArray1_VStructDepth1_Rand0{
			{
				F4:  "bcdefghijklmnopΔΘΠΣ",
				F15: 2890239673,
			},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{F4: \"bcdefghijklmnopΔΘΠΣ\", F15: 2890239673}}",
		Source: []VStructDepth1_Rand0{
			{
				F4:  "bcdefghijklmnopΔΘΠΣ",
				F15: 2890239673,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_VStructDepth1_Rand0{{F4: \"abcdefghijkl\", F15: 2461586813, F21: 3734}}",
		Target: VArray1_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijkl",
				F15: 2461586813,
				F21: 3734,
			},
		},
		SourceLabel: "VArray1_VStructDepth1_Rand0{{F4: \"abcdefghijkl\", F15: 2461586813, F21: 3734}}",
		Source: VArray1_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijkl",
				F15: 2461586813,
				F21: 3734,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_VStructDepth1_Rand0{{F4: \"abcdefghijkl\", F15: 2461586813, F21: 3734}}",
		Target: VArray1_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijkl",
				F15: 2461586813,
				F21: 3734,
			},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{F4: \"abcdefghijkl\", F15: 2461586813, F21: 3734}}",
		Source: []VStructDepth1_Rand0{
			{
				F4:  "abcdefghijkl",
				F15: 2461586813,
				F21: 3734,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_VUnionDepth1_Rand1{}",
		Target: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "VArray3_VUnionDepth1_Rand1{}",
		Source: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VUnionDepth1_Rand1{}",
		Target: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "VArray3_Any{VUnionDepth1_Rand1{F6: 0}, VUnionDepth1_Rand1{F6: 0}, VUnionDepth1_Rand1{F6: 0}}",
		Source: VArray3_Any{
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VUnionDepth1_Rand1{}",
		Target: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "[]any{VUnionDepth1_Rand1{F6: 0}, VUnionDepth1_Rand1{F6: 0}, VUnionDepth1_Rand1{F6: 0}}",
		Source: []interface{}{
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_VUnionDepth1_Rand1{{F20: -123}, {F20: -123}, {F20: -123}}",
		Target: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F20{-123},
			VUnionDepth1_Rand1F20{-123},
			VUnionDepth1_Rand1F20{-123},
		},
		SourceLabel: "VArray3_VUnionDepth1_Rand1{{F20: -123}, {F20: -123}, {F20: -123}}",
		Source: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F20{-123},
			VUnionDepth1_Rand1F20{-123},
			VUnionDepth1_Rand1F20{-123},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_VUnionDepth1_Rand1{{F20: -123}, {F20: -123}, {F20: -123}}",
		Target: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F20{-123},
			VUnionDepth1_Rand1F20{-123},
			VUnionDepth1_Rand1F20{-123},
		},
		SourceLabel: "[]VUnionDepth1_All{{F20: -123}, {F20: -123}, {F20: -123}}",
		Source: []VUnionDepth1_All{
			VUnionDepth1_AllF20{-123},
			VUnionDepth1_AllF20{-123},
			VUnionDepth1_AllF20{-123},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_VUnionDepth1_Rand1{{F8: A}, {F20: 3358}, {F6: 0}}",
		Target: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F8{},
			VUnionDepth1_Rand1F20{3358},
			VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "VArray3_VUnionDepth1_Rand1{{F8: A}, {F20: 3358}, {F6: 0}}",
		Source: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F8{},
			VUnionDepth1_Rand1F20{3358},
			VUnionDepth1_Rand1F6{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_VUnionDepth1_Rand1{{F8: A}, {F20: 3358}, {F6: 0}}",
		Target: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F8{},
			VUnionDepth1_Rand1F20{3358},
			VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "[]any{VUnionDepth1_Rand1{F8: A}, VUnionDepth1_Rand1{F20: 3358}, VUnionDepth1_Rand1{F6: 0}}",
		Source: []interface{}{
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F8{}),
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F20{3358}),
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F6{}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_VUnionDepth1_Rand1{{F11: {}}, {F8: A}, {F9: D}}",
		Target: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
			VUnionDepth1_Rand1F8{},
			VUnionDepth1_Rand1F9{VEnumBcdD},
		},
		SourceLabel: "VArray3_VUnionDepth1_Rand1{{F11: {}}, {F8: A}, {F9: D}}",
		Source: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
			VUnionDepth1_Rand1F8{},
			VUnionDepth1_Rand1F9{VEnumBcdD},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_VUnionDepth1_Rand1{{F11: {}}, {F8: A}, {F9: D}}",
		Target: VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
			VUnionDepth1_Rand1F8{},
			VUnionDepth1_Rand1F9{VEnumBcdD},
		},
		SourceLabel: "[]any{VUnionDepth1_Rand1{F11: {}}, VUnionDepth1_Rand1{F8: A}, VUnionDepth1_Rand1{F9: D}}",
		Source: []interface{}{
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})}),
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F8{}),
			VUnionDepth1_Rand1(VUnionDepth1_Rand1F9{VEnumBcdD}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_OptVStructDepth1_Rand0{}",
		Target:      VArray1_OptVStructDepth1_Rand0{},
		SourceLabel: "VArray1_OptVStructDepth1_Rand0{}",
		Source:      VArray1_OptVStructDepth1_Rand0{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_OptVStructDepth1_Rand0{}",
		Target:      VArray1_OptVStructDepth1_Rand0{},
		SourceLabel: "[]any{nil}",
		Source: []interface{}{
			nil,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_OptVStructDepth1_Rand0{}",
		Target:      VArray1_OptVStructDepth1_Rand0{},
		SourceLabel: "VList_OptVStructDepth1_Rand0{nil}",
		Source: VList_OptVStructDepth1_Rand0{
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_OptVStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VArray1_OptVStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VArray1_OptVStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VArray1_OptVStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_OptVStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VArray1_OptVStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VArray1_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VArray1_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_OptVStructDepth1_Rand0{{}}",
		Target: VArray1_OptVStructDepth1_Rand0{
			{},
		},
		SourceLabel: "VArray1_OptVStructDepth1_Rand0{{}}",
		Source: VArray1_OptVStructDepth1_Rand0{
			{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_OptVStructDepth1_Rand0{{}}",
		Target: VArray1_OptVStructDepth1_Rand0{
			{},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{}}",
		Source: []VStructDepth1_Rand0{
			{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_OptVStructDepth1_Rand0{{F4: \"mn\", F15: 3740332353, F21: 391}}",
		Target: VArray1_OptVStructDepth1_Rand0{
			{
				F4:  "mn",
				F15: 3740332353,
				F21: 391,
			},
		},
		SourceLabel: "VArray1_OptVStructDepth1_Rand0{{F4: \"mn\", F15: 3740332353, F21: 391}}",
		Source: VArray1_OptVStructDepth1_Rand0{
			{
				F4:  "mn",
				F15: 3740332353,
				F21: 391,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_OptVStructDepth1_Rand0{{F4: \"mn\", F15: 3740332353, F21: 391}}",
		Target: VArray1_OptVStructDepth1_Rand0{
			{
				F4:  "mn",
				F15: 3740332353,
				F21: 391,
			},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{F4: \"mn\", F15: 3740332353, F21: 391}}",
		Source: []VStructDepth1_Rand0{
			{
				F4:  "mn",
				F15: 3740332353,
				F21: 391,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VArray1_String{}",
		Target:      []VArray1_String(nil),
		SourceLabel: "[]VArray1_String{}",
		Source:      []VArray1_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VArray1_String{}",
		Target:      []VArray1_String(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VArray1_String{}",
		Target:      []VArray1_String(nil),
		SourceLabel: "VList_VArray1_String{}",
		Source:      VList_VArray1_String(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: []VArray1_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
		SourceLabel: "[]VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: []VArray1_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: []VArray1_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
		SourceLabel: "VList_Any{VArray1_String{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VList_Any{
			VArray1_String{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VArray1_String{{\"bcdefghijklmnopΔΘΠΣΦ\"}}",
		Target: []VArray1_String{
			{
				"bcdefghijklmnopΔΘΠΣΦ",
			},
		},
		SourceLabel: "[]VArray1_String{{\"bcdefghijklmnopΔΘΠΣΦ\"}}",
		Source: []VArray1_String{
			{
				"bcdefghijklmnopΔΘΠΣΦ",
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VArray1_String{{\"bcdefghijklmnopΔΘΠΣΦ\"}}",
		Target: []VArray1_String{
			{
				"bcdefghijklmnopΔΘΠΣΦ",
			},
		},
		SourceLabel: "[]any{VArray1_String{\"bcdefghijklmnopΔΘΠΣΦ\"}}",
		Source: []interface{}{
			VArray1_String{
				"bcdefghijklmnopΔΘΠΣΦ",
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VArray1_String{{\"klmno\"}, {\"jklmn\"}, {\"lm\"}}",
		Target: []VArray1_String{
			{
				"klmno",
			},
			{
				"jklmn",
			},
			{
				"lm",
			},
		},
		SourceLabel: "[]VArray1_String{{\"klmno\"}, {\"jklmn\"}, {\"lm\"}}",
		Source: []VArray1_String{
			{
				"klmno",
			},
			{
				"jklmn",
			},
			{
				"lm",
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VArray1_String{{\"klmno\"}, {\"jklmn\"}, {\"lm\"}}",
		Target: []VArray1_String{
			{
				"klmno",
			},
			{
				"jklmn",
			},
			{
				"lm",
			},
		},
		SourceLabel: "[]any{VArray1_String{\"klmno\"}, VArray1_String{\"jklmn\"}, VArray1_String{\"lm\"}}",
		Source: []interface{}{
			VArray1_String{
				"klmno",
			},
			VArray1_String{
				"jklmn",
			},
			VArray1_String{
				"lm",
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[][]VEnumAbc{}",
		Target:      [][]VEnumAbc(nil),
		SourceLabel: "[][]VEnumAbc{}",
		Source:      [][]VEnumAbc(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[][]VEnumAbc{}",
		Target:      [][]VEnumAbc(nil),
		SourceLabel: "[]VArray1_String{}",
		Source:      []VArray1_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[][]VEnumAbc{}",
		Target:      [][]VEnumAbc(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[][]VEnumAbc{{C}}",
		Target: [][]VEnumAbc{
			{
				VEnumAbcC,
			},
		},
		SourceLabel: "[][]VEnumAbc{{C}}",
		Source: [][]VEnumAbc{
			{
				VEnumAbcC,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[][]VEnumAbc{{C}}",
		Target: [][]VEnumAbc{
			{
				VEnumAbcC,
			},
		},
		SourceLabel: "[]VArray1_String{{\"C\"}}",
		Source: []VArray1_String{
			{
				"C",
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VSet_Byte{}",
		Target:      []VSet_Byte(nil),
		SourceLabel: "[]VSet_Byte{}",
		Source:      []VSet_Byte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VSet_Byte{}",
		Target:      []VSet_Byte(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VSet_Byte{}",
		Target:      []VSet_Byte(nil),
		SourceLabel: "VList_Set_VInt16{}",
		Source:      VList_Set_VInt16(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VSet_Byte{{123}}",
		Target: []VSet_Byte{
			{
				123: struct{}{},
			},
		},
		SourceLabel: "[]VSet_Byte{{123}}",
		Source: []VSet_Byte{
			{
				123: struct{}{},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VSet_Byte{{123}}",
		Target: []VSet_Byte{
			{
				123: struct{}{},
			},
		},
		SourceLabel: "VList_Any{VSet_Byte{123}}",
		Source: VList_Any{
			VSet_Byte{
				123: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VSet_Byte{{0}, {}}",
		Target: []VSet_Byte{
			{
				0: struct{}{},
			},
			nil,
		},
		SourceLabel: "[]VSet_Byte{{0}, {}}",
		Source: []VSet_Byte{
			{
				0: struct{}{},
			},
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VSet_Byte{{0}, {}}",
		Target: []VSet_Byte{
			{
				0: struct{}{},
			},
			nil,
		},
		SourceLabel: "VList_Set_VInt16{{0}, {}}",
		Source: VList_Set_VInt16{
			{
				0: struct{}{},
			},
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VSet_Byte{{148}, {}}",
		Target: []VSet_Byte{
			{
				148: struct{}{},
			},
			nil,
		},
		SourceLabel: "[]VSet_Byte{{148}, {}}",
		Source: []VSet_Byte{
			{
				148: struct{}{},
			},
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VSet_Byte{{148}, {}}",
		Target: []VSet_Byte{
			{
				148: struct{}{},
			},
			nil,
		},
		SourceLabel: "VList_Set_VInt16{{148}, {}}",
		Source: VList_Set_VInt16{
			{
				148: struct{}{},
			},
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VMap_VEnumBcd_VEnumBcd{}",
		Target:      []VMap_VEnumBcd_VEnumBcd(nil),
		SourceLabel: "[]VMap_VEnumBcd_VEnumBcd{}",
		Source:      []VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VMap_VEnumBcd_VEnumBcd{}",
		Target:      []VMap_VEnumBcd_VEnumBcd(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VMap_VEnumBcd_VEnumBcd{}",
		Target:      []VMap_VEnumBcd_VEnumBcd(nil),
		SourceLabel: "VList_Any{}",
		Source:      VList_Any(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VMap_VEnumBcd_VEnumBcd{{D: D}}",
		Target: []VMap_VEnumBcd_VEnumBcd{
			{
				VEnumBcdD: VEnumBcdD,
			},
		},
		SourceLabel: "[]VMap_VEnumBcd_VEnumBcd{{D: D}}",
		Source: []VMap_VEnumBcd_VEnumBcd{
			{
				VEnumBcdD: VEnumBcdD,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VMap_VEnumBcd_VEnumBcd{{D: D}}",
		Target: []VMap_VEnumBcd_VEnumBcd{
			{
				VEnumBcdD: VEnumBcdD,
			},
		},
		SourceLabel: "VList_Any{VMap_VEnumBcd_VEnumBcd{D: D}}",
		Source: VList_Any{
			VMap_VEnumBcd_VEnumBcd{
				VEnumBcdD: VEnumBcdD,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VStructDepth1_Rand0{}",
		Target:      []VStructDepth1_Rand0(nil),
		SourceLabel: "[]VStructDepth1_Rand0{}",
		Source:      []VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VStructDepth1_Rand0{}",
		Target:      []VStructDepth1_Rand0(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VStructDepth1_Rand0{}",
		Target:      []VStructDepth1_Rand0(nil),
		SourceLabel: "VList_VStructDepth1_All{}",
		Source:      VList_VStructDepth1_All(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: []VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: []VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: []VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VArray1_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VArray1_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VStructDepth1_Rand0{{F4: \"普澤\", F15: 2207665397, F21: 16317}}",
		Target: []VStructDepth1_Rand0{
			{
				F4:  "普澤",
				F15: 2207665397,
				F21: 16317,
			},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{F4: \"普澤\", F15: 2207665397, F21: 16317}}",
		Source: []VStructDepth1_Rand0{
			{
				F4:  "普澤",
				F15: 2207665397,
				F21: 16317,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VStructDepth1_Rand0{{F4: \"普澤\", F15: 2207665397, F21: 16317}}",
		Target: []VStructDepth1_Rand0{
			{
				F4:  "普澤",
				F15: 2207665397,
				F21: 16317,
			},
		},
		SourceLabel: "[]any{VStructDepth1_Rand0{F4: \"普澤\", F15: 2207665397, F21: 16317}}",
		Source: []interface{}{
			VStructDepth1_Rand0{
				F4:  "普澤",
				F15: 2207665397,
				F21: 16317,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VStructDepth1_Rand0{{F4: \"jkl\", F21: -2973}, {F15: 528894192, F21: 7670}, {F15: 2458853029}}",
		Target: []VStructDepth1_Rand0{
			{
				F4:  "jkl",
				F21: -2973,
			},
			{
				F15: 528894192,
				F21: 7670,
			},
			{
				F15: 2458853029,
			},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{F4: \"jkl\", F21: -2973}, {F15: 528894192, F21: 7670}, {F15: 2458853029}}",
		Source: []VStructDepth1_Rand0{
			{
				F4:  "jkl",
				F21: -2973,
			},
			{
				F15: 528894192,
				F21: 7670,
			},
			{
				F15: 2458853029,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VStructDepth1_Rand0{{F4: \"jkl\", F21: -2973}, {F15: 528894192, F21: 7670}, {F15: 2458853029}}",
		Target: []VStructDepth1_Rand0{
			{
				F4:  "jkl",
				F21: -2973,
			},
			{
				F15: 528894192,
				F21: 7670,
			},
			{
				F15: 2458853029,
			},
		},
		SourceLabel: "[]any{VStructDepth1_Rand0{F4: \"jkl\", F21: -2973}, VStructDepth1_Rand0{F15: 528894192, F21: 7670}, VStructDepth1_Rand0{F15: 2458853029}}",
		Source: []interface{}{
			VStructDepth1_Rand0{
				F4:  "jkl",
				F21: -2973,
			},
			VStructDepth1_Rand0{
				F15: 528894192,
				F21: 7670,
			},
			VStructDepth1_Rand0{
				F15: 2458853029,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VUnionDepth1_All{}",
		Target:      []VUnionDepth1_All(nil),
		SourceLabel: "[]VUnionDepth1_All{}",
		Source:      []VUnionDepth1_All(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VUnionDepth1_All{}",
		Target:      []VUnionDepth1_All(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VUnionDepth1_All{}",
		Target:      []VUnionDepth1_All(nil),
		SourceLabel: "VList_VUnionDepth1_Rand0{}",
		Source:      VList_VUnionDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VUnionDepth1_All{{F30: {}}}",
		Target: []VUnionDepth1_All{
			VUnionDepth1_AllF30{&VStructEmpty{}},
		},
		SourceLabel: "[]VUnionDepth1_All{{F30: {}}}",
		Source: []VUnionDepth1_All{
			VUnionDepth1_AllF30{&VStructEmpty{}},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VUnionDepth1_All{{F30: {}}}",
		Target: []VUnionDepth1_All{
			VUnionDepth1_AllF30{&VStructEmpty{}},
		},
		SourceLabel: "VList_Any{VUnionDepth1_All{F30: {}}}",
		Source: VList_Any{
			VUnionDepth1_All(VUnionDepth1_AllF30{&VStructEmpty{}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VUnionDepth1_All{{F27: 2.1350005e+08}, {F7: 220}, {F22: 809976502}}",
		Target: []VUnionDepth1_All{
			VUnionDepth1_AllF27{2.1350005e+08},
			VUnionDepth1_AllF7{220},
			VUnionDepth1_AllF22{809976502},
		},
		SourceLabel: "[]VUnionDepth1_All{{F27: 2.1350005e+08}, {F7: 220}, {F22: 809976502}}",
		Source: []VUnionDepth1_All{
			VUnionDepth1_AllF27{2.1350005e+08},
			VUnionDepth1_AllF7{220},
			VUnionDepth1_AllF22{809976502},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VUnionDepth1_All{{F27: 2.1350005e+08}, {F7: 220}, {F22: 809976502}}",
		Target: []VUnionDepth1_All{
			VUnionDepth1_AllF27{2.1350005e+08},
			VUnionDepth1_AllF7{220},
			VUnionDepth1_AllF22{809976502},
		},
		SourceLabel: "[]any{VUnionDepth1_All{F27: 2.1350005e+08}, VUnionDepth1_All{F7: 220}, VUnionDepth1_All{F22: 809976502}}",
		Source: []interface{}{
			VUnionDepth1_All(VUnionDepth1_AllF27{2.1350005e+08}),
			VUnionDepth1_All(VUnionDepth1_AllF7{220}),
			VUnionDepth1_All(VUnionDepth1_AllF22{809976502}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VUnionDepth1_All{{F19: 13}, {F0: VList_VInt32{-693542822, -526313624, -1066861006}}}",
		Target: []VUnionDepth1_All{
			VUnionDepth1_AllF19{13},
			VUnionDepth1_AllF0{VList_VInt32{
				-693542822,
				-526313624,
				-1066861006,
			}},
		},
		SourceLabel: "[]VUnionDepth1_All{{F19: 13}, {F0: VList_VInt32{-693542822, -526313624, -1066861006}}}",
		Source: []VUnionDepth1_All{
			VUnionDepth1_AllF19{13},
			VUnionDepth1_AllF0{VList_VInt32{
				-693542822,
				-526313624,
				-1066861006,
			}},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VUnionDepth1_All{{F19: 13}, {F0: VList_VInt32{-693542822, -526313624, -1066861006}}}",
		Target: []VUnionDepth1_All{
			VUnionDepth1_AllF19{13},
			VUnionDepth1_AllF0{VList_VInt32{
				-693542822,
				-526313624,
				-1066861006,
			}},
		},
		SourceLabel: "[]any{VUnionDepth1_All{F19: 13}, VUnionDepth1_All{F0: VList_VInt32{-693542822, -526313624, -1066861006}}}",
		Source: []interface{}{
			VUnionDepth1_All(VUnionDepth1_AllF19{13}),
			VUnionDepth1_All(VUnionDepth1_AllF0{VList_VInt32{
				-693542822,
				-526313624,
				-1066861006,
			}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]?VStructDepth1_All{}",
		Target:      []*VStructDepth1_All(nil),
		SourceLabel: "[]?VStructDepth1_All{}",
		Source:      []*VStructDepth1_All(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]?VStructDepth1_All{}",
		Target:      []*VStructDepth1_All(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]?VStructDepth1_All{}",
		Target:      []*VStructDepth1_All(nil),
		SourceLabel: "VList_VStructDepth1_All{}",
		Source:      VList_VStructDepth1_All(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]?VStructDepth1_All{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}",
		Target: []*VStructDepth1_All{
			{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
		},
		SourceLabel: "[]?VStructDepth1_All{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}",
		Source: []*VStructDepth1_All{
			{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]?VStructDepth1_All{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}",
		Target: []*VStructDepth1_All{
			{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
		},
		SourceLabel: "VList_VStructDepth1_All{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}",
		Source: VList_VStructDepth1_All{
			{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]?VStructDepth1_All{{}, {}}",
		Target: []*VStructDepth1_All{
			{
				F5: vdl.AnyType,
			},
			{
				F5: vdl.AnyType,
			},
		},
		SourceLabel: "[]?VStructDepth1_All{{}, {}}",
		Source: []*VStructDepth1_All{
			{
				F5: vdl.AnyType,
			},
			{
				F5: vdl.AnyType,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]?VStructDepth1_All{{}, {}}",
		Target: []*VStructDepth1_All{
			{
				F5: vdl.AnyType,
			},
			{
				F5: vdl.AnyType,
			},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{}, {}}",
		Source: []VStructDepth1_Rand0{
			{},
			{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]?VStructDepth1_All{{}, {}, {F0: VSet_VBool{true}, F3: \"ΣΦ王普澤世界\", F4: \"cdefghijklmnop\", F7: 239, F8: C, F12: 58762, F13: 24481, F16: 12279421376077321512, F17: 3679344278506090497, F18: -60, F20: -2632, F22: -460221214, F23: 82191003, F24: -1280749698743137210, F25: -463360710480301154, F27: -9.687713e+08, F28: -1.9717678152338676e+09, F29: -9.706963374931696e+07}}",
		Target: []*VStructDepth1_All{
			{
				F5: vdl.AnyType,
			},
			{
				F5: vdl.AnyType,
			},
			{
				F0: VSet_VBool{
					true: struct{}{},
				},
				F3:  "ΣΦ王普澤世界",
				F4:  "cdefghijklmnop",
				F5:  vdl.AnyType,
				F7:  239,
				F8:  VEnumAbcC,
				F12: 58762,
				F13: 24481,
				F16: 12279421376077321512,
				F17: 3679344278506090497,
				F18: -60,
				F20: -2632,
				F22: -460221214,
				F23: 82191003,
				F24: -1280749698743137210,
				F25: -463360710480301154,
				F27: -9.687713e+08,
				F28: -1.9717678152338676e+09,
				F29: -9.706963374931696e+07,
			},
		},
		SourceLabel: "[]?VStructDepth1_All{{}, {}, {F0: VSet_VBool{true}, F3: \"ΣΦ王普澤世界\", F4: \"cdefghijklmnop\", F7: 239, F8: C, F12: 58762, F13: 24481, F16: 12279421376077321512, F17: 3679344278506090497, F18: -60, F20: -2632, F22: -460221214, F23: 82191003, F24: -1280749698743137210, F25: -463360710480301154, F27: -9.687713e+08, F28: -1.9717678152338676e+09, F29: -9.706963374931696e+07}}",
		Source: []*VStructDepth1_All{
			{
				F5: vdl.AnyType,
			},
			{
				F5: vdl.AnyType,
			},
			{
				F0: VSet_VBool{
					true: struct{}{},
				},
				F3:  "ΣΦ王普澤世界",
				F4:  "cdefghijklmnop",
				F5:  vdl.AnyType,
				F7:  239,
				F8:  VEnumAbcC,
				F12: 58762,
				F13: 24481,
				F16: 12279421376077321512,
				F17: 3679344278506090497,
				F18: -60,
				F20: -2632,
				F22: -460221214,
				F23: 82191003,
				F24: -1280749698743137210,
				F25: -463360710480301154,
				F27: -9.687713e+08,
				F28: -1.9717678152338676e+09,
				F29: -9.706963374931696e+07,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]?VStructDepth1_All{{}, {}, {F0: VSet_VBool{true}, F3: \"ΣΦ王普澤世界\", F4: \"cdefghijklmnop\", F7: 239, F8: C, F12: 58762, F13: 24481, F16: 12279421376077321512, F17: 3679344278506090497, F18: -60, F20: -2632, F22: -460221214, F23: 82191003, F24: -1280749698743137210, F25: -463360710480301154, F27: -9.687713e+08, F28: -1.9717678152338676e+09, F29: -9.706963374931696e+07}}",
		Target: []*VStructDepth1_All{
			{
				F5: vdl.AnyType,
			},
			{
				F5: vdl.AnyType,
			},
			{
				F0: VSet_VBool{
					true: struct{}{},
				},
				F3:  "ΣΦ王普澤世界",
				F4:  "cdefghijklmnop",
				F5:  vdl.AnyType,
				F7:  239,
				F8:  VEnumAbcC,
				F12: 58762,
				F13: 24481,
				F16: 12279421376077321512,
				F17: 3679344278506090497,
				F18: -60,
				F20: -2632,
				F22: -460221214,
				F23: 82191003,
				F24: -1280749698743137210,
				F25: -463360710480301154,
				F27: -9.687713e+08,
				F28: -1.9717678152338676e+09,
				F29: -9.706963374931696e+07,
			},
		},
		SourceLabel: "[]any{?VStructDepth1_All{}, ?VStructDepth1_All{}, ?VStructDepth1_All{F0: VSet_VBool{true}, F3: \"ΣΦ王普澤世界\", F4: \"cdefghijklmnop\", F7: 239, F8: C, F12: 58762, F13: 24481, F16: 12279421376077321512, F17: 3679344278506090497, F18: -60, F20: -2632, F22: -460221214, F23: 82191003, F24: -1280749698743137210, F25: -463360710480301154, F27: -9.687713e+08, F28: -1.9717678152338676e+09, F29: -9.706963374931696e+07}}",
		Source: []interface{}{
			&VStructDepth1_All{
				F5: vdl.AnyType,
			},
			&VStructDepth1_All{
				F5: vdl.AnyType,
			},
			&VStructDepth1_All{
				F0: VSet_VBool{
					true: struct{}{},
				},
				F3:  "ΣΦ王普澤世界",
				F4:  "cdefghijklmnop",
				F5:  vdl.AnyType,
				F7:  239,
				F8:  VEnumAbcC,
				F12: 58762,
				F13: 24481,
				F16: 12279421376077321512,
				F17: 3679344278506090497,
				F18: -60,
				F20: -2632,
				F22: -460221214,
				F23: 82191003,
				F24: -1280749698743137210,
				F25: -463360710480301154,
				F27: -9.687713e+08,
				F28: -1.9717678152338676e+09,
				F29: -9.706963374931696e+07,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VArray1_String{}",
		Target:      VList_VArray1_String(nil),
		SourceLabel: "VList_VArray1_String{}",
		Source:      VList_VArray1_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VArray1_String{}",
		Target:      VList_VArray1_String(nil),
		SourceLabel: "[]VArray1_String{}",
		Source:      []VArray1_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VArray1_String{}",
		Target:      VList_VArray1_String(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VList_VArray1_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
		SourceLabel: "VList_VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: VList_VArray1_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Target: VList_VArray1_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
		SourceLabel: "[]VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}",
		Source: []VArray1_String{
			{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VArray1_String{{}}",
		Target: VList_VArray1_String{
			{},
		},
		SourceLabel: "VList_VArray1_String{{}}",
		Source: VList_VArray1_String{
			{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VArray1_String{{}}",
		Target: VList_VArray1_String{
			{},
		},
		SourceLabel: "[]any{VArray1_String{}}",
		Source: []interface{}{
			VArray1_String{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VArray1_String{{\"ΘΠ\"}, {\"ijklmnopΔΘΠΣ\"}}",
		Target: VList_VArray1_String{
			{
				"ΘΠ",
			},
			{
				"ijklmnopΔΘΠΣ",
			},
		},
		SourceLabel: "VList_VArray1_String{{\"ΘΠ\"}, {\"ijklmnopΔΘΠΣ\"}}",
		Source: VList_VArray1_String{
			{
				"ΘΠ",
			},
			{
				"ijklmnopΔΘΠΣ",
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VArray1_String{{\"ΘΠ\"}, {\"ijklmnopΔΘΠΣ\"}}",
		Target: VList_VArray1_String{
			{
				"ΘΠ",
			},
			{
				"ijklmnopΔΘΠΣ",
			},
		},
		SourceLabel: "[]any{VArray1_String{\"ΘΠ\"}, VArray1_String{\"ijklmnopΔΘΠΣ\"}}",
		Source: []interface{}{
			VArray1_String{
				"ΘΠ",
			},
			VArray1_String{
				"ijklmnopΔΘΠΣ",
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_List_VBool{}",
		Target:      VList_List_VBool(nil),
		SourceLabel: "VList_List_VBool{}",
		Source:      VList_List_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_List_VBool{}",
		Target:      VList_List_VBool(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_List_VBool{}",
		Target:      VList_List_VBool(nil),
		SourceLabel: "VList_Any{}",
		Source:      VList_Any(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_List_VBool{{true}}",
		Target: VList_List_VBool{
			{
				true,
			},
		},
		SourceLabel: "VList_List_VBool{{true}}",
		Source: VList_List_VBool{
			{
				true,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_List_VBool{{true}}",
		Target: VList_List_VBool{
			{
				true,
			},
		},
		SourceLabel: "VList_Any{[]VBool{true}}",
		Source: VList_Any{
			[]VBool{
				true,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_Set_VInt16{}",
		Target:      VList_Set_VInt16(nil),
		SourceLabel: "VList_Set_VInt16{}",
		Source:      VList_Set_VInt16(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Set_VInt16{}",
		Target:      VList_Set_VInt16(nil),
		SourceLabel: "[]VSet_Byte{}",
		Source:      []VSet_Byte(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Set_VInt16{}",
		Target:      VList_Set_VInt16(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_Set_VInt16{{-123}}",
		Target: VList_Set_VInt16{
			{
				-123: struct{}{},
			},
		},
		SourceLabel: "VList_Set_VInt16{{-123}}",
		Source: VList_Set_VInt16{
			{
				-123: struct{}{},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_Set_VInt16{{-123}}",
		Target: VList_Set_VInt16{
			{
				-123: struct{}{},
			},
		},
		SourceLabel: "VList_Any{set[VInt16]{-123}}",
		Source: VList_Any{
			map[VInt16]struct{}{
				-123: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Set_VInt16{{-15527, 13762, 4621}, {-11648, 0}}",
		Target: VList_Set_VInt16{
			{
				-15527: struct{}{},
				13762:  struct{}{},
				4621:   struct{}{},
			},
			{
				-11648: struct{}{},
				0:      struct{}{},
			},
		},
		SourceLabel: "VList_Set_VInt16{{-15527, 13762, 4621}, {-11648, 0}}",
		Source: VList_Set_VInt16{
			{
				-15527: struct{}{},
				13762:  struct{}{},
				4621:   struct{}{},
			},
			{
				-11648: struct{}{},
				0:      struct{}{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Set_VInt16{{-15527, 13762, 4621}, {-11648, 0}}",
		Target: VList_Set_VInt16{
			{
				-15527: struct{}{},
				13762:  struct{}{},
				4621:   struct{}{},
			},
			{
				-11648: struct{}{},
				0:      struct{}{},
			},
		},
		SourceLabel: "[]any{set[VInt16]{-15527, 13762, 4621}, set[VInt16]{-11648, 0}}",
		Source: []interface{}{
			map[VInt16]struct{}{
				-15527: struct{}{},
				13762:  struct{}{},
				4621:   struct{}{},
			},
			map[VInt16]struct{}{
				-11648: struct{}{},
				0:      struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Set_VInt16{{-250}}",
		Target: VList_Set_VInt16{
			{
				-250: struct{}{},
			},
		},
		SourceLabel: "VList_Set_VInt16{{-250}}",
		Source: VList_Set_VInt16{
			{
				-250: struct{}{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Set_VInt16{{-250}}",
		Target: VList_Set_VInt16{
			{
				-250: struct{}{},
			},
		},
		SourceLabel: "[]any{set[VInt16]{-250}}",
		Source: []interface{}{
			map[VInt16]struct{}{
				-250: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VMap_VBool_VBool{}",
		Target:      VList_VMap_VBool_VBool(nil),
		SourceLabel: "VList_VMap_VBool_VBool{}",
		Source:      VList_VMap_VBool_VBool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VMap_VBool_VBool{}",
		Target:      VList_VMap_VBool_VBool(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VMap_VBool_VBool{}",
		Target:      VList_VMap_VBool_VBool(nil),
		SourceLabel: "VList_Any{}",
		Source:      VList_Any(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VMap_VBool_VBool{{true: true}}",
		Target: VList_VMap_VBool_VBool{
			{
				true: true,
			},
		},
		SourceLabel: "VList_VMap_VBool_VBool{{true: true}}",
		Source: VList_VMap_VBool_VBool{
			{
				true: true,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VMap_VBool_VBool{{true: true}}",
		Target: VList_VMap_VBool_VBool{
			{
				true: true,
			},
		},
		SourceLabel: "VList_Any{VMap_VBool_VBool{true: true}}",
		Source: VList_Any{
			VMap_VBool_VBool{
				true: true,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VStructDepth1_All{}",
		Target:      VList_VStructDepth1_All(nil),
		SourceLabel: "VList_VStructDepth1_All{}",
		Source:      VList_VStructDepth1_All(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VStructDepth1_All{}",
		Target:      VList_VStructDepth1_All(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VStructDepth1_All{}",
		Target:      VList_VStructDepth1_All(nil),
		SourceLabel: "[]VStructDepth1_Rand0{}",
		Source:      []VStructDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VStructDepth1_All{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}",
		Target: VList_VStructDepth1_All{
			{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
		},
		SourceLabel: "VList_VStructDepth1_All{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}",
		Source: VList_VStructDepth1_All{
			{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VStructDepth1_All{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}",
		Target: VList_VStructDepth1_All{
			{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
		},
		SourceLabel: "VList_Any{VStructDepth1_All{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}",
		Source: VList_Any{
			VStructDepth1_All{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VStructDepth1_All{{F0: int8(5), F4: \"ghij\", F5: typeobject([]bool), F6: 192, F7: 4, F8: C, F11: {Id: \"jklmno\", RetryCode: RetryRefetch, Msg: \"klm\"}, F12: 4266, F13: 28902, F15: 3970415667, F16: 9486129575864578090, F17: 12058456539967958857, F18: 19, F22: -966216280, F23: -211655131, F25: 3728730146845766981, F26: -2.4851195e+09, F27: 3.0850634e+08, F28: -2.199522231425854e+09, F29: 2.1137356276573002e+08, F30: {}}, {F0: set[VStructEmpty]{{}}, F4: \"普\", F5: typeobject(VList_VUnionDepth2_All), F6: 164, F7: 180, F8: C, F9: C, F11: {Id: \"klmnopΔΘΠΣΦ\", RetryCode: RetryRefetch, Msg: \"ab\"}, F12: 21073, F14: 1796837508, F15: 575154625, F16: 12411282092136224509, F17: 16139797243025693823, F18: -7, F19: 24, F21: -6530, F22: -92705872, F23: -184589513, F24: 35285900527690906, F25: -1630077777113020576, F26: 1.3783112e+08, F27: 2.3134313e+09, F28: 1.7474280157908504e+09, F29: 4.40640535315854e+08}}",
		Target: VList_VStructDepth1_All{
			{
				F0: int8(5),
				F4: "ghij",
				F5: vdl.TypeOf((*[]bool)(nil)),
				F6: 192,
				F7: 4,
				F8: VEnumAbcC,
				F11: verror.FromWire(vdl.WireError{
					Id:        "jklmno",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "klm",
				}),
				F12: 4266,
				F13: 28902,
				F15: 3970415667,
				F16: 9486129575864578090,
				F17: 12058456539967958857,
				F18: 19,
				F22: -966216280,
				F23: -211655131,
				F25: 3728730146845766981,
				F26: -2.4851195e+09,
				F27: 3.0850634e+08,
				F28: -2.199522231425854e+09,
				F29: 2.1137356276573002e+08,
				F30: &VStructEmpty{},
			},
			{
				F0: map[VStructEmpty]struct{}{
					{}: struct{}{},
				},
				F4: "普",
				F5: vdl.TypeOf((*VList_VUnionDepth2_All)(nil)),
				F6: 164,
				F7: 180,
				F8: VEnumAbcC,
				F9: VEnumBcdC,
				F11: verror.FromWire(vdl.WireError{
					Id:        "klmnopΔΘΠΣΦ",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "ab",
				}),
				F12: 21073,
				F14: 1796837508,
				F15: 575154625,
				F16: 12411282092136224509,
				F17: 16139797243025693823,
				F18: -7,
				F19: 24,
				F21: -6530,
				F22: -92705872,
				F23: -184589513,
				F24: 35285900527690906,
				F25: -1630077777113020576,
				F26: 1.3783112e+08,
				F27: 2.3134313e+09,
				F28: 1.7474280157908504e+09,
				F29: 4.40640535315854e+08,
			},
		},
		SourceLabel: "VList_VStructDepth1_All{{F0: int8(5), F4: \"ghij\", F5: typeobject([]bool), F6: 192, F7: 4, F8: C, F11: {Id: \"jklmno\", RetryCode: RetryRefetch, Msg: \"klm\"}, F12: 4266, F13: 28902, F15: 3970415667, F16: 9486129575864578090, F17: 12058456539967958857, F18: 19, F22: -966216280, F23: -211655131, F25: 3728730146845766981, F26: -2.4851195e+09, F27: 3.0850634e+08, F28: -2.199522231425854e+09, F29: 2.1137356276573002e+08, F30: {}}, {F0: set[VStructEmpty]{{}}, F4: \"普\", F5: typeobject(VList_VUnionDepth2_All), F6: 164, F7: 180, F8: C, F9: C, F11: {Id: \"klmnopΔΘΠΣΦ\", RetryCode: RetryRefetch, Msg: \"ab\"}, F12: 21073, F14: 1796837508, F15: 575154625, F16: 12411282092136224509, F17: 16139797243025693823, F18: -7, F19: 24, F21: -6530, F22: -92705872, F23: -184589513, F24: 35285900527690906, F25: -1630077777113020576, F26: 1.3783112e+08, F27: 2.3134313e+09, F28: 1.7474280157908504e+09, F29: 4.40640535315854e+08}}",
		Source: VList_VStructDepth1_All{
			{
				F0: int8(5),
				F4: "ghij",
				F5: vdl.TypeOf((*[]bool)(nil)),
				F6: 192,
				F7: 4,
				F8: VEnumAbcC,
				F11: verror.FromWire(vdl.WireError{
					Id:        "jklmno",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "klm",
				}),
				F12: 4266,
				F13: 28902,
				F15: 3970415667,
				F16: 9486129575864578090,
				F17: 12058456539967958857,
				F18: 19,
				F22: -966216280,
				F23: -211655131,
				F25: 3728730146845766981,
				F26: -2.4851195e+09,
				F27: 3.0850634e+08,
				F28: -2.199522231425854e+09,
				F29: 2.1137356276573002e+08,
				F30: &VStructEmpty{},
			},
			{
				F0: map[VStructEmpty]struct{}{
					{}: struct{}{},
				},
				F4: "普",
				F5: vdl.TypeOf((*VList_VUnionDepth2_All)(nil)),
				F6: 164,
				F7: 180,
				F8: VEnumAbcC,
				F9: VEnumBcdC,
				F11: verror.FromWire(vdl.WireError{
					Id:        "klmnopΔΘΠΣΦ",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "ab",
				}),
				F12: 21073,
				F14: 1796837508,
				F15: 575154625,
				F16: 12411282092136224509,
				F17: 16139797243025693823,
				F18: -7,
				F19: 24,
				F21: -6530,
				F22: -92705872,
				F23: -184589513,
				F24: 35285900527690906,
				F25: -1630077777113020576,
				F26: 1.3783112e+08,
				F27: 2.3134313e+09,
				F28: 1.7474280157908504e+09,
				F29: 4.40640535315854e+08,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VStructDepth1_All{{F0: int8(5), F4: \"ghij\", F5: typeobject([]bool), F6: 192, F7: 4, F8: C, F11: {Id: \"jklmno\", RetryCode: RetryRefetch, Msg: \"klm\"}, F12: 4266, F13: 28902, F15: 3970415667, F16: 9486129575864578090, F17: 12058456539967958857, F18: 19, F22: -966216280, F23: -211655131, F25: 3728730146845766981, F26: -2.4851195e+09, F27: 3.0850634e+08, F28: -2.199522231425854e+09, F29: 2.1137356276573002e+08, F30: {}}, {F0: set[VStructEmpty]{{}}, F4: \"普\", F5: typeobject(VList_VUnionDepth2_All), F6: 164, F7: 180, F8: C, F9: C, F11: {Id: \"klmnopΔΘΠΣΦ\", RetryCode: RetryRefetch, Msg: \"ab\"}, F12: 21073, F14: 1796837508, F15: 575154625, F16: 12411282092136224509, F17: 16139797243025693823, F18: -7, F19: 24, F21: -6530, F22: -92705872, F23: -184589513, F24: 35285900527690906, F25: -1630077777113020576, F26: 1.3783112e+08, F27: 2.3134313e+09, F28: 1.7474280157908504e+09, F29: 4.40640535315854e+08}}",
		Target: VList_VStructDepth1_All{
			{
				F0: int8(5),
				F4: "ghij",
				F5: vdl.TypeOf((*[]bool)(nil)),
				F6: 192,
				F7: 4,
				F8: VEnumAbcC,
				F11: verror.FromWire(vdl.WireError{
					Id:        "jklmno",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "klm",
				}),
				F12: 4266,
				F13: 28902,
				F15: 3970415667,
				F16: 9486129575864578090,
				F17: 12058456539967958857,
				F18: 19,
				F22: -966216280,
				F23: -211655131,
				F25: 3728730146845766981,
				F26: -2.4851195e+09,
				F27: 3.0850634e+08,
				F28: -2.199522231425854e+09,
				F29: 2.1137356276573002e+08,
				F30: &VStructEmpty{},
			},
			{
				F0: map[VStructEmpty]struct{}{
					{}: struct{}{},
				},
				F4: "普",
				F5: vdl.TypeOf((*VList_VUnionDepth2_All)(nil)),
				F6: 164,
				F7: 180,
				F8: VEnumAbcC,
				F9: VEnumBcdC,
				F11: verror.FromWire(vdl.WireError{
					Id:        "klmnopΔΘΠΣΦ",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "ab",
				}),
				F12: 21073,
				F14: 1796837508,
				F15: 575154625,
				F16: 12411282092136224509,
				F17: 16139797243025693823,
				F18: -7,
				F19: 24,
				F21: -6530,
				F22: -92705872,
				F23: -184589513,
				F24: 35285900527690906,
				F25: -1630077777113020576,
				F26: 1.3783112e+08,
				F27: 2.3134313e+09,
				F28: 1.7474280157908504e+09,
				F29: 4.40640535315854e+08,
			},
		},
		SourceLabel: "[]any{VStructDepth1_All{F0: int8(5), F4: \"ghij\", F5: typeobject([]bool), F6: 192, F7: 4, F8: C, F11: {Id: \"jklmno\", RetryCode: RetryRefetch, Msg: \"klm\"}, F12: 4266, F13: 28902, F15: 3970415667, F16: 9486129575864578090, F17: 12058456539967958857, F18: 19, F22: -966216280, F23: -211655131, F25: 3728730146845766981, F26: -2.4851195e+09, F27: 3.0850634e+08, F28: -2.199522231425854e+09, F29: 2.1137356276573002e+08, F30: {}}, VStructDepth1_All{F0: set[VStructEmpty]{{}}, F4: \"普\", F5: typeobject(VList_VUnionDepth2_All), F6: 164, F7: 180, F8: C, F9: C, F11: {Id: \"klmnopΔΘΠΣΦ\", RetryCode: RetryRefetch, Msg: \"ab\"}, F12: 21073, F14: 1796837508, F15: 575154625, F16: 12411282092136224509, F17: 16139797243025693823, F18: -7, F19: 24, F21: -6530, F22: -92705872, F23: -184589513, F24: 35285900527690906, F25: -1630077777113020576, F26: 1.3783112e+08, F27: 2.3134313e+09, F28: 1.7474280157908504e+09, F29: 4.40640535315854e+08}}",
		Source: []interface{}{
			VStructDepth1_All{
				F0: int8(5),
				F4: "ghij",
				F5: vdl.TypeOf((*[]bool)(nil)),
				F6: 192,
				F7: 4,
				F8: VEnumAbcC,
				F11: verror.FromWire(vdl.WireError{
					Id:        "jklmno",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "klm",
				}),
				F12: 4266,
				F13: 28902,
				F15: 3970415667,
				F16: 9486129575864578090,
				F17: 12058456539967958857,
				F18: 19,
				F22: -966216280,
				F23: -211655131,
				F25: 3728730146845766981,
				F26: -2.4851195e+09,
				F27: 3.0850634e+08,
				F28: -2.199522231425854e+09,
				F29: 2.1137356276573002e+08,
				F30: &VStructEmpty{},
			},
			VStructDepth1_All{
				F0: map[VStructEmpty]struct{}{
					{}: struct{}{},
				},
				F4: "普",
				F5: vdl.TypeOf((*VList_VUnionDepth2_All)(nil)),
				F6: 164,
				F7: 180,
				F8: VEnumAbcC,
				F9: VEnumBcdC,
				F11: verror.FromWire(vdl.WireError{
					Id:        "klmnopΔΘΠΣΦ",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "ab",
				}),
				F12: 21073,
				F14: 1796837508,
				F15: 575154625,
				F16: 12411282092136224509,
				F17: 16139797243025693823,
				F18: -7,
				F19: 24,
				F21: -6530,
				F22: -92705872,
				F23: -184589513,
				F24: 35285900527690906,
				F25: -1630077777113020576,
				F26: 1.3783112e+08,
				F27: 2.3134313e+09,
				F28: 1.7474280157908504e+09,
				F29: 4.40640535315854e+08,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VStructDepth1_All{{F0: VList_VMap_VBool_VBool{{false: true, true: false}}, F2: true, F3: \"mnop\", F4: \"fghijkl\", F6: 161, F7: 241, F8: B, F11: {Id: \"ghij\", RetryCode: RetryRefetch, Msg: \"abcdefghijklmnopΔΘ\"}, F12: 24733, F13: 45960, F14: 3505261569, F16: 7943053407086744058, F17: 3757857731242091785, F18: 3, F19: -14, F21: -13430, F22: -517381375, F24: -355301716204349086, F25: -1691036775238692677, F26: 3.0881244e+09, F27: 7.240828e+08, F28: -4.4743079954544926e+08, F29: 4.677850102443165e+07}, {}}",
		Target: VList_VStructDepth1_All{
			{
				F0: VList_VMap_VBool_VBool{
					{
						false: true,
						true:  false,
					},
				},
				F2: true,
				F3: "mnop",
				F4: "fghijkl",
				F5: vdl.AnyType,
				F6: 161,
				F7: 241,
				F8: VEnumAbcB,
				F11: verror.FromWire(vdl.WireError{
					Id:        "ghij",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "abcdefghijklmnopΔΘ",
				}),
				F12: 24733,
				F13: 45960,
				F14: 3505261569,
				F16: 7943053407086744058,
				F17: 3757857731242091785,
				F18: 3,
				F19: -14,
				F21: -13430,
				F22: -517381375,
				F24: -355301716204349086,
				F25: -1691036775238692677,
				F26: 3.0881244e+09,
				F27: 7.240828e+08,
				F28: -4.4743079954544926e+08,
				F29: 4.677850102443165e+07,
			},
			{
				F5: vdl.AnyType,
			},
		},
		SourceLabel: "VList_VStructDepth1_All{{F0: VList_VMap_VBool_VBool{{false: true, true: false}}, F2: true, F3: \"mnop\", F4: \"fghijkl\", F6: 161, F7: 241, F8: B, F11: {Id: \"ghij\", RetryCode: RetryRefetch, Msg: \"abcdefghijklmnopΔΘ\"}, F12: 24733, F13: 45960, F14: 3505261569, F16: 7943053407086744058, F17: 3757857731242091785, F18: 3, F19: -14, F21: -13430, F22: -517381375, F24: -355301716204349086, F25: -1691036775238692677, F26: 3.0881244e+09, F27: 7.240828e+08, F28: -4.4743079954544926e+08, F29: 4.677850102443165e+07}, {}}",
		Source: VList_VStructDepth1_All{
			{
				F0: VList_VMap_VBool_VBool{
					{
						false: true,
						true:  false,
					},
				},
				F2: true,
				F3: "mnop",
				F4: "fghijkl",
				F5: vdl.AnyType,
				F6: 161,
				F7: 241,
				F8: VEnumAbcB,
				F11: verror.FromWire(vdl.WireError{
					Id:        "ghij",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "abcdefghijklmnopΔΘ",
				}),
				F12: 24733,
				F13: 45960,
				F14: 3505261569,
				F16: 7943053407086744058,
				F17: 3757857731242091785,
				F18: 3,
				F19: -14,
				F21: -13430,
				F22: -517381375,
				F24: -355301716204349086,
				F25: -1691036775238692677,
				F26: 3.0881244e+09,
				F27: 7.240828e+08,
				F28: -4.4743079954544926e+08,
				F29: 4.677850102443165e+07,
			},
			{
				F5: vdl.AnyType,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VStructDepth1_All{{F0: VList_VMap_VBool_VBool{{false: true, true: false}}, F2: true, F3: \"mnop\", F4: \"fghijkl\", F6: 161, F7: 241, F8: B, F11: {Id: \"ghij\", RetryCode: RetryRefetch, Msg: \"abcdefghijklmnopΔΘ\"}, F12: 24733, F13: 45960, F14: 3505261569, F16: 7943053407086744058, F17: 3757857731242091785, F18: 3, F19: -14, F21: -13430, F22: -517381375, F24: -355301716204349086, F25: -1691036775238692677, F26: 3.0881244e+09, F27: 7.240828e+08, F28: -4.4743079954544926e+08, F29: 4.677850102443165e+07}, {}}",
		Target: VList_VStructDepth1_All{
			{
				F0: VList_VMap_VBool_VBool{
					{
						false: true,
						true:  false,
					},
				},
				F2: true,
				F3: "mnop",
				F4: "fghijkl",
				F5: vdl.AnyType,
				F6: 161,
				F7: 241,
				F8: VEnumAbcB,
				F11: verror.FromWire(vdl.WireError{
					Id:        "ghij",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "abcdefghijklmnopΔΘ",
				}),
				F12: 24733,
				F13: 45960,
				F14: 3505261569,
				F16: 7943053407086744058,
				F17: 3757857731242091785,
				F18: 3,
				F19: -14,
				F21: -13430,
				F22: -517381375,
				F24: -355301716204349086,
				F25: -1691036775238692677,
				F26: 3.0881244e+09,
				F27: 7.240828e+08,
				F28: -4.4743079954544926e+08,
				F29: 4.677850102443165e+07,
			},
			{
				F5: vdl.AnyType,
			},
		},
		SourceLabel: "[]any{VStructDepth1_All{F0: VList_VMap_VBool_VBool{{false: true, true: false}}, F2: true, F3: \"mnop\", F4: \"fghijkl\", F6: 161, F7: 241, F8: B, F11: {Id: \"ghij\", RetryCode: RetryRefetch, Msg: \"abcdefghijklmnopΔΘ\"}, F12: 24733, F13: 45960, F14: 3505261569, F16: 7943053407086744058, F17: 3757857731242091785, F18: 3, F19: -14, F21: -13430, F22: -517381375, F24: -355301716204349086, F25: -1691036775238692677, F26: 3.0881244e+09, F27: 7.240828e+08, F28: -4.4743079954544926e+08, F29: 4.677850102443165e+07}, VStructDepth1_All{}}",
		Source: []interface{}{
			VStructDepth1_All{
				F0: VList_VMap_VBool_VBool{
					{
						false: true,
						true:  false,
					},
				},
				F2: true,
				F3: "mnop",
				F4: "fghijkl",
				F5: vdl.AnyType,
				F6: 161,
				F7: 241,
				F8: VEnumAbcB,
				F11: verror.FromWire(vdl.WireError{
					Id:        "ghij",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "abcdefghijklmnopΔΘ",
				}),
				F12: 24733,
				F13: 45960,
				F14: 3505261569,
				F16: 7943053407086744058,
				F17: 3757857731242091785,
				F18: 3,
				F19: -14,
				F21: -13430,
				F22: -517381375,
				F24: -355301716204349086,
				F25: -1691036775238692677,
				F26: 3.0881244e+09,
				F27: 7.240828e+08,
				F28: -4.4743079954544926e+08,
				F29: 4.677850102443165e+07,
			},
			VStructDepth1_All{
				F5: vdl.AnyType,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VUnionDepth1_Rand0{}",
		Target:      VList_VUnionDepth1_Rand0(nil),
		SourceLabel: "VList_VUnionDepth1_Rand0{}",
		Source:      VList_VUnionDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VUnionDepth1_Rand0{}",
		Target:      VList_VUnionDepth1_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VUnionDepth1_Rand0{}",
		Target:      VList_VUnionDepth1_Rand0(nil),
		SourceLabel: "[]VUnionDepth1_All{}",
		Source:      []VUnionDepth1_All(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VUnionDepth1_Rand0{{F28: 1.23}}",
		Target: VList_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23},
		},
		SourceLabel: "VList_VUnionDepth1_Rand0{{F28: 1.23}}",
		Source: VList_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VUnionDepth1_Rand0{{F28: 1.23}}",
		Target: VList_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23},
		},
		SourceLabel: "[]VUnionDepth1_All{{F28: 1.23}}",
		Source: []VUnionDepth1_All{
			VUnionDepth1_AllF28{1.23},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VUnionDepth1_Rand0{{F28: 1.221035479133492e+08}, {F16: 10115693302158257092}}",
		Target: VList_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.221035479133492e+08},
			VUnionDepth1_Rand0F16{10115693302158257092},
		},
		SourceLabel: "VList_VUnionDepth1_Rand0{{F28: 1.221035479133492e+08}, {F16: 10115693302158257092}}",
		Source: VList_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.221035479133492e+08},
			VUnionDepth1_Rand0F16{10115693302158257092},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VUnionDepth1_Rand0{{F28: 1.221035479133492e+08}, {F16: 10115693302158257092}}",
		Target: VList_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.221035479133492e+08},
			VUnionDepth1_Rand0F16{10115693302158257092},
		},
		SourceLabel: "[]any{VUnionDepth1_Rand0{F28: 1.221035479133492e+08}, VUnionDepth1_Rand0{F16: 10115693302158257092}}",
		Source: []interface{}{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F28{1.221035479133492e+08}),
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F16{10115693302158257092}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VUnionDepth1_Rand0{{F8: B}}",
		Target: VList_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{VEnumAbcB},
		},
		SourceLabel: "VList_VUnionDepth1_Rand0{{F8: B}}",
		Source: VList_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{VEnumAbcB},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VUnionDepth1_Rand0{{F8: B}}",
		Target: VList_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{VEnumAbcB},
		},
		SourceLabel: "[]any{VUnionDepth1_Rand0{F8: B}}",
		Source: []interface{}{
			VUnionDepth1_Rand0(VUnionDepth1_Rand0F8{VEnumAbcB}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_OptVStructDepth1_Rand0{}",
		Target:      VList_OptVStructDepth1_Rand0(nil),
		SourceLabel: "VList_OptVStructDepth1_Rand0{}",
		Source:      VList_OptVStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_OptVStructDepth1_Rand0{}",
		Target:      VList_OptVStructDepth1_Rand0(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_OptVStructDepth1_Rand0{}",
		Target:      VList_OptVStructDepth1_Rand0(nil),
		SourceLabel: "VList_VStructDepth1_All{}",
		Source:      VList_VStructDepth1_All(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_OptVStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VList_OptVStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VList_OptVStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VList_OptVStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_OptVStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VList_OptVStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VArray1_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VArray1_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_OptVStructDepth1_Rand0{{F4: \"王普\", F21: -15532}}",
		Target: VList_OptVStructDepth1_Rand0{
			{
				F4:  "王普",
				F21: -15532,
			},
		},
		SourceLabel: "VList_OptVStructDepth1_Rand0{{F4: \"王普\", F21: -15532}}",
		Source: VList_OptVStructDepth1_Rand0{
			{
				F4:  "王普",
				F21: -15532,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_OptVStructDepth1_Rand0{{F4: \"王普\", F21: -15532}}",
		Target: VList_OptVStructDepth1_Rand0{
			{
				F4:  "王普",
				F21: -15532,
			},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{F4: \"王普\", F21: -15532}}",
		Source: []VStructDepth1_Rand0{
			{
				F4:  "王普",
				F21: -15532,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_OptVStructDepth1_Rand0{{}}",
		Target: VList_OptVStructDepth1_Rand0{
			{},
		},
		SourceLabel: "VList_OptVStructDepth1_Rand0{{}}",
		Source: VList_OptVStructDepth1_Rand0{
			{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_OptVStructDepth1_Rand0{{}}",
		Target: VList_OptVStructDepth1_Rand0{
			{},
		},
		SourceLabel: "[]VStructDepth1_Rand0{{}}",
		Source: []VStructDepth1_Rand0{
			{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VArray2_VEnumBcd]{}",
		Target:      map[VArray2_VEnumBcd]struct{}(nil),
		SourceLabel: "set[VArray2_VEnumBcd]{}",
		Source:      map[VArray2_VEnumBcd]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VArray2_VEnumBcd]{{D, D}}",
		Target: map[VArray2_VEnumBcd]struct{}{
			{
				VEnumBcdD,
				VEnumBcdD,
			}: struct{}{},
		},
		SourceLabel: "set[VArray2_VEnumBcd]{{D, D}}",
		Source: map[VArray2_VEnumBcd]struct{}{
			{
				VEnumBcdD,
				VEnumBcdD,
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VStructDepth1_Rand0]{}",
		Target:      map[VStructDepth1_Rand0]struct{}(nil),
		SourceLabel: "set[VStructDepth1_Rand0]{}",
		Source:      map[VStructDepth1_Rand0]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VStructDepth1_Rand0]{}",
		Target:      map[VStructDepth1_Rand0]struct{}(nil),
		SourceLabel: "VSet_VStructDepth1_Rand0{}",
		Source:      VSet_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VStructDepth1_Rand0]{}",
		Target:      map[VStructDepth1_Rand0]struct{}(nil),
		SourceLabel: "set[VStructEmpty]{}",
		Source:      map[VStructEmpty]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VStructDepth1_Rand0]{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: map[VStructDepth1_Rand0]struct{}{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: struct{}{},
		},
		SourceLabel: "set[VStructDepth1_Rand0]{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: map[VStructDepth1_Rand0]struct{}{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[VStructDepth1_Rand0]{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: map[VStructDepth1_Rand0]struct{}{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: struct{}{},
		},
		SourceLabel: "VSet_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VSet_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VStructDepth1_Rand0]{{}, {F15: 3555439544, F21: -9629}, {F4: \"def\", F15: 2421714516}}",
		Target: map[VStructDepth1_Rand0]struct{}{
			{}: struct{}{},
			{
				F15: 3555439544,
				F21: -9629,
			}: struct{}{},
			{
				F4:  "def",
				F15: 2421714516,
			}: struct{}{},
		},
		SourceLabel: "set[VStructDepth1_Rand0]{{}, {F15: 3555439544, F21: -9629}, {F4: \"def\", F15: 2421714516}}",
		Source: map[VStructDepth1_Rand0]struct{}{
			{}: struct{}{},
			{
				F15: 3555439544,
				F21: -9629,
			}: struct{}{},
			{
				F4:  "def",
				F15: 2421714516,
			}: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VStructDepth1_Rand0]{{}, {F15: 3555439544, F21: -9629}, {F4: \"def\", F15: 2421714516}}",
		Target: map[VStructDepth1_Rand0]struct{}{
			{}: struct{}{},
			{
				F15: 3555439544,
				F21: -9629,
			}: struct{}{},
			{
				F4:  "def",
				F15: 2421714516,
			}: struct{}{},
		},
		SourceLabel: "VSet_VStructDepth1_Rand0{{}, {F15: 3555439544, F21: -9629}, {F4: \"def\", F15: 2421714516}}",
		Source: VSet_VStructDepth1_Rand0{
			{}: struct{}{},
			{
				F15: 3555439544,
				F21: -9629,
			}: struct{}{},
			{
				F4:  "def",
				F15: 2421714516,
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VStructDepth1_Rand0]{{F15: 2761338599, F21: 1904}, {F4: \"bcdefghij\", F15: 1005044611, F21: 15113}, {F4: \"cdefghijklmnopΔΘΠ\", F15: 751517704, F21: 644}}",
		Target: map[VStructDepth1_Rand0]struct{}{
			{
				F15: 2761338599,
				F21: 1904,
			}: struct{}{},
			{
				F4:  "bcdefghij",
				F15: 1005044611,
				F21: 15113,
			}: struct{}{},
			{
				F4:  "cdefghijklmnopΔΘΠ",
				F15: 751517704,
				F21: 644,
			}: struct{}{},
		},
		SourceLabel: "set[VStructDepth1_Rand0]{{F15: 2761338599, F21: 1904}, {F4: \"bcdefghij\", F15: 1005044611, F21: 15113}, {F4: \"cdefghijklmnopΔΘΠ\", F15: 751517704, F21: 644}}",
		Source: map[VStructDepth1_Rand0]struct{}{
			{
				F15: 2761338599,
				F21: 1904,
			}: struct{}{},
			{
				F4:  "bcdefghij",
				F15: 1005044611,
				F21: 15113,
			}: struct{}{},
			{
				F4:  "cdefghijklmnopΔΘΠ",
				F15: 751517704,
				F21: 644,
			}: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VStructDepth1_Rand0]{{F15: 2761338599, F21: 1904}, {F4: \"bcdefghij\", F15: 1005044611, F21: 15113}, {F4: \"cdefghijklmnopΔΘΠ\", F15: 751517704, F21: 644}}",
		Target: map[VStructDepth1_Rand0]struct{}{
			{
				F15: 2761338599,
				F21: 1904,
			}: struct{}{},
			{
				F4:  "bcdefghij",
				F15: 1005044611,
				F21: 15113,
			}: struct{}{},
			{
				F4:  "cdefghijklmnopΔΘΠ",
				F15: 751517704,
				F21: 644,
			}: struct{}{},
		},
		SourceLabel: "VSet_VStructDepth1_Rand0{{F15: 2761338599, F21: 1904}, {F4: \"bcdefghij\", F15: 1005044611, F21: 15113}, {F4: \"cdefghijklmnopΔΘΠ\", F15: 751517704, F21: 644}}",
		Source: VSet_VStructDepth1_Rand0{
			{
				F15: 2761338599,
				F21: 1904,
			}: struct{}{},
			{
				F4:  "bcdefghij",
				F15: 1005044611,
				F21: 15113,
			}: struct{}{},
			{
				F4:  "cdefghijklmnopΔΘΠ",
				F15: 751517704,
				F21: 644,
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VUnionDepth1_Rand0]{}",
		Target:      map[VUnionDepth1_Rand0]struct{}(nil),
		SourceLabel: "set[VUnionDepth1_Rand0]{}",
		Source:      map[VUnionDepth1_Rand0]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "set[VUnionDepth1_Rand0]{}",
		Target:      map[VUnionDepth1_Rand0]struct{}(nil),
		SourceLabel: "VSet_VUnionDepth1_Rand0{}",
		Source:      VSet_VUnionDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VUnionDepth1_Rand0]{{F28: 1.23}}",
		Target: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F28{1.23}: struct{}{},
		},
		SourceLabel: "set[VUnionDepth1_Rand0]{{F28: 1.23}}",
		Source: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F28{1.23}: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "set[VUnionDepth1_Rand0]{{F28: 1.23}}",
		Target: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F28{1.23}: struct{}{},
		},
		SourceLabel: "VSet_VUnionDepth1_Rand0{{F28: 1.23}}",
		Source: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VUnionDepth1_Rand0]{{F16: 0}, {F28: 1.1991077835447824e+09}}",
		Target: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F16{}:                       struct{}{},
			VUnionDepth1_Rand0F28{1.1991077835447824e+09}: struct{}{},
		},
		SourceLabel: "set[VUnionDepth1_Rand0]{{F16: 0}, {F28: 1.1991077835447824e+09}}",
		Source: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F16{}:                       struct{}{},
			VUnionDepth1_Rand0F28{1.1991077835447824e+09}: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VUnionDepth1_Rand0]{{F16: 0}, {F28: 1.1991077835447824e+09}}",
		Target: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F16{}:                       struct{}{},
			VUnionDepth1_Rand0F28{1.1991077835447824e+09}: struct{}{},
		},
		SourceLabel: "VSet_VUnionDepth1_Rand0{{F16: 0}, {F28: 1.1991077835447824e+09}}",
		Source: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F16{}:                       struct{}{},
			VUnionDepth1_Rand0F28{1.1991077835447824e+09}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VUnionDepth1_Rand0]{{F16: 490330009093228330}, {F16: 5007534790095526588}}",
		Target: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F16{490330009093228330}:  struct{}{},
			VUnionDepth1_Rand0F16{5007534790095526588}: struct{}{},
		},
		SourceLabel: "set[VUnionDepth1_Rand0]{{F16: 490330009093228330}, {F16: 5007534790095526588}}",
		Source: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F16{490330009093228330}:  struct{}{},
			VUnionDepth1_Rand0F16{5007534790095526588}: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "set[VUnionDepth1_Rand0]{{F16: 490330009093228330}, {F16: 5007534790095526588}}",
		Target: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F16{490330009093228330}:  struct{}{},
			VUnionDepth1_Rand0F16{5007534790095526588}: struct{}{},
		},
		SourceLabel: "VSet_VUnionDepth1_Rand0{{F16: 490330009093228330}, {F16: 5007534790095526588}}",
		Source: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F16{490330009093228330}:  struct{}{},
			VUnionDepth1_Rand0F16{5007534790095526588}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VArray3_Bool{}",
		Target:      VSet_VArray3_Bool(nil),
		SourceLabel: "VSet_VArray3_Bool{}",
		Source:      VSet_VArray3_Bool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VArray3_Bool{{true, true, true}}",
		Target: VSet_VArray3_Bool{
			{
				true,
				true,
				true,
			}: struct{}{},
		},
		SourceLabel: "VSet_VArray3_Bool{{true, true, true}}",
		Source: VSet_VArray3_Bool{
			{
				true,
				true,
				true,
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VStructDepth1_Rand0{}",
		Target:      VSet_VStructDepth1_Rand0(nil),
		SourceLabel: "VSet_VStructDepth1_Rand0{}",
		Source:      VSet_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VStructDepth1_Rand0{}",
		Target:      VSet_VStructDepth1_Rand0(nil),
		SourceLabel: "set[VStructDepth1_Rand0]{}",
		Source:      map[VStructDepth1_Rand0]struct{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VStructDepth1_Rand0{}",
		Target:      VSet_VStructDepth1_Rand0(nil),
		SourceLabel: "set[VStructEmpty]{}",
		Source:      map[VStructEmpty]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VSet_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: struct{}{},
		},
		SourceLabel: "VSet_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VSet_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VSet_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: struct{}{},
		},
		SourceLabel: "set[VStructDepth1_Rand0]{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: map[VStructDepth1_Rand0]struct{}{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VStructDepth1_Rand0{{F4: \"lmnopΔΘΠΣΦ王普澤\", F15: 1441623062, F21: -1036}, {F4: \"普澤世\", F15: 679956298, F21: -14792}}",
		Target: VSet_VStructDepth1_Rand0{
			{
				F4:  "lmnopΔΘΠΣΦ王普澤",
				F15: 1441623062,
				F21: -1036,
			}: struct{}{},
			{
				F4:  "普澤世",
				F15: 679956298,
				F21: -14792,
			}: struct{}{},
		},
		SourceLabel: "VSet_VStructDepth1_Rand0{{F4: \"lmnopΔΘΠΣΦ王普澤\", F15: 1441623062, F21: -1036}, {F4: \"普澤世\", F15: 679956298, F21: -14792}}",
		Source: VSet_VStructDepth1_Rand0{
			{
				F4:  "lmnopΔΘΠΣΦ王普澤",
				F15: 1441623062,
				F21: -1036,
			}: struct{}{},
			{
				F4:  "普澤世",
				F15: 679956298,
				F21: -14792,
			}: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VStructDepth1_Rand0{{F4: \"lmnopΔΘΠΣΦ王普澤\", F15: 1441623062, F21: -1036}, {F4: \"普澤世\", F15: 679956298, F21: -14792}}",
		Target: VSet_VStructDepth1_Rand0{
			{
				F4:  "lmnopΔΘΠΣΦ王普澤",
				F15: 1441623062,
				F21: -1036,
			}: struct{}{},
			{
				F4:  "普澤世",
				F15: 679956298,
				F21: -14792,
			}: struct{}{},
		},
		SourceLabel: "set[VStructDepth1_Rand0]{{F4: \"lmnopΔΘΠΣΦ王普澤\", F15: 1441623062, F21: -1036}, {F4: \"普澤世\", F15: 679956298, F21: -14792}}",
		Source: map[VStructDepth1_Rand0]struct{}{
			{
				F4:  "lmnopΔΘΠΣΦ王普澤",
				F15: 1441623062,
				F21: -1036,
			}: struct{}{},
			{
				F4:  "普澤世",
				F15: 679956298,
				F21: -14792,
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VStructDepth1_Rand0{{F4: \"bcdefg\"}, {F4: \"普澤世\", F15: 508506532, F21: 4643}}",
		Target: VSet_VStructDepth1_Rand0{
			{
				F4: "bcdefg",
			}: struct{}{},
			{
				F4:  "普澤世",
				F15: 508506532,
				F21: 4643,
			}: struct{}{},
		},
		SourceLabel: "VSet_VStructDepth1_Rand0{{F4: \"bcdefg\"}, {F4: \"普澤世\", F15: 508506532, F21: 4643}}",
		Source: VSet_VStructDepth1_Rand0{
			{
				F4: "bcdefg",
			}: struct{}{},
			{
				F4:  "普澤世",
				F15: 508506532,
				F21: 4643,
			}: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VStructDepth1_Rand0{{F4: \"bcdefg\"}, {F4: \"普澤世\", F15: 508506532, F21: 4643}}",
		Target: VSet_VStructDepth1_Rand0{
			{
				F4: "bcdefg",
			}: struct{}{},
			{
				F4:  "普澤世",
				F15: 508506532,
				F21: 4643,
			}: struct{}{},
		},
		SourceLabel: "set[VStructDepth1_Rand0]{{F4: \"bcdefg\"}, {F4: \"普澤世\", F15: 508506532, F21: 4643}}",
		Source: map[VStructDepth1_Rand0]struct{}{
			{
				F4: "bcdefg",
			}: struct{}{},
			{
				F4:  "普澤世",
				F15: 508506532,
				F21: 4643,
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VUnionDepth1_Rand0{}",
		Target:      VSet_VUnionDepth1_Rand0(nil),
		SourceLabel: "VSet_VUnionDepth1_Rand0{}",
		Source:      VSet_VUnionDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VSet_VUnionDepth1_Rand0{}",
		Target:      VSet_VUnionDepth1_Rand0(nil),
		SourceLabel: "set[VUnionDepth1_Rand0]{}",
		Source:      map[VUnionDepth1_Rand0]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VUnionDepth1_Rand0{{F28: 1.23}}",
		Target: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: struct{}{},
		},
		SourceLabel: "VSet_VUnionDepth1_Rand0{{F28: 1.23}}",
		Source: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: struct{}{},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VSet_VUnionDepth1_Rand0{{F28: 1.23}}",
		Target: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: struct{}{},
		},
		SourceLabel: "set[VUnionDepth1_Rand0]{{F28: 1.23}}",
		Source: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F28{1.23}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VUnionDepth1_Rand0{{F8: A}}",
		Target: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{}: struct{}{},
		},
		SourceLabel: "VSet_VUnionDepth1_Rand0{{F8: A}}",
		Source: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{}: struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VUnionDepth1_Rand0{{F8: A}}",
		Target: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{}: struct{}{},
		},
		SourceLabel: "set[VUnionDepth1_Rand0]{{F8: A}}",
		Source: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F8{}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VSet_VUnionDepth1_Rand0{{F28: 9.886473838557136e+08}, {F8: A}}",
		Target: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{9.886473838557136e+08}: struct{}{},
			VUnionDepth1_Rand0F8{}:                       struct{}{},
		},
		SourceLabel: "VSet_VUnionDepth1_Rand0{{F28: 9.886473838557136e+08}, {F8: A}}",
		Source: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{9.886473838557136e+08}: struct{}{},
			VUnionDepth1_Rand0F8{}:                       struct{}{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VSet_VUnionDepth1_Rand0{{F28: 9.886473838557136e+08}, {F8: A}}",
		Target: VSet_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{9.886473838557136e+08}: struct{}{},
			VUnionDepth1_Rand0F8{}:                       struct{}{},
		},
		SourceLabel: "set[VUnionDepth1_Rand0]{{F28: 9.886473838557136e+08}, {F8: A}}",
		Source: map[VUnionDepth1_Rand0]struct{}{
			VUnionDepth1_Rand0F28{9.886473838557136e+08}: struct{}{},
			VUnionDepth1_Rand0F8{}:                       struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VArray1_VStructEmpty]VArray1_VStructEmpty{}",
		Target:      map[VArray1_VStructEmpty]VArray1_VStructEmpty(nil),
		SourceLabel: "map[VArray1_VStructEmpty]VArray1_VStructEmpty{}",
		Source:      map[VArray1_VStructEmpty]VArray1_VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VArray1_VStructEmpty]VArray1_VStructEmpty{}",
		Target:      map[VArray1_VStructEmpty]VArray1_VStructEmpty(nil),
		SourceLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{}",
		Source:      VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VArray1_VStructEmpty]VArray1_VStructEmpty{{}: {}}",
		Target: map[VArray1_VStructEmpty]VArray1_VStructEmpty{
			{}: {},
		},
		SourceLabel: "map[VArray1_VStructEmpty]VArray1_VStructEmpty{{}: {}}",
		Source: map[VArray1_VStructEmpty]VArray1_VStructEmpty{
			{}: {},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VArray1_VStructEmpty]VArray1_VStructEmpty{{}: {}}",
		Target: map[VArray1_VStructEmpty]VArray1_VStructEmpty{
			{}: {},
		},
		SourceLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{{}: {}}",
		Source: VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{
			{}: {},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Target:      map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Source:      map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Target:      map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Source:      VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Target:      map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
		SourceLabel: "map[VStructEmpty]VStructEmpty{}",
		Source:      map[VStructEmpty]VStructEmpty(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: {
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: {
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: {
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: {
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{}: {F4: \"defghijklmnopΔΘΠΣ\", F15: 3171307662}, {F4: \"nopΔΘΠΣΦ王普澤世界\", F15: 214930472, F21: -6451}: {F4: \"cdefghijklmnopΔΘΠΣΦ王\", F15: 2817991523}, {F4: \"普\", F15: 4000333781, F21: -7247}: {F4: \"nopΔΘΠΣΦ王普澤\", F15: 1604953329, F21: 1736}}",
		Target: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{}: {
				F4:  "defghijklmnopΔΘΠΣ",
				F15: 3171307662,
			},
			{
				F4:  "nopΔΘΠΣΦ王普澤世界",
				F15: 214930472,
				F21: -6451,
			}: {
				F4:  "cdefghijklmnopΔΘΠΣΦ王",
				F15: 2817991523,
			},
			{
				F4:  "普",
				F15: 4000333781,
				F21: -7247,
			}: {
				F4:  "nopΔΘΠΣΦ王普澤",
				F15: 1604953329,
				F21: 1736,
			},
		},
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{}: {F4: \"defghijklmnopΔΘΠΣ\", F15: 3171307662}, {F4: \"nopΔΘΠΣΦ王普澤世界\", F15: 214930472, F21: -6451}: {F4: \"cdefghijklmnopΔΘΠΣΦ王\", F15: 2817991523}, {F4: \"普\", F15: 4000333781, F21: -7247}: {F4: \"nopΔΘΠΣΦ王普澤\", F15: 1604953329, F21: 1736}}",
		Source: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{}: {
				F4:  "defghijklmnopΔΘΠΣ",
				F15: 3171307662,
			},
			{
				F4:  "nopΔΘΠΣΦ王普澤世界",
				F15: 214930472,
				F21: -6451,
			}: {
				F4:  "cdefghijklmnopΔΘΠΣΦ王",
				F15: 2817991523,
			},
			{
				F4:  "普",
				F15: 4000333781,
				F21: -7247,
			}: {
				F4:  "nopΔΘΠΣΦ王普澤",
				F15: 1604953329,
				F21: 1736,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{}: {F4: \"defghijklmnopΔΘΠΣ\", F15: 3171307662}, {F4: \"nopΔΘΠΣΦ王普澤世界\", F15: 214930472, F21: -6451}: {F4: \"cdefghijklmnopΔΘΠΣΦ王\", F15: 2817991523}, {F4: \"普\", F15: 4000333781, F21: -7247}: {F4: \"nopΔΘΠΣΦ王普澤\", F15: 1604953329, F21: 1736}}",
		Target: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{}: {
				F4:  "defghijklmnopΔΘΠΣ",
				F15: 3171307662,
			},
			{
				F4:  "nopΔΘΠΣΦ王普澤世界",
				F15: 214930472,
				F21: -6451,
			}: {
				F4:  "cdefghijklmnopΔΘΠΣΦ王",
				F15: 2817991523,
			},
			{
				F4:  "普",
				F15: 4000333781,
				F21: -7247,
			}: {
				F4:  "nopΔΘΠΣΦ王普澤",
				F15: 1604953329,
				F21: 1736,
			},
		},
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{}: {F4: \"defghijklmnopΔΘΠΣ\", F15: 3171307662}, {F4: \"nopΔΘΠΣΦ王普澤世界\", F15: 214930472, F21: -6451}: {F4: \"cdefghijklmnopΔΘΠΣΦ王\", F15: 2817991523}, {F4: \"普\", F15: 4000333781, F21: -7247}: {F4: \"nopΔΘΠΣΦ王普澤\", F15: 1604953329, F21: 1736}}",
		Source: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{}: {
				F4:  "defghijklmnopΔΘΠΣ",
				F15: 3171307662,
			},
			{
				F4:  "nopΔΘΠΣΦ王普澤世界",
				F15: 214930472,
				F21: -6451,
			}: {
				F4:  "cdefghijklmnopΔΘΠΣΦ王",
				F15: 2817991523,
			},
			{
				F4:  "普",
				F15: 4000333781,
				F21: -7247,
			}: {
				F4:  "nopΔΘΠΣΦ王普澤",
				F15: 1604953329,
				F21: 1736,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{}: {F4: \"defghijklmnopΔΘΠΣΦ王\", F21: 2383}, {F4: \"bcdefghijklmnop\", F15: 2161334533, F21: 8158}: {F4: \"cdefghijklmnopΔΘΠΣΦ王\", F21: -876}}",
		Target: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{}: {
				F4:  "defghijklmnopΔΘΠΣΦ王",
				F21: 2383,
			},
			{
				F4:  "bcdefghijklmnop",
				F15: 2161334533,
				F21: 8158,
			}: {
				F4:  "cdefghijklmnopΔΘΠΣΦ王",
				F21: -876,
			},
		},
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{}: {F4: \"defghijklmnopΔΘΠΣΦ王\", F21: 2383}, {F4: \"bcdefghijklmnop\", F15: 2161334533, F21: 8158}: {F4: \"cdefghijklmnopΔΘΠΣΦ王\", F21: -876}}",
		Source: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{}: {
				F4:  "defghijklmnopΔΘΠΣΦ王",
				F21: 2383,
			},
			{
				F4:  "bcdefghijklmnop",
				F15: 2161334533,
				F21: 8158,
			}: {
				F4:  "cdefghijklmnopΔΘΠΣΦ王",
				F21: -876,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{}: {F4: \"defghijklmnopΔΘΠΣΦ王\", F21: 2383}, {F4: \"bcdefghijklmnop\", F15: 2161334533, F21: 8158}: {F4: \"cdefghijklmnopΔΘΠΣΦ王\", F21: -876}}",
		Target: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{}: {
				F4:  "defghijklmnopΔΘΠΣΦ王",
				F21: 2383,
			},
			{
				F4:  "bcdefghijklmnop",
				F15: 2161334533,
				F21: 8158,
			}: {
				F4:  "cdefghijklmnopΔΘΠΣΦ王",
				F21: -876,
			},
		},
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{}: {F4: \"defghijklmnopΔΘΠΣΦ王\", F21: 2383}, {F4: \"bcdefghijklmnop\", F15: 2161334533, F21: 8158}: {F4: \"cdefghijklmnopΔΘΠΣΦ王\", F21: -876}}",
		Source: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{}: {
				F4:  "defghijklmnopΔΘΠΣΦ王",
				F21: 2383,
			},
			{
				F4:  "bcdefghijklmnop",
				F15: 2161334533,
				F21: 8158,
			}: {
				F4:  "cdefghijklmnopΔΘΠΣΦ王",
				F21: -876,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{}",
		Target:      map[VUnionDepth1_Rand0]VUnionDepth1_Rand0(nil),
		SourceLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{}",
		Source:      map[VUnionDepth1_Rand0]VUnionDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{}",
		Target:      map[VUnionDepth1_Rand0]VUnionDepth1_Rand0(nil),
		SourceLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{}",
		Source:      VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F28: 1.23}: {F28: 1.23}}",
		Target: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
		},
		SourceLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F28: 1.23}: {F28: 1.23}}",
		Source: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F28: 1.23}: {F28: 1.23}}",
		Target: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
		},
		SourceLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F28: 1.23}: {F28: 1.23}}",
		Source: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F10: {}}: {F10: {}}, {F8: A}: {F28: -2.1931172965358394e+08}}",
		Target: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F10{},
			VUnionDepth1_Rand0F8{}:  VUnionDepth1_Rand0F28{-2.1931172965358394e+08},
		},
		SourceLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F10: {}}: {F10: {}}, {F8: A}: {F28: -2.1931172965358394e+08}}",
		Source: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F10{},
			VUnionDepth1_Rand0F8{}:  VUnionDepth1_Rand0F28{-2.1931172965358394e+08},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F10: {}}: {F10: {}}, {F8: A}: {F28: -2.1931172965358394e+08}}",
		Target: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F10{},
			VUnionDepth1_Rand0F8{}:  VUnionDepth1_Rand0F28{-2.1931172965358394e+08},
		},
		SourceLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F10: {}}: {F10: {}}, {F8: A}: {F28: -2.1931172965358394e+08}}",
		Source: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F10{},
			VUnionDepth1_Rand0F8{}:  VUnionDepth1_Rand0F28{-2.1931172965358394e+08},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F8: A}: {F28: -8.979648282933791e+07}}",
		Target: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{}: VUnionDepth1_Rand0F28{-8.979648282933791e+07},
		},
		SourceLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F8: A}: {F28: -8.979648282933791e+07}}",
		Source: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{}: VUnionDepth1_Rand0F28{-8.979648282933791e+07},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F8: A}: {F28: -8.979648282933791e+07}}",
		Target: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{}: VUnionDepth1_Rand0F28{-8.979648282933791e+07},
		},
		SourceLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F8: A}: {F28: -8.979648282933791e+07}}",
		Source: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F8{}: VUnionDepth1_Rand0F28{-8.979648282933791e+07},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VArray2_Uint32_VArray2_Uint32{}",
		Target:      VMap_VArray2_Uint32_VArray2_Uint32(nil),
		SourceLabel: "VMap_VArray2_Uint32_VArray2_Uint32{}",
		Source:      VMap_VArray2_Uint32_VArray2_Uint32(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VArray2_Uint32_VArray2_Uint32{{123, 123}: {123, 123}}",
		Target: VMap_VArray2_Uint32_VArray2_Uint32{
			{
				123,
				123,
			}: {
				123,
				123,
			},
		},
		SourceLabel: "VMap_VArray2_Uint32_VArray2_Uint32{{123, 123}: {123, 123}}",
		Source: VMap_VArray2_Uint32_VArray2_Uint32{
			{
				123,
				123,
			}: {
				123,
				123,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VArray2_Uint32_VArray2_Uint32{{2649492277, 2215732996}: {}}",
		Target: VMap_VArray2_Uint32_VArray2_Uint32{
			{
				2649492277,
				2215732996,
			}: {},
		},
		SourceLabel: "VMap_VArray2_Uint32_VArray2_Uint32{{2649492277, 2215732996}: {}}",
		Source: VMap_VArray2_Uint32_VArray2_Uint32{
			{
				2649492277,
				2215732996,
			}: {},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VArray2_Uint32_VArray2_Uint32{{}: {570699322, 566582214}}",
		Target: VMap_VArray2_Uint32_VArray2_Uint32{
			{}: {
				570699322,
				566582214,
			},
		},
		SourceLabel: "VMap_VArray2_Uint32_VArray2_Uint32{{}: {570699322, 566582214}}",
		Source: VMap_VArray2_Uint32_VArray2_Uint32{
			{}: {
				570699322,
				566582214,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Target:      VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Source:      VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Target:      VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Source:      map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Target:      VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
		SourceLabel: "map[VStructEmpty]VStructEmpty{}",
		Source:      map[VStructEmpty]VStructEmpty(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: {
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: {
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: {
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}: {
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F4: \"cdefghijklmnop\", F15: 592804281, F21: 14492}: {F4: \"lmnopΔΘΠΣΦ王普澤世界\", F15: 476928164, F21: -8992}, {F4: \"pΔΘΠΣΦ王\", F21: 5225}: {}, {F4: \"ΔΘΠΣΦ\", F15: 716188148}: {F4: \"fghijklmnopΔΘΠΣΦ王普\", F15: 2707704295, F21: 13870}}",
		Target: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F4:  "cdefghijklmnop",
				F15: 592804281,
				F21: 14492,
			}: {
				F4:  "lmnopΔΘΠΣΦ王普澤世界",
				F15: 476928164,
				F21: -8992,
			},
			{
				F4:  "pΔΘΠΣΦ王",
				F21: 5225,
			}: {},
			{
				F4:  "ΔΘΠΣΦ",
				F15: 716188148,
			}: {
				F4:  "fghijklmnopΔΘΠΣΦ王普",
				F15: 2707704295,
				F21: 13870,
			},
		},
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F4: \"cdefghijklmnop\", F15: 592804281, F21: 14492}: {F4: \"lmnopΔΘΠΣΦ王普澤世界\", F15: 476928164, F21: -8992}, {F4: \"pΔΘΠΣΦ王\", F21: 5225}: {}, {F4: \"ΔΘΠΣΦ\", F15: 716188148}: {F4: \"fghijklmnopΔΘΠΣΦ王普\", F15: 2707704295, F21: 13870}}",
		Source: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F4:  "cdefghijklmnop",
				F15: 592804281,
				F21: 14492,
			}: {
				F4:  "lmnopΔΘΠΣΦ王普澤世界",
				F15: 476928164,
				F21: -8992,
			},
			{
				F4:  "pΔΘΠΣΦ王",
				F21: 5225,
			}: {},
			{
				F4:  "ΔΘΠΣΦ",
				F15: 716188148,
			}: {
				F4:  "fghijklmnopΔΘΠΣΦ王普",
				F15: 2707704295,
				F21: 13870,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F4: \"cdefghijklmnop\", F15: 592804281, F21: 14492}: {F4: \"lmnopΔΘΠΣΦ王普澤世界\", F15: 476928164, F21: -8992}, {F4: \"pΔΘΠΣΦ王\", F21: 5225}: {}, {F4: \"ΔΘΠΣΦ\", F15: 716188148}: {F4: \"fghijklmnopΔΘΠΣΦ王普\", F15: 2707704295, F21: 13870}}",
		Target: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F4:  "cdefghijklmnop",
				F15: 592804281,
				F21: 14492,
			}: {
				F4:  "lmnopΔΘΠΣΦ王普澤世界",
				F15: 476928164,
				F21: -8992,
			},
			{
				F4:  "pΔΘΠΣΦ王",
				F21: 5225,
			}: {},
			{
				F4:  "ΔΘΠΣΦ",
				F15: 716188148,
			}: {
				F4:  "fghijklmnopΔΘΠΣΦ王普",
				F15: 2707704295,
				F21: 13870,
			},
		},
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F4: \"cdefghijklmnop\", F15: 592804281, F21: 14492}: {F4: \"lmnopΔΘΠΣΦ王普澤世界\", F15: 476928164, F21: -8992}, {F4: \"pΔΘΠΣΦ王\", F21: 5225}: {}, {F4: \"ΔΘΠΣΦ\", F15: 716188148}: {F4: \"fghijklmnopΔΘΠΣΦ王普\", F15: 2707704295, F21: 13870}}",
		Source: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				F4:  "cdefghijklmnop",
				F15: 592804281,
				F21: 14492,
			}: {
				F4:  "lmnopΔΘΠΣΦ王普澤世界",
				F15: 476928164,
				F21: -8992,
			},
			{
				F4:  "pΔΘΠΣΦ王",
				F21: 5225,
			}: {},
			{
				F4:  "ΔΘΠΣΦ",
				F15: 716188148,
			}: {
				F4:  "fghijklmnopΔΘΠΣΦ王普",
				F15: 2707704295,
				F21: 13870,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F15: 3755560741}: {}, {F4: \"defghijklmnopΔΘΠΣΦ王\", F15: 1871485530, F21: 2976}: {F4: \"fghijkl\", F15: 2774761531, F21: 7393}}",
		Target: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F15: 3755560741,
			}: {},
			{
				F4:  "defghijklmnopΔΘΠΣΦ王",
				F15: 1871485530,
				F21: 2976,
			}: {
				F4:  "fghijkl",
				F15: 2774761531,
				F21: 7393,
			},
		},
		SourceLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F15: 3755560741}: {}, {F4: \"defghijklmnopΔΘΠΣΦ王\", F15: 1871485530, F21: 2976}: {F4: \"fghijkl\", F15: 2774761531, F21: 7393}}",
		Source: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F15: 3755560741,
			}: {},
			{
				F4:  "defghijklmnopΔΘΠΣΦ王",
				F15: 1871485530,
				F21: 2976,
			}: {
				F4:  "fghijkl",
				F15: 2774761531,
				F21: 7393,
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F15: 3755560741}: {}, {F4: \"defghijklmnopΔΘΠΣΦ王\", F15: 1871485530, F21: 2976}: {F4: \"fghijkl\", F15: 2774761531, F21: 7393}}",
		Target: VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				F15: 3755560741,
			}: {},
			{
				F4:  "defghijklmnopΔΘΠΣΦ王",
				F15: 1871485530,
				F21: 2976,
			}: {
				F4:  "fghijkl",
				F15: 2774761531,
				F21: 7393,
			},
		},
		SourceLabel: "map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F15: 3755560741}: {}, {F4: \"defghijklmnopΔΘΠΣΦ王\", F15: 1871485530, F21: 2976}: {F4: \"fghijkl\", F15: 2774761531, F21: 7393}}",
		Source: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				F15: 3755560741,
			}: {},
			{
				F4:  "defghijklmnopΔΘΠΣΦ王",
				F15: 1871485530,
				F21: 2976,
			}: {
				F4:  "fghijkl",
				F15: 2774761531,
				F21: 7393,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{}",
		Target:      VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0(nil),
		SourceLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{}",
		Source:      VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{}",
		Target:      VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0(nil),
		SourceLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{}",
		Source:      map[VUnionDepth1_Rand0]VUnionDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F28: 1.23}: {F28: 1.23}}",
		Target: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
		},
		SourceLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F28: 1.23}: {F28: 1.23}}",
		Source: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F28: 1.23}: {F28: 1.23}}",
		Target: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
		},
		SourceLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F28: 1.23}: {F28: 1.23}}",
		Source: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F10: {}}: {F8: A}, {F16: 14327712338650488974}: {F8: C}}",
		Target: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F10{}:                     VUnionDepth1_Rand0F8{},
			VUnionDepth1_Rand0F16{14327712338650488974}: VUnionDepth1_Rand0F8{VEnumAbcC},
		},
		SourceLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F10: {}}: {F8: A}, {F16: 14327712338650488974}: {F8: C}}",
		Source: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F10{}:                     VUnionDepth1_Rand0F8{},
			VUnionDepth1_Rand0F16{14327712338650488974}: VUnionDepth1_Rand0F8{VEnumAbcC},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F10: {}}: {F8: A}, {F16: 14327712338650488974}: {F8: C}}",
		Target: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F10{}:                     VUnionDepth1_Rand0F8{},
			VUnionDepth1_Rand0F16{14327712338650488974}: VUnionDepth1_Rand0F8{VEnumAbcC},
		},
		SourceLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F10: {}}: {F8: A}, {F16: 14327712338650488974}: {F8: C}}",
		Source: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F10{}:                     VUnionDepth1_Rand0F8{},
			VUnionDepth1_Rand0F16{14327712338650488974}: VUnionDepth1_Rand0F8{VEnumAbcC},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F12: 14880}: {F16: 5590091913461874956}, {F12: 63582}: {F10: {}}, {F28: -2.6748533461897817e+09}: {F16: 11617465500724278018}}",
		Target: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F12{14880}:                   VUnionDepth1_Rand0F16{5590091913461874956},
			VUnionDepth1_Rand0F12{63582}:                   VUnionDepth1_Rand0F10{},
			VUnionDepth1_Rand0F28{-2.6748533461897817e+09}: VUnionDepth1_Rand0F16{11617465500724278018},
		},
		SourceLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F12: 14880}: {F16: 5590091913461874956}, {F12: 63582}: {F10: {}}, {F28: -2.6748533461897817e+09}: {F16: 11617465500724278018}}",
		Source: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F12{14880}:                   VUnionDepth1_Rand0F16{5590091913461874956},
			VUnionDepth1_Rand0F12{63582}:                   VUnionDepth1_Rand0F10{},
			VUnionDepth1_Rand0F28{-2.6748533461897817e+09}: VUnionDepth1_Rand0F16{11617465500724278018},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{{F12: 14880}: {F16: 5590091913461874956}, {F12: 63582}: {F10: {}}, {F28: -2.6748533461897817e+09}: {F16: 11617465500724278018}}",
		Target: VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F12{14880}:                   VUnionDepth1_Rand0F16{5590091913461874956},
			VUnionDepth1_Rand0F12{63582}:                   VUnionDepth1_Rand0F10{},
			VUnionDepth1_Rand0F28{-2.6748533461897817e+09}: VUnionDepth1_Rand0F16{11617465500724278018},
		},
		SourceLabel: "map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{{F12: 14880}: {F16: 5590091913461874956}, {F12: 63582}: {F10: {}}, {F28: -2.6748533461897817e+09}: {F16: 11617465500724278018}}",
		Source: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
			VUnionDepth1_Rand0F12{14880}:                   VUnionDepth1_Rand0F16{5590091913461874956},
			VUnionDepth1_Rand0F12{63582}:                   VUnionDepth1_Rand0F10{},
			VUnionDepth1_Rand0F28{-2.6748533461897817e+09}: VUnionDepth1_Rand0F16{11617465500724278018},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructDepth2_All{}",
		Target: VStructDepth2_All{
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "VStructDepth2_All{}",
		Source: VStructDepth2_All{
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth2_All{}",
		Target: VStructDepth2_All{
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "?VStructDepth2_Rand0{}",
		Source: &VStructDepth2_Rand0{
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth2_All{}",
		Target: VStructDepth2_All{
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "?VStructEmpty{}",
		Source:      &VStructEmpty{},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VStructDepth2_All{F0: {int64(-123), int64(-123), int64(-123)}, F1: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F2: {true}, F3: {-123}, F4: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.23}, F6: {123: 123}, F7: {D: D}, F8: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}, F12: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F13: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VStructDepth2_All{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F1: VArray1_String{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			F2: VList_VBool{
				true,
			},
			F3: VList_VInt32{
				-123,
			},
			F4: VSet_VString{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
			F5: VSet_Float32{
				1.23: struct{}{},
			},
			F6: VMap_VByte_VByte{
				123: 123,
			},
			F7: VMap_VEnumBcd_VEnumBcd{
				VEnumBcdD: VEnumBcdD,
			},
			F8: VStructDepth1_All{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
			F12: &VStructDepth1_All{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
			F13: &VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
		SourceLabel: "VStructDepth2_All{F0: {int64(-123), int64(-123), int64(-123)}, F1: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F2: {true}, F3: {-123}, F4: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.23}, F6: {123: 123}, F7: {D: D}, F8: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}, F12: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F13: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VStructDepth2_All{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F1: VArray1_String{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			},
			F2: VList_VBool{
				true,
			},
			F3: VList_VInt32{
				-123,
			},
			F4: VSet_VString{
				"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
			},
			F5: VSet_Float32{
				1.23: struct{}{},
			},
			F6: VMap_VByte_VByte{
				123: 123,
			},
			F7: VMap_VEnumBcd_VEnumBcd{
				VEnumBcdD: VEnumBcdD,
			},
			F8: VStructDepth1_All{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
			F12: &VStructDepth1_All{
				F0: int64(-123),
				F1: true,
				F2: true,
				F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F5: vdl.Int64Type,
				F6: 123,
				F7: 123,
				F8: VEnumAbcC,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					RetryCode: vdl.WireRetryCodeRetryBackoff,
					Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				}),
				F12: 123,
				F13: 123,
				F14: 123,
				F15: 123,
				F16: 123,
				F17: 123,
				F18: -123,
				F19: -123,
				F20: -123,
				F21: -123,
				F22: -123,
				F23: -123,
				F24: -123,
				F25: -123,
				F26: 1.23,
				F27: 1.23,
				F28: 1.23,
				F29: 1.23,
				F30: &VStructEmpty{},
			},
			F13: &VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth2_All{F0: {[]VUnionDepth1_All{{F0: nil}}, VList_Error{{Id: \"ijklmnopΔΘΠΣ\", RetryCode: RetryConnection, Msg: \"klmnopΔ\"}, nil, {Id: \"abcdefgh\", RetryCode: RetryConnection, Msg: \"澤\"}}, nil}, F1: {\"王普澤世\"}, F2: {false, true}, F3: {193669958, 1069377531}, F4: {\"ghijk\", \"jklmnopΔΘΠΣΦ王\", \"ΣΦ王普澤世界\"}, F5: {1.1478766e+09, 5.4528205e+08, 9.661524e+08}, F8: {F0: set[VArray2_VEnumBcd]{{}, {B, C}}, F2: true, F3: \"ΘΠΣΦ王普澤世\", F4: \"bcdefgh\", F5: typeobject(VUnionDepth2_All), F6: 188, F7: 10, F8: C, F9: C, F11: {RetryCode: RetryRefetch, Msg: \"lmnopΔΘΠΣ\"}, F12: 35402, F13: 43078, F14: 1618384784, F15: 166622482, F16: 8823656779334991216, F17: 15081667106092248800, F19: -26, F20: -14040, F22: 688420803, F23: -963014882, F24: 2479407955342479410, F26: 1.5381179e+08, F27: 1.6291196e+09, F28: 1.0859702495162193e+08, F29: 1.2978003841851497e+09, F30: {}}, F9: {F0: map[bool]bool{false: true}, F1: true, F9: D}, F10: {F12: 54790}, F11: {F11: {Id: \"hijklmnopΔΘΠΣΦ王普澤世\", RetryCode: RetryRefetch, Msg: \"世界\"}}, F12: {F2: true, F3: \"ghijklmnopΔΘΠΣΦ王普\", F4: \"ijklmnopΔΘΠΣ\", F5: typeobject(VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0), F6: 98, F7: 1, F8: B, F11: {}, F12: 42915, F15: 393927796, F16: 586553587769310200, F17: 4149586214255072852, F18: 23, F19: 8, F20: -3367, F21: -15744, F22: -675615021, F23: 499882980, F24: 1766281095617950570, F25: -2746074897480389304, F26: -1.057958e+08, F27: -2.4838428e+09, F28: -8.737233784817061e+08}, F13: {F4: \"bcdefghijk\", F15: 2565779687, F21: 5371}}",
		Target: VStructDepth2_All{
			F0: VArray3_Any{
				[]VUnionDepth1_All{
					VUnionDepth1_AllF0{},
				},
				VList_Error{
					verror.FromWire(vdl.WireError{
						Id:        "ijklmnopΔΘΠΣ",
						RetryCode: vdl.WireRetryCodeRetryConnection,
						Msg:       "klmnopΔ",
					}),
					nil,
					verror.FromWire(vdl.WireError{
						Id:        "abcdefgh",
						RetryCode: vdl.WireRetryCodeRetryConnection,
						Msg:       "澤",
					}),
				},
				nil,
			},
			F1: VArray1_String{
				"王普澤世",
			},
			F2: VList_VBool{
				false,
				true,
			},
			F3: VList_VInt32{
				193669958,
				1069377531,
			},
			F4: VSet_VString{
				"ghijk":         struct{}{},
				"jklmnopΔΘΠΣΦ王": struct{}{},
				"ΣΦ王普澤世界":       struct{}{},
			},
			F5: VSet_Float32{
				1.1478766e+09: struct{}{},
				5.4528205e+08: struct{}{},
				9.661524e+08:  struct{}{},
			},
			F8: VStructDepth1_All{
				F0: map[VArray2_VEnumBcd]struct{}{
					{}: struct{}{},
					{
						VEnumBcdB,
						VEnumBcdC,
					}: struct{}{},
				},
				F2: true,
				F3: "ΘΠΣΦ王普澤世",
				F4: "bcdefgh",
				F5: vdl.TypeOf((*VUnionDepth2_All)(nil)),
				F6: 188,
				F7: 10,
				F8: VEnumAbcC,
				F9: VEnumBcdC,
				F11: verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "lmnopΔΘΠΣ",
				}),
				F12: 35402,
				F13: 43078,
				F14: 1618384784,
				F15: 166622482,
				F16: 8823656779334991216,
				F17: 15081667106092248800,
				F19: -26,
				F20: -14040,
				F22: 688420803,
				F23: -963014882,
				F24: 2479407955342479410,
				F26: 1.5381179e+08,
				F27: 1.6291196e+09,
				F28: 1.0859702495162193e+08,
				F29: 1.2978003841851497e+09,
				F30: &VStructEmpty{},
			},
			F9: VStructDepth1_Rand1{
				F0: map[bool]bool{
					false: true,
				},
				F1: true,
				F9: VEnumBcdD,
			},
			F10: VUnionDepth1_Rand0F12{54790},
			F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
				Id:        "hijklmnopΔΘΠΣΦ王普澤世",
				RetryCode: vdl.WireRetryCodeRetryRefetch,
				Msg:       "世界",
			})},
			F12: &VStructDepth1_All{
				F2:  true,
				F3:  "ghijklmnopΔΘΠΣΦ王普",
				F4:  "ijklmnopΔΘΠΣ",
				F5:  vdl.TypeOf((*VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0)(nil)),
				F6:  98,
				F7:  1,
				F8:  VEnumAbcB,
				F11: verror.FromWire(vdl.WireError{}),
				F12: 42915,
				F15: 393927796,
				F16: 586553587769310200,
				F17: 4149586214255072852,
				F18: 23,
				F19: 8,
				F20: -3367,
				F21: -15744,
				F22: -675615021,
				F23: 499882980,
				F24: 1766281095617950570,
				F25: -2746074897480389304,
				F26: -1.057958e+08,
				F27: -2.4838428e+09,
				F28: -8.737233784817061e+08,
			},
			F13: &VStructDepth1_Rand0{
				F4:  "bcdefghijk",
				F15: 2565779687,
				F21: 5371,
			},
		},
		SourceLabel: "VStructDepth2_All{F0: {[]VUnionDepth1_All{{F0: nil}}, VList_Error{{Id: \"ijklmnopΔΘΠΣ\", RetryCode: RetryConnection, Msg: \"klmnopΔ\"}, nil, {Id: \"abcdefgh\", RetryCode: RetryConnection, Msg: \"澤\"}}, nil}, F1: {\"王普澤世\"}, F2: {false, true}, F3: {193669958, 1069377531}, F4: {\"ghijk\", \"jklmnopΔΘΠΣΦ王\", \"ΣΦ王普澤世界\"}, F5: {1.1478766e+09, 5.4528205e+08, 9.661524e+08}, F8: {F0: set[VArray2_VEnumBcd]{{}, {B, C}}, F2: true, F3: \"ΘΠΣΦ王普澤世\", F4: \"bcdefgh\", F5: typeobject(VUnionDepth2_All), F6: 188, F7: 10, F8: C, F9: C, F11: {RetryCode: RetryRefetch, Msg: \"lmnopΔΘΠΣ\"}, F12: 35402, F13: 43078, F14: 1618384784, F15: 166622482, F16: 8823656779334991216, F17: 15081667106092248800, F19: -26, F20: -14040, F22: 688420803, F23: -963014882, F24: 2479407955342479410, F26: 1.5381179e+08, F27: 1.6291196e+09, F28: 1.0859702495162193e+08, F29: 1.2978003841851497e+09, F30: {}}, F9: {F0: map[bool]bool{false: true}, F1: true, F9: D}, F10: {F12: 54790}, F11: {F11: {Id: \"hijklmnopΔΘΠΣΦ王普澤世\", RetryCode: RetryRefetch, Msg: \"世界\"}}, F12: {F2: true, F3: \"ghijklmnopΔΘΠΣΦ王普\", F4: \"ijklmnopΔΘΠΣ\", F5: typeobject(VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0), F6: 98, F7: 1, F8: B, F11: {}, F12: 42915, F15: 393927796, F16: 586553587769310200, F17: 4149586214255072852, F18: 23, F19: 8, F20: -3367, F21: -15744, F22: -675615021, F23: 499882980, F24: 1766281095617950570, F25: -2746074897480389304, F26: -1.057958e+08, F27: -2.4838428e+09, F28: -8.737233784817061e+08}, F13: {F4: \"bcdefghijk\", F15: 2565779687, F21: 5371}}",
		Source: VStructDepth2_All{
			F0: VArray3_Any{
				[]VUnionDepth1_All{
					VUnionDepth1_AllF0{},
				},
				VList_Error{
					verror.FromWire(vdl.WireError{
						Id:        "ijklmnopΔΘΠΣ",
						RetryCode: vdl.WireRetryCodeRetryConnection,
						Msg:       "klmnopΔ",
					}),
					nil,
					verror.FromWire(vdl.WireError{
						Id:        "abcdefgh",
						RetryCode: vdl.WireRetryCodeRetryConnection,
						Msg:       "澤",
					}),
				},
				nil,
			},
			F1: VArray1_String{
				"王普澤世",
			},
			F2: VList_VBool{
				false,
				true,
			},
			F3: VList_VInt32{
				193669958,
				1069377531,
			},
			F4: VSet_VString{
				"ghijk":         struct{}{},
				"jklmnopΔΘΠΣΦ王": struct{}{},
				"ΣΦ王普澤世界":       struct{}{},
			},
			F5: VSet_Float32{
				1.1478766e+09: struct{}{},
				5.4528205e+08: struct{}{},
				9.661524e+08:  struct{}{},
			},
			F8: VStructDepth1_All{
				F0: map[VArray2_VEnumBcd]struct{}{
					{}: struct{}{},
					{
						VEnumBcdB,
						VEnumBcdC,
					}: struct{}{},
				},
				F2: true,
				F3: "ΘΠΣΦ王普澤世",
				F4: "bcdefgh",
				F5: vdl.TypeOf((*VUnionDepth2_All)(nil)),
				F6: 188,
				F7: 10,
				F8: VEnumAbcC,
				F9: VEnumBcdC,
				F11: verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "lmnopΔΘΠΣ",
				}),
				F12: 35402,
				F13: 43078,
				F14: 1618384784,
				F15: 166622482,
				F16: 8823656779334991216,
				F17: 15081667106092248800,
				F19: -26,
				F20: -14040,
				F22: 688420803,
				F23: -963014882,
				F24: 2479407955342479410,
				F26: 1.5381179e+08,
				F27: 1.6291196e+09,
				F28: 1.0859702495162193e+08,
				F29: 1.2978003841851497e+09,
				F30: &VStructEmpty{},
			},
			F9: VStructDepth1_Rand1{
				F0: map[bool]bool{
					false: true,
				},
				F1: true,
				F9: VEnumBcdD,
			},
			F10: VUnionDepth1_Rand0F12{54790},
			F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
				Id:        "hijklmnopΔΘΠΣΦ王普澤世",
				RetryCode: vdl.WireRetryCodeRetryRefetch,
				Msg:       "世界",
			})},
			F12: &VStructDepth1_All{
				F2:  true,
				F3:  "ghijklmnopΔΘΠΣΦ王普",
				F4:  "ijklmnopΔΘΠΣ",
				F5:  vdl.TypeOf((*VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0)(nil)),
				F6:  98,
				F7:  1,
				F8:  VEnumAbcB,
				F11: verror.FromWire(vdl.WireError{}),
				F12: 42915,
				F15: 393927796,
				F16: 586553587769310200,
				F17: 4149586214255072852,
				F18: 23,
				F19: 8,
				F20: -3367,
				F21: -15744,
				F22: -675615021,
				F23: 499882980,
				F24: 1766281095617950570,
				F25: -2746074897480389304,
				F26: -1.057958e+08,
				F27: -2.4838428e+09,
				F28: -8.737233784817061e+08,
			},
			F13: &VStructDepth1_Rand0{
				F4:  "bcdefghijk",
				F15: 2565779687,
				F21: 5371,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth2_All{F0: {VArray3_OptVStructEmpty{}, VArray1_VArray3_Bool{}, nil}, F2: {false, false, true}, F4: {\"defghi\"}, F5: {-1.0116786e+09, 0}, F6: {137: 181, 224: 128}, F7: {B: B}, F8: {F0: VList_Set_VInt16{}, F2: true, F4: \"Φ王普澤\", F5: typeobject(VUnionDepth2_All), F6: 152, F7: 238, F11: {Id: \"ΘΠΣΦ\", Msg: \"ghijklmnopΔΘΠΣΦ王\"}, F12: 59516, F13: 51897, F14: 605574823, F15: 4142227496, F17: 967596274462580890, F18: -22, F19: 20, F20: -2945, F21: -5689, F22: -61885463, F23: 619333130, F24: 1695390365995362146, F26: -1.9062797e+09, F27: 3.7731942e+08, F28: -6.725710465889678e+08, F29: 1.2131247950895727e+09, F30: {}}, F9: {F1: true, F7: 227, F26: -4.2755507e+08}, F10: {F16: 0}, F11: {F11: nil}, F12: {F3: \"ΠΣΦ王\", F4: \"ef\", F5: typeobject(map[VStructDepth1_Rand0]VStructDepth1_Rand0), F6: 48, F7: 104, F8: B, F12: 50232, F13: 63541, F14: 2467193480, F15: 639118940, F17: 5597215062242834278, F18: -21, F19: 52, F22: 368956530, F24: -2624738109896123934, F25: -4220579496605799155, F26: -2.3680965e+08, F27: 6.038184e+08, F30: {}}, F13: {F4: \"opΔΘΠΣΦ王普澤\", F15: 3088405718}}",
		Target: VStructDepth2_All{
			F0: VArray3_Any{
				VArray3_OptVStructEmpty{},
				VArray1_VArray3_Bool{},
				nil,
			},
			F2: VList_VBool{
				false,
				false,
				true,
			},
			F4: VSet_VString{
				"defghi": struct{}{},
			},
			F5: VSet_Float32{
				-1.0116786e+09: struct{}{},
				0:              struct{}{},
			},
			F6: VMap_VByte_VByte{
				137: 181,
				224: 128,
			},
			F7: VMap_VEnumBcd_VEnumBcd{
				VEnumBcdB: VEnumBcdB,
			},
			F8: VStructDepth1_All{
				F0: VList_Set_VInt16(nil),
				F2: true,
				F4: "Φ王普澤",
				F5: vdl.TypeOf((*VUnionDepth2_All)(nil)),
				F6: 152,
				F7: 238,
				F11: verror.FromWire(vdl.WireError{
					Id:  "ΘΠΣΦ",
					Msg: "ghijklmnopΔΘΠΣΦ王",
				}),
				F12: 59516,
				F13: 51897,
				F14: 605574823,
				F15: 4142227496,
				F17: 967596274462580890,
				F18: -22,
				F19: 20,
				F20: -2945,
				F21: -5689,
				F22: -61885463,
				F23: 619333130,
				F24: 1695390365995362146,
				F26: -1.9062797e+09,
				F27: 3.7731942e+08,
				F28: -6.725710465889678e+08,
				F29: 1.2131247950895727e+09,
				F30: &VStructEmpty{},
			},
			F9: VStructDepth1_Rand1{
				F1:  true,
				F7:  227,
				F26: -4.2755507e+08,
			},
			F10: VUnionDepth1_Rand0F16{},
			F11: VUnionDepth1_Rand1F11{},
			F12: &VStructDepth1_All{
				F3:  "ΠΣΦ王",
				F4:  "ef",
				F5:  vdl.TypeOf((*map[VStructDepth1_Rand0]VStructDepth1_Rand0)(nil)),
				F6:  48,
				F7:  104,
				F8:  VEnumAbcB,
				F12: 50232,
				F13: 63541,
				F14: 2467193480,
				F15: 639118940,
				F17: 5597215062242834278,
				F18: -21,
				F19: 52,
				F22: 368956530,
				F24: -2624738109896123934,
				F25: -4220579496605799155,
				F26: -2.3680965e+08,
				F27: 6.038184e+08,
				F30: &VStructEmpty{},
			},
			F13: &VStructDepth1_Rand0{
				F4:  "opΔΘΠΣΦ王普澤",
				F15: 3088405718,
			},
		},
		SourceLabel: "VStructDepth2_All{F0: {VArray3_OptVStructEmpty{}, VArray1_VArray3_Bool{}, nil}, F2: {false, false, true}, F4: {\"defghi\"}, F5: {-1.0116786e+09, 0}, F6: {137: 181, 224: 128}, F7: {B: B}, F8: {F0: VList_Set_VInt16{}, F2: true, F4: \"Φ王普澤\", F5: typeobject(VUnionDepth2_All), F6: 152, F7: 238, F11: {Id: \"ΘΠΣΦ\", Msg: \"ghijklmnopΔΘΠΣΦ王\"}, F12: 59516, F13: 51897, F14: 605574823, F15: 4142227496, F17: 967596274462580890, F18: -22, F19: 20, F20: -2945, F21: -5689, F22: -61885463, F23: 619333130, F24: 1695390365995362146, F26: -1.9062797e+09, F27: 3.7731942e+08, F28: -6.725710465889678e+08, F29: 1.2131247950895727e+09, F30: {}}, F9: {F1: true, F7: 227, F26: -4.2755507e+08}, F10: {F16: 0}, F11: {F11: nil}, F12: {F3: \"ΠΣΦ王\", F4: \"ef\", F5: typeobject(map[VStructDepth1_Rand0]VStructDepth1_Rand0), F6: 48, F7: 104, F8: B, F12: 50232, F13: 63541, F14: 2467193480, F15: 639118940, F17: 5597215062242834278, F18: -21, F19: 52, F22: 368956530, F24: -2624738109896123934, F25: -4220579496605799155, F26: -2.3680965e+08, F27: 6.038184e+08, F30: {}}, F13: {F4: \"opΔΘΠΣΦ王普澤\", F15: 3088405718}}",
		Source: VStructDepth2_All{
			F0: VArray3_Any{
				VArray3_OptVStructEmpty{},
				VArray1_VArray3_Bool{},
				nil,
			},
			F2: VList_VBool{
				false,
				false,
				true,
			},
			F4: VSet_VString{
				"defghi": struct{}{},
			},
			F5: VSet_Float32{
				-1.0116786e+09: struct{}{},
				0:              struct{}{},
			},
			F6: VMap_VByte_VByte{
				137: 181,
				224: 128,
			},
			F7: VMap_VEnumBcd_VEnumBcd{
				VEnumBcdB: VEnumBcdB,
			},
			F8: VStructDepth1_All{
				F0: VList_Set_VInt16(nil),
				F2: true,
				F4: "Φ王普澤",
				F5: vdl.TypeOf((*VUnionDepth2_All)(nil)),
				F6: 152,
				F7: 238,
				F11: verror.FromWire(vdl.WireError{
					Id:  "ΘΠΣΦ",
					Msg: "ghijklmnopΔΘΠΣΦ王",
				}),
				F12: 59516,
				F13: 51897,
				F14: 605574823,
				F15: 4142227496,
				F17: 967596274462580890,
				F18: -22,
				F19: 20,
				F20: -2945,
				F21: -5689,
				F22: -61885463,
				F23: 619333130,
				F24: 1695390365995362146,
				F26: -1.9062797e+09,
				F27: 3.7731942e+08,
				F28: -6.725710465889678e+08,
				F29: 1.2131247950895727e+09,
				F30: &VStructEmpty{},
			},
			F9: VStructDepth1_Rand1{
				F1:  true,
				F7:  227,
				F26: -4.2755507e+08,
			},
			F10: VUnionDepth1_Rand0F16{},
			F11: VUnionDepth1_Rand1F11{},
			F12: &VStructDepth1_All{
				F3:  "ΠΣΦ王",
				F4:  "ef",
				F5:  vdl.TypeOf((*map[VStructDepth1_Rand0]VStructDepth1_Rand0)(nil)),
				F6:  48,
				F7:  104,
				F8:  VEnumAbcB,
				F12: 50232,
				F13: 63541,
				F14: 2467193480,
				F15: 639118940,
				F17: 5597215062242834278,
				F18: -21,
				F19: 52,
				F22: 368956530,
				F24: -2624738109896123934,
				F25: -4220579496605799155,
				F26: -2.3680965e+08,
				F27: 6.038184e+08,
				F30: &VStructEmpty{},
			},
			F13: &VStructDepth1_Rand0{
				F4:  "opΔΘΠΣΦ王普澤",
				F15: 3088405718,
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructDepth2_Rand0{}",
		Target: VStructDepth2_Rand0{
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "VStructDepth2_Rand0{}",
		Source: VStructDepth2_Rand0{
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth2_Rand0{}",
		Target: VStructDepth2_Rand0{
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "VStructDepth2_All{}",
		Source: VStructDepth2_All{
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth2_Rand0{}",
		Target: VStructDepth2_Rand0{
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "?VStructDepth2_Rand0{}",
		Source: &VStructDepth2_Rand0{
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VStructDepth2_Rand0{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}",
		Target: VStructDepth2_Rand0{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		},
		SourceLabel: "VStructDepth2_Rand0{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}",
		Source: VStructDepth2_Rand0{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VStructDepth2_Rand0{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}",
		Target: VStructDepth2_Rand0{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		},
		SourceLabel: "VStructDepth2_All{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}",
		Source: VStructDepth2_All{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth2_Rand0{F0: {VMap_VEnumAbc_VEnumAbc{A: A, B: B, C: C}, VArray3_OptVStructEmpty{nil, {}, nil}, nil}, F9: {F0: VMap_VStructEmpty_VStructEmpty{{}: {}}, F7: 111, F26: 1.2968383e+09}, F10: {F16: 15486817104661370343}}",
		Target: VStructDepth2_Rand0{
			F0: VArray3_Any{
				VMap_VEnumAbc_VEnumAbc{
					VEnumAbcA: VEnumAbcA,
					VEnumAbcB: VEnumAbcB,
					VEnumAbcC: VEnumAbcC,
				},
				VArray3_OptVStructEmpty{
					nil,
					{},
					nil,
				},
				nil,
			},
			F9: VStructDepth1_Rand1{
				F0: VMap_VStructEmpty_VStructEmpty{
					{}: {},
				},
				F7:  111,
				F26: 1.2968383e+09,
			},
			F10: VUnionDepth1_Rand0F16{15486817104661370343},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "VStructDepth2_Rand0{F0: {VMap_VEnumAbc_VEnumAbc{A: A, B: B, C: C}, VArray3_OptVStructEmpty{nil, {}, nil}, nil}, F9: {F0: VMap_VStructEmpty_VStructEmpty{{}: {}}, F7: 111, F26: 1.2968383e+09}, F10: {F16: 15486817104661370343}}",
		Source: VStructDepth2_Rand0{
			F0: VArray3_Any{
				VMap_VEnumAbc_VEnumAbc{
					VEnumAbcA: VEnumAbcA,
					VEnumAbcB: VEnumAbcB,
					VEnumAbcC: VEnumAbcC,
				},
				VArray3_OptVStructEmpty{
					nil,
					{},
					nil,
				},
				nil,
			},
			F9: VStructDepth1_Rand1{
				F0: VMap_VStructEmpty_VStructEmpty{
					{}: {},
				},
				F7:  111,
				F26: 1.2968383e+09,
			},
			F10: VUnionDepth1_Rand0F16{15486817104661370343},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth2_Rand0{F0: {VMap_VEnumAbc_VEnumAbc{A: A, B: B, C: C}, VArray3_OptVStructEmpty{nil, {}, nil}, nil}, F9: {F0: VMap_VStructEmpty_VStructEmpty{{}: {}}, F7: 111, F26: 1.2968383e+09}, F10: {F16: 15486817104661370343}}",
		Target: VStructDepth2_Rand0{
			F0: VArray3_Any{
				VMap_VEnumAbc_VEnumAbc{
					VEnumAbcA: VEnumAbcA,
					VEnumAbcB: VEnumAbcB,
					VEnumAbcC: VEnumAbcC,
				},
				VArray3_OptVStructEmpty{
					nil,
					{},
					nil,
				},
				nil,
			},
			F9: VStructDepth1_Rand1{
				F0: VMap_VStructEmpty_VStructEmpty{
					{}: {},
				},
				F7:  111,
				F26: 1.2968383e+09,
			},
			F10: VUnionDepth1_Rand0F16{15486817104661370343},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "VStructDepth2_All{F0: {VMap_VEnumAbc_VEnumAbc{A: A, B: B, C: C}, VArray3_OptVStructEmpty{nil, {}, nil}, nil}, F9: {F0: VMap_VStructEmpty_VStructEmpty{{}: {}}, F7: 111, F26: 1.2968383e+09}, F10: {F16: 15486817104661370343}}",
		Source: VStructDepth2_All{
			F0: VArray3_Any{
				VMap_VEnumAbc_VEnumAbc{
					VEnumAbcA: VEnumAbcA,
					VEnumAbcB: VEnumAbcB,
					VEnumAbcC: VEnumAbcC,
				},
				VArray3_OptVStructEmpty{
					nil,
					{},
					nil,
				},
				nil,
			},
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F9: VStructDepth1_Rand1{
				F0: VMap_VStructEmpty_VStructEmpty{
					{}: {},
				},
				F7:  111,
				F26: 1.2968383e+09,
			},
			F10: VUnionDepth1_Rand0F16{15486817104661370343},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth2_Rand0{F0: {set[bool]{}, VList_VEnumBcd{C, D, C}, nil}, F9: {F1: true, F9: C}, F10: {F12: 0}, F11: {F11: {}}}",
		Target: VStructDepth2_Rand0{
			F0: VArray3_Any{
				map[bool]struct{}(nil),
				VList_VEnumBcd{
					VEnumBcdC,
					VEnumBcdD,
					VEnumBcdC,
				},
				nil,
			},
			F9: VStructDepth1_Rand1{
				F1: true,
				F9: VEnumBcdC,
			},
			F10: VUnionDepth1_Rand0F12{},
			F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
		},
		SourceLabel: "VStructDepth2_Rand0{F0: {set[bool]{}, VList_VEnumBcd{C, D, C}, nil}, F9: {F1: true, F9: C}, F10: {F12: 0}, F11: {F11: {}}}",
		Source: VStructDepth2_Rand0{
			F0: VArray3_Any{
				map[bool]struct{}(nil),
				VList_VEnumBcd{
					VEnumBcdC,
					VEnumBcdD,
					VEnumBcdC,
				},
				nil,
			},
			F9: VStructDepth1_Rand1{
				F1: true,
				F9: VEnumBcdC,
			},
			F10: VUnionDepth1_Rand0F12{},
			F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth2_Rand0{F0: {set[bool]{}, VList_VEnumBcd{C, D, C}, nil}, F9: {F1: true, F9: C}, F10: {F12: 0}, F11: {F11: {}}}",
		Target: VStructDepth2_Rand0{
			F0: VArray3_Any{
				map[bool]struct{}(nil),
				VList_VEnumBcd{
					VEnumBcdC,
					VEnumBcdD,
					VEnumBcdC,
				},
				nil,
			},
			F9: VStructDepth1_Rand1{
				F1: true,
				F9: VEnumBcdC,
			},
			F10: VUnionDepth1_Rand0F12{},
			F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
		},
		SourceLabel: "VStructDepth2_All{F0: {set[bool]{}, VList_VEnumBcd{C, D, C}, nil}, F9: {F1: true, F9: C}, F10: {F12: 0}, F11: {F11: {}}}",
		Source: VStructDepth2_All{
			F0: VArray3_Any{
				map[bool]struct{}(nil),
				VList_VEnumBcd{
					VEnumBcdC,
					VEnumBcdD,
					VEnumBcdC,
				},
				nil,
			},
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F9: VStructDepth1_Rand1{
				F1: true,
				F9: VEnumBcdC,
			},
			F10: VUnionDepth1_Rand0F12{},
			F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructDepth2_Rand1{}",
		Target:      VStructDepth2_Rand1{},
		SourceLabel: "VStructDepth2_Rand1{}",
		Source:      VStructDepth2_Rand1{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth2_Rand1{}",
		Target:      VStructDepth2_Rand1{},
		SourceLabel: "VStructDepth2_All{}",
		Source: VStructDepth2_All{
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth2_Rand1{}",
		Target:      VStructDepth2_Rand1{},
		SourceLabel: "?VStructEmpty{}",
		Source:      &VStructEmpty{},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VStructDepth2_Rand1{F7: {D: D}}",
		Target: VStructDepth2_Rand1{
			F7: VMap_VEnumBcd_VEnumBcd{
				VEnumBcdD: VEnumBcdD,
			},
		},
		SourceLabel: "VStructDepth2_Rand1{F7: {D: D}}",
		Source: VStructDepth2_Rand1{
			F7: VMap_VEnumBcd_VEnumBcd{
				VEnumBcdD: VEnumBcdD,
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VStructDepth2_Rand1{F7: {D: D}}",
		Target: VStructDepth2_Rand1{
			F7: VMap_VEnumBcd_VEnumBcd{
				VEnumBcdD: VEnumBcdD,
			},
		},
		SourceLabel: "VStructDepth2_All{F7: {D: D}}",
		Source: VStructDepth2_All{
			F7: VMap_VEnumBcd_VEnumBcd{
				VEnumBcdD: VEnumBcdD,
			},
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUnionDepth2_All{F0: {}}",
		Target:      VUnionDepth2_All(VUnionDepth2_AllF0{}),
		SourceLabel: "VUnionDepth2_All{F0: {}}",
		Source:      VUnionDepth2_All(VUnionDepth2_AllF0{}),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUnionDepth2_All{F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}",
		Target: VUnionDepth2_All(VUnionDepth2_AllF13{&VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		}}),
		SourceLabel: "VUnionDepth2_All{F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}",
		Source: VUnionDepth2_All(VUnionDepth2_AllF13{&VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth2_All{F6: {\"fghijklmn\": \"efgh\", \"no\": \"hijkl\"}}",
		Target: VUnionDepth2_All(VUnionDepth2_AllF6{VMap_VString_VString{
			"fghijklmn": "efgh",
			"no":        "hijkl",
		}}),
		SourceLabel: "VUnionDepth2_All{F6: {\"fghijklmn\": \"efgh\", \"no\": \"hijkl\"}}",
		Source: VUnionDepth2_All(VUnionDepth2_AllF6{VMap_VString_VString{
			"fghijklmn": "efgh",
			"no":        "hijkl",
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth2_All{F8: {F0: int16(-7786), F1: true, F2: true, F3: \"fghijkl\", F6: 245, F7: 96, F9: D, F11: {}, F12: 29116, F13: 42064, F14: 2530134519, F15: 4057520508, F16: 16327925196355279549, F17: 6207326654635277592, F18: 33, F19: -61, F20: -6609, F22: 995066646, F25: -3597796560754813159, F26: 1.339539e+09, F27: -1.2871139e+08, F28: -8.601946090668706e+08, F30: {}}}",
		Target: VUnionDepth2_All(VUnionDepth2_AllF8{VStructDepth1_All{
			F0:  int16(-7786),
			F1:  true,
			F2:  true,
			F3:  "fghijkl",
			F5:  vdl.AnyType,
			F6:  245,
			F7:  96,
			F9:  VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{}),
			F12: 29116,
			F13: 42064,
			F14: 2530134519,
			F15: 4057520508,
			F16: 16327925196355279549,
			F17: 6207326654635277592,
			F18: 33,
			F19: -61,
			F20: -6609,
			F22: 995066646,
			F25: -3597796560754813159,
			F26: 1.339539e+09,
			F27: -1.2871139e+08,
			F28: -8.601946090668706e+08,
			F30: &VStructEmpty{},
		}}),
		SourceLabel: "VUnionDepth2_All{F8: {F0: int16(-7786), F1: true, F2: true, F3: \"fghijkl\", F6: 245, F7: 96, F9: D, F11: {}, F12: 29116, F13: 42064, F14: 2530134519, F15: 4057520508, F16: 16327925196355279549, F17: 6207326654635277592, F18: 33, F19: -61, F20: -6609, F22: 995066646, F25: -3597796560754813159, F26: 1.339539e+09, F27: -1.2871139e+08, F28: -8.601946090668706e+08, F30: {}}}",
		Source: VUnionDepth2_All(VUnionDepth2_AllF8{VStructDepth1_All{
			F0:  int16(-7786),
			F1:  true,
			F2:  true,
			F3:  "fghijkl",
			F5:  vdl.AnyType,
			F6:  245,
			F7:  96,
			F9:  VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{}),
			F12: 29116,
			F13: 42064,
			F14: 2530134519,
			F15: 4057520508,
			F16: 16327925196355279549,
			F17: 6207326654635277592,
			F18: 33,
			F19: -61,
			F20: -6609,
			F22: 995066646,
			F25: -3597796560754813159,
			F26: 1.339539e+09,
			F27: -1.2871139e+08,
			F28: -8.601946090668706e+08,
			F30: &VStructEmpty{},
		}}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth2_All{F8: {F0: int16(-7786), F1: true, F2: true, F3: \"fghijkl\", F6: 245, F7: 96, F9: D, F11: {}, F12: 29116, F13: 42064, F14: 2530134519, F15: 4057520508, F16: 16327925196355279549, F17: 6207326654635277592, F18: 33, F19: -61, F20: -6609, F22: 995066646, F25: -3597796560754813159, F26: 1.339539e+09, F27: -1.2871139e+08, F28: -8.601946090668706e+08, F30: {}}}",
		Target: VUnionDepth2_All(VUnionDepth2_AllF8{VStructDepth1_All{
			F0:  int16(-7786),
			F1:  true,
			F2:  true,
			F3:  "fghijkl",
			F5:  vdl.AnyType,
			F6:  245,
			F7:  96,
			F9:  VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{}),
			F12: 29116,
			F13: 42064,
			F14: 2530134519,
			F15: 4057520508,
			F16: 16327925196355279549,
			F17: 6207326654635277592,
			F18: 33,
			F19: -61,
			F20: -6609,
			F22: 995066646,
			F25: -3597796560754813159,
			F26: 1.339539e+09,
			F27: -1.2871139e+08,
			F28: -8.601946090668706e+08,
			F30: &VStructEmpty{},
		}}),
		SourceLabel: "VUnionDepth2_Rand0{F8: {F0: int16(-7786), F1: true, F2: true, F3: \"fghijkl\", F6: 245, F7: 96, F9: D, F11: {}, F12: 29116, F13: 42064, F14: 2530134519, F15: 4057520508, F16: 16327925196355279549, F17: 6207326654635277592, F18: 33, F19: -61, F20: -6609, F22: 995066646, F25: -3597796560754813159, F26: 1.339539e+09, F27: -1.2871139e+08, F28: -8.601946090668706e+08, F30: {}}}",
		Source: VUnionDepth2_Rand0(VUnionDepth2_Rand0F8{VStructDepth1_All{
			F0:  int16(-7786),
			F1:  true,
			F2:  true,
			F3:  "fghijkl",
			F5:  vdl.AnyType,
			F6:  245,
			F7:  96,
			F9:  VEnumBcdD,
			F11: verror.FromWire(vdl.WireError{}),
			F12: 29116,
			F13: 42064,
			F14: 2530134519,
			F15: 4057520508,
			F16: 16327925196355279549,
			F17: 6207326654635277592,
			F18: 33,
			F19: -61,
			F20: -6609,
			F22: 995066646,
			F25: -3597796560754813159,
			F26: 1.339539e+09,
			F27: -1.2871139e+08,
			F28: -8.601946090668706e+08,
			F30: &VStructEmpty{},
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUnionDepth2_Rand0{F2: {}}",
		Target:      VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{}),
		SourceLabel: "VUnionDepth2_Rand0{F2: {}}",
		Source:      VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth2_Rand0{F2: {}}",
		Target:      VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{}),
		SourceLabel: "VUnionDepth2_All{F2: {}}",
		Source:      VUnionDepth2_All(VUnionDepth2_AllF2{}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth2_Rand0{F2: {}}",
		Target:      VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{}),
		SourceLabel: "VUnionDepth2_Rand1{F2: {}}",
		Source:      VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{}),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUnionDepth2_Rand0{F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		}}),
		SourceLabel: "VUnionDepth2_Rand0{F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		}}),
	},
	{
		Label:       "Full",
		TargetLabel: "VUnionDepth2_Rand0{F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Target: VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		}}),
		SourceLabel: "VUnionDepth2_All{F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}",
		Source: VUnionDepth2_All(VUnionDepth2_AllF12{&VStructDepth1_Rand0{
			F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
			F15: 123,
			F21: -123,
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth2_Rand0{F2: {-1.0194577054779989e+09, 0, -1.1034184636515765e+09}}",
		Target: VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{[]float64{
			-1.0194577054779989e+09,
			0,
			-1.1034184636515765e+09,
		}}),
		SourceLabel: "VUnionDepth2_Rand0{F2: {-1.0194577054779989e+09, 0, -1.1034184636515765e+09}}",
		Source: VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{[]float64{
			-1.0194577054779989e+09,
			0,
			-1.1034184636515765e+09,
		}}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth2_Rand0{F2: {-1.0194577054779989e+09, 0, -1.1034184636515765e+09}}",
		Target: VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{[]float64{
			-1.0194577054779989e+09,
			0,
			-1.1034184636515765e+09,
		}}),
		SourceLabel: "VUnionDepth2_All{F2: {-1.0194577054779989e+09, 0, -1.1034184636515765e+09}}",
		Source: VUnionDepth2_All(VUnionDepth2_AllF2{[]float64{
			-1.0194577054779989e+09,
			0,
			-1.1034184636515765e+09,
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth2_Rand0{F12: {F4: \"ijklmnopΔΘΠΣ\", F21: -9809}}",
		Target: VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
			F4:  "ijklmnopΔΘΠΣ",
			F21: -9809,
		}}),
		SourceLabel: "VUnionDepth2_Rand0{F12: {F4: \"ijklmnopΔΘΠΣ\", F21: -9809}}",
		Source: VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
			F4:  "ijklmnopΔΘΠΣ",
			F21: -9809,
		}}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth2_Rand0{F12: {F4: \"ijklmnopΔΘΠΣ\", F21: -9809}}",
		Target: VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
			F4:  "ijklmnopΔΘΠΣ",
			F21: -9809,
		}}),
		SourceLabel: "VUnionDepth2_All{F12: {F4: \"ijklmnopΔΘΠΣ\", F21: -9809}}",
		Source: VUnionDepth2_All(VUnionDepth2_AllF12{&VStructDepth1_Rand0{
			F4:  "ijklmnopΔΘΠΣ",
			F21: -9809,
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUnionDepth2_Rand1{F2: {}}",
		Target:      VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{}),
		SourceLabel: "VUnionDepth2_Rand1{F2: {}}",
		Source:      VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth2_Rand1{F2: {}}",
		Target:      VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{}),
		SourceLabel: "VUnionDepth2_Rand0{F2: {}}",
		Source:      VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth2_Rand1{F2: {}}",
		Target:      VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{}),
		SourceLabel: "VUnionDepth2_All{F2: {}}",
		Source:      VUnionDepth2_All(VUnionDepth2_AllF2{}),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUnionDepth2_Rand1{F11: {F28: 1.23}}",
		Target:      VUnionDepth2_Rand1(VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F28{1.23}}),
		SourceLabel: "VUnionDepth2_Rand1{F11: {F28: 1.23}}",
		Source:      VUnionDepth2_Rand1(VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F28{1.23}}),
	},
	{
		Label:       "Full",
		TargetLabel: "VUnionDepth2_Rand1{F11: {F28: 1.23}}",
		Target:      VUnionDepth2_Rand1(VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F28{1.23}}),
		SourceLabel: "VUnionDepth2_All{F11: {F28: 1.23}}",
		Source:      VUnionDepth2_All(VUnionDepth2_AllF11{VUnionDepth1_Rand0F28{1.23}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth2_Rand1{F2: {-1.0437576473374741e+09, -9.881855199856277e+08}}",
		Target: VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{[]float64{
			-1.0437576473374741e+09,
			-9.881855199856277e+08,
		}}),
		SourceLabel: "VUnionDepth2_Rand1{F2: {-1.0437576473374741e+09, -9.881855199856277e+08}}",
		Source: VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{[]float64{
			-1.0437576473374741e+09,
			-9.881855199856277e+08,
		}}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth2_Rand1{F2: {-1.0437576473374741e+09, -9.881855199856277e+08}}",
		Target: VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{[]float64{
			-1.0437576473374741e+09,
			-9.881855199856277e+08,
		}}),
		SourceLabel: "VUnionDepth2_Rand0{F2: {-1.0437576473374741e+09, -9.881855199856277e+08}}",
		Source: VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{[]float64{
			-1.0437576473374741e+09,
			-9.881855199856277e+08,
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth2_Rand1{F2: {7.912625472882957e+08, -2.0167386480968606e+08}}",
		Target: VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{[]float64{
			7.912625472882957e+08,
			-2.0167386480968606e+08,
		}}),
		SourceLabel: "VUnionDepth2_Rand1{F2: {7.912625472882957e+08, -2.0167386480968606e+08}}",
		Source: VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{[]float64{
			7.912625472882957e+08,
			-2.0167386480968606e+08,
		}}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth2_Rand1{F2: {7.912625472882957e+08, -2.0167386480968606e+08}}",
		Target: VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{[]float64{
			7.912625472882957e+08,
			-2.0167386480968606e+08,
		}}),
		SourceLabel: "VUnionDepth2_Rand0{F2: {7.912625472882957e+08, -2.0167386480968606e+08}}",
		Source: VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{[]float64{
			7.912625472882957e+08,
			-2.0167386480968606e+08,
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "?VStructDepth2_Rand0(nil)",
		Target:      (*VStructDepth2_Rand0)(nil),
		SourceLabel: "?VStructDepth2_Rand0(nil)",
		Source:      (*VStructDepth2_Rand0)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructDepth2_Rand0(nil)",
		Target:      (*VStructDepth2_Rand0)(nil),
		SourceLabel: "?VStructEmpty(nil)",
		Source:      (*VStructEmpty)(nil),
	},
	{
		Label:       "NilAny",
		TargetLabel: "?VStructDepth2_Rand0(nil)",
		Target:      (*VStructDepth2_Rand0)(nil),
		SourceLabel: "any(nil)",
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "?VStructDepth2_Rand0{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}",
		Target: &VStructDepth2_Rand0{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		},
		SourceLabel: "?VStructDepth2_Rand0{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}",
		Source: &VStructDepth2_Rand0{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "?VStructDepth2_Rand0{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}",
		Target: &VStructDepth2_Rand0{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		},
		SourceLabel: "VStructDepth2_All{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}",
		Source: VStructDepth2_All{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth2_Rand0{F0: {[]VArray1_VArray3_Bool{{}, {{true, true, true}}}, VList_VEnumAbc{A, B}, set[VArray1_VStructDepth1_Rand0]{{{F15: 1410813170, F21: 1352}}}}, F9: {F0: []VSet_VStructDepth1_Rand0{}, F26: 3.3149235e+08}}",
		Target: &VStructDepth2_Rand0{
			F0: VArray3_Any{
				[]VArray1_VArray3_Bool{
					{},
					{
						{
							true,
							true,
							true,
						},
					},
				},
				VList_VEnumAbc{
					VEnumAbcA,
					VEnumAbcB,
				},
				map[VArray1_VStructDepth1_Rand0]struct{}{
					{
						{
							F15: 1410813170,
							F21: 1352,
						},
					}: struct{}{},
				},
			},
			F9: VStructDepth1_Rand1{
				F0:  []VSet_VStructDepth1_Rand0(nil),
				F26: 3.3149235e+08,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "?VStructDepth2_Rand0{F0: {[]VArray1_VArray3_Bool{{}, {{true, true, true}}}, VList_VEnumAbc{A, B}, set[VArray1_VStructDepth1_Rand0]{{{F15: 1410813170, F21: 1352}}}}, F9: {F0: []VSet_VStructDepth1_Rand0{}, F26: 3.3149235e+08}}",
		Source: &VStructDepth2_Rand0{
			F0: VArray3_Any{
				[]VArray1_VArray3_Bool{
					{},
					{
						{
							true,
							true,
							true,
						},
					},
				},
				VList_VEnumAbc{
					VEnumAbcA,
					VEnumAbcB,
				},
				map[VArray1_VStructDepth1_Rand0]struct{}{
					{
						{
							F15: 1410813170,
							F21: 1352,
						},
					}: struct{}{},
				},
			},
			F9: VStructDepth1_Rand1{
				F0:  []VSet_VStructDepth1_Rand0(nil),
				F26: 3.3149235e+08,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth2_Rand0{F0: {[]VArray1_VArray3_Bool{{}, {{true, true, true}}}, VList_VEnumAbc{A, B}, set[VArray1_VStructDepth1_Rand0]{{{F15: 1410813170, F21: 1352}}}}, F9: {F0: []VSet_VStructDepth1_Rand0{}, F26: 3.3149235e+08}}",
		Target: &VStructDepth2_Rand0{
			F0: VArray3_Any{
				[]VArray1_VArray3_Bool{
					{},
					{
						{
							true,
							true,
							true,
						},
					},
				},
				VList_VEnumAbc{
					VEnumAbcA,
					VEnumAbcB,
				},
				map[VArray1_VStructDepth1_Rand0]struct{}{
					{
						{
							F15: 1410813170,
							F21: 1352,
						},
					}: struct{}{},
				},
			},
			F9: VStructDepth1_Rand1{
				F0:  []VSet_VStructDepth1_Rand0(nil),
				F26: 3.3149235e+08,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
		SourceLabel: "VStructDepth2_All{F0: {[]VArray1_VArray3_Bool{{}, {{true, true, true}}}, VList_VEnumAbc{A, B}, set[VArray1_VStructDepth1_Rand0]{{{F15: 1410813170, F21: 1352}}}}, F9: {F0: []VSet_VStructDepth1_Rand0{}, F26: 3.3149235e+08}}",
		Source: VStructDepth2_All{
			F0: VArray3_Any{
				[]VArray1_VArray3_Bool{
					{},
					{
						{
							true,
							true,
							true,
						},
					},
				},
				VList_VEnumAbc{
					VEnumAbcA,
					VEnumAbcB,
				},
				map[VArray1_VStructDepth1_Rand0]struct{}{
					{
						{
							F15: 1410813170,
							F21: 1352,
						},
					}: struct{}{},
				},
			},
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F9: VStructDepth1_Rand1{
				F0:  []VSet_VStructDepth1_Rand0(nil),
				F26: 3.3149235e+08,
			},
			F10: VUnionDepth1_Rand0F8{},
			F11: VUnionDepth1_Rand1F6{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth2_Rand0{F0: {VArray3_VArray1_VStructDepth1_Rand0{{{F21: 1497}}, {{F4: \"gh\", F15: 3841855323, F21: -12956}}, {{F4: \"世界\", F15: 1663663323, F21: -2460}}}, []VUnionDepth2_Rand0{{F8: {F0: VBool(false), F1: true, F3: \"defghijklmnopΔΘΠΣΦ王\", F4: \"mno\", F5: typeobject([]VByte), F6: 151, F7: 194, F9: D, F11: {Id: \"ghijklmnopΔΘΠΣ\", Msg: \"klmnopΔΘΠ\"}, F12: 8260, F13: 38126, F14: 3673688878, F15: 358286932, F17: 3005757339147685194, F18: 27, F19: -47, F20: -1651, F21: 3319, F22: 818820716, F23: 993560523, F24: 4358163243667025429, F25: 1598555640048870905, F26: -1.2564104e+09, F28: 1.6946547675229838e+08, F29: 9.212779866661752e+08, F30: {}}}, {F12: {}}}, VSet_VStructEmpty{{}}}, F9: {F0: ?VStructDepth1_Rand0{F15: 350353992, F21: 931}, F1: true, F7: 207, F9: C, F26: 1.0288615e+09}, F10: {F12: 25478}, F11: {F6: 2}}",
		Target: &VStructDepth2_Rand0{
			F0: VArray3_Any{
				VArray3_VArray1_VStructDepth1_Rand0{
					{
						{
							F21: 1497,
						},
					},
					{
						{
							F4:  "gh",
							F15: 3841855323,
							F21: -12956,
						},
					},
					{
						{
							F4:  "世界",
							F15: 1663663323,
							F21: -2460,
						},
					},
				},
				[]VUnionDepth2_Rand0{
					VUnionDepth2_Rand0F8{VStructDepth1_All{
						F0: VBool(false),
						F1: true,
						F3: "defghijklmnopΔΘΠΣΦ王",
						F4: "mno",
						F5: vdl.TypeOf((*[]VByte)(nil)),
						F6: 151,
						F7: 194,
						F9: VEnumBcdD,
						F11: verror.FromWire(vdl.WireError{
							Id:  "ghijklmnopΔΘΠΣ",
							Msg: "klmnopΔΘΠ",
						}),
						F12: 8260,
						F13: 38126,
						F14: 3673688878,
						F15: 358286932,
						F17: 3005757339147685194,
						F18: 27,
						F19: -47,
						F20: -1651,
						F21: 3319,
						F22: 818820716,
						F23: 993560523,
						F24: 4358163243667025429,
						F25: 1598555640048870905,
						F26: -1.2564104e+09,
						F28: 1.6946547675229838e+08,
						F29: 9.212779866661752e+08,
						F30: &VStructEmpty{},
					}},
					VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{}},
				},
				VSet_VStructEmpty{
					{}: struct{}{},
				},
			},
			F9: VStructDepth1_Rand1{
				F0: &VStructDepth1_Rand0{
					F15: 350353992,
					F21: 931,
				},
				F1:  true,
				F7:  207,
				F9:  VEnumBcdC,
				F26: 1.0288615e+09,
			},
			F10: VUnionDepth1_Rand0F12{25478},
			F11: VUnionDepth1_Rand1F6{2},
		},
		SourceLabel: "?VStructDepth2_Rand0{F0: {VArray3_VArray1_VStructDepth1_Rand0{{{F21: 1497}}, {{F4: \"gh\", F15: 3841855323, F21: -12956}}, {{F4: \"世界\", F15: 1663663323, F21: -2460}}}, []VUnionDepth2_Rand0{{F8: {F0: VBool(false), F1: true, F3: \"defghijklmnopΔΘΠΣΦ王\", F4: \"mno\", F5: typeobject([]VByte), F6: 151, F7: 194, F9: D, F11: {Id: \"ghijklmnopΔΘΠΣ\", Msg: \"klmnopΔΘΠ\"}, F12: 8260, F13: 38126, F14: 3673688878, F15: 358286932, F17: 3005757339147685194, F18: 27, F19: -47, F20: -1651, F21: 3319, F22: 818820716, F23: 993560523, F24: 4358163243667025429, F25: 1598555640048870905, F26: -1.2564104e+09, F28: 1.6946547675229838e+08, F29: 9.212779866661752e+08, F30: {}}}, {F12: {}}}, VSet_VStructEmpty{{}}}, F9: {F0: ?VStructDepth1_Rand0{F15: 350353992, F21: 931}, F1: true, F7: 207, F9: C, F26: 1.0288615e+09}, F10: {F12: 25478}, F11: {F6: 2}}",
		Source: &VStructDepth2_Rand0{
			F0: VArray3_Any{
				VArray3_VArray1_VStructDepth1_Rand0{
					{
						{
							F21: 1497,
						},
					},
					{
						{
							F4:  "gh",
							F15: 3841855323,
							F21: -12956,
						},
					},
					{
						{
							F4:  "世界",
							F15: 1663663323,
							F21: -2460,
						},
					},
				},
				[]VUnionDepth2_Rand0{
					VUnionDepth2_Rand0F8{VStructDepth1_All{
						F0: VBool(false),
						F1: true,
						F3: "defghijklmnopΔΘΠΣΦ王",
						F4: "mno",
						F5: vdl.TypeOf((*[]VByte)(nil)),
						F6: 151,
						F7: 194,
						F9: VEnumBcdD,
						F11: verror.FromWire(vdl.WireError{
							Id:  "ghijklmnopΔΘΠΣ",
							Msg: "klmnopΔΘΠ",
						}),
						F12: 8260,
						F13: 38126,
						F14: 3673688878,
						F15: 358286932,
						F17: 3005757339147685194,
						F18: 27,
						F19: -47,
						F20: -1651,
						F21: 3319,
						F22: 818820716,
						F23: 993560523,
						F24: 4358163243667025429,
						F25: 1598555640048870905,
						F26: -1.2564104e+09,
						F28: 1.6946547675229838e+08,
						F29: 9.212779866661752e+08,
						F30: &VStructEmpty{},
					}},
					VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{}},
				},
				VSet_VStructEmpty{
					{}: struct{}{},
				},
			},
			F9: VStructDepth1_Rand1{
				F0: &VStructDepth1_Rand0{
					F15: 350353992,
					F21: 931,
				},
				F1:  true,
				F7:  207,
				F9:  VEnumBcdC,
				F26: 1.0288615e+09,
			},
			F10: VUnionDepth1_Rand0F12{25478},
			F11: VUnionDepth1_Rand1F6{2},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth2_Rand0{F0: {VArray3_VArray1_VStructDepth1_Rand0{{{F21: 1497}}, {{F4: \"gh\", F15: 3841855323, F21: -12956}}, {{F4: \"世界\", F15: 1663663323, F21: -2460}}}, []VUnionDepth2_Rand0{{F8: {F0: VBool(false), F1: true, F3: \"defghijklmnopΔΘΠΣΦ王\", F4: \"mno\", F5: typeobject([]VByte), F6: 151, F7: 194, F9: D, F11: {Id: \"ghijklmnopΔΘΠΣ\", Msg: \"klmnopΔΘΠ\"}, F12: 8260, F13: 38126, F14: 3673688878, F15: 358286932, F17: 3005757339147685194, F18: 27, F19: -47, F20: -1651, F21: 3319, F22: 818820716, F23: 993560523, F24: 4358163243667025429, F25: 1598555640048870905, F26: -1.2564104e+09, F28: 1.6946547675229838e+08, F29: 9.212779866661752e+08, F30: {}}}, {F12: {}}}, VSet_VStructEmpty{{}}}, F9: {F0: ?VStructDepth1_Rand0{F15: 350353992, F21: 931}, F1: true, F7: 207, F9: C, F26: 1.0288615e+09}, F10: {F12: 25478}, F11: {F6: 2}}",
		Target: &VStructDepth2_Rand0{
			F0: VArray3_Any{
				VArray3_VArray1_VStructDepth1_Rand0{
					{
						{
							F21: 1497,
						},
					},
					{
						{
							F4:  "gh",
							F15: 3841855323,
							F21: -12956,
						},
					},
					{
						{
							F4:  "世界",
							F15: 1663663323,
							F21: -2460,
						},
					},
				},
				[]VUnionDepth2_Rand0{
					VUnionDepth2_Rand0F8{VStructDepth1_All{
						F0: VBool(false),
						F1: true,
						F3: "defghijklmnopΔΘΠΣΦ王",
						F4: "mno",
						F5: vdl.TypeOf((*[]VByte)(nil)),
						F6: 151,
						F7: 194,
						F9: VEnumBcdD,
						F11: verror.FromWire(vdl.WireError{
							Id:  "ghijklmnopΔΘΠΣ",
							Msg: "klmnopΔΘΠ",
						}),
						F12: 8260,
						F13: 38126,
						F14: 3673688878,
						F15: 358286932,
						F17: 3005757339147685194,
						F18: 27,
						F19: -47,
						F20: -1651,
						F21: 3319,
						F22: 818820716,
						F23: 993560523,
						F24: 4358163243667025429,
						F25: 1598555640048870905,
						F26: -1.2564104e+09,
						F28: 1.6946547675229838e+08,
						F29: 9.212779866661752e+08,
						F30: &VStructEmpty{},
					}},
					VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{}},
				},
				VSet_VStructEmpty{
					{}: struct{}{},
				},
			},
			F9: VStructDepth1_Rand1{
				F0: &VStructDepth1_Rand0{
					F15: 350353992,
					F21: 931,
				},
				F1:  true,
				F7:  207,
				F9:  VEnumBcdC,
				F26: 1.0288615e+09,
			},
			F10: VUnionDepth1_Rand0F12{25478},
			F11: VUnionDepth1_Rand1F6{2},
		},
		SourceLabel: "VStructDepth2_All{F0: {VArray3_VArray1_VStructDepth1_Rand0{{{F21: 1497}}, {{F4: \"gh\", F15: 3841855323, F21: -12956}}, {{F4: \"世界\", F15: 1663663323, F21: -2460}}}, []VUnionDepth2_Rand0{{F8: {F0: VBool(false), F1: true, F3: \"defghijklmnopΔΘΠΣΦ王\", F4: \"mno\", F5: typeobject([]VByte), F6: 151, F7: 194, F9: D, F11: {Id: \"ghijklmnopΔΘΠΣ\", Msg: \"klmnopΔΘΠ\"}, F12: 8260, F13: 38126, F14: 3673688878, F15: 358286932, F17: 3005757339147685194, F18: 27, F19: -47, F20: -1651, F21: 3319, F22: 818820716, F23: 993560523, F24: 4358163243667025429, F25: 1598555640048870905, F26: -1.2564104e+09, F28: 1.6946547675229838e+08, F29: 9.212779866661752e+08, F30: {}}}, {F12: {}}}, VSet_VStructEmpty{{}}}, F9: {F0: ?VStructDepth1_Rand0{F15: 350353992, F21: 931}, F1: true, F7: 207, F9: C, F26: 1.0288615e+09}, F10: {F12: 25478}, F11: {F6: 2}}",
		Source: VStructDepth2_All{
			F0: VArray3_Any{
				VArray3_VArray1_VStructDepth1_Rand0{
					{
						{
							F21: 1497,
						},
					},
					{
						{
							F4:  "gh",
							F15: 3841855323,
							F21: -12956,
						},
					},
					{
						{
							F4:  "世界",
							F15: 1663663323,
							F21: -2460,
						},
					},
				},
				[]VUnionDepth2_Rand0{
					VUnionDepth2_Rand0F8{VStructDepth1_All{
						F0: VBool(false),
						F1: true,
						F3: "defghijklmnopΔΘΠΣΦ王",
						F4: "mno",
						F5: vdl.TypeOf((*[]VByte)(nil)),
						F6: 151,
						F7: 194,
						F9: VEnumBcdD,
						F11: verror.FromWire(vdl.WireError{
							Id:  "ghijklmnopΔΘΠΣ",
							Msg: "klmnopΔΘΠ",
						}),
						F12: 8260,
						F13: 38126,
						F14: 3673688878,
						F15: 358286932,
						F17: 3005757339147685194,
						F18: 27,
						F19: -47,
						F20: -1651,
						F21: 3319,
						F22: 818820716,
						F23: 993560523,
						F24: 4358163243667025429,
						F25: 1598555640048870905,
						F26: -1.2564104e+09,
						F28: 1.6946547675229838e+08,
						F29: 9.212779866661752e+08,
						F30: &VStructEmpty{},
					}},
					VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{}},
				},
				VSet_VStructEmpty{
					{}: struct{}{},
				},
			},
			F8: VStructDepth1_All{
				F5: vdl.AnyType,
			},
			F9: VStructDepth1_Rand1{
				F0: &VStructDepth1_Rand0{
					F15: 350353992,
					F21: 931,
				},
				F1:  true,
				F7:  207,
				F9:  VEnumBcdC,
				F26: 1.0288615e+09,
			},
			F10: VUnionDepth1_Rand0F12{25478},
			F11: VUnionDepth1_Rand1F6{2},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_VArray1_VStructDepth1_Rand0{}",
		Target:      VArray3_VArray1_VStructDepth1_Rand0{},
		SourceLabel: "VArray3_VArray1_VStructDepth1_Rand0{}",
		Source:      VArray3_VArray1_VStructDepth1_Rand0{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VArray1_VStructDepth1_Rand0{}",
		Target:      VArray3_VArray1_VStructDepth1_Rand0{},
		SourceLabel: "VArray3_Any{VArray1_VStructDepth1_Rand0{}, VArray1_VStructDepth1_Rand0{}, VArray1_VStructDepth1_Rand0{}}",
		Source: VArray3_Any{
			VArray1_VStructDepth1_Rand0{},
			VArray1_VStructDepth1_Rand0{},
			VArray1_VStructDepth1_Rand0{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_VArray1_VStructDepth1_Rand0{}",
		Target:      VArray3_VArray1_VStructDepth1_Rand0{},
		SourceLabel: "VArray3_VList_Any{{VStructDepth1_Rand0{}}, {VStructDepth1_Rand0{}}, {VStructDepth1_Rand0{}}}",
		Source: VArray3_VList_Any{
			{
				VStructDepth1_Rand0{},
			},
			{
				VStructDepth1_Rand0{},
			},
			{
				VStructDepth1_Rand0{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_VArray1_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VArray3_VArray1_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "VArray3_VArray1_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VArray3_VArray1_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_VArray1_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VArray3_VArray1_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "VArray3_VList_Any{{VStructDepth1_Rand0{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, {VStructDepth1_Rand0{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, {VStructDepth1_Rand0{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VArray3_VList_Any{
			{
				VStructDepth1_Rand0{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			{
				VStructDepth1_Rand0{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			{
				VStructDepth1_Rand0{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_VArray1_VStructDepth1_Rand0{{}, {{F4: \"cdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 525094966}}, {}}",
		Target: VArray3_VArray1_VStructDepth1_Rand0{
			{},
			{
				{
					F4:  "cdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 525094966,
				},
			},
			{},
		},
		SourceLabel: "VArray3_VArray1_VStructDepth1_Rand0{{}, {{F4: \"cdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 525094966}}, {}}",
		Source: VArray3_VArray1_VStructDepth1_Rand0{
			{},
			{
				{
					F4:  "cdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 525094966,
				},
			},
			{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_VArray1_VStructDepth1_Rand0{{}, {{F4: \"cdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 525094966}}, {}}",
		Target: VArray3_VArray1_VStructDepth1_Rand0{
			{},
			{
				{
					F4:  "cdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 525094966,
				},
			},
			{},
		},
		SourceLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{}}, {{F4: \"cdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 525094966}}, {{}}}",
		Source: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{},
			},
			{
				{
					F4:  "cdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 525094966,
				},
			},
			{
				{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_VArray1_VStructDepth1_Rand0{{{F15: 1504756218, F21: -880}}, {{F4: \"cdefghijklmnopΔΘΠΣΦ王普澤世\", F15: 1962537357, F21: -8339}}, {{F4: \"abc\", F15: 4181497176, F21: -13667}}}",
		Target: VArray3_VArray1_VStructDepth1_Rand0{
			{
				{
					F15: 1504756218,
					F21: -880,
				},
			},
			{
				{
					F4:  "cdefghijklmnopΔΘΠΣΦ王普澤世",
					F15: 1962537357,
					F21: -8339,
				},
			},
			{
				{
					F4:  "abc",
					F15: 4181497176,
					F21: -13667,
				},
			},
		},
		SourceLabel: "VArray3_VArray1_VStructDepth1_Rand0{{{F15: 1504756218, F21: -880}}, {{F4: \"cdefghijklmnopΔΘΠΣΦ王普澤世\", F15: 1962537357, F21: -8339}}, {{F4: \"abc\", F15: 4181497176, F21: -13667}}}",
		Source: VArray3_VArray1_VStructDepth1_Rand0{
			{
				{
					F15: 1504756218,
					F21: -880,
				},
			},
			{
				{
					F4:  "cdefghijklmnopΔΘΠΣΦ王普澤世",
					F15: 1962537357,
					F21: -8339,
				},
			},
			{
				{
					F4:  "abc",
					F15: 4181497176,
					F21: -13667,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_VArray1_VStructDepth1_Rand0{{{F15: 1504756218, F21: -880}}, {{F4: \"cdefghijklmnopΔΘΠΣΦ王普澤世\", F15: 1962537357, F21: -8339}}, {{F4: \"abc\", F15: 4181497176, F21: -13667}}}",
		Target: VArray3_VArray1_VStructDepth1_Rand0{
			{
				{
					F15: 1504756218,
					F21: -880,
				},
			},
			{
				{
					F4:  "cdefghijklmnopΔΘΠΣΦ王普澤世",
					F15: 1962537357,
					F21: -8339,
				},
			},
			{
				{
					F4:  "abc",
					F15: 4181497176,
					F21: -13667,
				},
			},
		},
		SourceLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F15: 1504756218, F21: -880}}, {{F4: \"cdefghijklmnopΔΘΠΣΦ王普澤世\", F15: 1962537357, F21: -8339}}, {{F4: \"abc\", F15: 4181497176, F21: -13667}}}",
		Source: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F15: 1504756218,
					F21: -880,
				},
			},
			{
				{
					F4:  "cdefghijklmnopΔΘΠΣΦ王普澤世",
					F15: 1962537357,
					F21: -8339,
				},
			},
			{
				{
					F4:  "abc",
					F15: 4181497176,
					F21: -13667,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_VList_VStructDepth1_All{}",
		Target:      VArray1_VList_VStructDepth1_All{},
		SourceLabel: "VArray1_VList_VStructDepth1_All{}",
		Source:      VArray1_VList_VStructDepth1_All{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VList_VStructDepth1_All{}",
		Target:      VArray1_VList_VStructDepth1_All{},
		SourceLabel: "[]any{VList_VStructDepth1_All{}}",
		Source: []interface{}{
			VList_VStructDepth1_All(nil),
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VList_VStructDepth1_All{}",
		Target:      VArray1_VList_VStructDepth1_All{},
		SourceLabel: "VList_Any{VList_VStructDepth1_All{}}",
		Source: VList_Any{
			VList_VStructDepth1_All(nil),
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_VList_VStructDepth1_All{{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}}",
		Target: VArray1_VList_VStructDepth1_All{
			{
				{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
			},
		},
		SourceLabel: "VArray1_VList_VStructDepth1_All{{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}}",
		Source: VArray1_VList_VStructDepth1_All{
			{
				{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_VList_VStructDepth1_All{{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}}",
		Target: VArray1_VList_VStructDepth1_All{
			{
				{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
			},
		},
		SourceLabel: "VList_Any{VList_VStructDepth1_All{{F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}}}",
		Source: VList_Any{
			VList_VStructDepth1_All{
				{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_VList_VStructDepth1_All{{{F0: VByte(68), F1: true, F3: \"lmnopΔΘΠΣΦ王\", F4: \"cdefghijklmnopΔ\", F5: typeobject(VList_Set_VStructDepth1_Rand0), F6: 162, F8: C, F12: 58767, F13: 46381, F14: 302442737, F15: 547679603, F16: 12858756239540706829, F18: 47, F19: -34, F20: -12123, F21: 13000, F24: 997471882820669258, F25: 2132864236390081594, F26: -8.448894e+08, F30: {}}, {}}}",
		Target: VArray1_VList_VStructDepth1_All{
			{
				{
					F0:  VByte(68),
					F1:  true,
					F3:  "lmnopΔΘΠΣΦ王",
					F4:  "cdefghijklmnopΔ",
					F5:  vdl.TypeOf((*VList_Set_VStructDepth1_Rand0)(nil)),
					F6:  162,
					F8:  VEnumAbcC,
					F12: 58767,
					F13: 46381,
					F14: 302442737,
					F15: 547679603,
					F16: 12858756239540706829,
					F18: 47,
					F19: -34,
					F20: -12123,
					F21: 13000,
					F24: 997471882820669258,
					F25: 2132864236390081594,
					F26: -8.448894e+08,
					F30: &VStructEmpty{},
				},
				{
					F5: vdl.AnyType,
				},
			},
		},
		SourceLabel: "VArray1_VList_VStructDepth1_All{{{F0: VByte(68), F1: true, F3: \"lmnopΔΘΠΣΦ王\", F4: \"cdefghijklmnopΔ\", F5: typeobject(VList_Set_VStructDepth1_Rand0), F6: 162, F8: C, F12: 58767, F13: 46381, F14: 302442737, F15: 547679603, F16: 12858756239540706829, F18: 47, F19: -34, F20: -12123, F21: 13000, F24: 997471882820669258, F25: 2132864236390081594, F26: -8.448894e+08, F30: {}}, {}}}",
		Source: VArray1_VList_VStructDepth1_All{
			{
				{
					F0:  VByte(68),
					F1:  true,
					F3:  "lmnopΔΘΠΣΦ王",
					F4:  "cdefghijklmnopΔ",
					F5:  vdl.TypeOf((*VList_Set_VStructDepth1_Rand0)(nil)),
					F6:  162,
					F8:  VEnumAbcC,
					F12: 58767,
					F13: 46381,
					F14: 302442737,
					F15: 547679603,
					F16: 12858756239540706829,
					F18: 47,
					F19: -34,
					F20: -12123,
					F21: 13000,
					F24: 997471882820669258,
					F25: 2132864236390081594,
					F26: -8.448894e+08,
					F30: &VStructEmpty{},
				},
				{
					F5: vdl.AnyType,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_VList_VStructDepth1_All{{{F0: VByte(68), F1: true, F3: \"lmnopΔΘΠΣΦ王\", F4: \"cdefghijklmnopΔ\", F5: typeobject(VList_Set_VStructDepth1_Rand0), F6: 162, F8: C, F12: 58767, F13: 46381, F14: 302442737, F15: 547679603, F16: 12858756239540706829, F18: 47, F19: -34, F20: -12123, F21: 13000, F24: 997471882820669258, F25: 2132864236390081594, F26: -8.448894e+08, F30: {}}, {}}}",
		Target: VArray1_VList_VStructDepth1_All{
			{
				{
					F0:  VByte(68),
					F1:  true,
					F3:  "lmnopΔΘΠΣΦ王",
					F4:  "cdefghijklmnopΔ",
					F5:  vdl.TypeOf((*VList_Set_VStructDepth1_Rand0)(nil)),
					F6:  162,
					F8:  VEnumAbcC,
					F12: 58767,
					F13: 46381,
					F14: 302442737,
					F15: 547679603,
					F16: 12858756239540706829,
					F18: 47,
					F19: -34,
					F20: -12123,
					F21: 13000,
					F24: 997471882820669258,
					F25: 2132864236390081594,
					F26: -8.448894e+08,
					F30: &VStructEmpty{},
				},
				{
					F5: vdl.AnyType,
				},
			},
		},
		SourceLabel: "[]any{VList_VStructDepth1_All{{F0: VByte(68), F1: true, F3: \"lmnopΔΘΠΣΦ王\", F4: \"cdefghijklmnopΔ\", F5: typeobject(VList_Set_VStructDepth1_Rand0), F6: 162, F8: C, F12: 58767, F13: 46381, F14: 302442737, F15: 547679603, F16: 12858756239540706829, F18: 47, F19: -34, F20: -12123, F21: 13000, F24: 997471882820669258, F25: 2132864236390081594, F26: -8.448894e+08, F30: {}}, {}}}",
		Source: []interface{}{
			VList_VStructDepth1_All{
				{
					F0:  VByte(68),
					F1:  true,
					F3:  "lmnopΔΘΠΣΦ王",
					F4:  "cdefghijklmnopΔ",
					F5:  vdl.TypeOf((*VList_Set_VStructDepth1_Rand0)(nil)),
					F6:  162,
					F8:  VEnumAbcC,
					F12: 58767,
					F13: 46381,
					F14: 302442737,
					F15: 547679603,
					F16: 12858756239540706829,
					F18: 47,
					F19: -34,
					F20: -12123,
					F21: 13000,
					F24: 997471882820669258,
					F25: 2132864236390081594,
					F26: -8.448894e+08,
					F30: &VStructEmpty{},
				},
				{
					F5: vdl.AnyType,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_VList_VStructDepth1_All{{{F0: VList_Any{map[VEnumAbc]VEnumAbc{A: B}}, F2: true, F3: \"cdefghijk\", F4: \"bcdefgh\", F5: typeobject(byte), F6: 220, F7: 201, F8: B, F11: {Id: \"jk\", RetryCode: RetryConnection, Msg: \"hijklmnopΔΘΠΣ\"}, F12: 56670, F13: 28221, F14: 3933078158, F15: 2927171079, F16: 7242486007822564587, F18: 5, F19: -50, F20: -5714, F21: 11956, F22: 163691986, F23: 597408518, F24: -1066805372488704445, F25: -3940142183516882268, F26: -9.045203e+07, F27: -2.0751706e+09, F28: 3.570759325427667e+09, F29: -1.1710972092026205e+09, F30: {}}}}",
		Target: VArray1_VList_VStructDepth1_All{
			{
				{
					F0: VList_Any{
						map[VEnumAbc]VEnumAbc{
							VEnumAbcA: VEnumAbcB,
						},
					},
					F2: true,
					F3: "cdefghijk",
					F4: "bcdefgh",
					F5: vdl.ByteType,
					F6: 220,
					F7: 201,
					F8: VEnumAbcB,
					F11: verror.FromWire(vdl.WireError{
						Id:        "jk",
						RetryCode: vdl.WireRetryCodeRetryConnection,
						Msg:       "hijklmnopΔΘΠΣ",
					}),
					F12: 56670,
					F13: 28221,
					F14: 3933078158,
					F15: 2927171079,
					F16: 7242486007822564587,
					F18: 5,
					F19: -50,
					F20: -5714,
					F21: 11956,
					F22: 163691986,
					F23: 597408518,
					F24: -1066805372488704445,
					F25: -3940142183516882268,
					F26: -9.045203e+07,
					F27: -2.0751706e+09,
					F28: 3.570759325427667e+09,
					F29: -1.1710972092026205e+09,
					F30: &VStructEmpty{},
				},
			},
		},
		SourceLabel: "VArray1_VList_VStructDepth1_All{{{F0: VList_Any{map[VEnumAbc]VEnumAbc{A: B}}, F2: true, F3: \"cdefghijk\", F4: \"bcdefgh\", F5: typeobject(byte), F6: 220, F7: 201, F8: B, F11: {Id: \"jk\", RetryCode: RetryConnection, Msg: \"hijklmnopΔΘΠΣ\"}, F12: 56670, F13: 28221, F14: 3933078158, F15: 2927171079, F16: 7242486007822564587, F18: 5, F19: -50, F20: -5714, F21: 11956, F22: 163691986, F23: 597408518, F24: -1066805372488704445, F25: -3940142183516882268, F26: -9.045203e+07, F27: -2.0751706e+09, F28: 3.570759325427667e+09, F29: -1.1710972092026205e+09, F30: {}}}}",
		Source: VArray1_VList_VStructDepth1_All{
			{
				{
					F0: VList_Any{
						map[VEnumAbc]VEnumAbc{
							VEnumAbcA: VEnumAbcB,
						},
					},
					F2: true,
					F3: "cdefghijk",
					F4: "bcdefgh",
					F5: vdl.ByteType,
					F6: 220,
					F7: 201,
					F8: VEnumAbcB,
					F11: verror.FromWire(vdl.WireError{
						Id:        "jk",
						RetryCode: vdl.WireRetryCodeRetryConnection,
						Msg:       "hijklmnopΔΘΠΣ",
					}),
					F12: 56670,
					F13: 28221,
					F14: 3933078158,
					F15: 2927171079,
					F16: 7242486007822564587,
					F18: 5,
					F19: -50,
					F20: -5714,
					F21: 11956,
					F22: 163691986,
					F23: 597408518,
					F24: -1066805372488704445,
					F25: -3940142183516882268,
					F26: -9.045203e+07,
					F27: -2.0751706e+09,
					F28: 3.570759325427667e+09,
					F29: -1.1710972092026205e+09,
					F30: &VStructEmpty{},
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_VList_VStructDepth1_All{{{F0: VList_Any{map[VEnumAbc]VEnumAbc{A: B}}, F2: true, F3: \"cdefghijk\", F4: \"bcdefgh\", F5: typeobject(byte), F6: 220, F7: 201, F8: B, F11: {Id: \"jk\", RetryCode: RetryConnection, Msg: \"hijklmnopΔΘΠΣ\"}, F12: 56670, F13: 28221, F14: 3933078158, F15: 2927171079, F16: 7242486007822564587, F18: 5, F19: -50, F20: -5714, F21: 11956, F22: 163691986, F23: 597408518, F24: -1066805372488704445, F25: -3940142183516882268, F26: -9.045203e+07, F27: -2.0751706e+09, F28: 3.570759325427667e+09, F29: -1.1710972092026205e+09, F30: {}}}}",
		Target: VArray1_VList_VStructDepth1_All{
			{
				{
					F0: VList_Any{
						map[VEnumAbc]VEnumAbc{
							VEnumAbcA: VEnumAbcB,
						},
					},
					F2: true,
					F3: "cdefghijk",
					F4: "bcdefgh",
					F5: vdl.ByteType,
					F6: 220,
					F7: 201,
					F8: VEnumAbcB,
					F11: verror.FromWire(vdl.WireError{
						Id:        "jk",
						RetryCode: vdl.WireRetryCodeRetryConnection,
						Msg:       "hijklmnopΔΘΠΣ",
					}),
					F12: 56670,
					F13: 28221,
					F14: 3933078158,
					F15: 2927171079,
					F16: 7242486007822564587,
					F18: 5,
					F19: -50,
					F20: -5714,
					F21: 11956,
					F22: 163691986,
					F23: 597408518,
					F24: -1066805372488704445,
					F25: -3940142183516882268,
					F26: -9.045203e+07,
					F27: -2.0751706e+09,
					F28: 3.570759325427667e+09,
					F29: -1.1710972092026205e+09,
					F30: &VStructEmpty{},
				},
			},
		},
		SourceLabel: "[]any{VList_VStructDepth1_All{{F0: VList_Any{map[VEnumAbc]VEnumAbc{A: B}}, F2: true, F3: \"cdefghijk\", F4: \"bcdefgh\", F5: typeobject(byte), F6: 220, F7: 201, F8: B, F11: {Id: \"jk\", RetryCode: RetryConnection, Msg: \"hijklmnopΔΘΠΣ\"}, F12: 56670, F13: 28221, F14: 3933078158, F15: 2927171079, F16: 7242486007822564587, F18: 5, F19: -50, F20: -5714, F21: 11956, F22: 163691986, F23: 597408518, F24: -1066805372488704445, F25: -3940142183516882268, F26: -9.045203e+07, F27: -2.0751706e+09, F28: 3.570759325427667e+09, F29: -1.1710972092026205e+09, F30: {}}}}",
		Source: []interface{}{
			VList_VStructDepth1_All{
				{
					F0: VList_Any{
						map[VEnumAbc]VEnumAbc{
							VEnumAbcA: VEnumAbcB,
						},
					},
					F2: true,
					F3: "cdefghijk",
					F4: "bcdefgh",
					F5: vdl.ByteType,
					F6: 220,
					F7: 201,
					F8: VEnumAbcB,
					F11: verror.FromWire(vdl.WireError{
						Id:        "jk",
						RetryCode: vdl.WireRetryCodeRetryConnection,
						Msg:       "hijklmnopΔΘΠΣ",
					}),
					F12: 56670,
					F13: 28221,
					F14: 3933078158,
					F15: 2927171079,
					F16: 7242486007822564587,
					F18: 5,
					F19: -50,
					F20: -5714,
					F21: 11956,
					F22: 163691986,
					F23: 597408518,
					F24: -1066805372488704445,
					F25: -3940142183516882268,
					F26: -9.045203e+07,
					F27: -2.0751706e+09,
					F28: 3.570759325427667e+09,
					F29: -1.1710972092026205e+09,
					F30: &VStructEmpty{},
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_Set_VStructDepth1_Rand0{}",
		Target:      VArray1_Set_VStructDepth1_Rand0{},
		SourceLabel: "VArray1_Set_VStructDepth1_Rand0{}",
		Source:      VArray1_Set_VStructDepth1_Rand0{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Set_VStructDepth1_Rand0{}",
		Target:      VArray1_Set_VStructDepth1_Rand0{},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{}}",
		Source: []VSet_VStructDepth1_Rand0{
			nil,
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Set_VStructDepth1_Rand0{}",
		Target:      VArray1_Set_VStructDepth1_Rand0{},
		SourceLabel: "VList_Set_VStructDepth1_Rand0{{}}",
		Source: VList_Set_VStructDepth1_Rand0{
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VArray1_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
		SourceLabel: "VArray1_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VArray1_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VArray1_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: []VSet_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnop\", F15: 3038462614, F21: 3577}}}",
		Target: VArray1_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnop",
					F15: 3038462614,
					F21: 3577,
				}: struct{}{},
			},
		},
		SourceLabel: "VArray1_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnop\", F15: 3038462614, F21: 3577}}}",
		Source: VArray1_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnop",
					F15: 3038462614,
					F21: 3577,
				}: struct{}{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnop\", F15: 3038462614, F21: 3577}}}",
		Target: VArray1_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnop",
					F15: 3038462614,
					F21: 3577,
				}: struct{}{},
			},
		},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnop\", F15: 3038462614, F21: 3577}}}",
		Source: []VSet_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnop",
					F15: 3038462614,
					F21: 3577,
				}: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_Set_VStructDepth1_Rand0{{{}, {F15: 2286599438}}}",
		Target: VArray1_Set_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F15: 2286599438,
				}: struct{}{},
			},
		},
		SourceLabel: "VArray1_Set_VStructDepth1_Rand0{{{}, {F15: 2286599438}}}",
		Source: VArray1_Set_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F15: 2286599438,
				}: struct{}{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_Set_VStructDepth1_Rand0{{{}, {F15: 2286599438}}}",
		Target: VArray1_Set_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F15: 2286599438,
				}: struct{}{},
			},
		},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{{}, {F15: 2286599438}}}",
		Source: []VSet_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F15: 2286599438,
				}: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{}",
		Target:      VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{},
		SourceLabel: "VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{}",
		Source:      VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{}",
		Target:      VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{},
		SourceLabel: "[]any{map[VArray1_VStructEmpty]VArray1_VStructEmpty{}}",
		Source: []interface{}{
			map[VArray1_VStructEmpty]VArray1_VStructEmpty(nil),
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{}",
		Target:      VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{},
		SourceLabel: "VList_Any{map[VArray1_VStructEmpty]VArray1_VStructEmpty{}}",
		Source: VList_Any{
			map[VArray1_VStructEmpty]VArray1_VStructEmpty(nil),
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{{{}: {}}}",
		Target: VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{
			{
				{}: {},
			},
		},
		SourceLabel: "VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{{{}: {}}}",
		Source: VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{
			{
				{}: {},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{{{}: {}}}",
		Target: VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty{
			{
				{}: {},
			},
		},
		SourceLabel: "VList_Any{map[VArray1_VStructEmpty]VArray1_VStructEmpty{{}: {}}}",
		Source: VList_Any{
			map[VArray1_VStructEmpty]VArray1_VStructEmpty{
				{}: {},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_VStructDepth2_Rand0{}",
		Target: VArray1_VStructDepth2_Rand0{
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VArray1_VStructDepth2_Rand0{}",
		Source: VArray1_VStructDepth2_Rand0{
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VStructDepth2_Rand0{}",
		Target: VArray1_VStructDepth2_Rand0{
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "[]VStructEmpty{{}}",
		Source: []VStructEmpty{
			{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VStructDepth2_Rand0{}",
		Target: VArray1_VStructDepth2_Rand0{
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "[]any{VStructDepth2_Rand0{}}",
		Source: []interface{}{
			VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "VArray1_VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "[]?VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_VStructDepth2_Rand0{{F0: {set[VString]{}, VSet_VEnumAbc{A, B}, map[byte]byte{0: 0, 196: 0}}, F9: {F0: VMap_VStructEmpty_VStructEmpty{{}: {}}, F7: 87}}}",
		Target: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					map[VString]struct{}(nil),
					VSet_VEnumAbc{
						VEnumAbcA: struct{}{},
						VEnumAbcB: struct{}{},
					},
					map[byte]byte{
						0:   0,
						196: 0,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: VMap_VStructEmpty_VStructEmpty{
						{}: {},
					},
					F7: 87,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VArray1_VStructDepth2_Rand0{{F0: {set[VString]{}, VSet_VEnumAbc{A, B}, map[byte]byte{0: 0, 196: 0}}, F9: {F0: VMap_VStructEmpty_VStructEmpty{{}: {}}, F7: 87}}}",
		Source: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					map[VString]struct{}(nil),
					VSet_VEnumAbc{
						VEnumAbcA: struct{}{},
						VEnumAbcB: struct{}{},
					},
					map[byte]byte{
						0:   0,
						196: 0,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: VMap_VStructEmpty_VStructEmpty{
						{}: {},
					},
					F7: 87,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_VStructDepth2_Rand0{{F0: {set[VString]{}, VSet_VEnumAbc{A, B}, map[byte]byte{0: 0, 196: 0}}, F9: {F0: VMap_VStructEmpty_VStructEmpty{{}: {}}, F7: 87}}}",
		Target: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					map[VString]struct{}(nil),
					VSet_VEnumAbc{
						VEnumAbcA: struct{}{},
						VEnumAbcB: struct{}{},
					},
					map[byte]byte{
						0:   0,
						196: 0,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: VMap_VStructEmpty_VStructEmpty{
						{}: {},
					},
					F7: 87,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "[]any{VStructDepth2_Rand0{F0: {set[VString]{}, VSet_VEnumAbc{A, B}, map[byte]byte{0: 0, 196: 0}}, F9: {F0: VMap_VStructEmpty_VStructEmpty{{}: {}}, F7: 87}}}",
		Source: []interface{}{
			VStructDepth2_Rand0{
				F0: VArray3_Any{
					map[VString]struct{}(nil),
					VSet_VEnumAbc{
						VEnumAbcA: struct{}{},
						VEnumAbcB: struct{}{},
					},
					map[byte]byte{
						0:   0,
						196: 0,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: VMap_VStructEmpty_VStructEmpty{
						{}: {},
					},
					F7: 87,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_VStructDepth2_Rand0{{F0: {VArray2_VSet_String{{\"abcdefghijklmnopΔΘΠΣΦ\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世\", \"cdefghijklmno\", \"jklmnopΔΘ\"}}, VArray3_VBool{false, true, false}, []VUint64{7337360629205209471}}, F9: {F7: 81, F9: D, F26: -6.7337024e+08}}}",
		Target: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray2_VSet_String{
						{
							"abcdefghijklmnopΔΘΠΣΦ": struct{}{},
						},
						{
							"abcdefghijklmnopΔΘΠΣΦ王普澤世": struct{}{},
							"cdefghijklmno":             struct{}{},
							"jklmnopΔΘ":                 struct{}{},
						},
					},
					VArray3_VBool{
						false,
						true,
						false,
					},
					[]VUint64{
						7337360629205209471,
					},
				},
				F9: VStructDepth1_Rand1{
					F7:  81,
					F9:  VEnumBcdD,
					F26: -6.7337024e+08,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VArray1_VStructDepth2_Rand0{{F0: {VArray2_VSet_String{{\"abcdefghijklmnopΔΘΠΣΦ\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世\", \"cdefghijklmno\", \"jklmnopΔΘ\"}}, VArray3_VBool{false, true, false}, []VUint64{7337360629205209471}}, F9: {F7: 81, F9: D, F26: -6.7337024e+08}}}",
		Source: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray2_VSet_String{
						{
							"abcdefghijklmnopΔΘΠΣΦ": struct{}{},
						},
						{
							"abcdefghijklmnopΔΘΠΣΦ王普澤世": struct{}{},
							"cdefghijklmno":             struct{}{},
							"jklmnopΔΘ":                 struct{}{},
						},
					},
					VArray3_VBool{
						false,
						true,
						false,
					},
					[]VUint64{
						7337360629205209471,
					},
				},
				F9: VStructDepth1_Rand1{
					F7:  81,
					F9:  VEnumBcdD,
					F26: -6.7337024e+08,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_VStructDepth2_Rand0{{F0: {VArray2_VSet_String{{\"abcdefghijklmnopΔΘΠΣΦ\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世\", \"cdefghijklmno\", \"jklmnopΔΘ\"}}, VArray3_VBool{false, true, false}, []VUint64{7337360629205209471}}, F9: {F7: 81, F9: D, F26: -6.7337024e+08}}}",
		Target: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray2_VSet_String{
						{
							"abcdefghijklmnopΔΘΠΣΦ": struct{}{},
						},
						{
							"abcdefghijklmnopΔΘΠΣΦ王普澤世": struct{}{},
							"cdefghijklmno":             struct{}{},
							"jklmnopΔΘ":                 struct{}{},
						},
					},
					VArray3_VBool{
						false,
						true,
						false,
					},
					[]VUint64{
						7337360629205209471,
					},
				},
				F9: VStructDepth1_Rand1{
					F7:  81,
					F9:  VEnumBcdD,
					F26: -6.7337024e+08,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "[]any{VStructDepth2_Rand0{F0: {VArray2_VSet_String{{\"abcdefghijklmnopΔΘΠΣΦ\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世\", \"cdefghijklmno\", \"jklmnopΔΘ\"}}, VArray3_VBool{false, true, false}, []VUint64{7337360629205209471}}, F9: {F7: 81, F9: D, F26: -6.7337024e+08}}}",
		Source: []interface{}{
			VStructDepth2_Rand0{
				F0: VArray3_Any{
					VArray2_VSet_String{
						{
							"abcdefghijklmnopΔΘΠΣΦ": struct{}{},
						},
						{
							"abcdefghijklmnopΔΘΠΣΦ王普澤世": struct{}{},
							"cdefghijklmno":             struct{}{},
							"jklmnopΔΘ":                 struct{}{},
						},
					},
					VArray3_VBool{
						false,
						true,
						false,
					},
					[]VUint64{
						7337360629205209471,
					},
				},
				F9: VStructDepth1_Rand1{
					F7:  81,
					F9:  VEnumBcdD,
					F26: -6.7337024e+08,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray1_VUnionDepth2_Rand1{}",
		Target: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F2{},
		},
		SourceLabel: "VArray1_VUnionDepth2_Rand1{}",
		Source: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F2{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VUnionDepth2_Rand1{}",
		Target: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F2{},
		},
		SourceLabel: "[]any{VUnionDepth2_Rand1{F2: {}}}",
		Source: []interface{}{
			VUnionDepth2_Rand1(VUnionDepth2_Rand1F2{}),
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray1_VUnionDepth2_Rand1{}",
		Target: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F2{},
		},
		SourceLabel: "[]VUnionDepth2_Rand0{{F2: {}}}",
		Source: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F2{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray1_VUnionDepth2_Rand1{{F11: {F28: 1.23}}}",
		Target: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F28{1.23}},
		},
		SourceLabel: "VArray1_VUnionDepth2_Rand1{{F11: {F28: 1.23}}}",
		Source: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F28{1.23}},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray1_VUnionDepth2_Rand1{{F11: {F28: 1.23}}}",
		Target: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F28{1.23}},
		},
		SourceLabel: "VList_Any{VUnionDepth2_Rand1{F11: {F28: 1.23}}}",
		Source: VList_Any{
			VUnionDepth2_Rand1(VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F28{1.23}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_VUnionDepth2_Rand1{{F11: {F8: A}}}",
		Target: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F8{}},
		},
		SourceLabel: "VArray1_VUnionDepth2_Rand1{{F11: {F8: A}}}",
		Source: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F8{}},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_VUnionDepth2_Rand1{{F11: {F8: A}}}",
		Target: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F8{}},
		},
		SourceLabel: "[]any{VUnionDepth2_Rand1{F11: {F8: A}}}",
		Source: []interface{}{
			VUnionDepth2_Rand1(VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F8{}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray1_VUnionDepth2_Rand1{{F11: {F8: A}}}",
		Target: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F8{}},
		},
		SourceLabel: "VArray1_VUnionDepth2_Rand1{{F11: {F8: A}}}",
		Source: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F8{}},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray1_VUnionDepth2_Rand1{{F11: {F8: A}}}",
		Target: VArray1_VUnionDepth2_Rand1{
			VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F8{}},
		},
		SourceLabel: "[]any{VUnionDepth2_Rand1{F11: {F8: A}}}",
		Source: []interface{}{
			VUnionDepth2_Rand1(VUnionDepth2_Rand1F11{VUnionDepth1_Rand0F8{}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VArray3_OptVStructDepth2_Rand0{}",
		Target:      VArray3_OptVStructDepth2_Rand0{},
		SourceLabel: "VArray3_OptVStructDepth2_Rand0{}",
		Source:      VArray3_OptVStructDepth2_Rand0{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_OptVStructDepth2_Rand0{}",
		Target:      VArray3_OptVStructDepth2_Rand0{},
		SourceLabel: "VArray3_Any{}",
		Source:      VArray3_Any{},
	},
	{
		Label:       "Zero",
		TargetLabel: "VArray3_OptVStructDepth2_Rand0{}",
		Target:      VArray3_OptVStructDepth2_Rand0{},
		SourceLabel: "[]any{nil, nil, nil}",
		Source: []interface{}{
			nil,
			nil,
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VArray3_OptVStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VArray3_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "VArray3_OptVStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: VArray3_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VArray3_OptVStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VArray3_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "[]?VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_OptVStructDepth2_Rand0{{F9: {F0: uint64(7615343006602304117), F7: 163, F9: D, F26: 1.8631564e+09}, F10: {F10: {}}}, {}, {F0: {[][]VEnumAbc{}, []VStructDepth1_Rand0{}, VList_OptVStructEmpty{}}, F10: {F28: 9.410260989686064e+08}, F11: {F9: B}}}",
		Target: VArray3_OptVStructDepth2_Rand0{
			{
				F9: VStructDepth1_Rand1{
					F0:  uint64(7615343006602304117),
					F7:  163,
					F9:  VEnumBcdD,
					F26: 1.8631564e+09,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F0: VArray3_Any{
					[][]VEnumAbc(nil),
					[]VStructDepth1_Rand0(nil),
					VList_OptVStructEmpty(nil),
				},
				F10: VUnionDepth1_Rand0F28{9.410260989686064e+08},
				F11: VUnionDepth1_Rand1F9{},
			},
		},
		SourceLabel: "VArray3_OptVStructDepth2_Rand0{{F9: {F0: uint64(7615343006602304117), F7: 163, F9: D, F26: 1.8631564e+09}, F10: {F10: {}}}, {}, {F0: {[][]VEnumAbc{}, []VStructDepth1_Rand0{}, VList_OptVStructEmpty{}}, F10: {F28: 9.410260989686064e+08}, F11: {F9: B}}}",
		Source: VArray3_OptVStructDepth2_Rand0{
			{
				F9: VStructDepth1_Rand1{
					F0:  uint64(7615343006602304117),
					F7:  163,
					F9:  VEnumBcdD,
					F26: 1.8631564e+09,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F0: VArray3_Any{
					[][]VEnumAbc(nil),
					[]VStructDepth1_Rand0(nil),
					VList_OptVStructEmpty(nil),
				},
				F10: VUnionDepth1_Rand0F28{9.410260989686064e+08},
				F11: VUnionDepth1_Rand1F9{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_OptVStructDepth2_Rand0{{F9: {F0: uint64(7615343006602304117), F7: 163, F9: D, F26: 1.8631564e+09}, F10: {F10: {}}}, {}, {F0: {[][]VEnumAbc{}, []VStructDepth1_Rand0{}, VList_OptVStructEmpty{}}, F10: {F28: 9.410260989686064e+08}, F11: {F9: B}}}",
		Target: VArray3_OptVStructDepth2_Rand0{
			{
				F9: VStructDepth1_Rand1{
					F0:  uint64(7615343006602304117),
					F7:  163,
					F9:  VEnumBcdD,
					F26: 1.8631564e+09,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F0: VArray3_Any{
					[][]VEnumAbc(nil),
					[]VStructDepth1_Rand0(nil),
					VList_OptVStructEmpty(nil),
				},
				F10: VUnionDepth1_Rand0F28{9.410260989686064e+08},
				F11: VUnionDepth1_Rand1F9{},
			},
		},
		SourceLabel: "[]any{?VStructDepth2_Rand0{F9: {F0: uint64(7615343006602304117), F7: 163, F9: D, F26: 1.8631564e+09}, F10: {F10: {}}}, ?VStructDepth2_Rand0{}, ?VStructDepth2_Rand0{F0: {[][]VEnumAbc{}, []VStructDepth1_Rand0{}, VList_OptVStructEmpty{}}, F10: {F28: 9.410260989686064e+08}, F11: {F9: B}}}",
		Source: []interface{}{
			&VStructDepth2_Rand0{
				F9: VStructDepth1_Rand1{
					F0:  uint64(7615343006602304117),
					F7:  163,
					F9:  VEnumBcdD,
					F26: 1.8631564e+09,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F6{},
			},
			&VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			&VStructDepth2_Rand0{
				F0: VArray3_Any{
					[][]VEnumAbc(nil),
					[]VStructDepth1_Rand0(nil),
					VList_OptVStructEmpty(nil),
				},
				F10: VUnionDepth1_Rand0F28{9.410260989686064e+08},
				F11: VUnionDepth1_Rand1F9{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VArray3_OptVStructDepth2_Rand0{nil, {F0: {[]VStructEmpty{{}, {}, {}}, VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F4: \"hijklmnopΔΘΠΣΦ\", F15: 4019700205}: {}, {F4: \"ijklmnopΔΘΠΣΦ王普\", F15: 2886493035}: {}}}, nil}, F10: {F12: 13523}, F11: {F20: 3424}}, nil}",
		Target: VArray3_OptVStructDepth2_Rand0{
			nil,
			{
				F0: VArray3_Any{
					[]VStructEmpty{
						{},
						{},
						{},
					},
					VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
						{
							{
								F4:  "hijklmnopΔΘΠΣΦ",
								F15: 4019700205,
							}: {},
							{
								F4:  "ijklmnopΔΘΠΣΦ王普",
								F15: 2886493035,
							}: {},
						},
					},
					nil,
				},
				F10: VUnionDepth1_Rand0F12{13523},
				F11: VUnionDepth1_Rand1F20{3424},
			},
			nil,
		},
		SourceLabel: "VArray3_OptVStructDepth2_Rand0{nil, {F0: {[]VStructEmpty{{}, {}, {}}, VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F4: \"hijklmnopΔΘΠΣΦ\", F15: 4019700205}: {}, {F4: \"ijklmnopΔΘΠΣΦ王普\", F15: 2886493035}: {}}}, nil}, F10: {F12: 13523}, F11: {F20: 3424}}, nil}",
		Source: VArray3_OptVStructDepth2_Rand0{
			nil,
			{
				F0: VArray3_Any{
					[]VStructEmpty{
						{},
						{},
						{},
					},
					VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
						{
							{
								F4:  "hijklmnopΔΘΠΣΦ",
								F15: 4019700205,
							}: {},
							{
								F4:  "ijklmnopΔΘΠΣΦ王普",
								F15: 2886493035,
							}: {},
						},
					},
					nil,
				},
				F10: VUnionDepth1_Rand0F12{13523},
				F11: VUnionDepth1_Rand1F20{3424},
			},
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VArray3_OptVStructDepth2_Rand0{nil, {F0: {[]VStructEmpty{{}, {}, {}}, VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F4: \"hijklmnopΔΘΠΣΦ\", F15: 4019700205}: {}, {F4: \"ijklmnopΔΘΠΣΦ王普\", F15: 2886493035}: {}}}, nil}, F10: {F12: 13523}, F11: {F20: 3424}}, nil}",
		Target: VArray3_OptVStructDepth2_Rand0{
			nil,
			{
				F0: VArray3_Any{
					[]VStructEmpty{
						{},
						{},
						{},
					},
					VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
						{
							{
								F4:  "hijklmnopΔΘΠΣΦ",
								F15: 4019700205,
							}: {},
							{
								F4:  "ijklmnopΔΘΠΣΦ王普",
								F15: 2886493035,
							}: {},
						},
					},
					nil,
				},
				F10: VUnionDepth1_Rand0F12{13523},
				F11: VUnionDepth1_Rand1F20{3424},
			},
			nil,
		},
		SourceLabel: "[]any{nil, ?VStructDepth2_Rand0{F0: {[]VStructEmpty{{}, {}, {}}, VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F4: \"hijklmnopΔΘΠΣΦ\", F15: 4019700205}: {}, {F4: \"ijklmnopΔΘΠΣΦ王普\", F15: 2886493035}: {}}}, nil}, F10: {F12: 13523}, F11: {F20: 3424}}, nil}",
		Source: []interface{}{
			nil,
			&VStructDepth2_Rand0{
				F0: VArray3_Any{
					[]VStructEmpty{
						{},
						{},
						{},
					},
					VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
						{
							{
								F4:  "hijklmnopΔΘΠΣΦ",
								F15: 4019700205,
							}: {},
							{
								F4:  "ijklmnopΔΘΠΣΦ王普",
								F15: 2886493035,
							}: {},
						},
					},
					nil,
				},
				F10: VUnionDepth1_Rand0F12{13523},
				F11: VUnionDepth1_Rand1F20{3424},
			},
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VArray1_VArray3_Bool{}",
		Target:      []VArray1_VArray3_Bool(nil),
		SourceLabel: "[]VArray1_VArray3_Bool{}",
		Source:      []VArray1_VArray3_Bool(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VArray1_VArray3_Bool{}",
		Target:      []VArray1_VArray3_Bool(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VArray1_VArray3_Bool{}",
		Target:      []VArray1_VArray3_Bool(nil),
		SourceLabel: "VList_Any{}",
		Source:      VList_Any(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VArray1_VArray3_Bool{{{true, true, true}}}",
		Target: []VArray1_VArray3_Bool{
			{
				{
					true,
					true,
					true,
				},
			},
		},
		SourceLabel: "[]VArray1_VArray3_Bool{{{true, true, true}}}",
		Source: []VArray1_VArray3_Bool{
			{
				{
					true,
					true,
					true,
				},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VArray1_VArray3_Bool{{{true, true, true}}}",
		Target: []VArray1_VArray3_Bool{
			{
				{
					true,
					true,
					true,
				},
			},
		},
		SourceLabel: "VList_Any{VArray1_VArray3_Bool{{true, true, true}}}",
		Source: VList_Any{
			VArray1_VArray3_Bool{
				{
					true,
					true,
					true,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VList_VArray1_String{}",
		Target:      []VList_VArray1_String(nil),
		SourceLabel: "[]VList_VArray1_String{}",
		Source:      []VList_VArray1_String(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VList_VArray1_String{}",
		Target:      []VList_VArray1_String(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VList_VArray1_String{}",
		Target:      []VList_VArray1_String(nil),
		SourceLabel: "VList_Any{}",
		Source:      VList_Any(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VList_VArray1_String{{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}}",
		Target: []VList_VArray1_String{
			{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
			},
		},
		SourceLabel: "[]VList_VArray1_String{{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}}",
		Source: []VList_VArray1_String{
			{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VList_VArray1_String{{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}}",
		Target: []VList_VArray1_String{
			{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
			},
		},
		SourceLabel: "VList_Any{VList_VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}}",
		Source: VList_Any{
			VList_VArray1_String{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VList_VArray1_String{{{\"abcdefghijklmnopΔΘΠΣΦ王\"}, {\"klmnopΔΘ\"}}, {{\"efghijklmnopΔΘ\"}, {\"opΔ\"}, {\"mnopΔΘ\"}}}",
		Target: []VList_VArray1_String{
			{
				{
					"abcdefghijklmnopΔΘΠΣΦ王",
				},
				{
					"klmnopΔΘ",
				},
			},
			{
				{
					"efghijklmnopΔΘ",
				},
				{
					"opΔ",
				},
				{
					"mnopΔΘ",
				},
			},
		},
		SourceLabel: "[]VList_VArray1_String{{{\"abcdefghijklmnopΔΘΠΣΦ王\"}, {\"klmnopΔΘ\"}}, {{\"efghijklmnopΔΘ\"}, {\"opΔ\"}, {\"mnopΔΘ\"}}}",
		Source: []VList_VArray1_String{
			{
				{
					"abcdefghijklmnopΔΘΠΣΦ王",
				},
				{
					"klmnopΔΘ",
				},
			},
			{
				{
					"efghijklmnopΔΘ",
				},
				{
					"opΔ",
				},
				{
					"mnopΔΘ",
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VList_VArray1_String{{{\"abcdefghijklmnopΔΘΠΣΦ王\"}, {\"klmnopΔΘ\"}}, {{\"efghijklmnopΔΘ\"}, {\"opΔ\"}, {\"mnopΔΘ\"}}}",
		Target: []VList_VArray1_String{
			{
				{
					"abcdefghijklmnopΔΘΠΣΦ王",
				},
				{
					"klmnopΔΘ",
				},
			},
			{
				{
					"efghijklmnopΔΘ",
				},
				{
					"opΔ",
				},
				{
					"mnopΔΘ",
				},
			},
		},
		SourceLabel: "[]any{VList_VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王\"}, {\"klmnopΔΘ\"}}, VList_VArray1_String{{\"efghijklmnopΔΘ\"}, {\"opΔ\"}, {\"mnopΔΘ\"}}}",
		Source: []interface{}{
			VList_VArray1_String{
				{
					"abcdefghijklmnopΔΘΠΣΦ王",
				},
				{
					"klmnopΔΘ",
				},
			},
			VList_VArray1_String{
				{
					"efghijklmnopΔΘ",
				},
				{
					"opΔ",
				},
				{
					"mnopΔΘ",
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VList_VArray1_String{{{\"abcdefghijklmnopΔΘΠΣΦ王普\"}}, {{\"ΔΘΠΣ\"}, {\"hijklmnopΔΘ\"}, {}}, {{\"mnopΔΘ\"}}}",
		Target: []VList_VArray1_String{
			{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普",
				},
			},
			{
				{
					"ΔΘΠΣ",
				},
				{
					"hijklmnopΔΘ",
				},
				{},
			},
			{
				{
					"mnopΔΘ",
				},
			},
		},
		SourceLabel: "[]VList_VArray1_String{{{\"abcdefghijklmnopΔΘΠΣΦ王普\"}}, {{\"ΔΘΠΣ\"}, {\"hijklmnopΔΘ\"}, {}}, {{\"mnopΔΘ\"}}}",
		Source: []VList_VArray1_String{
			{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普",
				},
			},
			{
				{
					"ΔΘΠΣ",
				},
				{
					"hijklmnopΔΘ",
				},
				{},
			},
			{
				{
					"mnopΔΘ",
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VList_VArray1_String{{{\"abcdefghijklmnopΔΘΠΣΦ王普\"}}, {{\"ΔΘΠΣ\"}, {\"hijklmnopΔΘ\"}, {}}, {{\"mnopΔΘ\"}}}",
		Target: []VList_VArray1_String{
			{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普",
				},
			},
			{
				{
					"ΔΘΠΣ",
				},
				{
					"hijklmnopΔΘ",
				},
				{},
			},
			{
				{
					"mnopΔΘ",
				},
			},
		},
		SourceLabel: "[]any{VList_VArray1_String{{\"abcdefghijklmnopΔΘΠΣΦ王普\"}}, VList_VArray1_String{{\"ΔΘΠΣ\"}, {\"hijklmnopΔΘ\"}, {}}, VList_VArray1_String{{\"mnopΔΘ\"}}}",
		Source: []interface{}{
			VList_VArray1_String{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普",
				},
			},
			VList_VArray1_String{
				{
					"ΔΘΠΣ",
				},
				{
					"hijklmnopΔΘ",
				},
				{},
			},
			VList_VArray1_String{
				{
					"mnopΔΘ",
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VSet_VStructDepth1_Rand0{}",
		Target:      []VSet_VStructDepth1_Rand0(nil),
		SourceLabel: "[]VSet_VStructDepth1_Rand0{}",
		Source:      []VSet_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VSet_VStructDepth1_Rand0{}",
		Target:      []VSet_VStructDepth1_Rand0(nil),
		SourceLabel: "VList_Set_VStructDepth1_Rand0{}",
		Source:      VList_Set_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VSet_VStructDepth1_Rand0{}",
		Target:      []VSet_VStructDepth1_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VSet_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: []VSet_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: []VSet_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VSet_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: []VSet_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
		SourceLabel: "VArray1_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VArray1_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VSet_VStructDepth1_Rand0{{}, {{F15: 1291131488, F21: 7401}}}",
		Target: []VSet_VStructDepth1_Rand0{
			nil,
			{
				{
					F15: 1291131488,
					F21: 7401,
				}: struct{}{},
			},
		},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{}, {{F15: 1291131488, F21: 7401}}}",
		Source: []VSet_VStructDepth1_Rand0{
			nil,
			{
				{
					F15: 1291131488,
					F21: 7401,
				}: struct{}{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VSet_VStructDepth1_Rand0{{}, {{F15: 1291131488, F21: 7401}}}",
		Target: []VSet_VStructDepth1_Rand0{
			nil,
			{
				{
					F15: 1291131488,
					F21: 7401,
				}: struct{}{},
			},
		},
		SourceLabel: "[]any{VSet_VStructDepth1_Rand0{}, VSet_VStructDepth1_Rand0{{F15: 1291131488, F21: 7401}}}",
		Source: []interface{}{
			VSet_VStructDepth1_Rand0(nil),
			VSet_VStructDepth1_Rand0{
				{
					F15: 1291131488,
					F21: 7401,
				}: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VSet_VStructDepth1_Rand0{{{F4: \"bcdefghijklmnopΔΘΠΣΦ\", F15: 908511049, F21: 10575}, {F4: \"efghijklmn\", F15: 4167825563}, {F4: \"ghijklmnopΔ\", F15: 2426997433, F21: 4818}}, {{}}}",
		Target: []VSet_VStructDepth1_Rand0{
			{
				{
					F4:  "bcdefghijklmnopΔΘΠΣΦ",
					F15: 908511049,
					F21: 10575,
				}: struct{}{},
				{
					F4:  "efghijklmn",
					F15: 4167825563,
				}: struct{}{},
				{
					F4:  "ghijklmnopΔ",
					F15: 2426997433,
					F21: 4818,
				}: struct{}{},
			},
			{
				{}: struct{}{},
			},
		},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{{F4: \"bcdefghijklmnopΔΘΠΣΦ\", F15: 908511049, F21: 10575}, {F4: \"efghijklmn\", F15: 4167825563}, {F4: \"ghijklmnopΔ\", F15: 2426997433, F21: 4818}}, {{}}}",
		Source: []VSet_VStructDepth1_Rand0{
			{
				{
					F4:  "bcdefghijklmnopΔΘΠΣΦ",
					F15: 908511049,
					F21: 10575,
				}: struct{}{},
				{
					F4:  "efghijklmn",
					F15: 4167825563,
				}: struct{}{},
				{
					F4:  "ghijklmnopΔ",
					F15: 2426997433,
					F21: 4818,
				}: struct{}{},
			},
			{
				{}: struct{}{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VSet_VStructDepth1_Rand0{{{F4: \"bcdefghijklmnopΔΘΠΣΦ\", F15: 908511049, F21: 10575}, {F4: \"efghijklmn\", F15: 4167825563}, {F4: \"ghijklmnopΔ\", F15: 2426997433, F21: 4818}}, {{}}}",
		Target: []VSet_VStructDepth1_Rand0{
			{
				{
					F4:  "bcdefghijklmnopΔΘΠΣΦ",
					F15: 908511049,
					F21: 10575,
				}: struct{}{},
				{
					F4:  "efghijklmn",
					F15: 4167825563,
				}: struct{}{},
				{
					F4:  "ghijklmnopΔ",
					F15: 2426997433,
					F21: 4818,
				}: struct{}{},
			},
			{
				{}: struct{}{},
			},
		},
		SourceLabel: "[]any{VSet_VStructDepth1_Rand0{{F4: \"bcdefghijklmnopΔΘΠΣΦ\", F15: 908511049, F21: 10575}, {F4: \"efghijklmn\", F15: 4167825563}, {F4: \"ghijklmnopΔ\", F15: 2426997433, F21: 4818}}, VSet_VStructDepth1_Rand0{{}}}",
		Source: []interface{}{
			VSet_VStructDepth1_Rand0{
				{
					F4:  "bcdefghijklmnopΔΘΠΣΦ",
					F15: 908511049,
					F21: 10575,
				}: struct{}{},
				{
					F4:  "efghijklmn",
					F15: 4167825563,
				}: struct{}{},
				{
					F4:  "ghijklmnopΔ",
					F15: 2426997433,
					F21: 4818,
				}: struct{}{},
			},
			VSet_VStructDepth1_Rand0{
				{}: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Target:      []map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
		SourceLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Source:      []map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Target:      []map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Target:      []map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
		SourceLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Source:      VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "VList_Any{map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VList_Any{
			map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F21: 9950}: {F4: \"ijklm\", F15: 862785788}, {F15: 515829054, F21: -10431}: {}, {F4: \"cd\", F21: -10146}: {F4: \"def\", F15: 1022513270, F21: -3397}}}",
		Target: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F21: 9950,
				}: {
					F4:  "ijklm",
					F15: 862785788,
				},
				{
					F15: 515829054,
					F21: -10431,
				}: {},
				{
					F4:  "cd",
					F21: -10146,
				}: {
					F4:  "def",
					F15: 1022513270,
					F21: -3397,
				},
			},
		},
		SourceLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F21: 9950}: {F4: \"ijklm\", F15: 862785788}, {F15: 515829054, F21: -10431}: {}, {F4: \"cd\", F21: -10146}: {F4: \"def\", F15: 1022513270, F21: -3397}}}",
		Source: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F21: 9950,
				}: {
					F4:  "ijklm",
					F15: 862785788,
				},
				{
					F15: 515829054,
					F21: -10431,
				}: {},
				{
					F4:  "cd",
					F21: -10146,
				}: {
					F4:  "def",
					F15: 1022513270,
					F21: -3397,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F21: 9950}: {F4: \"ijklm\", F15: 862785788}, {F15: 515829054, F21: -10431}: {}, {F4: \"cd\", F21: -10146}: {F4: \"def\", F15: 1022513270, F21: -3397}}}",
		Target: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F21: 9950,
				}: {
					F4:  "ijklm",
					F15: 862785788,
				},
				{
					F15: 515829054,
					F21: -10431,
				}: {},
				{
					F4:  "cd",
					F21: -10146,
				}: {
					F4:  "def",
					F15: 1022513270,
					F21: -3397,
				},
			},
		},
		SourceLabel: "[]any{map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F21: 9950}: {F4: \"ijklm\", F15: 862785788}, {F15: 515829054, F21: -10431}: {}, {F4: \"cd\", F21: -10146}: {F4: \"def\", F15: 1022513270, F21: -3397}}}",
		Source: []interface{}{
			map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{
					F21: 9950,
				}: {
					F4:  "ijklm",
					F15: 862785788,
				},
				{
					F15: 515829054,
					F21: -10431,
				}: {},
				{
					F4:  "cd",
					F21: -10146,
				}: {
					F4:  "def",
					F15: 1022513270,
					F21: -3397,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F4: \"fghijklmnopΔΘ\", F15: 1422146653}: {F4: \"efghijklm\", F15: 163045143}}, {{F4: \"bcdefghi\", F21: 12905}: {F4: \"ΣΦ王普澤世界\", F15: 1310693416, F21: 11719}}, {}}",
		Target: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F4:  "fghijklmnopΔΘ",
					F15: 1422146653,
				}: {
					F4:  "efghijklm",
					F15: 163045143,
				},
			},
			{
				{
					F4:  "bcdefghi",
					F21: 12905,
				}: {
					F4:  "ΣΦ王普澤世界",
					F15: 1310693416,
					F21: 11719,
				},
			},
			nil,
		},
		SourceLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F4: \"fghijklmnopΔΘ\", F15: 1422146653}: {F4: \"efghijklm\", F15: 163045143}}, {{F4: \"bcdefghi\", F21: 12905}: {F4: \"ΣΦ王普澤世界\", F15: 1310693416, F21: 11719}}, {}}",
		Source: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F4:  "fghijklmnopΔΘ",
					F15: 1422146653,
				}: {
					F4:  "efghijklm",
					F15: 163045143,
				},
			},
			{
				{
					F4:  "bcdefghi",
					F21: 12905,
				}: {
					F4:  "ΣΦ王普澤世界",
					F15: 1310693416,
					F21: 11719,
				},
			},
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F4: \"fghijklmnopΔΘ\", F15: 1422146653}: {F4: \"efghijklm\", F15: 163045143}}, {{F4: \"bcdefghi\", F21: 12905}: {F4: \"ΣΦ王普澤世界\", F15: 1310693416, F21: 11719}}, {}}",
		Target: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F4:  "fghijklmnopΔΘ",
					F15: 1422146653,
				}: {
					F4:  "efghijklm",
					F15: 163045143,
				},
			},
			{
				{
					F4:  "bcdefghi",
					F21: 12905,
				}: {
					F4:  "ΣΦ王普澤世界",
					F15: 1310693416,
					F21: 11719,
				},
			},
			nil,
		},
		SourceLabel: "[]any{map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F4: \"fghijklmnopΔΘ\", F15: 1422146653}: {F4: \"efghijklm\", F15: 163045143}}, map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F4: \"bcdefghi\", F21: 12905}: {F4: \"ΣΦ王普澤世界\", F15: 1310693416, F21: 11719}}, map[VStructDepth1_Rand0]VStructDepth1_Rand0{}}",
		Source: []interface{}{
			map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{
					F4:  "fghijklmnopΔΘ",
					F15: 1422146653,
				}: {
					F4:  "efghijklm",
					F15: 163045143,
				},
			},
			map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{
					F4:  "bcdefghi",
					F21: 12905,
				}: {
					F4:  "ΣΦ王普澤世界",
					F15: 1310693416,
					F21: 11719,
				},
			},
			map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VStructDepth2_Rand0{}",
		Target:      []VStructDepth2_Rand0(nil),
		SourceLabel: "[]VStructDepth2_Rand0{}",
		Source:      []VStructDepth2_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VStructDepth2_Rand0{}",
		Target:      []VStructDepth2_Rand0(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VStructDepth2_Rand0{}",
		Target:      []VStructDepth2_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: []VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "[]VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: []VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: []VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "[]?VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VStructDepth2_Rand0{{F0: {VArray2_VSet_String{{\"ghijklmnopΔΘ\", \"k\", \"Θ\"}, {\"lmnopΔΘ\", \"ΣΦ\"}}, VList_VStructDepth2_All{{F0: {nil, VArray3_OptVStructDepth2_Rand0{{}, {}, {F0: {map[VEnumBcd]VEnumBcd{B: B}, set[VEnumAbc]{A, B, C}, VSet_VStructDepth1_Rand0{{}, {F15: 274416478, F21: 3003}}}, F10: {F12: 0}}}, VSet_VStructEmpty{{}}}, F1: {\"ghijklmn\"}, F2: {false, false, true}, F3: {0, 331502182}, F4: {\"abcdefghijklmnopΔΘ\", \"efghijklmnopΔΘΠΣΦ\", \"opΔΘΠΣ\"}, F5: {-5.2400682e+08, 1.6889864e+08, 7.9051315e+08}, F6: {218: 45, 234: 0}, F7: {B: C, D: B}, F8: {F0: VArray3_VString{\"abcdefgh\", \"hijklmnopΔΘΠΣΦ王\", \"pΔΘ\"}, F1: true, F3: \"abcdefghijkl\", F4: \"ΠΣΦ王普\", F5: typeobject(byte), F6: 218, F7: 222, F12: 32247, F13: 40507, F14: 2582734184, F15: 3142928452, F18: 63, F19: -61, F20: -15797, F24: -2669176990115907474, F25: -1735575579573305209, F26: -2.4216786e+09, F27: -1.7466433e+09, F28: -8.263044124537586e+08}, F9: {F0: VList_OptVStructDepth2_Rand0{{F0: {[]VUnionDepth1_All{{F0: map[VByte]VByte{30: 0, 44: 0}}, {F14: 4018867364}, {F24: 516525750659450540}}, nil, []VArray1_String{{}, {\"efghijklmnopΔΘΠΣΦ王普澤世\"}, {}}}, F9: {F0: set[VEnumAbc]{A}, F1: true, F26: 1.1532326e+09}, F11: {F11: {}}}}, F9: D}, F10: {F10: {}}, F11: {F9: D}, F12: {F0: VSet_VUnionDepth1_Rand0{{F10: {}}, {F8: A}, {F8: B}}, F2: true, F3: \"klmnopΔΘΠΣΦ王普澤世\", F5: typeobject([]VUnionDepth2_Rand0), F7: 242, F8: B, F9: C, F12: 20099, F14: 1380252894, F15: 4005675170, F16: 17637172552429207713, F17: 5811345339427185880, F18: -17, F22: -127070305, F23: 685908080, F24: -471469747791260292, F25: 4593546952259391523, F26: -4.9066656e+07, F27: 3.1216187e+09, F28: -6.46981840713098e+08, F29: -5.342313101766018e+08, F30: {}}, F13: {F4: \"ghijklmnopΔΘΠΣΦ王普澤世\", F21: 905}}}, VArray1_Uint64{2803368414001685425}}, F9: {F1: true, F7: 14, F9: C, F26: -2.3952862e+08}, F10: {F28: -8.67510848715285e+08}}}",
		Target: []VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray2_VSet_String{
						{
							"ghijklmnopΔΘ": struct{}{},
							"k":            struct{}{},
							"Θ":            struct{}{},
						},
						{
							"lmnopΔΘ": struct{}{},
							"ΣΦ":      struct{}{},
						},
					},
					VList_VStructDepth2_All{
						{
							F0: VArray3_Any{
								nil,
								VArray3_OptVStructDepth2_Rand0{
									{
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F6{},
									},
									{
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F6{},
									},
									{
										F0: VArray3_Any{
											map[VEnumBcd]VEnumBcd{
												VEnumBcdB: VEnumBcdB,
											},
											map[VEnumAbc]struct{}{
												VEnumAbcA: struct{}{},
												VEnumAbcB: struct{}{},
												VEnumAbcC: struct{}{},
											},
											VSet_VStructDepth1_Rand0{
												{}: struct{}{},
												{
													F15: 274416478,
													F21: 3003,
												}: struct{}{},
											},
										},
										F10: VUnionDepth1_Rand0F12{},
										F11: VUnionDepth1_Rand1F6{},
									},
								},
								VSet_VStructEmpty{
									{}: struct{}{},
								},
							},
							F1: VArray1_String{
								"ghijklmn",
							},
							F2: VList_VBool{
								false,
								false,
								true,
							},
							F3: VList_VInt32{
								0,
								331502182,
							},
							F4: VSet_VString{
								"abcdefghijklmnopΔΘ": struct{}{},
								"efghijklmnopΔΘΠΣΦ":  struct{}{},
								"opΔΘΠΣ":             struct{}{},
							},
							F5: VSet_Float32{
								-5.2400682e+08: struct{}{},
								1.6889864e+08:  struct{}{},
								7.9051315e+08:  struct{}{},
							},
							F6: VMap_VByte_VByte{
								218: 45,
								234: 0,
							},
							F7: VMap_VEnumBcd_VEnumBcd{
								VEnumBcdB: VEnumBcdC,
								VEnumBcdD: VEnumBcdB,
							},
							F8: VStructDepth1_All{
								F0: VArray3_VString{
									"abcdefgh",
									"hijklmnopΔΘΠΣΦ王",
									"pΔΘ",
								},
								F1:  true,
								F3:  "abcdefghijkl",
								F4:  "ΠΣΦ王普",
								F5:  vdl.ByteType,
								F6:  218,
								F7:  222,
								F12: 32247,
								F13: 40507,
								F14: 2582734184,
								F15: 3142928452,
								F18: 63,
								F19: -61,
								F20: -15797,
								F24: -2669176990115907474,
								F25: -1735575579573305209,
								F26: -2.4216786e+09,
								F27: -1.7466433e+09,
								F28: -8.263044124537586e+08,
							},
							F9: VStructDepth1_Rand1{
								F0: VList_OptVStructDepth2_Rand0{
									{
										F0: VArray3_Any{
											[]VUnionDepth1_All{
												VUnionDepth1_AllF0{map[VByte]VByte{
													30: 0,
													44: 0,
												}},
												VUnionDepth1_AllF14{4018867364},
												VUnionDepth1_AllF24{516525750659450540},
											},
											nil,
											[]VArray1_String{
												{},
												{
													"efghijklmnopΔΘΠΣΦ王普澤世",
												},
												{},
											},
										},
										F9: VStructDepth1_Rand1{
											F0: map[VEnumAbc]struct{}{
												VEnumAbcA: struct{}{},
											},
											F1:  true,
											F26: 1.1532326e+09,
										},
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
									},
								},
								F9: VEnumBcdD,
							},
							F10: VUnionDepth1_Rand0F10{},
							F11: VUnionDepth1_Rand1F9{VEnumBcdD},
							F12: &VStructDepth1_All{
								F0: VSet_VUnionDepth1_Rand0{
									VUnionDepth1_Rand0F10{}:         struct{}{},
									VUnionDepth1_Rand0F8{}:          struct{}{},
									VUnionDepth1_Rand0F8{VEnumAbcB}: struct{}{},
								},
								F2:  true,
								F3:  "klmnopΔΘΠΣΦ王普澤世",
								F5:  vdl.TypeOf((*[]VUnionDepth2_Rand0)(nil)),
								F7:  242,
								F8:  VEnumAbcB,
								F9:  VEnumBcdC,
								F12: 20099,
								F14: 1380252894,
								F15: 4005675170,
								F16: 17637172552429207713,
								F17: 5811345339427185880,
								F18: -17,
								F22: -127070305,
								F23: 685908080,
								F24: -471469747791260292,
								F25: 4593546952259391523,
								F26: -4.9066656e+07,
								F27: 3.1216187e+09,
								F28: -6.46981840713098e+08,
								F29: -5.342313101766018e+08,
								F30: &VStructEmpty{},
							},
							F13: &VStructDepth1_Rand0{
								F4:  "ghijklmnopΔΘΠΣΦ王普澤世",
								F21: 905,
							},
						},
					},
					VArray1_Uint64{
						2803368414001685425,
					},
				},
				F9: VStructDepth1_Rand1{
					F1:  true,
					F7:  14,
					F9:  VEnumBcdC,
					F26: -2.3952862e+08,
				},
				F10: VUnionDepth1_Rand0F28{-8.67510848715285e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "[]VStructDepth2_Rand0{{F0: {VArray2_VSet_String{{\"ghijklmnopΔΘ\", \"k\", \"Θ\"}, {\"lmnopΔΘ\", \"ΣΦ\"}}, VList_VStructDepth2_All{{F0: {nil, VArray3_OptVStructDepth2_Rand0{{}, {}, {F0: {map[VEnumBcd]VEnumBcd{B: B}, set[VEnumAbc]{A, B, C}, VSet_VStructDepth1_Rand0{{}, {F15: 274416478, F21: 3003}}}, F10: {F12: 0}}}, VSet_VStructEmpty{{}}}, F1: {\"ghijklmn\"}, F2: {false, false, true}, F3: {0, 331502182}, F4: {\"abcdefghijklmnopΔΘ\", \"efghijklmnopΔΘΠΣΦ\", \"opΔΘΠΣ\"}, F5: {-5.2400682e+08, 1.6889864e+08, 7.9051315e+08}, F6: {218: 45, 234: 0}, F7: {B: C, D: B}, F8: {F0: VArray3_VString{\"abcdefgh\", \"hijklmnopΔΘΠΣΦ王\", \"pΔΘ\"}, F1: true, F3: \"abcdefghijkl\", F4: \"ΠΣΦ王普\", F5: typeobject(byte), F6: 218, F7: 222, F12: 32247, F13: 40507, F14: 2582734184, F15: 3142928452, F18: 63, F19: -61, F20: -15797, F24: -2669176990115907474, F25: -1735575579573305209, F26: -2.4216786e+09, F27: -1.7466433e+09, F28: -8.263044124537586e+08}, F9: {F0: VList_OptVStructDepth2_Rand0{{F0: {[]VUnionDepth1_All{{F0: map[VByte]VByte{30: 0, 44: 0}}, {F14: 4018867364}, {F24: 516525750659450540}}, nil, []VArray1_String{{}, {\"efghijklmnopΔΘΠΣΦ王普澤世\"}, {}}}, F9: {F0: set[VEnumAbc]{A}, F1: true, F26: 1.1532326e+09}, F11: {F11: {}}}}, F9: D}, F10: {F10: {}}, F11: {F9: D}, F12: {F0: VSet_VUnionDepth1_Rand0{{F10: {}}, {F8: A}, {F8: B}}, F2: true, F3: \"klmnopΔΘΠΣΦ王普澤世\", F5: typeobject([]VUnionDepth2_Rand0), F7: 242, F8: B, F9: C, F12: 20099, F14: 1380252894, F15: 4005675170, F16: 17637172552429207713, F17: 5811345339427185880, F18: -17, F22: -127070305, F23: 685908080, F24: -471469747791260292, F25: 4593546952259391523, F26: -4.9066656e+07, F27: 3.1216187e+09, F28: -6.46981840713098e+08, F29: -5.342313101766018e+08, F30: {}}, F13: {F4: \"ghijklmnopΔΘΠΣΦ王普澤世\", F21: 905}}}, VArray1_Uint64{2803368414001685425}}, F9: {F1: true, F7: 14, F9: C, F26: -2.3952862e+08}, F10: {F28: -8.67510848715285e+08}}}",
		Source: []VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray2_VSet_String{
						{
							"ghijklmnopΔΘ": struct{}{},
							"k":            struct{}{},
							"Θ":            struct{}{},
						},
						{
							"lmnopΔΘ": struct{}{},
							"ΣΦ":      struct{}{},
						},
					},
					VList_VStructDepth2_All{
						{
							F0: VArray3_Any{
								nil,
								VArray3_OptVStructDepth2_Rand0{
									{
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F6{},
									},
									{
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F6{},
									},
									{
										F0: VArray3_Any{
											map[VEnumBcd]VEnumBcd{
												VEnumBcdB: VEnumBcdB,
											},
											map[VEnumAbc]struct{}{
												VEnumAbcA: struct{}{},
												VEnumAbcB: struct{}{},
												VEnumAbcC: struct{}{},
											},
											VSet_VStructDepth1_Rand0{
												{}: struct{}{},
												{
													F15: 274416478,
													F21: 3003,
												}: struct{}{},
											},
										},
										F10: VUnionDepth1_Rand0F12{},
										F11: VUnionDepth1_Rand1F6{},
									},
								},
								VSet_VStructEmpty{
									{}: struct{}{},
								},
							},
							F1: VArray1_String{
								"ghijklmn",
							},
							F2: VList_VBool{
								false,
								false,
								true,
							},
							F3: VList_VInt32{
								0,
								331502182,
							},
							F4: VSet_VString{
								"abcdefghijklmnopΔΘ": struct{}{},
								"efghijklmnopΔΘΠΣΦ":  struct{}{},
								"opΔΘΠΣ":             struct{}{},
							},
							F5: VSet_Float32{
								-5.2400682e+08: struct{}{},
								1.6889864e+08:  struct{}{},
								7.9051315e+08:  struct{}{},
							},
							F6: VMap_VByte_VByte{
								218: 45,
								234: 0,
							},
							F7: VMap_VEnumBcd_VEnumBcd{
								VEnumBcdB: VEnumBcdC,
								VEnumBcdD: VEnumBcdB,
							},
							F8: VStructDepth1_All{
								F0: VArray3_VString{
									"abcdefgh",
									"hijklmnopΔΘΠΣΦ王",
									"pΔΘ",
								},
								F1:  true,
								F3:  "abcdefghijkl",
								F4:  "ΠΣΦ王普",
								F5:  vdl.ByteType,
								F6:  218,
								F7:  222,
								F12: 32247,
								F13: 40507,
								F14: 2582734184,
								F15: 3142928452,
								F18: 63,
								F19: -61,
								F20: -15797,
								F24: -2669176990115907474,
								F25: -1735575579573305209,
								F26: -2.4216786e+09,
								F27: -1.7466433e+09,
								F28: -8.263044124537586e+08,
							},
							F9: VStructDepth1_Rand1{
								F0: VList_OptVStructDepth2_Rand0{
									{
										F0: VArray3_Any{
											[]VUnionDepth1_All{
												VUnionDepth1_AllF0{map[VByte]VByte{
													30: 0,
													44: 0,
												}},
												VUnionDepth1_AllF14{4018867364},
												VUnionDepth1_AllF24{516525750659450540},
											},
											nil,
											[]VArray1_String{
												{},
												{
													"efghijklmnopΔΘΠΣΦ王普澤世",
												},
												{},
											},
										},
										F9: VStructDepth1_Rand1{
											F0: map[VEnumAbc]struct{}{
												VEnumAbcA: struct{}{},
											},
											F1:  true,
											F26: 1.1532326e+09,
										},
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
									},
								},
								F9: VEnumBcdD,
							},
							F10: VUnionDepth1_Rand0F10{},
							F11: VUnionDepth1_Rand1F9{VEnumBcdD},
							F12: &VStructDepth1_All{
								F0: VSet_VUnionDepth1_Rand0{
									VUnionDepth1_Rand0F10{}:         struct{}{},
									VUnionDepth1_Rand0F8{}:          struct{}{},
									VUnionDepth1_Rand0F8{VEnumAbcB}: struct{}{},
								},
								F2:  true,
								F3:  "klmnopΔΘΠΣΦ王普澤世",
								F5:  vdl.TypeOf((*[]VUnionDepth2_Rand0)(nil)),
								F7:  242,
								F8:  VEnumAbcB,
								F9:  VEnumBcdC,
								F12: 20099,
								F14: 1380252894,
								F15: 4005675170,
								F16: 17637172552429207713,
								F17: 5811345339427185880,
								F18: -17,
								F22: -127070305,
								F23: 685908080,
								F24: -471469747791260292,
								F25: 4593546952259391523,
								F26: -4.9066656e+07,
								F27: 3.1216187e+09,
								F28: -6.46981840713098e+08,
								F29: -5.342313101766018e+08,
								F30: &VStructEmpty{},
							},
							F13: &VStructDepth1_Rand0{
								F4:  "ghijklmnopΔΘΠΣΦ王普澤世",
								F21: 905,
							},
						},
					},
					VArray1_Uint64{
						2803368414001685425,
					},
				},
				F9: VStructDepth1_Rand1{
					F1:  true,
					F7:  14,
					F9:  VEnumBcdC,
					F26: -2.3952862e+08,
				},
				F10: VUnionDepth1_Rand0F28{-8.67510848715285e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VStructDepth2_Rand0{{F0: {VArray2_VSet_String{{\"ghijklmnopΔΘ\", \"k\", \"Θ\"}, {\"lmnopΔΘ\", \"ΣΦ\"}}, VList_VStructDepth2_All{{F0: {nil, VArray3_OptVStructDepth2_Rand0{{}, {}, {F0: {map[VEnumBcd]VEnumBcd{B: B}, set[VEnumAbc]{A, B, C}, VSet_VStructDepth1_Rand0{{}, {F15: 274416478, F21: 3003}}}, F10: {F12: 0}}}, VSet_VStructEmpty{{}}}, F1: {\"ghijklmn\"}, F2: {false, false, true}, F3: {0, 331502182}, F4: {\"abcdefghijklmnopΔΘ\", \"efghijklmnopΔΘΠΣΦ\", \"opΔΘΠΣ\"}, F5: {-5.2400682e+08, 1.6889864e+08, 7.9051315e+08}, F6: {218: 45, 234: 0}, F7: {B: C, D: B}, F8: {F0: VArray3_VString{\"abcdefgh\", \"hijklmnopΔΘΠΣΦ王\", \"pΔΘ\"}, F1: true, F3: \"abcdefghijkl\", F4: \"ΠΣΦ王普\", F5: typeobject(byte), F6: 218, F7: 222, F12: 32247, F13: 40507, F14: 2582734184, F15: 3142928452, F18: 63, F19: -61, F20: -15797, F24: -2669176990115907474, F25: -1735575579573305209, F26: -2.4216786e+09, F27: -1.7466433e+09, F28: -8.263044124537586e+08}, F9: {F0: VList_OptVStructDepth2_Rand0{{F0: {[]VUnionDepth1_All{{F0: map[VByte]VByte{30: 0, 44: 0}}, {F14: 4018867364}, {F24: 516525750659450540}}, nil, []VArray1_String{{}, {\"efghijklmnopΔΘΠΣΦ王普澤世\"}, {}}}, F9: {F0: set[VEnumAbc]{A}, F1: true, F26: 1.1532326e+09}, F11: {F11: {}}}}, F9: D}, F10: {F10: {}}, F11: {F9: D}, F12: {F0: VSet_VUnionDepth1_Rand0{{F10: {}}, {F8: A}, {F8: B}}, F2: true, F3: \"klmnopΔΘΠΣΦ王普澤世\", F5: typeobject([]VUnionDepth2_Rand0), F7: 242, F8: B, F9: C, F12: 20099, F14: 1380252894, F15: 4005675170, F16: 17637172552429207713, F17: 5811345339427185880, F18: -17, F22: -127070305, F23: 685908080, F24: -471469747791260292, F25: 4593546952259391523, F26: -4.9066656e+07, F27: 3.1216187e+09, F28: -6.46981840713098e+08, F29: -5.342313101766018e+08, F30: {}}, F13: {F4: \"ghijklmnopΔΘΠΣΦ王普澤世\", F21: 905}}}, VArray1_Uint64{2803368414001685425}}, F9: {F1: true, F7: 14, F9: C, F26: -2.3952862e+08}, F10: {F28: -8.67510848715285e+08}}}",
		Target: []VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray2_VSet_String{
						{
							"ghijklmnopΔΘ": struct{}{},
							"k":            struct{}{},
							"Θ":            struct{}{},
						},
						{
							"lmnopΔΘ": struct{}{},
							"ΣΦ":      struct{}{},
						},
					},
					VList_VStructDepth2_All{
						{
							F0: VArray3_Any{
								nil,
								VArray3_OptVStructDepth2_Rand0{
									{
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F6{},
									},
									{
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F6{},
									},
									{
										F0: VArray3_Any{
											map[VEnumBcd]VEnumBcd{
												VEnumBcdB: VEnumBcdB,
											},
											map[VEnumAbc]struct{}{
												VEnumAbcA: struct{}{},
												VEnumAbcB: struct{}{},
												VEnumAbcC: struct{}{},
											},
											VSet_VStructDepth1_Rand0{
												{}: struct{}{},
												{
													F15: 274416478,
													F21: 3003,
												}: struct{}{},
											},
										},
										F10: VUnionDepth1_Rand0F12{},
										F11: VUnionDepth1_Rand1F6{},
									},
								},
								VSet_VStructEmpty{
									{}: struct{}{},
								},
							},
							F1: VArray1_String{
								"ghijklmn",
							},
							F2: VList_VBool{
								false,
								false,
								true,
							},
							F3: VList_VInt32{
								0,
								331502182,
							},
							F4: VSet_VString{
								"abcdefghijklmnopΔΘ": struct{}{},
								"efghijklmnopΔΘΠΣΦ":  struct{}{},
								"opΔΘΠΣ":             struct{}{},
							},
							F5: VSet_Float32{
								-5.2400682e+08: struct{}{},
								1.6889864e+08:  struct{}{},
								7.9051315e+08:  struct{}{},
							},
							F6: VMap_VByte_VByte{
								218: 45,
								234: 0,
							},
							F7: VMap_VEnumBcd_VEnumBcd{
								VEnumBcdB: VEnumBcdC,
								VEnumBcdD: VEnumBcdB,
							},
							F8: VStructDepth1_All{
								F0: VArray3_VString{
									"abcdefgh",
									"hijklmnopΔΘΠΣΦ王",
									"pΔΘ",
								},
								F1:  true,
								F3:  "abcdefghijkl",
								F4:  "ΠΣΦ王普",
								F5:  vdl.ByteType,
								F6:  218,
								F7:  222,
								F12: 32247,
								F13: 40507,
								F14: 2582734184,
								F15: 3142928452,
								F18: 63,
								F19: -61,
								F20: -15797,
								F24: -2669176990115907474,
								F25: -1735575579573305209,
								F26: -2.4216786e+09,
								F27: -1.7466433e+09,
								F28: -8.263044124537586e+08,
							},
							F9: VStructDepth1_Rand1{
								F0: VList_OptVStructDepth2_Rand0{
									{
										F0: VArray3_Any{
											[]VUnionDepth1_All{
												VUnionDepth1_AllF0{map[VByte]VByte{
													30: 0,
													44: 0,
												}},
												VUnionDepth1_AllF14{4018867364},
												VUnionDepth1_AllF24{516525750659450540},
											},
											nil,
											[]VArray1_String{
												{},
												{
													"efghijklmnopΔΘΠΣΦ王普澤世",
												},
												{},
											},
										},
										F9: VStructDepth1_Rand1{
											F0: map[VEnumAbc]struct{}{
												VEnumAbcA: struct{}{},
											},
											F1:  true,
											F26: 1.1532326e+09,
										},
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
									},
								},
								F9: VEnumBcdD,
							},
							F10: VUnionDepth1_Rand0F10{},
							F11: VUnionDepth1_Rand1F9{VEnumBcdD},
							F12: &VStructDepth1_All{
								F0: VSet_VUnionDepth1_Rand0{
									VUnionDepth1_Rand0F10{}:         struct{}{},
									VUnionDepth1_Rand0F8{}:          struct{}{},
									VUnionDepth1_Rand0F8{VEnumAbcB}: struct{}{},
								},
								F2:  true,
								F3:  "klmnopΔΘΠΣΦ王普澤世",
								F5:  vdl.TypeOf((*[]VUnionDepth2_Rand0)(nil)),
								F7:  242,
								F8:  VEnumAbcB,
								F9:  VEnumBcdC,
								F12: 20099,
								F14: 1380252894,
								F15: 4005675170,
								F16: 17637172552429207713,
								F17: 5811345339427185880,
								F18: -17,
								F22: -127070305,
								F23: 685908080,
								F24: -471469747791260292,
								F25: 4593546952259391523,
								F26: -4.9066656e+07,
								F27: 3.1216187e+09,
								F28: -6.46981840713098e+08,
								F29: -5.342313101766018e+08,
								F30: &VStructEmpty{},
							},
							F13: &VStructDepth1_Rand0{
								F4:  "ghijklmnopΔΘΠΣΦ王普澤世",
								F21: 905,
							},
						},
					},
					VArray1_Uint64{
						2803368414001685425,
					},
				},
				F9: VStructDepth1_Rand1{
					F1:  true,
					F7:  14,
					F9:  VEnumBcdC,
					F26: -2.3952862e+08,
				},
				F10: VUnionDepth1_Rand0F28{-8.67510848715285e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VArray1_VStructDepth2_Rand0{{F0: {VArray2_VSet_String{{\"ghijklmnopΔΘ\", \"k\", \"Θ\"}, {\"lmnopΔΘ\", \"ΣΦ\"}}, VList_VStructDepth2_All{{F0: {nil, VArray3_OptVStructDepth2_Rand0{{}, {}, {F0: {map[VEnumBcd]VEnumBcd{B: B}, set[VEnumAbc]{A, B, C}, VSet_VStructDepth1_Rand0{{}, {F15: 274416478, F21: 3003}}}, F10: {F12: 0}}}, VSet_VStructEmpty{{}}}, F1: {\"ghijklmn\"}, F2: {false, false, true}, F3: {0, 331502182}, F4: {\"abcdefghijklmnopΔΘ\", \"efghijklmnopΔΘΠΣΦ\", \"opΔΘΠΣ\"}, F5: {-5.2400682e+08, 1.6889864e+08, 7.9051315e+08}, F6: {218: 45, 234: 0}, F7: {B: C, D: B}, F8: {F0: VArray3_VString{\"abcdefgh\", \"hijklmnopΔΘΠΣΦ王\", \"pΔΘ\"}, F1: true, F3: \"abcdefghijkl\", F4: \"ΠΣΦ王普\", F5: typeobject(byte), F6: 218, F7: 222, F12: 32247, F13: 40507, F14: 2582734184, F15: 3142928452, F18: 63, F19: -61, F20: -15797, F24: -2669176990115907474, F25: -1735575579573305209, F26: -2.4216786e+09, F27: -1.7466433e+09, F28: -8.263044124537586e+08}, F9: {F0: VList_OptVStructDepth2_Rand0{{F0: {[]VUnionDepth1_All{{F0: map[VByte]VByte{30: 0, 44: 0}}, {F14: 4018867364}, {F24: 516525750659450540}}, nil, []VArray1_String{{}, {\"efghijklmnopΔΘΠΣΦ王普澤世\"}, {}}}, F9: {F0: set[VEnumAbc]{A}, F1: true, F26: 1.1532326e+09}, F11: {F11: {}}}}, F9: D}, F10: {F10: {}}, F11: {F9: D}, F12: {F0: VSet_VUnionDepth1_Rand0{{F10: {}}, {F8: A}, {F8: B}}, F2: true, F3: \"klmnopΔΘΠΣΦ王普澤世\", F5: typeobject([]VUnionDepth2_Rand0), F7: 242, F8: B, F9: C, F12: 20099, F14: 1380252894, F15: 4005675170, F16: 17637172552429207713, F17: 5811345339427185880, F18: -17, F22: -127070305, F23: 685908080, F24: -471469747791260292, F25: 4593546952259391523, F26: -4.9066656e+07, F27: 3.1216187e+09, F28: -6.46981840713098e+08, F29: -5.342313101766018e+08, F30: {}}, F13: {F4: \"ghijklmnopΔΘΠΣΦ王普澤世\", F21: 905}}}, VArray1_Uint64{2803368414001685425}}, F9: {F1: true, F7: 14, F9: C, F26: -2.3952862e+08}, F10: {F28: -8.67510848715285e+08}}}",
		Source: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray2_VSet_String{
						{
							"ghijklmnopΔΘ": struct{}{},
							"k":            struct{}{},
							"Θ":            struct{}{},
						},
						{
							"lmnopΔΘ": struct{}{},
							"ΣΦ":      struct{}{},
						},
					},
					VList_VStructDepth2_All{
						{
							F0: VArray3_Any{
								nil,
								VArray3_OptVStructDepth2_Rand0{
									{
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F6{},
									},
									{
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F6{},
									},
									{
										F0: VArray3_Any{
											map[VEnumBcd]VEnumBcd{
												VEnumBcdB: VEnumBcdB,
											},
											map[VEnumAbc]struct{}{
												VEnumAbcA: struct{}{},
												VEnumAbcB: struct{}{},
												VEnumAbcC: struct{}{},
											},
											VSet_VStructDepth1_Rand0{
												{}: struct{}{},
												{
													F15: 274416478,
													F21: 3003,
												}: struct{}{},
											},
										},
										F10: VUnionDepth1_Rand0F12{},
										F11: VUnionDepth1_Rand1F6{},
									},
								},
								VSet_VStructEmpty{
									{}: struct{}{},
								},
							},
							F1: VArray1_String{
								"ghijklmn",
							},
							F2: VList_VBool{
								false,
								false,
								true,
							},
							F3: VList_VInt32{
								0,
								331502182,
							},
							F4: VSet_VString{
								"abcdefghijklmnopΔΘ": struct{}{},
								"efghijklmnopΔΘΠΣΦ":  struct{}{},
								"opΔΘΠΣ":             struct{}{},
							},
							F5: VSet_Float32{
								-5.2400682e+08: struct{}{},
								1.6889864e+08:  struct{}{},
								7.9051315e+08:  struct{}{},
							},
							F6: VMap_VByte_VByte{
								218: 45,
								234: 0,
							},
							F7: VMap_VEnumBcd_VEnumBcd{
								VEnumBcdB: VEnumBcdC,
								VEnumBcdD: VEnumBcdB,
							},
							F8: VStructDepth1_All{
								F0: VArray3_VString{
									"abcdefgh",
									"hijklmnopΔΘΠΣΦ王",
									"pΔΘ",
								},
								F1:  true,
								F3:  "abcdefghijkl",
								F4:  "ΠΣΦ王普",
								F5:  vdl.ByteType,
								F6:  218,
								F7:  222,
								F12: 32247,
								F13: 40507,
								F14: 2582734184,
								F15: 3142928452,
								F18: 63,
								F19: -61,
								F20: -15797,
								F24: -2669176990115907474,
								F25: -1735575579573305209,
								F26: -2.4216786e+09,
								F27: -1.7466433e+09,
								F28: -8.263044124537586e+08,
							},
							F9: VStructDepth1_Rand1{
								F0: VList_OptVStructDepth2_Rand0{
									{
										F0: VArray3_Any{
											[]VUnionDepth1_All{
												VUnionDepth1_AllF0{map[VByte]VByte{
													30: 0,
													44: 0,
												}},
												VUnionDepth1_AllF14{4018867364},
												VUnionDepth1_AllF24{516525750659450540},
											},
											nil,
											[]VArray1_String{
												{},
												{
													"efghijklmnopΔΘΠΣΦ王普澤世",
												},
												{},
											},
										},
										F9: VStructDepth1_Rand1{
											F0: map[VEnumAbc]struct{}{
												VEnumAbcA: struct{}{},
											},
											F1:  true,
											F26: 1.1532326e+09,
										},
										F10: VUnionDepth1_Rand0F8{},
										F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
									},
								},
								F9: VEnumBcdD,
							},
							F10: VUnionDepth1_Rand0F10{},
							F11: VUnionDepth1_Rand1F9{VEnumBcdD},
							F12: &VStructDepth1_All{
								F0: VSet_VUnionDepth1_Rand0{
									VUnionDepth1_Rand0F10{}:         struct{}{},
									VUnionDepth1_Rand0F8{}:          struct{}{},
									VUnionDepth1_Rand0F8{VEnumAbcB}: struct{}{},
								},
								F2:  true,
								F3:  "klmnopΔΘΠΣΦ王普澤世",
								F5:  vdl.TypeOf((*[]VUnionDepth2_Rand0)(nil)),
								F7:  242,
								F8:  VEnumAbcB,
								F9:  VEnumBcdC,
								F12: 20099,
								F14: 1380252894,
								F15: 4005675170,
								F16: 17637172552429207713,
								F17: 5811345339427185880,
								F18: -17,
								F22: -127070305,
								F23: 685908080,
								F24: -471469747791260292,
								F25: 4593546952259391523,
								F26: -4.9066656e+07,
								F27: 3.1216187e+09,
								F28: -6.46981840713098e+08,
								F29: -5.342313101766018e+08,
								F30: &VStructEmpty{},
							},
							F13: &VStructDepth1_Rand0{
								F4:  "ghijklmnopΔΘΠΣΦ王普澤世",
								F21: 905,
							},
						},
					},
					VArray1_Uint64{
						2803368414001685425,
					},
				},
				F9: VStructDepth1_Rand1{
					F1:  true,
					F7:  14,
					F9:  VEnumBcdC,
					F26: -2.3952862e+08,
				},
				F10: VUnionDepth1_Rand0F28{-8.67510848715285e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VStructDepth2_Rand0{{}, {F0: {[]VMap_VEnumBcd_VEnumBcd{{B: C, C: B}}, map[VArray1_VStructEmpty]VArray1_VStructEmpty{{}: {}}, VInt64(4577878619345695629)}, F9: {F7: 19, F9: C, F26: 4.1679488e+08}, F10: {F10: {}}, F11: {F20: 14196}}}",
		Target: []VStructDepth2_Rand0{
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F0: VArray3_Any{
					[]VMap_VEnumBcd_VEnumBcd{
						{
							VEnumBcdB: VEnumBcdC,
							VEnumBcdC: VEnumBcdB,
						},
					},
					map[VArray1_VStructEmpty]VArray1_VStructEmpty{
						{}: {},
					},
					VInt64(4577878619345695629),
				},
				F9: VStructDepth1_Rand1{
					F7:  19,
					F9:  VEnumBcdC,
					F26: 4.1679488e+08,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F20{14196},
			},
		},
		SourceLabel: "[]VStructDepth2_Rand0{{}, {F0: {[]VMap_VEnumBcd_VEnumBcd{{B: C, C: B}}, map[VArray1_VStructEmpty]VArray1_VStructEmpty{{}: {}}, VInt64(4577878619345695629)}, F9: {F7: 19, F9: C, F26: 4.1679488e+08}, F10: {F10: {}}, F11: {F20: 14196}}}",
		Source: []VStructDepth2_Rand0{
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F0: VArray3_Any{
					[]VMap_VEnumBcd_VEnumBcd{
						{
							VEnumBcdB: VEnumBcdC,
							VEnumBcdC: VEnumBcdB,
						},
					},
					map[VArray1_VStructEmpty]VArray1_VStructEmpty{
						{}: {},
					},
					VInt64(4577878619345695629),
				},
				F9: VStructDepth1_Rand1{
					F7:  19,
					F9:  VEnumBcdC,
					F26: 4.1679488e+08,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F20{14196},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VStructDepth2_Rand0{{}, {F0: {[]VMap_VEnumBcd_VEnumBcd{{B: C, C: B}}, map[VArray1_VStructEmpty]VArray1_VStructEmpty{{}: {}}, VInt64(4577878619345695629)}, F9: {F7: 19, F9: C, F26: 4.1679488e+08}, F10: {F10: {}}, F11: {F20: 14196}}}",
		Target: []VStructDepth2_Rand0{
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F0: VArray3_Any{
					[]VMap_VEnumBcd_VEnumBcd{
						{
							VEnumBcdB: VEnumBcdC,
							VEnumBcdC: VEnumBcdB,
						},
					},
					map[VArray1_VStructEmpty]VArray1_VStructEmpty{
						{}: {},
					},
					VInt64(4577878619345695629),
				},
				F9: VStructDepth1_Rand1{
					F7:  19,
					F9:  VEnumBcdC,
					F26: 4.1679488e+08,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F20{14196},
			},
		},
		SourceLabel: "[]any{VStructDepth2_Rand0{}, VStructDepth2_Rand0{F0: {[]VMap_VEnumBcd_VEnumBcd{{B: C, C: B}}, map[VArray1_VStructEmpty]VArray1_VStructEmpty{{}: {}}, VInt64(4577878619345695629)}, F9: {F7: 19, F9: C, F26: 4.1679488e+08}, F10: {F10: {}}, F11: {F20: 14196}}}",
		Source: []interface{}{
			VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			VStructDepth2_Rand0{
				F0: VArray3_Any{
					[]VMap_VEnumBcd_VEnumBcd{
						{
							VEnumBcdB: VEnumBcdC,
							VEnumBcdC: VEnumBcdB,
						},
					},
					map[VArray1_VStructEmpty]VArray1_VStructEmpty{
						{}: {},
					},
					VInt64(4577878619345695629),
				},
				F9: VStructDepth1_Rand1{
					F7:  19,
					F9:  VEnumBcdC,
					F26: 4.1679488e+08,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F20{14196},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]VUnionDepth2_Rand0{}",
		Target:      []VUnionDepth2_Rand0(nil),
		SourceLabel: "[]VUnionDepth2_Rand0{}",
		Source:      []VUnionDepth2_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VUnionDepth2_Rand0{}",
		Target:      []VUnionDepth2_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]VUnionDepth2_Rand0{}",
		Target:      []VUnionDepth2_Rand0(nil),
		SourceLabel: "VList_VUnionDepth2_All{}",
		Source:      VList_VUnionDepth2_All(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]VUnionDepth2_Rand0{{F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}},
		},
		SourceLabel: "[]VUnionDepth2_Rand0{{F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]VUnionDepth2_Rand0{{F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}},
		},
		SourceLabel: "VList_Any{VUnionDepth2_Rand0{F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VList_Any{
			VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VUnionDepth2_Rand0{{F12: {F4: \"opΔΘΠΣΦ王\", F15: 874517915, F21: 11597}}, {F12: {}}, {F2: {}}}",
		Target: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "opΔΘΠΣΦ王",
				F15: 874517915,
				F21: 11597,
			}},
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{}},
			VUnionDepth2_Rand0F2{},
		},
		SourceLabel: "[]VUnionDepth2_Rand0{{F12: {F4: \"opΔΘΠΣΦ王\", F15: 874517915, F21: 11597}}, {F12: {}}, {F2: {}}}",
		Source: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "opΔΘΠΣΦ王",
				F15: 874517915,
				F21: 11597,
			}},
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{}},
			VUnionDepth2_Rand0F2{},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VUnionDepth2_Rand0{{F12: {F4: \"opΔΘΠΣΦ王\", F15: 874517915, F21: 11597}}, {F12: {}}, {F2: {}}}",
		Target: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "opΔΘΠΣΦ王",
				F15: 874517915,
				F21: 11597,
			}},
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{}},
			VUnionDepth2_Rand0F2{},
		},
		SourceLabel: "[]any{VUnionDepth2_Rand0{F12: {F4: \"opΔΘΠΣΦ王\", F15: 874517915, F21: 11597}}, VUnionDepth2_Rand0{F12: {}}, VUnionDepth2_Rand0{F2: {}}}",
		Source: []interface{}{
			VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "opΔΘΠΣΦ王",
				F15: 874517915,
				F21: 11597,
			}}),
			VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{}}),
			VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]VUnionDepth2_Rand0{{F2: {}}, {F2: {}}, {F12: {F4: \"ΔΘ\", F21: -14113}}}",
		Target: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F2{},
			VUnionDepth2_Rand0F2{},
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "ΔΘ",
				F21: -14113,
			}},
		},
		SourceLabel: "[]VUnionDepth2_Rand0{{F2: {}}, {F2: {}}, {F12: {F4: \"ΔΘ\", F21: -14113}}}",
		Source: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F2{},
			VUnionDepth2_Rand0F2{},
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "ΔΘ",
				F21: -14113,
			}},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]VUnionDepth2_Rand0{{F2: {}}, {F2: {}}, {F12: {F4: \"ΔΘ\", F21: -14113}}}",
		Target: []VUnionDepth2_Rand0{
			VUnionDepth2_Rand0F2{},
			VUnionDepth2_Rand0F2{},
			VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "ΔΘ",
				F21: -14113,
			}},
		},
		SourceLabel: "[]any{VUnionDepth2_Rand0{F2: {}}, VUnionDepth2_Rand0{F2: {}}, VUnionDepth2_Rand0{F12: {F4: \"ΔΘ\", F21: -14113}}}",
		Source: []interface{}{
			VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{}),
			VUnionDepth2_Rand0(VUnionDepth2_Rand0F2{}),
			VUnionDepth2_Rand0(VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "ΔΘ",
				F21: -14113,
			}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "[]?VStructDepth2_Rand0{}",
		Target:      []*VStructDepth2_Rand0(nil),
		SourceLabel: "[]?VStructDepth2_Rand0{}",
		Source:      []*VStructDepth2_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]?VStructDepth2_Rand0{}",
		Target:      []*VStructDepth2_Rand0(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "[]?VStructDepth2_Rand0{}",
		Target:      []*VStructDepth2_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "[]?VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "[]?VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "[]?VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "VArray1_VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]?VStructDepth2_Rand0{{F0: {VStructDepth1_All{F0: VList_Any{}, F1: true, F2: true, F3: \"ΘΠΣΦ王普澤\", F4: \"opΔΘΠΣΦ王\", F5: typeobject(VMap_String_String), F7: 32, F8: B, F9: C, F11: {Id: \"hijklmn\", RetryCode: RetryConnection, Msg: \"no\"}, F13: 53660, F14: 3895621833, F16: 6867919140687966355, F17: 8934112542476230754, F18: 56, F19: -33, F20: -6380, F22: -581739645, F23: -701358412, F24: -4425419180310865555, F25: 152249505789090535, F26: -1.483556e+09, F27: -3.149157e+08, F28: 2.400771153600824e+08, F29: -2.891487407705236e+09, F30: {}}, set[VEnumBcd]{D}, []VStructDepth1_Rand0{}}, F9: {F0: []VBool{}, F7: 167, F9: D, F26: -1.0391229e+09}}, {F0: {VArray2_Uint32{2313367988, 565743876}, byte(0), VList_Set_VStructDepth1_Rand0{{{}, {F4: \"ghijklmnop\", F21: 16273}, {F4: \"ijklmnopΔ\", F15: 454081483, F21: 14745}}, {{}, {F4: \"defg\", F15: 2545964845, F21: -10005}, {F4: \"klmnopΔΘ\", F15: 3289388824, F21: 11923}}}}, F9: {F0: VArray1_VArray3_Bool{{true, false, true}}, F7: 93, F9: C, F26: -1.7274775e+09}, F10: {F12: 60810}, F11: {F11: {Id: \"efg\", Msg: \"defghij\"}}}, {}}",
		Target: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VStructDepth1_All{
						F0: VList_Any(nil),
						F1: true,
						F2: true,
						F3: "ΘΠΣΦ王普澤",
						F4: "opΔΘΠΣΦ王",
						F5: vdl.TypeOf((*VMap_String_String)(nil)),
						F7: 32,
						F8: VEnumAbcB,
						F9: VEnumBcdC,
						F11: verror.FromWire(vdl.WireError{
							Id:        "hijklmn",
							RetryCode: vdl.WireRetryCodeRetryConnection,
							Msg:       "no",
						}),
						F13: 53660,
						F14: 3895621833,
						F16: 6867919140687966355,
						F17: 8934112542476230754,
						F18: 56,
						F19: -33,
						F20: -6380,
						F22: -581739645,
						F23: -701358412,
						F24: -4425419180310865555,
						F25: 152249505789090535,
						F26: -1.483556e+09,
						F27: -3.149157e+08,
						F28: 2.400771153600824e+08,
						F29: -2.891487407705236e+09,
						F30: &VStructEmpty{},
					},
					map[VEnumBcd]struct{}{
						VEnumBcdD: struct{}{},
					},
					[]VStructDepth1_Rand0(nil),
				},
				F9: VStructDepth1_Rand1{
					F0:  []VBool(nil),
					F7:  167,
					F9:  VEnumBcdD,
					F26: -1.0391229e+09,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F0: VArray3_Any{
					VArray2_Uint32{
						2313367988,
						565743876,
					},
					byte(0),
					VList_Set_VStructDepth1_Rand0{
						{
							{}: struct{}{},
							{
								F4:  "ghijklmnop",
								F21: 16273,
							}: struct{}{},
							{
								F4:  "ijklmnopΔ",
								F15: 454081483,
								F21: 14745,
							}: struct{}{},
						},
						{
							{}: struct{}{},
							{
								F4:  "defg",
								F15: 2545964845,
								F21: -10005,
							}: struct{}{},
							{
								F4:  "klmnopΔΘ",
								F15: 3289388824,
								F21: 11923,
							}: struct{}{},
						},
					},
				},
				F9: VStructDepth1_Rand1{
					F0: VArray1_VArray3_Bool{
						{
							true,
							false,
							true,
						},
					},
					F7:  93,
					F9:  VEnumBcdC,
					F26: -1.7274775e+09,
				},
				F10: VUnionDepth1_Rand0F12{60810},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					Id:  "efg",
					Msg: "defghij",
				})},
			},
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "[]?VStructDepth2_Rand0{{F0: {VStructDepth1_All{F0: VList_Any{}, F1: true, F2: true, F3: \"ΘΠΣΦ王普澤\", F4: \"opΔΘΠΣΦ王\", F5: typeobject(VMap_String_String), F7: 32, F8: B, F9: C, F11: {Id: \"hijklmn\", RetryCode: RetryConnection, Msg: \"no\"}, F13: 53660, F14: 3895621833, F16: 6867919140687966355, F17: 8934112542476230754, F18: 56, F19: -33, F20: -6380, F22: -581739645, F23: -701358412, F24: -4425419180310865555, F25: 152249505789090535, F26: -1.483556e+09, F27: -3.149157e+08, F28: 2.400771153600824e+08, F29: -2.891487407705236e+09, F30: {}}, set[VEnumBcd]{D}, []VStructDepth1_Rand0{}}, F9: {F0: []VBool{}, F7: 167, F9: D, F26: -1.0391229e+09}}, {F0: {VArray2_Uint32{2313367988, 565743876}, byte(0), VList_Set_VStructDepth1_Rand0{{{}, {F4: \"ghijklmnop\", F21: 16273}, {F4: \"ijklmnopΔ\", F15: 454081483, F21: 14745}}, {{}, {F4: \"defg\", F15: 2545964845, F21: -10005}, {F4: \"klmnopΔΘ\", F15: 3289388824, F21: 11923}}}}, F9: {F0: VArray1_VArray3_Bool{{true, false, true}}, F7: 93, F9: C, F26: -1.7274775e+09}, F10: {F12: 60810}, F11: {F11: {Id: \"efg\", Msg: \"defghij\"}}}, {}}",
		Source: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VStructDepth1_All{
						F0: VList_Any(nil),
						F1: true,
						F2: true,
						F3: "ΘΠΣΦ王普澤",
						F4: "opΔΘΠΣΦ王",
						F5: vdl.TypeOf((*VMap_String_String)(nil)),
						F7: 32,
						F8: VEnumAbcB,
						F9: VEnumBcdC,
						F11: verror.FromWire(vdl.WireError{
							Id:        "hijklmn",
							RetryCode: vdl.WireRetryCodeRetryConnection,
							Msg:       "no",
						}),
						F13: 53660,
						F14: 3895621833,
						F16: 6867919140687966355,
						F17: 8934112542476230754,
						F18: 56,
						F19: -33,
						F20: -6380,
						F22: -581739645,
						F23: -701358412,
						F24: -4425419180310865555,
						F25: 152249505789090535,
						F26: -1.483556e+09,
						F27: -3.149157e+08,
						F28: 2.400771153600824e+08,
						F29: -2.891487407705236e+09,
						F30: &VStructEmpty{},
					},
					map[VEnumBcd]struct{}{
						VEnumBcdD: struct{}{},
					},
					[]VStructDepth1_Rand0(nil),
				},
				F9: VStructDepth1_Rand1{
					F0:  []VBool(nil),
					F7:  167,
					F9:  VEnumBcdD,
					F26: -1.0391229e+09,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F0: VArray3_Any{
					VArray2_Uint32{
						2313367988,
						565743876,
					},
					byte(0),
					VList_Set_VStructDepth1_Rand0{
						{
							{}: struct{}{},
							{
								F4:  "ghijklmnop",
								F21: 16273,
							}: struct{}{},
							{
								F4:  "ijklmnopΔ",
								F15: 454081483,
								F21: 14745,
							}: struct{}{},
						},
						{
							{}: struct{}{},
							{
								F4:  "defg",
								F15: 2545964845,
								F21: -10005,
							}: struct{}{},
							{
								F4:  "klmnopΔΘ",
								F15: 3289388824,
								F21: 11923,
							}: struct{}{},
						},
					},
				},
				F9: VStructDepth1_Rand1{
					F0: VArray1_VArray3_Bool{
						{
							true,
							false,
							true,
						},
					},
					F7:  93,
					F9:  VEnumBcdC,
					F26: -1.7274775e+09,
				},
				F10: VUnionDepth1_Rand0F12{60810},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					Id:  "efg",
					Msg: "defghij",
				})},
			},
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]?VStructDepth2_Rand0{{F0: {VStructDepth1_All{F0: VList_Any{}, F1: true, F2: true, F3: \"ΘΠΣΦ王普澤\", F4: \"opΔΘΠΣΦ王\", F5: typeobject(VMap_String_String), F7: 32, F8: B, F9: C, F11: {Id: \"hijklmn\", RetryCode: RetryConnection, Msg: \"no\"}, F13: 53660, F14: 3895621833, F16: 6867919140687966355, F17: 8934112542476230754, F18: 56, F19: -33, F20: -6380, F22: -581739645, F23: -701358412, F24: -4425419180310865555, F25: 152249505789090535, F26: -1.483556e+09, F27: -3.149157e+08, F28: 2.400771153600824e+08, F29: -2.891487407705236e+09, F30: {}}, set[VEnumBcd]{D}, []VStructDepth1_Rand0{}}, F9: {F0: []VBool{}, F7: 167, F9: D, F26: -1.0391229e+09}}, {F0: {VArray2_Uint32{2313367988, 565743876}, byte(0), VList_Set_VStructDepth1_Rand0{{{}, {F4: \"ghijklmnop\", F21: 16273}, {F4: \"ijklmnopΔ\", F15: 454081483, F21: 14745}}, {{}, {F4: \"defg\", F15: 2545964845, F21: -10005}, {F4: \"klmnopΔΘ\", F15: 3289388824, F21: 11923}}}}, F9: {F0: VArray1_VArray3_Bool{{true, false, true}}, F7: 93, F9: C, F26: -1.7274775e+09}, F10: {F12: 60810}, F11: {F11: {Id: \"efg\", Msg: \"defghij\"}}}, {}}",
		Target: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VStructDepth1_All{
						F0: VList_Any(nil),
						F1: true,
						F2: true,
						F3: "ΘΠΣΦ王普澤",
						F4: "opΔΘΠΣΦ王",
						F5: vdl.TypeOf((*VMap_String_String)(nil)),
						F7: 32,
						F8: VEnumAbcB,
						F9: VEnumBcdC,
						F11: verror.FromWire(vdl.WireError{
							Id:        "hijklmn",
							RetryCode: vdl.WireRetryCodeRetryConnection,
							Msg:       "no",
						}),
						F13: 53660,
						F14: 3895621833,
						F16: 6867919140687966355,
						F17: 8934112542476230754,
						F18: 56,
						F19: -33,
						F20: -6380,
						F22: -581739645,
						F23: -701358412,
						F24: -4425419180310865555,
						F25: 152249505789090535,
						F26: -1.483556e+09,
						F27: -3.149157e+08,
						F28: 2.400771153600824e+08,
						F29: -2.891487407705236e+09,
						F30: &VStructEmpty{},
					},
					map[VEnumBcd]struct{}{
						VEnumBcdD: struct{}{},
					},
					[]VStructDepth1_Rand0(nil),
				},
				F9: VStructDepth1_Rand1{
					F0:  []VBool(nil),
					F7:  167,
					F9:  VEnumBcdD,
					F26: -1.0391229e+09,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			{
				F0: VArray3_Any{
					VArray2_Uint32{
						2313367988,
						565743876,
					},
					byte(0),
					VList_Set_VStructDepth1_Rand0{
						{
							{}: struct{}{},
							{
								F4:  "ghijklmnop",
								F21: 16273,
							}: struct{}{},
							{
								F4:  "ijklmnopΔ",
								F15: 454081483,
								F21: 14745,
							}: struct{}{},
						},
						{
							{}: struct{}{},
							{
								F4:  "defg",
								F15: 2545964845,
								F21: -10005,
							}: struct{}{},
							{
								F4:  "klmnopΔΘ",
								F15: 3289388824,
								F21: 11923,
							}: struct{}{},
						},
					},
				},
				F9: VStructDepth1_Rand1{
					F0: VArray1_VArray3_Bool{
						{
							true,
							false,
							true,
						},
					},
					F7:  93,
					F9:  VEnumBcdC,
					F26: -1.7274775e+09,
				},
				F10: VUnionDepth1_Rand0F12{60810},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					Id:  "efg",
					Msg: "defghij",
				})},
			},
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "[]any{?VStructDepth2_Rand0{F0: {VStructDepth1_All{F0: VList_Any{}, F1: true, F2: true, F3: \"ΘΠΣΦ王普澤\", F4: \"opΔΘΠΣΦ王\", F5: typeobject(VMap_String_String), F7: 32, F8: B, F9: C, F11: {Id: \"hijklmn\", RetryCode: RetryConnection, Msg: \"no\"}, F13: 53660, F14: 3895621833, F16: 6867919140687966355, F17: 8934112542476230754, F18: 56, F19: -33, F20: -6380, F22: -581739645, F23: -701358412, F24: -4425419180310865555, F25: 152249505789090535, F26: -1.483556e+09, F27: -3.149157e+08, F28: 2.400771153600824e+08, F29: -2.891487407705236e+09, F30: {}}, set[VEnumBcd]{D}, []VStructDepth1_Rand0{}}, F9: {F0: []VBool{}, F7: 167, F9: D, F26: -1.0391229e+09}}, ?VStructDepth2_Rand0{F0: {VArray2_Uint32{2313367988, 565743876}, byte(0), VList_Set_VStructDepth1_Rand0{{{}, {F4: \"ghijklmnop\", F21: 16273}, {F4: \"ijklmnopΔ\", F15: 454081483, F21: 14745}}, {{}, {F4: \"defg\", F15: 2545964845, F21: -10005}, {F4: \"klmnopΔΘ\", F15: 3289388824, F21: 11923}}}}, F9: {F0: VArray1_VArray3_Bool{{true, false, true}}, F7: 93, F9: C, F26: -1.7274775e+09}, F10: {F12: 60810}, F11: {F11: {Id: \"efg\", Msg: \"defghij\"}}}, ?VStructDepth2_Rand0{}}",
		Source: []interface{}{
			&VStructDepth2_Rand0{
				F0: VArray3_Any{
					VStructDepth1_All{
						F0: VList_Any(nil),
						F1: true,
						F2: true,
						F3: "ΘΠΣΦ王普澤",
						F4: "opΔΘΠΣΦ王",
						F5: vdl.TypeOf((*VMap_String_String)(nil)),
						F7: 32,
						F8: VEnumAbcB,
						F9: VEnumBcdC,
						F11: verror.FromWire(vdl.WireError{
							Id:        "hijklmn",
							RetryCode: vdl.WireRetryCodeRetryConnection,
							Msg:       "no",
						}),
						F13: 53660,
						F14: 3895621833,
						F16: 6867919140687966355,
						F17: 8934112542476230754,
						F18: 56,
						F19: -33,
						F20: -6380,
						F22: -581739645,
						F23: -701358412,
						F24: -4425419180310865555,
						F25: 152249505789090535,
						F26: -1.483556e+09,
						F27: -3.149157e+08,
						F28: 2.400771153600824e+08,
						F29: -2.891487407705236e+09,
						F30: &VStructEmpty{},
					},
					map[VEnumBcd]struct{}{
						VEnumBcdD: struct{}{},
					},
					[]VStructDepth1_Rand0(nil),
				},
				F9: VStructDepth1_Rand1{
					F0:  []VBool(nil),
					F7:  167,
					F9:  VEnumBcdD,
					F26: -1.0391229e+09,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			&VStructDepth2_Rand0{
				F0: VArray3_Any{
					VArray2_Uint32{
						2313367988,
						565743876,
					},
					byte(0),
					VList_Set_VStructDepth1_Rand0{
						{
							{}: struct{}{},
							{
								F4:  "ghijklmnop",
								F21: 16273,
							}: struct{}{},
							{
								F4:  "ijklmnopΔ",
								F15: 454081483,
								F21: 14745,
							}: struct{}{},
						},
						{
							{}: struct{}{},
							{
								F4:  "defg",
								F15: 2545964845,
								F21: -10005,
							}: struct{}{},
							{
								F4:  "klmnopΔΘ",
								F15: 3289388824,
								F21: 11923,
							}: struct{}{},
						},
					},
				},
				F9: VStructDepth1_Rand1{
					F0: VArray1_VArray3_Bool{
						{
							true,
							false,
							true,
						},
					},
					F7:  93,
					F9:  VEnumBcdC,
					F26: -1.7274775e+09,
				},
				F10: VUnionDepth1_Rand0F12{60810},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					Id:  "efg",
					Msg: "defghij",
				})},
			},
			&VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "[]?VStructDepth2_Rand0{{F0: {map[VBool]VBool{false: false, true: true}, map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F15: 3300611876, F21: 5159}: {F4: \"klmnopΔΘ\", F15: 3152775642, F21: 5581}, {F4: \"efghijklmnopΔΘΠΣΦ王普\", F15: 1307369946, F21: 15441}: {F4: \"ΘΠΣΦ王\", F15: 1603298929, F21: -14150}, {F4: \"ghijklmnopΔΘΠΣ\", F15: 2744980564, F21: 2328}: {F4: \"澤世\", F15: 2292943602, F21: 6178}}, VUint16(38359)}, F10: {F12: 0}}}",
		Target: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					map[VBool]VBool{
						false: false,
						true:  true,
					},
					map[VStructDepth1_Rand0]VStructDepth1_Rand0{
						{
							F15: 3300611876,
							F21: 5159,
						}: {
							F4:  "klmnopΔΘ",
							F15: 3152775642,
							F21: 5581,
						},
						{
							F4:  "efghijklmnopΔΘΠΣΦ王普",
							F15: 1307369946,
							F21: 15441,
						}: {
							F4:  "ΘΠΣΦ王",
							F15: 1603298929,
							F21: -14150,
						},
						{
							F4:  "ghijklmnopΔΘΠΣ",
							F15: 2744980564,
							F21: 2328,
						}: {
							F4:  "澤世",
							F15: 2292943602,
							F21: 6178,
						},
					},
					VUint16(38359),
				},
				F10: VUnionDepth1_Rand0F12{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "[]?VStructDepth2_Rand0{{F0: {map[VBool]VBool{false: false, true: true}, map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F15: 3300611876, F21: 5159}: {F4: \"klmnopΔΘ\", F15: 3152775642, F21: 5581}, {F4: \"efghijklmnopΔΘΠΣΦ王普\", F15: 1307369946, F21: 15441}: {F4: \"ΘΠΣΦ王\", F15: 1603298929, F21: -14150}, {F4: \"ghijklmnopΔΘΠΣ\", F15: 2744980564, F21: 2328}: {F4: \"澤世\", F15: 2292943602, F21: 6178}}, VUint16(38359)}, F10: {F12: 0}}}",
		Source: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					map[VBool]VBool{
						false: false,
						true:  true,
					},
					map[VStructDepth1_Rand0]VStructDepth1_Rand0{
						{
							F15: 3300611876,
							F21: 5159,
						}: {
							F4:  "klmnopΔΘ",
							F15: 3152775642,
							F21: 5581,
						},
						{
							F4:  "efghijklmnopΔΘΠΣΦ王普",
							F15: 1307369946,
							F21: 15441,
						}: {
							F4:  "ΘΠΣΦ王",
							F15: 1603298929,
							F21: -14150,
						},
						{
							F4:  "ghijklmnopΔΘΠΣ",
							F15: 2744980564,
							F21: 2328,
						}: {
							F4:  "澤世",
							F15: 2292943602,
							F21: 6178,
						},
					},
					VUint16(38359),
				},
				F10: VUnionDepth1_Rand0F12{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "[]?VStructDepth2_Rand0{{F0: {map[VBool]VBool{false: false, true: true}, map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F15: 3300611876, F21: 5159}: {F4: \"klmnopΔΘ\", F15: 3152775642, F21: 5581}, {F4: \"efghijklmnopΔΘΠΣΦ王普\", F15: 1307369946, F21: 15441}: {F4: \"ΘΠΣΦ王\", F15: 1603298929, F21: -14150}, {F4: \"ghijklmnopΔΘΠΣ\", F15: 2744980564, F21: 2328}: {F4: \"澤世\", F15: 2292943602, F21: 6178}}, VUint16(38359)}, F10: {F12: 0}}}",
		Target: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					map[VBool]VBool{
						false: false,
						true:  true,
					},
					map[VStructDepth1_Rand0]VStructDepth1_Rand0{
						{
							F15: 3300611876,
							F21: 5159,
						}: {
							F4:  "klmnopΔΘ",
							F15: 3152775642,
							F21: 5581,
						},
						{
							F4:  "efghijklmnopΔΘΠΣΦ王普",
							F15: 1307369946,
							F21: 15441,
						}: {
							F4:  "ΘΠΣΦ王",
							F15: 1603298929,
							F21: -14150,
						},
						{
							F4:  "ghijklmnopΔΘΠΣ",
							F15: 2744980564,
							F21: 2328,
						}: {
							F4:  "澤世",
							F15: 2292943602,
							F21: 6178,
						},
					},
					VUint16(38359),
				},
				F10: VUnionDepth1_Rand0F12{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VArray1_VStructDepth2_Rand0{{F0: {map[VBool]VBool{false: false, true: true}, map[VStructDepth1_Rand0]VStructDepth1_Rand0{{F15: 3300611876, F21: 5159}: {F4: \"klmnopΔΘ\", F15: 3152775642, F21: 5581}, {F4: \"efghijklmnopΔΘΠΣΦ王普\", F15: 1307369946, F21: 15441}: {F4: \"ΘΠΣΦ王\", F15: 1603298929, F21: -14150}, {F4: \"ghijklmnopΔΘΠΣ\", F15: 2744980564, F21: 2328}: {F4: \"澤世\", F15: 2292943602, F21: 6178}}, VUint16(38359)}, F10: {F12: 0}}}",
		Source: VArray1_VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					map[VBool]VBool{
						false: false,
						true:  true,
					},
					map[VStructDepth1_Rand0]VStructDepth1_Rand0{
						{
							F15: 3300611876,
							F21: 5159,
						}: {
							F4:  "klmnopΔΘ",
							F15: 3152775642,
							F21: 5581,
						},
						{
							F4:  "efghijklmnopΔΘΠΣΦ王普",
							F15: 1307369946,
							F21: 15441,
						}: {
							F4:  "ΘΠΣΦ王",
							F15: 1603298929,
							F21: -14150,
						},
						{
							F4:  "ghijklmnopΔΘΠΣ",
							F15: 2744980564,
							F21: 2328,
						}: {
							F4:  "澤世",
							F15: 2292943602,
							F21: 6178,
						},
					},
					VUint16(38359),
				},
				F10: VUnionDepth1_Rand0F12{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VArray1_OptVStructDepth1_Rand0{}",
		Target:      VList_VArray1_OptVStructDepth1_Rand0(nil),
		SourceLabel: "VList_VArray1_OptVStructDepth1_Rand0{}",
		Source:      VList_VArray1_OptVStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VArray1_OptVStructDepth1_Rand0{}",
		Target:      VList_VArray1_OptVStructDepth1_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VArray1_OptVStructDepth1_Rand0{}",
		Target:      VList_VArray1_OptVStructDepth1_Rand0(nil),
		SourceLabel: "VList_Any{}",
		Source:      VList_Any(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "VArray1_VList_VStructDepth1_All{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VArray1_VList_VStructDepth1_All{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5:  vdl.AnyType,
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F4: \"ijklmnopΔΘΠΣΦ王\", F21: 10543}}, {{F4: \"澤世\", F21: -8722}}, {{F4: \"bcdefghijklmnopΔΘΠΣΦ王\", F15: 3428064000, F21: 14200}}}",
		Target: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F4:  "ijklmnopΔΘΠΣΦ王",
					F21: 10543,
				},
			},
			{
				{
					F4:  "澤世",
					F21: -8722,
				},
			},
			{
				{
					F4:  "bcdefghijklmnopΔΘΠΣΦ王",
					F15: 3428064000,
					F21: 14200,
				},
			},
		},
		SourceLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F4: \"ijklmnopΔΘΠΣΦ王\", F21: 10543}}, {{F4: \"澤世\", F21: -8722}}, {{F4: \"bcdefghijklmnopΔΘΠΣΦ王\", F15: 3428064000, F21: 14200}}}",
		Source: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F4:  "ijklmnopΔΘΠΣΦ王",
					F21: 10543,
				},
			},
			{
				{
					F4:  "澤世",
					F21: -8722,
				},
			},
			{
				{
					F4:  "bcdefghijklmnopΔΘΠΣΦ王",
					F15: 3428064000,
					F21: 14200,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F4: \"ijklmnopΔΘΠΣΦ王\", F21: 10543}}, {{F4: \"澤世\", F21: -8722}}, {{F4: \"bcdefghijklmnopΔΘΠΣΦ王\", F15: 3428064000, F21: 14200}}}",
		Target: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F4:  "ijklmnopΔΘΠΣΦ王",
					F21: 10543,
				},
			},
			{
				{
					F4:  "澤世",
					F21: -8722,
				},
			},
			{
				{
					F4:  "bcdefghijklmnopΔΘΠΣΦ王",
					F15: 3428064000,
					F21: 14200,
				},
			},
		},
		SourceLabel: "[]any{VArray1_OptVStructDepth1_Rand0{{F4: \"ijklmnopΔΘΠΣΦ王\", F21: 10543}}, VArray1_OptVStructDepth1_Rand0{{F4: \"澤世\", F21: -8722}}, VArray1_OptVStructDepth1_Rand0{{F4: \"bcdefghijklmnopΔΘΠΣΦ王\", F15: 3428064000, F21: 14200}}}",
		Source: []interface{}{
			VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ijklmnopΔΘΠΣΦ王",
					F21: 10543,
				},
			},
			VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "澤世",
					F21: -8722,
				},
			},
			VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "bcdefghijklmnopΔΘΠΣΦ王",
					F15: 3428064000,
					F21: 14200,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F4: \"ijkl\", F15: 2846340518, F21: -5656}}, {{F4: \"ΘΠΣΦ\", F21: -5823}}}",
		Target: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F4:  "ijkl",
					F15: 2846340518,
					F21: -5656,
				},
			},
			{
				{
					F4:  "ΘΠΣΦ",
					F21: -5823,
				},
			},
		},
		SourceLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F4: \"ijkl\", F15: 2846340518, F21: -5656}}, {{F4: \"ΘΠΣΦ\", F21: -5823}}}",
		Source: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F4:  "ijkl",
					F15: 2846340518,
					F21: -5656,
				},
			},
			{
				{
					F4:  "ΘΠΣΦ",
					F21: -5823,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VArray1_OptVStructDepth1_Rand0{{{F4: \"ijkl\", F15: 2846340518, F21: -5656}}, {{F4: \"ΘΠΣΦ\", F21: -5823}}}",
		Target: VList_VArray1_OptVStructDepth1_Rand0{
			{
				{
					F4:  "ijkl",
					F15: 2846340518,
					F21: -5656,
				},
			},
			{
				{
					F4:  "ΘΠΣΦ",
					F21: -5823,
				},
			},
		},
		SourceLabel: "[]any{VArray1_OptVStructDepth1_Rand0{{F4: \"ijkl\", F15: 2846340518, F21: -5656}}, VArray1_OptVStructDepth1_Rand0{{F4: \"ΘΠΣΦ\", F21: -5823}}}",
		Source: []interface{}{
			VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ijkl",
					F15: 2846340518,
					F21: -5656,
				},
			},
			VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ΘΠΣΦ",
					F21: -5823,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_List_VMap_VEnumBcd_VEnumBcd{}",
		Target:      VList_List_VMap_VEnumBcd_VEnumBcd(nil),
		SourceLabel: "VList_List_VMap_VEnumBcd_VEnumBcd{}",
		Source:      VList_List_VMap_VEnumBcd_VEnumBcd(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_List_VMap_VEnumBcd_VEnumBcd{}",
		Target:      VList_List_VMap_VEnumBcd_VEnumBcd(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_List_VMap_VEnumBcd_VEnumBcd{}",
		Target:      VList_List_VMap_VEnumBcd_VEnumBcd(nil),
		SourceLabel: "VList_Any{}",
		Source:      VList_Any(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_List_VMap_VEnumBcd_VEnumBcd{{{D: D}}}",
		Target: VList_List_VMap_VEnumBcd_VEnumBcd{
			{
				{
					VEnumBcdD: VEnumBcdD,
				},
			},
		},
		SourceLabel: "VList_List_VMap_VEnumBcd_VEnumBcd{{{D: D}}}",
		Source: VList_List_VMap_VEnumBcd_VEnumBcd{
			{
				{
					VEnumBcdD: VEnumBcdD,
				},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_List_VMap_VEnumBcd_VEnumBcd{{{D: D}}}",
		Target: VList_List_VMap_VEnumBcd_VEnumBcd{
			{
				{
					VEnumBcdD: VEnumBcdD,
				},
			},
		},
		SourceLabel: "VList_Any{[]VMap_VEnumBcd_VEnumBcd{{D: D}}}",
		Source: VList_Any{
			[]VMap_VEnumBcd_VEnumBcd{
				{
					VEnumBcdD: VEnumBcdD,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_Set_VStructDepth1_Rand0{}",
		Target:      VList_Set_VStructDepth1_Rand0(nil),
		SourceLabel: "VList_Set_VStructDepth1_Rand0{}",
		Source:      VList_Set_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Set_VStructDepth1_Rand0{}",
		Target:      VList_Set_VStructDepth1_Rand0(nil),
		SourceLabel: "[]VSet_VStructDepth1_Rand0{}",
		Source:      []VSet_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_Set_VStructDepth1_Rand0{}",
		Target:      VList_Set_VStructDepth1_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VList_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
		SourceLabel: "VList_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VList_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_Set_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VList_Set_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: []VSet_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Set_VStructDepth1_Rand0{{{}, {F4: \"defghijklmnopΔΘΠΣ\", F15: 3646210630, F21: -4085}}}",
		Target: VList_Set_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F4:  "defghijklmnopΔΘΠΣ",
					F15: 3646210630,
					F21: -4085,
				}: struct{}{},
			},
		},
		SourceLabel: "VList_Set_VStructDepth1_Rand0{{{}, {F4: \"defghijklmnopΔΘΠΣ\", F15: 3646210630, F21: -4085}}}",
		Source: VList_Set_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F4:  "defghijklmnopΔΘΠΣ",
					F15: 3646210630,
					F21: -4085,
				}: struct{}{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Set_VStructDepth1_Rand0{{{}, {F4: \"defghijklmnopΔΘΠΣ\", F15: 3646210630, F21: -4085}}}",
		Target: VList_Set_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F4:  "defghijklmnopΔΘΠΣ",
					F15: 3646210630,
					F21: -4085,
				}: struct{}{},
			},
		},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{{}, {F4: \"defghijklmnopΔΘΠΣ\", F15: 3646210630, F21: -4085}}}",
		Source: []VSet_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F4:  "defghijklmnopΔΘΠΣ",
					F15: 3646210630,
					F21: -4085,
				}: struct{}{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_Set_VStructDepth1_Rand0{{{}, {F4: \"jklmnopΔΘΠΣΦ王\", F15: 3532661963, F21: 5589}, {F4: \"l\", F15: 2821854902}}, {}}",
		Target: VList_Set_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F4:  "jklmnopΔΘΠΣΦ王",
					F15: 3532661963,
					F21: 5589,
				}: struct{}{},
				{
					F4:  "l",
					F15: 2821854902,
				}: struct{}{},
			},
			nil,
		},
		SourceLabel: "VList_Set_VStructDepth1_Rand0{{{}, {F4: \"jklmnopΔΘΠΣΦ王\", F15: 3532661963, F21: 5589}, {F4: \"l\", F15: 2821854902}}, {}}",
		Source: VList_Set_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F4:  "jklmnopΔΘΠΣΦ王",
					F15: 3532661963,
					F21: 5589,
				}: struct{}{},
				{
					F4:  "l",
					F15: 2821854902,
				}: struct{}{},
			},
			nil,
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_Set_VStructDepth1_Rand0{{{}, {F4: \"jklmnopΔΘΠΣΦ王\", F15: 3532661963, F21: 5589}, {F4: \"l\", F15: 2821854902}}, {}}",
		Target: VList_Set_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F4:  "jklmnopΔΘΠΣΦ王",
					F15: 3532661963,
					F21: 5589,
				}: struct{}{},
				{
					F4:  "l",
					F15: 2821854902,
				}: struct{}{},
			},
			nil,
		},
		SourceLabel: "[]VSet_VStructDepth1_Rand0{{{}, {F4: \"jklmnopΔΘΠΣΦ王\", F15: 3532661963, F21: 5589}, {F4: \"l\", F15: 2821854902}}, {}}",
		Source: []VSet_VStructDepth1_Rand0{
			{
				{}: struct{}{},
				{
					F4:  "jklmnopΔΘΠΣΦ王",
					F15: 3532661963,
					F21: 5589,
				}: struct{}{},
				{
					F4:  "l",
					F15: 2821854902,
				}: struct{}{},
			},
			nil,
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Target:      VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
		SourceLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Source:      VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Target:      VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{}",
		Target:      VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0(nil),
		SourceLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{}",
		Source:      []map[VStructDepth1_Rand0]VStructDepth1_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "[]map[VStructDepth1_Rand0]VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: []map[VStructDepth1_Rand0]VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F21: -3446}: {F4: \"ΠΣ\", F21: 7898}, {F15: 2668489348, F21: 6266}: {}, {F4: \"defghijklmnopΔΘ\", F15: 3887553591, F21: 5875}: {F4: \"ΔΘΠΣ\", F15: 89082146, F21: 15014}}, {{}: {F4: \"bcdefghijklm\", F15: 3906794379, F21: -9952}, {F4: \"王普澤世\", F15: 2875740468, F21: 6810}: {F4: \"bcde\", F21: 491}}, {{}: {F4: \"fghijklmnopΔΘΠΣΦ王普澤世界\", F15: 1808637401, F21: -15915}}}",
		Target: VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				{
					F21: -3446,
				}: {
					F4:  "ΠΣ",
					F21: 7898,
				},
				{
					F15: 2668489348,
					F21: 6266,
				}: {},
				{
					F4:  "defghijklmnopΔΘ",
					F15: 3887553591,
					F21: 5875,
				}: {
					F4:  "ΔΘΠΣ",
					F15: 89082146,
					F21: 15014,
				},
			},
			{
				{}: {
					F4:  "bcdefghijklm",
					F15: 3906794379,
					F21: -9952,
				},
				{
					F4:  "王普澤世",
					F15: 2875740468,
					F21: 6810,
				}: {
					F4:  "bcde",
					F21: 491,
				},
			},
			{
				{}: {
					F4:  "fghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 1808637401,
					F21: -15915,
				},
			},
		},
		SourceLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F21: -3446}: {F4: \"ΠΣ\", F21: 7898}, {F15: 2668489348, F21: 6266}: {}, {F4: \"defghijklmnopΔΘ\", F15: 3887553591, F21: 5875}: {F4: \"ΔΘΠΣ\", F15: 89082146, F21: 15014}}, {{}: {F4: \"bcdefghijklm\", F15: 3906794379, F21: -9952}, {F4: \"王普澤世\", F15: 2875740468, F21: 6810}: {F4: \"bcde\", F21: 491}}, {{}: {F4: \"fghijklmnopΔΘΠΣΦ王普澤世界\", F15: 1808637401, F21: -15915}}}",
		Source: VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				{
					F21: -3446,
				}: {
					F4:  "ΠΣ",
					F21: 7898,
				},
				{
					F15: 2668489348,
					F21: 6266,
				}: {},
				{
					F4:  "defghijklmnopΔΘ",
					F15: 3887553591,
					F21: 5875,
				}: {
					F4:  "ΔΘΠΣ",
					F15: 89082146,
					F21: 15014,
				},
			},
			{
				{}: {
					F4:  "bcdefghijklm",
					F15: 3906794379,
					F21: -9952,
				},
				{
					F4:  "王普澤世",
					F15: 2875740468,
					F21: 6810,
				}: {
					F4:  "bcde",
					F21: 491,
				},
			},
			{
				{}: {
					F4:  "fghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 1808637401,
					F21: -15915,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F21: -3446}: {F4: \"ΠΣ\", F21: 7898}, {F15: 2668489348, F21: 6266}: {}, {F4: \"defghijklmnopΔΘ\", F15: 3887553591, F21: 5875}: {F4: \"ΔΘΠΣ\", F15: 89082146, F21: 15014}}, {{}: {F4: \"bcdefghijklm\", F15: 3906794379, F21: -9952}, {F4: \"王普澤世\", F15: 2875740468, F21: 6810}: {F4: \"bcde\", F21: 491}}, {{}: {F4: \"fghijklmnopΔΘΠΣΦ王普澤世界\", F15: 1808637401, F21: -15915}}}",
		Target: VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				{
					F21: -3446,
				}: {
					F4:  "ΠΣ",
					F21: 7898,
				},
				{
					F15: 2668489348,
					F21: 6266,
				}: {},
				{
					F4:  "defghijklmnopΔΘ",
					F15: 3887553591,
					F21: 5875,
				}: {
					F4:  "ΔΘΠΣ",
					F15: 89082146,
					F21: 15014,
				},
			},
			{
				{}: {
					F4:  "bcdefghijklm",
					F15: 3906794379,
					F21: -9952,
				},
				{
					F4:  "王普澤世",
					F15: 2875740468,
					F21: 6810,
				}: {
					F4:  "bcde",
					F21: 491,
				},
			},
			{
				{}: {
					F4:  "fghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 1808637401,
					F21: -15915,
				},
			},
		},
		SourceLabel: "[]any{VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F21: -3446}: {F4: \"ΠΣ\", F21: 7898}, {F15: 2668489348, F21: 6266}: {}, {F4: \"defghijklmnopΔΘ\", F15: 3887553591, F21: 5875}: {F4: \"ΔΘΠΣ\", F15: 89082146, F21: 15014}}, VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{}: {F4: \"bcdefghijklm\", F15: 3906794379, F21: -9952}, {F4: \"王普澤世\", F15: 2875740468, F21: 6810}: {F4: \"bcde\", F21: 491}}, VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{}: {F4: \"fghijklmnopΔΘΠΣΦ王普澤世界\", F15: 1808637401, F21: -15915}}}",
		Source: []interface{}{
			VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
				{
					F21: -3446,
				}: {
					F4:  "ΠΣ",
					F21: 7898,
				},
				{
					F15: 2668489348,
					F21: 6266,
				}: {},
				{
					F4:  "defghijklmnopΔΘ",
					F15: 3887553591,
					F21: 5875,
				}: {
					F4:  "ΔΘΠΣ",
					F15: 89082146,
					F21: 15014,
				},
			},
			VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
				{}: {
					F4:  "bcdefghijklm",
					F15: 3906794379,
					F21: -9952,
				},
				{
					F4:  "王普澤世",
					F15: 2875740468,
					F21: 6810,
				}: {
					F4:  "bcde",
					F21: 491,
				},
			},
			VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
				{}: {
					F4:  "fghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 1808637401,
					F21: -15915,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F15: 2073410765, F21: -7612}: {}, {F4: \"jklmnopΔΘ\", F21: 11728}: {F4: \"王普澤\", F15: 3261575082, F21: -1044}, {F4: \"nopΔΘΠΣΦ王普澤\", F15: 546782895, F21: -11110}: {F21: -2241}}}",
		Target: VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				{
					F15: 2073410765,
					F21: -7612,
				}: {},
				{
					F4:  "jklmnopΔΘ",
					F21: 11728,
				}: {
					F4:  "王普澤",
					F15: 3261575082,
					F21: -1044,
				},
				{
					F4:  "nopΔΘΠΣΦ王普澤",
					F15: 546782895,
					F21: -11110,
				}: {
					F21: -2241,
				},
			},
		},
		SourceLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F15: 2073410765, F21: -7612}: {}, {F4: \"jklmnopΔΘ\", F21: 11728}: {F4: \"王普澤\", F15: 3261575082, F21: -1044}, {F4: \"nopΔΘΠΣΦ王普澤\", F15: 546782895, F21: -11110}: {F21: -2241}}}",
		Source: VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				{
					F15: 2073410765,
					F21: -7612,
				}: {},
				{
					F4:  "jklmnopΔΘ",
					F21: 11728,
				}: {
					F4:  "王普澤",
					F15: 3261575082,
					F21: -1044,
				},
				{
					F4:  "nopΔΘΠΣΦ王普澤",
					F15: 546782895,
					F21: -11110,
				}: {
					F21: -2241,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{{F15: 2073410765, F21: -7612}: {}, {F4: \"jklmnopΔΘ\", F21: 11728}: {F4: \"王普澤\", F15: 3261575082, F21: -1044}, {F4: \"nopΔΘΠΣΦ王普澤\", F15: 546782895, F21: -11110}: {F21: -2241}}}",
		Target: VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
			{
				{
					F15: 2073410765,
					F21: -7612,
				}: {},
				{
					F4:  "jklmnopΔΘ",
					F21: 11728,
				}: {
					F4:  "王普澤",
					F15: 3261575082,
					F21: -1044,
				},
				{
					F4:  "nopΔΘΠΣΦ王普澤",
					F15: 546782895,
					F21: -11110,
				}: {
					F21: -2241,
				},
			},
		},
		SourceLabel: "[]any{VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{{F15: 2073410765, F21: -7612}: {}, {F4: \"jklmnopΔΘ\", F21: 11728}: {F4: \"王普澤\", F15: 3261575082, F21: -1044}, {F4: \"nopΔΘΠΣΦ王普澤\", F15: 546782895, F21: -11110}: {F21: -2241}}}",
		Source: []interface{}{
			VMap_VStructDepth1_Rand0_VStructDepth1_Rand0{
				{
					F15: 2073410765,
					F21: -7612,
				}: {},
				{
					F4:  "jklmnopΔΘ",
					F21: 11728,
				}: {
					F4:  "王普澤",
					F15: 3261575082,
					F21: -1044,
				},
				{
					F4:  "nopΔΘΠΣΦ王普澤",
					F15: 546782895,
					F21: -11110,
				}: {
					F21: -2241,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VStructDepth2_All{}",
		Target:      VList_VStructDepth2_All(nil),
		SourceLabel: "VList_VStructDepth2_All{}",
		Source:      VList_VStructDepth2_All(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VStructDepth2_All{}",
		Target:      VList_VStructDepth2_All(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VStructDepth2_All{}",
		Target:      VList_VStructDepth2_All(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VStructDepth2_All{{F0: {int64(-123), int64(-123), int64(-123)}, F1: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F2: {true}, F3: {-123}, F4: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.23}, F6: {123: 123}, F7: {D: D}, F8: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}, F12: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F13: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VList_VStructDepth2_All{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F1: VArray1_String{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
				F2: VList_VBool{
					true,
				},
				F3: VList_VInt32{
					-123,
				},
				F4: VSet_VString{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
				},
				F5: VSet_Float32{
					1.23: struct{}{},
				},
				F6: VMap_VByte_VByte{
					123: 123,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
				F12: &VStructDepth1_All{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
				F13: &VStructDepth1_Rand0{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "VList_VStructDepth2_All{{F0: {int64(-123), int64(-123), int64(-123)}, F1: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F2: {true}, F3: {-123}, F4: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.23}, F6: {123: 123}, F7: {D: D}, F8: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}, F12: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F13: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VList_VStructDepth2_All{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F1: VArray1_String{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
				F2: VList_VBool{
					true,
				},
				F3: VList_VInt32{
					-123,
				},
				F4: VSet_VString{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
				},
				F5: VSet_Float32{
					1.23: struct{}{},
				},
				F6: VMap_VByte_VByte{
					123: 123,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
				F12: &VStructDepth1_All{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
				F13: &VStructDepth1_Rand0{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VStructDepth2_All{{F0: {int64(-123), int64(-123), int64(-123)}, F1: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F2: {true}, F3: {-123}, F4: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.23}, F6: {123: 123}, F7: {D: D}, F8: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}, F12: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F13: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VList_VStructDepth2_All{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F1: VArray1_String{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
				F2: VList_VBool{
					true,
				},
				F3: VList_VInt32{
					-123,
				},
				F4: VSet_VString{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
				},
				F5: VSet_Float32{
					1.23: struct{}{},
				},
				F6: VMap_VByte_VByte{
					123: 123,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
				F12: &VStructDepth1_All{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
				F13: &VStructDepth1_Rand0{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "VList_Any{VStructDepth2_All{F0: {int64(-123), int64(-123), int64(-123)}, F1: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F2: {true}, F3: {-123}, F4: {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.23}, F6: {123: 123}, F7: {D: D}, F8: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}, F12: {F0: int64(-123), F1: true, F2: true, F3: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F5: typeobject(int64), F6: 123, F7: 123, F8: C, F9: D, F11: {Id: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", RetryCode: RetryBackoff, Msg: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, F12: 123, F13: 123, F14: 123, F15: 123, F16: 123, F17: 123, F18: -123, F19: -123, F20: -123, F21: -123, F22: -123, F23: -123, F24: -123, F25: -123, F26: 1.23, F27: 1.23, F28: 1.23, F29: 1.23, F30: {}}, F13: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VList_Any{
			VStructDepth2_All{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F1: VArray1_String{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
				F2: VList_VBool{
					true,
				},
				F3: VList_VInt32{
					-123,
				},
				F4: VSet_VString{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
				},
				F5: VSet_Float32{
					1.23: struct{}{},
				},
				F6: VMap_VByte_VByte{
					123: 123,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
				F12: &VStructDepth1_All{
					F0: int64(-123),
					F1: true,
					F2: true,
					F3: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F4: "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F5: vdl.Int64Type,
					F6: 123,
					F7: 123,
					F8: VEnumAbcC,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:        "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					}),
					F12: 123,
					F13: 123,
					F14: 123,
					F15: 123,
					F16: 123,
					F17: 123,
					F18: -123,
					F19: -123,
					F20: -123,
					F21: -123,
					F22: -123,
					F23: -123,
					F24: -123,
					F25: -123,
					F26: 1.23,
					F27: 1.23,
					F28: 1.23,
					F29: 1.23,
					F30: &VStructEmpty{},
				},
				F13: &VStructDepth1_Rand0{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VStructDepth2_All{{F0: {nil, VList_VInt32{}, set[VString]{\"ΔΘΠΣΦ\"}}, F1: {\"bcdefghijklmnopΔΘ\"}, F3: {938903271}, F4: {\"\"}, F6: {16: 208, 20: 88, 73: 30}, F7: {C: C, D: D}, F8: {F0: set[VStructEmpty]{{}}, F1: true, F3: \"fghijklmnopΔ\", F4: \"ΔΘΠΣΦ王普澤世界\", F5: typeobject(VUint32), F6: 241, F7: 177, F8: C, F9: D, F12: 47779, F13: 42875, F14: 2029389016, F15: 2904109023, F16: 16459413507593524110, F17: 16353344988285253454, F18: -35, F19: -12, F21: -7964, F23: -259665583, F24: -1338931562517998444, F25: -670039189790201905, F26: 2.673405e+09, F27: -1.4632109e+07, F28: 2.1534617647327882e+08, F29: 1.618167384379011e+09, F30: {}}, F9: {F7: 158, F9: C}, F10: {F16: 0}, F11: {F6: 147}, F12: {}, F13: {F4: \"ij\", F15: 4172107035, F21: -3998}}, {F0: {[]?VStructEmpty{}, []bool{true, false}, nil}, F1: {\"lmnopΔΘΠΣ\"}, F2: {false, true, false}, F3: {-53470879, 407444663}, F4: {\"efghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.8341453e+09}, F6: {196: 184, 250: 140, 78: 91}, F9: {F0: []error{{}}, F1: true, F7: 133, F26: -4.8271664e+08}, F10: {F28: 9.20108040128041e+08}, F11: {F9: D}}, {F1: {\"cde\"}, F2: {false}, F3: {590230257, -420206767}, F4: {\"\", \"pΔΘΠ\"}, F5: {1.07074976e+09}, F6: {158: 104}, F7: {B: B, D: D}, F8: {F0: set[VBool]{false}, F1: true, F2: true, F3: \"abcdefghijk\", F5: typeobject([]any), F7: 32, F9: D, F11: {Id: \"pΔΘΠ\", Msg: \"ghijklmnopΔΘ\"}, F12: 43613, F15: 1940405721, F16: 12529417034803210940, F17: 11791211780177265784, F19: 23, F20: 9411, F22: -804334462, F24: -4124501530930399990, F25: -144923103721623010, F28: 2.8121074164207834e+08, F29: -1.1109080576437273e+09, F30: {}}, F9: {F0: VArray3_VBool{false, false, true}, F7: 49, F26: 2.8564147e+09}, F10: {F12: 12834}, F11: {F6: 134}, F12: {F0: VArray3_Map_String_String{{\"cdefghijklmnop\": \"王普澤\", \"jklmnopΔ\": \"abcdefghijklmnopΔΘΠΣΦ\"}, {\"\": \"\", \"hijklmnopΔΘΠΣ\": \"efghijklmnopΔ\"}, {\"bcdefgh\": \"jklmnopΔΘ\", \"世\": \"efghijklmnopΔΘΠΣΦ王普澤\"}}, F3: \"c\", F4: \"i\", F5: typeobject(VSet_Bool), F6: 166, F7: 2, F8: B, F11: {Id: \"ijklmnopΔΘ\", RetryCode: RetryRefetch, Msg: \"ijklm\"}, F12: 41254, F13: 59413, F14: 2745767794, F15: 1832032809, F17: 4013984000384576030, F18: 64, F19: 24, F20: 3859, F22: 134042941, F23: -372320150, F24: 2212666009926881529, F26: -2.2718244e+09, F27: 5.1861e+08, F30: {}}, F13: {F4: \"defghij\", F21: 14761}}}",
		Target: VList_VStructDepth2_All{
			{
				F0: VArray3_Any{
					nil,
					VList_VInt32(nil),
					map[VString]struct{}{
						"ΔΘΠΣΦ": struct{}{},
					},
				},
				F1: VArray1_String{
					"bcdefghijklmnopΔΘ",
				},
				F3: VList_VInt32{
					938903271,
				},
				F4: VSet_VString{
					"": struct{}{},
				},
				F6: VMap_VByte_VByte{
					16: 208,
					20: 88,
					73: 30,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdC: VEnumBcdC,
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: map[VStructEmpty]struct{}{
						{}: struct{}{},
					},
					F1:  true,
					F3:  "fghijklmnopΔ",
					F4:  "ΔΘΠΣΦ王普澤世界",
					F5:  vdl.TypeOf((*VUint32)(nil)),
					F6:  241,
					F7:  177,
					F8:  VEnumAbcC,
					F9:  VEnumBcdD,
					F12: 47779,
					F13: 42875,
					F14: 2029389016,
					F15: 2904109023,
					F16: 16459413507593524110,
					F17: 16353344988285253454,
					F18: -35,
					F19: -12,
					F21: -7964,
					F23: -259665583,
					F24: -1338931562517998444,
					F25: -670039189790201905,
					F26: 2.673405e+09,
					F27: -1.4632109e+07,
					F28: 2.1534617647327882e+08,
					F29: 1.618167384379011e+09,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F7: 158,
					F9: VEnumBcdC,
				},
				F10: VUnionDepth1_Rand0F16{},
				F11: VUnionDepth1_Rand1F6{147},
				F12: &VStructDepth1_All{
					F5: vdl.AnyType,
				},
				F13: &VStructDepth1_Rand0{
					F4:  "ij",
					F15: 4172107035,
					F21: -3998,
				},
			},
			{
				F0: VArray3_Any{
					[]*VStructEmpty(nil),
					[]bool{
						true,
						false,
					},
					nil,
				},
				F1: VArray1_String{
					"lmnopΔΘΠΣ",
				},
				F2: VList_VBool{
					false,
					true,
					false,
				},
				F3: VList_VInt32{
					-53470879,
					407444663,
				},
				F4: VSet_VString{
					"efghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
				},
				F5: VSet_Float32{
					1.8341453e+09: struct{}{},
				},
				F6: VMap_VByte_VByte{
					196: 184,
					250: 140,
					78:  91,
				},
				F8: VStructDepth1_All{
					F5: vdl.AnyType,
				},
				F9: VStructDepth1_Rand1{
					F0: []error{
						verror.FromWire(vdl.WireError{}),
					},
					F1:  true,
					F7:  133,
					F26: -4.8271664e+08,
				},
				F10: VUnionDepth1_Rand0F28{9.20108040128041e+08},
				F11: VUnionDepth1_Rand1F9{VEnumBcdD},
			},
			{
				F1: VArray1_String{
					"cde",
				},
				F2: VList_VBool{
					false,
				},
				F3: VList_VInt32{
					590230257,
					-420206767,
				},
				F4: VSet_VString{
					"":     struct{}{},
					"pΔΘΠ": struct{}{},
				},
				F5: VSet_Float32{
					1.07074976e+09: struct{}{},
				},
				F6: VMap_VByte_VByte{
					158: 104,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: map[VBool]struct{}{
						false: struct{}{},
					},
					F1: true,
					F2: true,
					F3: "abcdefghijk",
					F5: vdl.TypeOf((*[]interface{})(nil)),
					F7: 32,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:  "pΔΘΠ",
						Msg: "ghijklmnopΔΘ",
					}),
					F12: 43613,
					F15: 1940405721,
					F16: 12529417034803210940,
					F17: 11791211780177265784,
					F19: 23,
					F20: 9411,
					F22: -804334462,
					F24: -4124501530930399990,
					F25: -144923103721623010,
					F28: 2.8121074164207834e+08,
					F29: -1.1109080576437273e+09,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F0: VArray3_VBool{
						false,
						false,
						true,
					},
					F7:  49,
					F26: 2.8564147e+09,
				},
				F10: VUnionDepth1_Rand0F12{12834},
				F11: VUnionDepth1_Rand1F6{134},
				F12: &VStructDepth1_All{
					F0: VArray3_Map_String_String{
						{
							"cdefghijklmnop": "王普澤",
							"jklmnopΔ":       "abcdefghijklmnopΔΘΠΣΦ",
						},
						{
							"":              "",
							"hijklmnopΔΘΠΣ": "efghijklmnopΔ",
						},
						{
							"bcdefgh": "jklmnopΔΘ",
							"世":       "efghijklmnopΔΘΠΣΦ王普澤",
						},
					},
					F3: "c",
					F4: "i",
					F5: vdl.TypeOf((*VSet_Bool)(nil)),
					F6: 166,
					F7: 2,
					F8: VEnumAbcB,
					F11: verror.FromWire(vdl.WireError{
						Id:        "ijklmnopΔΘ",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
						Msg:       "ijklm",
					}),
					F12: 41254,
					F13: 59413,
					F14: 2745767794,
					F15: 1832032809,
					F17: 4013984000384576030,
					F18: 64,
					F19: 24,
					F20: 3859,
					F22: 134042941,
					F23: -372320150,
					F24: 2212666009926881529,
					F26: -2.2718244e+09,
					F27: 5.1861e+08,
					F30: &VStructEmpty{},
				},
				F13: &VStructDepth1_Rand0{
					F4:  "defghij",
					F21: 14761,
				},
			},
		},
		SourceLabel: "VList_VStructDepth2_All{{F0: {nil, VList_VInt32{}, set[VString]{\"ΔΘΠΣΦ\"}}, F1: {\"bcdefghijklmnopΔΘ\"}, F3: {938903271}, F4: {\"\"}, F6: {16: 208, 20: 88, 73: 30}, F7: {C: C, D: D}, F8: {F0: set[VStructEmpty]{{}}, F1: true, F3: \"fghijklmnopΔ\", F4: \"ΔΘΠΣΦ王普澤世界\", F5: typeobject(VUint32), F6: 241, F7: 177, F8: C, F9: D, F12: 47779, F13: 42875, F14: 2029389016, F15: 2904109023, F16: 16459413507593524110, F17: 16353344988285253454, F18: -35, F19: -12, F21: -7964, F23: -259665583, F24: -1338931562517998444, F25: -670039189790201905, F26: 2.673405e+09, F27: -1.4632109e+07, F28: 2.1534617647327882e+08, F29: 1.618167384379011e+09, F30: {}}, F9: {F7: 158, F9: C}, F10: {F16: 0}, F11: {F6: 147}, F12: {}, F13: {F4: \"ij\", F15: 4172107035, F21: -3998}}, {F0: {[]?VStructEmpty{}, []bool{true, false}, nil}, F1: {\"lmnopΔΘΠΣ\"}, F2: {false, true, false}, F3: {-53470879, 407444663}, F4: {\"efghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.8341453e+09}, F6: {196: 184, 250: 140, 78: 91}, F9: {F0: []error{{}}, F1: true, F7: 133, F26: -4.8271664e+08}, F10: {F28: 9.20108040128041e+08}, F11: {F9: D}}, {F1: {\"cde\"}, F2: {false}, F3: {590230257, -420206767}, F4: {\"\", \"pΔΘΠ\"}, F5: {1.07074976e+09}, F6: {158: 104}, F7: {B: B, D: D}, F8: {F0: set[VBool]{false}, F1: true, F2: true, F3: \"abcdefghijk\", F5: typeobject([]any), F7: 32, F9: D, F11: {Id: \"pΔΘΠ\", Msg: \"ghijklmnopΔΘ\"}, F12: 43613, F15: 1940405721, F16: 12529417034803210940, F17: 11791211780177265784, F19: 23, F20: 9411, F22: -804334462, F24: -4124501530930399990, F25: -144923103721623010, F28: 2.8121074164207834e+08, F29: -1.1109080576437273e+09, F30: {}}, F9: {F0: VArray3_VBool{false, false, true}, F7: 49, F26: 2.8564147e+09}, F10: {F12: 12834}, F11: {F6: 134}, F12: {F0: VArray3_Map_String_String{{\"cdefghijklmnop\": \"王普澤\", \"jklmnopΔ\": \"abcdefghijklmnopΔΘΠΣΦ\"}, {\"\": \"\", \"hijklmnopΔΘΠΣ\": \"efghijklmnopΔ\"}, {\"bcdefgh\": \"jklmnopΔΘ\", \"世\": \"efghijklmnopΔΘΠΣΦ王普澤\"}}, F3: \"c\", F4: \"i\", F5: typeobject(VSet_Bool), F6: 166, F7: 2, F8: B, F11: {Id: \"ijklmnopΔΘ\", RetryCode: RetryRefetch, Msg: \"ijklm\"}, F12: 41254, F13: 59413, F14: 2745767794, F15: 1832032809, F17: 4013984000384576030, F18: 64, F19: 24, F20: 3859, F22: 134042941, F23: -372320150, F24: 2212666009926881529, F26: -2.2718244e+09, F27: 5.1861e+08, F30: {}}, F13: {F4: \"defghij\", F21: 14761}}}",
		Source: VList_VStructDepth2_All{
			{
				F0: VArray3_Any{
					nil,
					VList_VInt32(nil),
					map[VString]struct{}{
						"ΔΘΠΣΦ": struct{}{},
					},
				},
				F1: VArray1_String{
					"bcdefghijklmnopΔΘ",
				},
				F3: VList_VInt32{
					938903271,
				},
				F4: VSet_VString{
					"": struct{}{},
				},
				F6: VMap_VByte_VByte{
					16: 208,
					20: 88,
					73: 30,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdC: VEnumBcdC,
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: map[VStructEmpty]struct{}{
						{}: struct{}{},
					},
					F1:  true,
					F3:  "fghijklmnopΔ",
					F4:  "ΔΘΠΣΦ王普澤世界",
					F5:  vdl.TypeOf((*VUint32)(nil)),
					F6:  241,
					F7:  177,
					F8:  VEnumAbcC,
					F9:  VEnumBcdD,
					F12: 47779,
					F13: 42875,
					F14: 2029389016,
					F15: 2904109023,
					F16: 16459413507593524110,
					F17: 16353344988285253454,
					F18: -35,
					F19: -12,
					F21: -7964,
					F23: -259665583,
					F24: -1338931562517998444,
					F25: -670039189790201905,
					F26: 2.673405e+09,
					F27: -1.4632109e+07,
					F28: 2.1534617647327882e+08,
					F29: 1.618167384379011e+09,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F7: 158,
					F9: VEnumBcdC,
				},
				F10: VUnionDepth1_Rand0F16{},
				F11: VUnionDepth1_Rand1F6{147},
				F12: &VStructDepth1_All{
					F5: vdl.AnyType,
				},
				F13: &VStructDepth1_Rand0{
					F4:  "ij",
					F15: 4172107035,
					F21: -3998,
				},
			},
			{
				F0: VArray3_Any{
					[]*VStructEmpty(nil),
					[]bool{
						true,
						false,
					},
					nil,
				},
				F1: VArray1_String{
					"lmnopΔΘΠΣ",
				},
				F2: VList_VBool{
					false,
					true,
					false,
				},
				F3: VList_VInt32{
					-53470879,
					407444663,
				},
				F4: VSet_VString{
					"efghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
				},
				F5: VSet_Float32{
					1.8341453e+09: struct{}{},
				},
				F6: VMap_VByte_VByte{
					196: 184,
					250: 140,
					78:  91,
				},
				F8: VStructDepth1_All{
					F5: vdl.AnyType,
				},
				F9: VStructDepth1_Rand1{
					F0: []error{
						verror.FromWire(vdl.WireError{}),
					},
					F1:  true,
					F7:  133,
					F26: -4.8271664e+08,
				},
				F10: VUnionDepth1_Rand0F28{9.20108040128041e+08},
				F11: VUnionDepth1_Rand1F9{VEnumBcdD},
			},
			{
				F1: VArray1_String{
					"cde",
				},
				F2: VList_VBool{
					false,
				},
				F3: VList_VInt32{
					590230257,
					-420206767,
				},
				F4: VSet_VString{
					"":     struct{}{},
					"pΔΘΠ": struct{}{},
				},
				F5: VSet_Float32{
					1.07074976e+09: struct{}{},
				},
				F6: VMap_VByte_VByte{
					158: 104,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: map[VBool]struct{}{
						false: struct{}{},
					},
					F1: true,
					F2: true,
					F3: "abcdefghijk",
					F5: vdl.TypeOf((*[]interface{})(nil)),
					F7: 32,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:  "pΔΘΠ",
						Msg: "ghijklmnopΔΘ",
					}),
					F12: 43613,
					F15: 1940405721,
					F16: 12529417034803210940,
					F17: 11791211780177265784,
					F19: 23,
					F20: 9411,
					F22: -804334462,
					F24: -4124501530930399990,
					F25: -144923103721623010,
					F28: 2.8121074164207834e+08,
					F29: -1.1109080576437273e+09,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F0: VArray3_VBool{
						false,
						false,
						true,
					},
					F7:  49,
					F26: 2.8564147e+09,
				},
				F10: VUnionDepth1_Rand0F12{12834},
				F11: VUnionDepth1_Rand1F6{134},
				F12: &VStructDepth1_All{
					F0: VArray3_Map_String_String{
						{
							"cdefghijklmnop": "王普澤",
							"jklmnopΔ":       "abcdefghijklmnopΔΘΠΣΦ",
						},
						{
							"":              "",
							"hijklmnopΔΘΠΣ": "efghijklmnopΔ",
						},
						{
							"bcdefgh": "jklmnopΔΘ",
							"世":       "efghijklmnopΔΘΠΣΦ王普澤",
						},
					},
					F3: "c",
					F4: "i",
					F5: vdl.TypeOf((*VSet_Bool)(nil)),
					F6: 166,
					F7: 2,
					F8: VEnumAbcB,
					F11: verror.FromWire(vdl.WireError{
						Id:        "ijklmnopΔΘ",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
						Msg:       "ijklm",
					}),
					F12: 41254,
					F13: 59413,
					F14: 2745767794,
					F15: 1832032809,
					F17: 4013984000384576030,
					F18: 64,
					F19: 24,
					F20: 3859,
					F22: 134042941,
					F23: -372320150,
					F24: 2212666009926881529,
					F26: -2.2718244e+09,
					F27: 5.1861e+08,
					F30: &VStructEmpty{},
				},
				F13: &VStructDepth1_Rand0{
					F4:  "defghij",
					F21: 14761,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VStructDepth2_All{{F0: {nil, VList_VInt32{}, set[VString]{\"ΔΘΠΣΦ\"}}, F1: {\"bcdefghijklmnopΔΘ\"}, F3: {938903271}, F4: {\"\"}, F6: {16: 208, 20: 88, 73: 30}, F7: {C: C, D: D}, F8: {F0: set[VStructEmpty]{{}}, F1: true, F3: \"fghijklmnopΔ\", F4: \"ΔΘΠΣΦ王普澤世界\", F5: typeobject(VUint32), F6: 241, F7: 177, F8: C, F9: D, F12: 47779, F13: 42875, F14: 2029389016, F15: 2904109023, F16: 16459413507593524110, F17: 16353344988285253454, F18: -35, F19: -12, F21: -7964, F23: -259665583, F24: -1338931562517998444, F25: -670039189790201905, F26: 2.673405e+09, F27: -1.4632109e+07, F28: 2.1534617647327882e+08, F29: 1.618167384379011e+09, F30: {}}, F9: {F7: 158, F9: C}, F10: {F16: 0}, F11: {F6: 147}, F12: {}, F13: {F4: \"ij\", F15: 4172107035, F21: -3998}}, {F0: {[]?VStructEmpty{}, []bool{true, false}, nil}, F1: {\"lmnopΔΘΠΣ\"}, F2: {false, true, false}, F3: {-53470879, 407444663}, F4: {\"efghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.8341453e+09}, F6: {196: 184, 250: 140, 78: 91}, F9: {F0: []error{{}}, F1: true, F7: 133, F26: -4.8271664e+08}, F10: {F28: 9.20108040128041e+08}, F11: {F9: D}}, {F1: {\"cde\"}, F2: {false}, F3: {590230257, -420206767}, F4: {\"\", \"pΔΘΠ\"}, F5: {1.07074976e+09}, F6: {158: 104}, F7: {B: B, D: D}, F8: {F0: set[VBool]{false}, F1: true, F2: true, F3: \"abcdefghijk\", F5: typeobject([]any), F7: 32, F9: D, F11: {Id: \"pΔΘΠ\", Msg: \"ghijklmnopΔΘ\"}, F12: 43613, F15: 1940405721, F16: 12529417034803210940, F17: 11791211780177265784, F19: 23, F20: 9411, F22: -804334462, F24: -4124501530930399990, F25: -144923103721623010, F28: 2.8121074164207834e+08, F29: -1.1109080576437273e+09, F30: {}}, F9: {F0: VArray3_VBool{false, false, true}, F7: 49, F26: 2.8564147e+09}, F10: {F12: 12834}, F11: {F6: 134}, F12: {F0: VArray3_Map_String_String{{\"cdefghijklmnop\": \"王普澤\", \"jklmnopΔ\": \"abcdefghijklmnopΔΘΠΣΦ\"}, {\"\": \"\", \"hijklmnopΔΘΠΣ\": \"efghijklmnopΔ\"}, {\"bcdefgh\": \"jklmnopΔΘ\", \"世\": \"efghijklmnopΔΘΠΣΦ王普澤\"}}, F3: \"c\", F4: \"i\", F5: typeobject(VSet_Bool), F6: 166, F7: 2, F8: B, F11: {Id: \"ijklmnopΔΘ\", RetryCode: RetryRefetch, Msg: \"ijklm\"}, F12: 41254, F13: 59413, F14: 2745767794, F15: 1832032809, F17: 4013984000384576030, F18: 64, F19: 24, F20: 3859, F22: 134042941, F23: -372320150, F24: 2212666009926881529, F26: -2.2718244e+09, F27: 5.1861e+08, F30: {}}, F13: {F4: \"defghij\", F21: 14761}}}",
		Target: VList_VStructDepth2_All{
			{
				F0: VArray3_Any{
					nil,
					VList_VInt32(nil),
					map[VString]struct{}{
						"ΔΘΠΣΦ": struct{}{},
					},
				},
				F1: VArray1_String{
					"bcdefghijklmnopΔΘ",
				},
				F3: VList_VInt32{
					938903271,
				},
				F4: VSet_VString{
					"": struct{}{},
				},
				F6: VMap_VByte_VByte{
					16: 208,
					20: 88,
					73: 30,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdC: VEnumBcdC,
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: map[VStructEmpty]struct{}{
						{}: struct{}{},
					},
					F1:  true,
					F3:  "fghijklmnopΔ",
					F4:  "ΔΘΠΣΦ王普澤世界",
					F5:  vdl.TypeOf((*VUint32)(nil)),
					F6:  241,
					F7:  177,
					F8:  VEnumAbcC,
					F9:  VEnumBcdD,
					F12: 47779,
					F13: 42875,
					F14: 2029389016,
					F15: 2904109023,
					F16: 16459413507593524110,
					F17: 16353344988285253454,
					F18: -35,
					F19: -12,
					F21: -7964,
					F23: -259665583,
					F24: -1338931562517998444,
					F25: -670039189790201905,
					F26: 2.673405e+09,
					F27: -1.4632109e+07,
					F28: 2.1534617647327882e+08,
					F29: 1.618167384379011e+09,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F7: 158,
					F9: VEnumBcdC,
				},
				F10: VUnionDepth1_Rand0F16{},
				F11: VUnionDepth1_Rand1F6{147},
				F12: &VStructDepth1_All{
					F5: vdl.AnyType,
				},
				F13: &VStructDepth1_Rand0{
					F4:  "ij",
					F15: 4172107035,
					F21: -3998,
				},
			},
			{
				F0: VArray3_Any{
					[]*VStructEmpty(nil),
					[]bool{
						true,
						false,
					},
					nil,
				},
				F1: VArray1_String{
					"lmnopΔΘΠΣ",
				},
				F2: VList_VBool{
					false,
					true,
					false,
				},
				F3: VList_VInt32{
					-53470879,
					407444663,
				},
				F4: VSet_VString{
					"efghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
				},
				F5: VSet_Float32{
					1.8341453e+09: struct{}{},
				},
				F6: VMap_VByte_VByte{
					196: 184,
					250: 140,
					78:  91,
				},
				F8: VStructDepth1_All{
					F5: vdl.AnyType,
				},
				F9: VStructDepth1_Rand1{
					F0: []error{
						verror.FromWire(vdl.WireError{}),
					},
					F1:  true,
					F7:  133,
					F26: -4.8271664e+08,
				},
				F10: VUnionDepth1_Rand0F28{9.20108040128041e+08},
				F11: VUnionDepth1_Rand1F9{VEnumBcdD},
			},
			{
				F1: VArray1_String{
					"cde",
				},
				F2: VList_VBool{
					false,
				},
				F3: VList_VInt32{
					590230257,
					-420206767,
				},
				F4: VSet_VString{
					"":     struct{}{},
					"pΔΘΠ": struct{}{},
				},
				F5: VSet_Float32{
					1.07074976e+09: struct{}{},
				},
				F6: VMap_VByte_VByte{
					158: 104,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: map[VBool]struct{}{
						false: struct{}{},
					},
					F1: true,
					F2: true,
					F3: "abcdefghijk",
					F5: vdl.TypeOf((*[]interface{})(nil)),
					F7: 32,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:  "pΔΘΠ",
						Msg: "ghijklmnopΔΘ",
					}),
					F12: 43613,
					F15: 1940405721,
					F16: 12529417034803210940,
					F17: 11791211780177265784,
					F19: 23,
					F20: 9411,
					F22: -804334462,
					F24: -4124501530930399990,
					F25: -144923103721623010,
					F28: 2.8121074164207834e+08,
					F29: -1.1109080576437273e+09,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F0: VArray3_VBool{
						false,
						false,
						true,
					},
					F7:  49,
					F26: 2.8564147e+09,
				},
				F10: VUnionDepth1_Rand0F12{12834},
				F11: VUnionDepth1_Rand1F6{134},
				F12: &VStructDepth1_All{
					F0: VArray3_Map_String_String{
						{
							"cdefghijklmnop": "王普澤",
							"jklmnopΔ":       "abcdefghijklmnopΔΘΠΣΦ",
						},
						{
							"":              "",
							"hijklmnopΔΘΠΣ": "efghijklmnopΔ",
						},
						{
							"bcdefgh": "jklmnopΔΘ",
							"世":       "efghijklmnopΔΘΠΣΦ王普澤",
						},
					},
					F3: "c",
					F4: "i",
					F5: vdl.TypeOf((*VSet_Bool)(nil)),
					F6: 166,
					F7: 2,
					F8: VEnumAbcB,
					F11: verror.FromWire(vdl.WireError{
						Id:        "ijklmnopΔΘ",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
						Msg:       "ijklm",
					}),
					F12: 41254,
					F13: 59413,
					F14: 2745767794,
					F15: 1832032809,
					F17: 4013984000384576030,
					F18: 64,
					F19: 24,
					F20: 3859,
					F22: 134042941,
					F23: -372320150,
					F24: 2212666009926881529,
					F26: -2.2718244e+09,
					F27: 5.1861e+08,
					F30: &VStructEmpty{},
				},
				F13: &VStructDepth1_Rand0{
					F4:  "defghij",
					F21: 14761,
				},
			},
		},
		SourceLabel: "[]any{VStructDepth2_All{F0: {nil, VList_VInt32{}, set[VString]{\"ΔΘΠΣΦ\"}}, F1: {\"bcdefghijklmnopΔΘ\"}, F3: {938903271}, F4: {\"\"}, F6: {16: 208, 20: 88, 73: 30}, F7: {C: C, D: D}, F8: {F0: set[VStructEmpty]{{}}, F1: true, F3: \"fghijklmnopΔ\", F4: \"ΔΘΠΣΦ王普澤世界\", F5: typeobject(VUint32), F6: 241, F7: 177, F8: C, F9: D, F12: 47779, F13: 42875, F14: 2029389016, F15: 2904109023, F16: 16459413507593524110, F17: 16353344988285253454, F18: -35, F19: -12, F21: -7964, F23: -259665583, F24: -1338931562517998444, F25: -670039189790201905, F26: 2.673405e+09, F27: -1.4632109e+07, F28: 2.1534617647327882e+08, F29: 1.618167384379011e+09, F30: {}}, F9: {F7: 158, F9: C}, F10: {F16: 0}, F11: {F6: 147}, F12: {}, F13: {F4: \"ij\", F15: 4172107035, F21: -3998}}, VStructDepth2_All{F0: {[]?VStructEmpty{}, []bool{true, false}, nil}, F1: {\"lmnopΔΘΠΣ\"}, F2: {false, true, false}, F3: {-53470879, 407444663}, F4: {\"efghijklmnopΔΘΠΣΦ王普澤世界\"}, F5: {1.8341453e+09}, F6: {196: 184, 250: 140, 78: 91}, F9: {F0: []error{{}}, F1: true, F7: 133, F26: -4.8271664e+08}, F10: {F28: 9.20108040128041e+08}, F11: {F9: D}}, VStructDepth2_All{F1: {\"cde\"}, F2: {false}, F3: {590230257, -420206767}, F4: {\"\", \"pΔΘΠ\"}, F5: {1.07074976e+09}, F6: {158: 104}, F7: {B: B, D: D}, F8: {F0: set[VBool]{false}, F1: true, F2: true, F3: \"abcdefghijk\", F5: typeobject([]any), F7: 32, F9: D, F11: {Id: \"pΔΘΠ\", Msg: \"ghijklmnopΔΘ\"}, F12: 43613, F15: 1940405721, F16: 12529417034803210940, F17: 11791211780177265784, F19: 23, F20: 9411, F22: -804334462, F24: -4124501530930399990, F25: -144923103721623010, F28: 2.8121074164207834e+08, F29: -1.1109080576437273e+09, F30: {}}, F9: {F0: VArray3_VBool{false, false, true}, F7: 49, F26: 2.8564147e+09}, F10: {F12: 12834}, F11: {F6: 134}, F12: {F0: VArray3_Map_String_String{{\"cdefghijklmnop\": \"王普澤\", \"jklmnopΔ\": \"abcdefghijklmnopΔΘΠΣΦ\"}, {\"\": \"\", \"hijklmnopΔΘΠΣ\": \"efghijklmnopΔ\"}, {\"bcdefgh\": \"jklmnopΔΘ\", \"世\": \"efghijklmnopΔΘΠΣΦ王普澤\"}}, F3: \"c\", F4: \"i\", F5: typeobject(VSet_Bool), F6: 166, F7: 2, F8: B, F11: {Id: \"ijklmnopΔΘ\", RetryCode: RetryRefetch, Msg: \"ijklm\"}, F12: 41254, F13: 59413, F14: 2745767794, F15: 1832032809, F17: 4013984000384576030, F18: 64, F19: 24, F20: 3859, F22: 134042941, F23: -372320150, F24: 2212666009926881529, F26: -2.2718244e+09, F27: 5.1861e+08, F30: {}}, F13: {F4: \"defghij\", F21: 14761}}}",
		Source: []interface{}{
			VStructDepth2_All{
				F0: VArray3_Any{
					nil,
					VList_VInt32(nil),
					map[VString]struct{}{
						"ΔΘΠΣΦ": struct{}{},
					},
				},
				F1: VArray1_String{
					"bcdefghijklmnopΔΘ",
				},
				F3: VList_VInt32{
					938903271,
				},
				F4: VSet_VString{
					"": struct{}{},
				},
				F6: VMap_VByte_VByte{
					16: 208,
					20: 88,
					73: 30,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdC: VEnumBcdC,
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: map[VStructEmpty]struct{}{
						{}: struct{}{},
					},
					F1:  true,
					F3:  "fghijklmnopΔ",
					F4:  "ΔΘΠΣΦ王普澤世界",
					F5:  vdl.TypeOf((*VUint32)(nil)),
					F6:  241,
					F7:  177,
					F8:  VEnumAbcC,
					F9:  VEnumBcdD,
					F12: 47779,
					F13: 42875,
					F14: 2029389016,
					F15: 2904109023,
					F16: 16459413507593524110,
					F17: 16353344988285253454,
					F18: -35,
					F19: -12,
					F21: -7964,
					F23: -259665583,
					F24: -1338931562517998444,
					F25: -670039189790201905,
					F26: 2.673405e+09,
					F27: -1.4632109e+07,
					F28: 2.1534617647327882e+08,
					F29: 1.618167384379011e+09,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F7: 158,
					F9: VEnumBcdC,
				},
				F10: VUnionDepth1_Rand0F16{},
				F11: VUnionDepth1_Rand1F6{147},
				F12: &VStructDepth1_All{
					F5: vdl.AnyType,
				},
				F13: &VStructDepth1_Rand0{
					F4:  "ij",
					F15: 4172107035,
					F21: -3998,
				},
			},
			VStructDepth2_All{
				F0: VArray3_Any{
					[]*VStructEmpty(nil),
					[]bool{
						true,
						false,
					},
					nil,
				},
				F1: VArray1_String{
					"lmnopΔΘΠΣ",
				},
				F2: VList_VBool{
					false,
					true,
					false,
				},
				F3: VList_VInt32{
					-53470879,
					407444663,
				},
				F4: VSet_VString{
					"efghijklmnopΔΘΠΣΦ王普澤世界": struct{}{},
				},
				F5: VSet_Float32{
					1.8341453e+09: struct{}{},
				},
				F6: VMap_VByte_VByte{
					196: 184,
					250: 140,
					78:  91,
				},
				F8: VStructDepth1_All{
					F5: vdl.AnyType,
				},
				F9: VStructDepth1_Rand1{
					F0: []error{
						verror.FromWire(vdl.WireError{}),
					},
					F1:  true,
					F7:  133,
					F26: -4.8271664e+08,
				},
				F10: VUnionDepth1_Rand0F28{9.20108040128041e+08},
				F11: VUnionDepth1_Rand1F9{VEnumBcdD},
			},
			VStructDepth2_All{
				F1: VArray1_String{
					"cde",
				},
				F2: VList_VBool{
					false,
				},
				F3: VList_VInt32{
					590230257,
					-420206767,
				},
				F4: VSet_VString{
					"":     struct{}{},
					"pΔΘΠ": struct{}{},
				},
				F5: VSet_Float32{
					1.07074976e+09: struct{}{},
				},
				F6: VMap_VByte_VByte{
					158: 104,
				},
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
					VEnumBcdD: VEnumBcdD,
				},
				F8: VStructDepth1_All{
					F0: map[VBool]struct{}{
						false: struct{}{},
					},
					F1: true,
					F2: true,
					F3: "abcdefghijk",
					F5: vdl.TypeOf((*[]interface{})(nil)),
					F7: 32,
					F9: VEnumBcdD,
					F11: verror.FromWire(vdl.WireError{
						Id:  "pΔΘΠ",
						Msg: "ghijklmnopΔΘ",
					}),
					F12: 43613,
					F15: 1940405721,
					F16: 12529417034803210940,
					F17: 11791211780177265784,
					F19: 23,
					F20: 9411,
					F22: -804334462,
					F24: -4124501530930399990,
					F25: -144923103721623010,
					F28: 2.8121074164207834e+08,
					F29: -1.1109080576437273e+09,
					F30: &VStructEmpty{},
				},
				F9: VStructDepth1_Rand1{
					F0: VArray3_VBool{
						false,
						false,
						true,
					},
					F7:  49,
					F26: 2.8564147e+09,
				},
				F10: VUnionDepth1_Rand0F12{12834},
				F11: VUnionDepth1_Rand1F6{134},
				F12: &VStructDepth1_All{
					F0: VArray3_Map_String_String{
						{
							"cdefghijklmnop": "王普澤",
							"jklmnopΔ":       "abcdefghijklmnopΔΘΠΣΦ",
						},
						{
							"":              "",
							"hijklmnopΔΘΠΣ": "efghijklmnopΔ",
						},
						{
							"bcdefgh": "jklmnopΔΘ",
							"世":       "efghijklmnopΔΘΠΣΦ王普澤",
						},
					},
					F3: "c",
					F4: "i",
					F5: vdl.TypeOf((*VSet_Bool)(nil)),
					F6: 166,
					F7: 2,
					F8: VEnumAbcB,
					F11: verror.FromWire(vdl.WireError{
						Id:        "ijklmnopΔΘ",
						RetryCode: vdl.WireRetryCodeRetryRefetch,
						Msg:       "ijklm",
					}),
					F12: 41254,
					F13: 59413,
					F14: 2745767794,
					F15: 1832032809,
					F17: 4013984000384576030,
					F18: 64,
					F19: 24,
					F20: 3859,
					F22: 134042941,
					F23: -372320150,
					F24: 2212666009926881529,
					F26: -2.2718244e+09,
					F27: 5.1861e+08,
					F30: &VStructEmpty{},
				},
				F13: &VStructDepth1_Rand0{
					F4:  "defghij",
					F21: 14761,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VStructDepth2_All{{F0: {VArray1_Byte(\"\\x00\"), []VUint64{}, nil}, F1: {\"jklmnopΔΘΠΣΦ\"}, F2: {false, true, false}, F3: {792247926, 690852989}, F4: {\"\", \"defghijklmnopΔ\"}, F5: {-2.0348338e+08, 6.0928154e+08, 6.7638803e+08}, F6: {230: 22}, F8: {F0: VArray2_TypeObject{}, F4: \"defghijklmnopΔΘΠΣΦ\", F6: 1, F7: 253, F8: C, F9: C, F11: {}, F12: 30128, F15: 1643230504, F16: 3960792174684445623, F19: 53, F20: -5781, F21: 3419, F22: -518276703, F23: 29573900, F24: -1598525314883032858, F25: 2311230435801133446, F26: 1.6671425e+09, F27: -3.510242e+08, F28: -1.9023779138032928e+09, F29: 1.5338860629222472e+09}, F9: {F0: VSet_VArray3_Bool{{}}, F7: 69, F9: C, F26: -6.3386605e+08}, F11: {F9: B}, F13: {F4: \"jklmnopΔΘΠΣΦ\", F15: 3766227341, F21: 11468}}}",
		Target: VList_VStructDepth2_All{
			{
				F0: VArray3_Any{
					VArray1_Byte{},
					[]VUint64(nil),
					nil,
				},
				F1: VArray1_String{
					"jklmnopΔΘΠΣΦ",
				},
				F2: VList_VBool{
					false,
					true,
					false,
				},
				F3: VList_VInt32{
					792247926,
					690852989,
				},
				F4: VSet_VString{
					"":               struct{}{},
					"defghijklmnopΔ": struct{}{},
				},
				F5: VSet_Float32{
					-2.0348338e+08: struct{}{},
					6.0928154e+08:  struct{}{},
					6.7638803e+08:  struct{}{},
				},
				F6: VMap_VByte_VByte{
					230: 22,
				},
				F8: VStructDepth1_All{
					F0: VArray2_TypeObject{
						vdl.AnyType,
						vdl.AnyType,
					},
					F4:  "defghijklmnopΔΘΠΣΦ",
					F5:  vdl.AnyType,
					F6:  1,
					F7:  253,
					F8:  VEnumAbcC,
					F9:  VEnumBcdC,
					F11: verror.FromWire(vdl.WireError{}),
					F12: 30128,
					F15: 1643230504,
					F16: 3960792174684445623,
					F19: 53,
					F20: -5781,
					F21: 3419,
					F22: -518276703,
					F23: 29573900,
					F24: -1598525314883032858,
					F25: 2311230435801133446,
					F26: 1.6671425e+09,
					F27: -3.510242e+08,
					F28: -1.9023779138032928e+09,
					F29: 1.5338860629222472e+09,
				},
				F9: VStructDepth1_Rand1{
					F0: VSet_VArray3_Bool{
						{}: struct{}{},
					},
					F7:  69,
					F9:  VEnumBcdC,
					F26: -6.3386605e+08,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F9{},
				F13: &VStructDepth1_Rand0{
					F4:  "jklmnopΔΘΠΣΦ",
					F15: 3766227341,
					F21: 11468,
				},
			},
		},
		SourceLabel: "VList_VStructDepth2_All{{F0: {VArray1_Byte(\"\\x00\"), []VUint64{}, nil}, F1: {\"jklmnopΔΘΠΣΦ\"}, F2: {false, true, false}, F3: {792247926, 690852989}, F4: {\"\", \"defghijklmnopΔ\"}, F5: {-2.0348338e+08, 6.0928154e+08, 6.7638803e+08}, F6: {230: 22}, F8: {F0: VArray2_TypeObject{}, F4: \"defghijklmnopΔΘΠΣΦ\", F6: 1, F7: 253, F8: C, F9: C, F11: {}, F12: 30128, F15: 1643230504, F16: 3960792174684445623, F19: 53, F20: -5781, F21: 3419, F22: -518276703, F23: 29573900, F24: -1598525314883032858, F25: 2311230435801133446, F26: 1.6671425e+09, F27: -3.510242e+08, F28: -1.9023779138032928e+09, F29: 1.5338860629222472e+09}, F9: {F0: VSet_VArray3_Bool{{}}, F7: 69, F9: C, F26: -6.3386605e+08}, F11: {F9: B}, F13: {F4: \"jklmnopΔΘΠΣΦ\", F15: 3766227341, F21: 11468}}}",
		Source: VList_VStructDepth2_All{
			{
				F0: VArray3_Any{
					VArray1_Byte{},
					[]VUint64(nil),
					nil,
				},
				F1: VArray1_String{
					"jklmnopΔΘΠΣΦ",
				},
				F2: VList_VBool{
					false,
					true,
					false,
				},
				F3: VList_VInt32{
					792247926,
					690852989,
				},
				F4: VSet_VString{
					"":               struct{}{},
					"defghijklmnopΔ": struct{}{},
				},
				F5: VSet_Float32{
					-2.0348338e+08: struct{}{},
					6.0928154e+08:  struct{}{},
					6.7638803e+08:  struct{}{},
				},
				F6: VMap_VByte_VByte{
					230: 22,
				},
				F8: VStructDepth1_All{
					F0: VArray2_TypeObject{
						vdl.AnyType,
						vdl.AnyType,
					},
					F4:  "defghijklmnopΔΘΠΣΦ",
					F5:  vdl.AnyType,
					F6:  1,
					F7:  253,
					F8:  VEnumAbcC,
					F9:  VEnumBcdC,
					F11: verror.FromWire(vdl.WireError{}),
					F12: 30128,
					F15: 1643230504,
					F16: 3960792174684445623,
					F19: 53,
					F20: -5781,
					F21: 3419,
					F22: -518276703,
					F23: 29573900,
					F24: -1598525314883032858,
					F25: 2311230435801133446,
					F26: 1.6671425e+09,
					F27: -3.510242e+08,
					F28: -1.9023779138032928e+09,
					F29: 1.5338860629222472e+09,
				},
				F9: VStructDepth1_Rand1{
					F0: VSet_VArray3_Bool{
						{}: struct{}{},
					},
					F7:  69,
					F9:  VEnumBcdC,
					F26: -6.3386605e+08,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F9{},
				F13: &VStructDepth1_Rand0{
					F4:  "jklmnopΔΘΠΣΦ",
					F15: 3766227341,
					F21: 11468,
				},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VStructDepth2_All{{F0: {VArray1_Byte(\"\\x00\"), []VUint64{}, nil}, F1: {\"jklmnopΔΘΠΣΦ\"}, F2: {false, true, false}, F3: {792247926, 690852989}, F4: {\"\", \"defghijklmnopΔ\"}, F5: {-2.0348338e+08, 6.0928154e+08, 6.7638803e+08}, F6: {230: 22}, F8: {F0: VArray2_TypeObject{}, F4: \"defghijklmnopΔΘΠΣΦ\", F6: 1, F7: 253, F8: C, F9: C, F11: {}, F12: 30128, F15: 1643230504, F16: 3960792174684445623, F19: 53, F20: -5781, F21: 3419, F22: -518276703, F23: 29573900, F24: -1598525314883032858, F25: 2311230435801133446, F26: 1.6671425e+09, F27: -3.510242e+08, F28: -1.9023779138032928e+09, F29: 1.5338860629222472e+09}, F9: {F0: VSet_VArray3_Bool{{}}, F7: 69, F9: C, F26: -6.3386605e+08}, F11: {F9: B}, F13: {F4: \"jklmnopΔΘΠΣΦ\", F15: 3766227341, F21: 11468}}}",
		Target: VList_VStructDepth2_All{
			{
				F0: VArray3_Any{
					VArray1_Byte{},
					[]VUint64(nil),
					nil,
				},
				F1: VArray1_String{
					"jklmnopΔΘΠΣΦ",
				},
				F2: VList_VBool{
					false,
					true,
					false,
				},
				F3: VList_VInt32{
					792247926,
					690852989,
				},
				F4: VSet_VString{
					"":               struct{}{},
					"defghijklmnopΔ": struct{}{},
				},
				F5: VSet_Float32{
					-2.0348338e+08: struct{}{},
					6.0928154e+08:  struct{}{},
					6.7638803e+08:  struct{}{},
				},
				F6: VMap_VByte_VByte{
					230: 22,
				},
				F8: VStructDepth1_All{
					F0: VArray2_TypeObject{
						vdl.AnyType,
						vdl.AnyType,
					},
					F4:  "defghijklmnopΔΘΠΣΦ",
					F5:  vdl.AnyType,
					F6:  1,
					F7:  253,
					F8:  VEnumAbcC,
					F9:  VEnumBcdC,
					F11: verror.FromWire(vdl.WireError{}),
					F12: 30128,
					F15: 1643230504,
					F16: 3960792174684445623,
					F19: 53,
					F20: -5781,
					F21: 3419,
					F22: -518276703,
					F23: 29573900,
					F24: -1598525314883032858,
					F25: 2311230435801133446,
					F26: 1.6671425e+09,
					F27: -3.510242e+08,
					F28: -1.9023779138032928e+09,
					F29: 1.5338860629222472e+09,
				},
				F9: VStructDepth1_Rand1{
					F0: VSet_VArray3_Bool{
						{}: struct{}{},
					},
					F7:  69,
					F9:  VEnumBcdC,
					F26: -6.3386605e+08,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F9{},
				F13: &VStructDepth1_Rand0{
					F4:  "jklmnopΔΘΠΣΦ",
					F15: 3766227341,
					F21: 11468,
				},
			},
		},
		SourceLabel: "[]any{VStructDepth2_All{F0: {VArray1_Byte(\"\\x00\"), []VUint64{}, nil}, F1: {\"jklmnopΔΘΠΣΦ\"}, F2: {false, true, false}, F3: {792247926, 690852989}, F4: {\"\", \"defghijklmnopΔ\"}, F5: {-2.0348338e+08, 6.0928154e+08, 6.7638803e+08}, F6: {230: 22}, F8: {F0: VArray2_TypeObject{}, F4: \"defghijklmnopΔΘΠΣΦ\", F6: 1, F7: 253, F8: C, F9: C, F11: {}, F12: 30128, F15: 1643230504, F16: 3960792174684445623, F19: 53, F20: -5781, F21: 3419, F22: -518276703, F23: 29573900, F24: -1598525314883032858, F25: 2311230435801133446, F26: 1.6671425e+09, F27: -3.510242e+08, F28: -1.9023779138032928e+09, F29: 1.5338860629222472e+09}, F9: {F0: VSet_VArray3_Bool{{}}, F7: 69, F9: C, F26: -6.3386605e+08}, F11: {F9: B}, F13: {F4: \"jklmnopΔΘΠΣΦ\", F15: 3766227341, F21: 11468}}}",
		Source: []interface{}{
			VStructDepth2_All{
				F0: VArray3_Any{
					VArray1_Byte{},
					[]VUint64(nil),
					nil,
				},
				F1: VArray1_String{
					"jklmnopΔΘΠΣΦ",
				},
				F2: VList_VBool{
					false,
					true,
					false,
				},
				F3: VList_VInt32{
					792247926,
					690852989,
				},
				F4: VSet_VString{
					"":               struct{}{},
					"defghijklmnopΔ": struct{}{},
				},
				F5: VSet_Float32{
					-2.0348338e+08: struct{}{},
					6.0928154e+08:  struct{}{},
					6.7638803e+08:  struct{}{},
				},
				F6: VMap_VByte_VByte{
					230: 22,
				},
				F8: VStructDepth1_All{
					F0: VArray2_TypeObject{
						vdl.AnyType,
						vdl.AnyType,
					},
					F4:  "defghijklmnopΔΘΠΣΦ",
					F5:  vdl.AnyType,
					F6:  1,
					F7:  253,
					F8:  VEnumAbcC,
					F9:  VEnumBcdC,
					F11: verror.FromWire(vdl.WireError{}),
					F12: 30128,
					F15: 1643230504,
					F16: 3960792174684445623,
					F19: 53,
					F20: -5781,
					F21: 3419,
					F22: -518276703,
					F23: 29573900,
					F24: -1598525314883032858,
					F25: 2311230435801133446,
					F26: 1.6671425e+09,
					F27: -3.510242e+08,
					F28: -1.9023779138032928e+09,
					F29: 1.5338860629222472e+09,
				},
				F9: VStructDepth1_Rand1{
					F0: VSet_VArray3_Bool{
						{}: struct{}{},
					},
					F7:  69,
					F9:  VEnumBcdC,
					F26: -6.3386605e+08,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F9{},
				F13: &VStructDepth1_Rand0{
					F4:  "jklmnopΔΘΠΣΦ",
					F15: 3766227341,
					F21: 11468,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_VUnionDepth2_All{}",
		Target:      VList_VUnionDepth2_All(nil),
		SourceLabel: "VList_VUnionDepth2_All{}",
		Source:      VList_VUnionDepth2_All(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VUnionDepth2_All{}",
		Target:      VList_VUnionDepth2_All(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_VUnionDepth2_All{}",
		Target:      VList_VUnionDepth2_All(nil),
		SourceLabel: "[]VUnionDepth2_Rand0{}",
		Source:      []VUnionDepth2_Rand0(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_VUnionDepth2_All{{F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}}",
		Target: VList_VUnionDepth2_All{
			VUnionDepth2_AllF13{&VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			}},
		},
		SourceLabel: "VList_VUnionDepth2_All{{F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}}",
		Source: VList_VUnionDepth2_All{
			VUnionDepth2_AllF13{&VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			}},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_VUnionDepth2_All{{F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}}",
		Target: VList_VUnionDepth2_All{
			VUnionDepth2_AllF13{&VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			}},
		},
		SourceLabel: "VList_Any{VUnionDepth2_All{F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}}",
		Source: VList_Any{
			VUnionDepth2_All(VUnionDepth2_AllF13{&VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VUnionDepth2_All{{F12: {}}, {F6: {}}, {F4: {4439292284580909895}}}",
		Target: VList_VUnionDepth2_All{
			VUnionDepth2_AllF12{&VStructDepth1_Rand0{}},
			VUnionDepth2_AllF6{},
			VUnionDepth2_AllF4{map[int64]struct{}{
				4439292284580909895: struct{}{},
			}},
		},
		SourceLabel: "VList_VUnionDepth2_All{{F12: {}}, {F6: {}}, {F4: {4439292284580909895}}}",
		Source: VList_VUnionDepth2_All{
			VUnionDepth2_AllF12{&VStructDepth1_Rand0{}},
			VUnionDepth2_AllF6{},
			VUnionDepth2_AllF4{map[int64]struct{}{
				4439292284580909895: struct{}{},
			}},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VUnionDepth2_All{{F12: {}}, {F6: {}}, {F4: {4439292284580909895}}}",
		Target: VList_VUnionDepth2_All{
			VUnionDepth2_AllF12{&VStructDepth1_Rand0{}},
			VUnionDepth2_AllF6{},
			VUnionDepth2_AllF4{map[int64]struct{}{
				4439292284580909895: struct{}{},
			}},
		},
		SourceLabel: "[]any{VUnionDepth2_All{F12: {}}, VUnionDepth2_All{F6: {}}, VUnionDepth2_All{F4: {4439292284580909895}}}",
		Source: []interface{}{
			VUnionDepth2_All(VUnionDepth2_AllF12{&VStructDepth1_Rand0{}}),
			VUnionDepth2_All(VUnionDepth2_AllF6{}),
			VUnionDepth2_All(VUnionDepth2_AllF4{map[int64]struct{}{
				4439292284580909895: struct{}{},
			}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_VUnionDepth2_All{{F12: {F4: \"nopΔΘΠΣΦ王\", F21: 11723}}, {F11: {F8: A}}, {F9: {F4: \"bcdefgh\", F15: 717546421}}}",
		Target: VList_VUnionDepth2_All{
			VUnionDepth2_AllF12{&VStructDepth1_Rand0{
				F4:  "nopΔΘΠΣΦ王",
				F21: 11723,
			}},
			VUnionDepth2_AllF11{VUnionDepth1_Rand0F8{}},
			VUnionDepth2_AllF9{VStructDepth1_Rand0{
				F4:  "bcdefgh",
				F15: 717546421,
			}},
		},
		SourceLabel: "VList_VUnionDepth2_All{{F12: {F4: \"nopΔΘΠΣΦ王\", F21: 11723}}, {F11: {F8: A}}, {F9: {F4: \"bcdefgh\", F15: 717546421}}}",
		Source: VList_VUnionDepth2_All{
			VUnionDepth2_AllF12{&VStructDepth1_Rand0{
				F4:  "nopΔΘΠΣΦ王",
				F21: 11723,
			}},
			VUnionDepth2_AllF11{VUnionDepth1_Rand0F8{}},
			VUnionDepth2_AllF9{VStructDepth1_Rand0{
				F4:  "bcdefgh",
				F15: 717546421,
			}},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_VUnionDepth2_All{{F12: {F4: \"nopΔΘΠΣΦ王\", F21: 11723}}, {F11: {F8: A}}, {F9: {F4: \"bcdefgh\", F15: 717546421}}}",
		Target: VList_VUnionDepth2_All{
			VUnionDepth2_AllF12{&VStructDepth1_Rand0{
				F4:  "nopΔΘΠΣΦ王",
				F21: 11723,
			}},
			VUnionDepth2_AllF11{VUnionDepth1_Rand0F8{}},
			VUnionDepth2_AllF9{VStructDepth1_Rand0{
				F4:  "bcdefgh",
				F15: 717546421,
			}},
		},
		SourceLabel: "[]any{VUnionDepth2_All{F12: {F4: \"nopΔΘΠΣΦ王\", F21: 11723}}, VUnionDepth2_All{F11: {F8: A}}, VUnionDepth2_All{F9: {F4: \"bcdefgh\", F15: 717546421}}}",
		Source: []interface{}{
			VUnionDepth2_All(VUnionDepth2_AllF12{&VStructDepth1_Rand0{
				F4:  "nopΔΘΠΣΦ王",
				F21: 11723,
			}}),
			VUnionDepth2_All(VUnionDepth2_AllF11{VUnionDepth1_Rand0F8{}}),
			VUnionDepth2_All(VUnionDepth2_AllF9{VStructDepth1_Rand0{
				F4:  "bcdefgh",
				F15: 717546421,
			}}),
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VList_OptVStructDepth2_Rand0{}",
		Target:      VList_OptVStructDepth2_Rand0(nil),
		SourceLabel: "VList_OptVStructDepth2_Rand0{}",
		Source:      VList_OptVStructDepth2_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_OptVStructDepth2_Rand0{}",
		Target:      VList_OptVStructDepth2_Rand0(nil),
		SourceLabel: "[]VStructEmpty{}",
		Source:      []VStructEmpty(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VList_OptVStructDepth2_Rand0{}",
		Target:      VList_OptVStructDepth2_Rand0(nil),
		SourceLabel: "[]any{}",
		Source:      []interface{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VList_OptVStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VList_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "VList_OptVStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: VList_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VList_OptVStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VList_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "[]?VStructDepth2_Rand0{{F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: []*VStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_OptVStructDepth2_Rand0{{F0: {VList_VStructDepth1_All{{F0: VSet_Int64{-142983328942982573, 0}, F1: true, F2: true, F3: \"mnopΔ\", F4: \"defghijkl\", F6: 129, F7: 195, F8: B, F11: {Id: \"bcdefghijklmno\", Msg: \"opΔΘΠΣΦ王普\"}, F12: 58791, F13: 25457, F14: 2961929109, F15: 3120902661, F16: 1046591979970691293, F17: 6035619393906677852, F18: 44, F19: -35, F20: 13229, F21: -9922, F22: 110044048, F23: -274670656, F24: -569093003380207757, F25: 1123194318418397082, F26: -2.3901263e+09, F27: 8.364022e+08, F28: 2.7867172951107295e+06, F29: -1.6993258794887742e+08, F30: {}}}, typeobject(any), VMap_VEnumAbc_VEnumAbc{B: A, C: C}}, F9: {F0: []VUnionDepth1_All{{F16: 16089353212084617993}, {F27: -5.3364102e+08}, {F16: 12603105066678282968}}, F7: 6, F26: -4.3563632e+08}, F10: {F12: 52300}, F11: {F8: A}}, {}}",
		Target: VList_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VList_VStructDepth1_All{
						{
							F0: VSet_Int64{
								-142983328942982573: struct{}{},
								0:                   struct{}{},
							},
							F1: true,
							F2: true,
							F3: "mnopΔ",
							F4: "defghijkl",
							F5: vdl.AnyType,
							F6: 129,
							F7: 195,
							F8: VEnumAbcB,
							F11: verror.FromWire(vdl.WireError{
								Id:  "bcdefghijklmno",
								Msg: "opΔΘΠΣΦ王普",
							}),
							F12: 58791,
							F13: 25457,
							F14: 2961929109,
							F15: 3120902661,
							F16: 1046591979970691293,
							F17: 6035619393906677852,
							F18: 44,
							F19: -35,
							F20: 13229,
							F21: -9922,
							F22: 110044048,
							F23: -274670656,
							F24: -569093003380207757,
							F25: 1123194318418397082,
							F26: -2.3901263e+09,
							F27: 8.364022e+08,
							F28: 2.7867172951107295e+06,
							F29: -1.6993258794887742e+08,
							F30: &VStructEmpty{},
						},
					},
					vdl.AnyType,
					VMap_VEnumAbc_VEnumAbc{
						VEnumAbcB: VEnumAbcA,
						VEnumAbcC: VEnumAbcC,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: []VUnionDepth1_All{
						VUnionDepth1_AllF16{16089353212084617993},
						VUnionDepth1_AllF27{-5.3364102e+08},
						VUnionDepth1_AllF16{12603105066678282968},
					},
					F7:  6,
					F26: -4.3563632e+08,
				},
				F10: VUnionDepth1_Rand0F12{52300},
				F11: VUnionDepth1_Rand1F8{},
			},
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VList_OptVStructDepth2_Rand0{{F0: {VList_VStructDepth1_All{{F0: VSet_Int64{-142983328942982573, 0}, F1: true, F2: true, F3: \"mnopΔ\", F4: \"defghijkl\", F6: 129, F7: 195, F8: B, F11: {Id: \"bcdefghijklmno\", Msg: \"opΔΘΠΣΦ王普\"}, F12: 58791, F13: 25457, F14: 2961929109, F15: 3120902661, F16: 1046591979970691293, F17: 6035619393906677852, F18: 44, F19: -35, F20: 13229, F21: -9922, F22: 110044048, F23: -274670656, F24: -569093003380207757, F25: 1123194318418397082, F26: -2.3901263e+09, F27: 8.364022e+08, F28: 2.7867172951107295e+06, F29: -1.6993258794887742e+08, F30: {}}}, typeobject(any), VMap_VEnumAbc_VEnumAbc{B: A, C: C}}, F9: {F0: []VUnionDepth1_All{{F16: 16089353212084617993}, {F27: -5.3364102e+08}, {F16: 12603105066678282968}}, F7: 6, F26: -4.3563632e+08}, F10: {F12: 52300}, F11: {F8: A}}, {}}",
		Source: VList_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VList_VStructDepth1_All{
						{
							F0: VSet_Int64{
								-142983328942982573: struct{}{},
								0:                   struct{}{},
							},
							F1: true,
							F2: true,
							F3: "mnopΔ",
							F4: "defghijkl",
							F5: vdl.AnyType,
							F6: 129,
							F7: 195,
							F8: VEnumAbcB,
							F11: verror.FromWire(vdl.WireError{
								Id:  "bcdefghijklmno",
								Msg: "opΔΘΠΣΦ王普",
							}),
							F12: 58791,
							F13: 25457,
							F14: 2961929109,
							F15: 3120902661,
							F16: 1046591979970691293,
							F17: 6035619393906677852,
							F18: 44,
							F19: -35,
							F20: 13229,
							F21: -9922,
							F22: 110044048,
							F23: -274670656,
							F24: -569093003380207757,
							F25: 1123194318418397082,
							F26: -2.3901263e+09,
							F27: 8.364022e+08,
							F28: 2.7867172951107295e+06,
							F29: -1.6993258794887742e+08,
							F30: &VStructEmpty{},
						},
					},
					vdl.AnyType,
					VMap_VEnumAbc_VEnumAbc{
						VEnumAbcB: VEnumAbcA,
						VEnumAbcC: VEnumAbcC,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: []VUnionDepth1_All{
						VUnionDepth1_AllF16{16089353212084617993},
						VUnionDepth1_AllF27{-5.3364102e+08},
						VUnionDepth1_AllF16{12603105066678282968},
					},
					F7:  6,
					F26: -4.3563632e+08,
				},
				F10: VUnionDepth1_Rand0F12{52300},
				F11: VUnionDepth1_Rand1F8{},
			},
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_OptVStructDepth2_Rand0{{F0: {VList_VStructDepth1_All{{F0: VSet_Int64{-142983328942982573, 0}, F1: true, F2: true, F3: \"mnopΔ\", F4: \"defghijkl\", F6: 129, F7: 195, F8: B, F11: {Id: \"bcdefghijklmno\", Msg: \"opΔΘΠΣΦ王普\"}, F12: 58791, F13: 25457, F14: 2961929109, F15: 3120902661, F16: 1046591979970691293, F17: 6035619393906677852, F18: 44, F19: -35, F20: 13229, F21: -9922, F22: 110044048, F23: -274670656, F24: -569093003380207757, F25: 1123194318418397082, F26: -2.3901263e+09, F27: 8.364022e+08, F28: 2.7867172951107295e+06, F29: -1.6993258794887742e+08, F30: {}}}, typeobject(any), VMap_VEnumAbc_VEnumAbc{B: A, C: C}}, F9: {F0: []VUnionDepth1_All{{F16: 16089353212084617993}, {F27: -5.3364102e+08}, {F16: 12603105066678282968}}, F7: 6, F26: -4.3563632e+08}, F10: {F12: 52300}, F11: {F8: A}}, {}}",
		Target: VList_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VList_VStructDepth1_All{
						{
							F0: VSet_Int64{
								-142983328942982573: struct{}{},
								0:                   struct{}{},
							},
							F1: true,
							F2: true,
							F3: "mnopΔ",
							F4: "defghijkl",
							F5: vdl.AnyType,
							F6: 129,
							F7: 195,
							F8: VEnumAbcB,
							F11: verror.FromWire(vdl.WireError{
								Id:  "bcdefghijklmno",
								Msg: "opΔΘΠΣΦ王普",
							}),
							F12: 58791,
							F13: 25457,
							F14: 2961929109,
							F15: 3120902661,
							F16: 1046591979970691293,
							F17: 6035619393906677852,
							F18: 44,
							F19: -35,
							F20: 13229,
							F21: -9922,
							F22: 110044048,
							F23: -274670656,
							F24: -569093003380207757,
							F25: 1123194318418397082,
							F26: -2.3901263e+09,
							F27: 8.364022e+08,
							F28: 2.7867172951107295e+06,
							F29: -1.6993258794887742e+08,
							F30: &VStructEmpty{},
						},
					},
					vdl.AnyType,
					VMap_VEnumAbc_VEnumAbc{
						VEnumAbcB: VEnumAbcA,
						VEnumAbcC: VEnumAbcC,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: []VUnionDepth1_All{
						VUnionDepth1_AllF16{16089353212084617993},
						VUnionDepth1_AllF27{-5.3364102e+08},
						VUnionDepth1_AllF16{12603105066678282968},
					},
					F7:  6,
					F26: -4.3563632e+08,
				},
				F10: VUnionDepth1_Rand0F12{52300},
				F11: VUnionDepth1_Rand1F8{},
			},
			{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "[]any{?VStructDepth2_Rand0{F0: {VList_VStructDepth1_All{{F0: VSet_Int64{-142983328942982573, 0}, F1: true, F2: true, F3: \"mnopΔ\", F4: \"defghijkl\", F6: 129, F7: 195, F8: B, F11: {Id: \"bcdefghijklmno\", Msg: \"opΔΘΠΣΦ王普\"}, F12: 58791, F13: 25457, F14: 2961929109, F15: 3120902661, F16: 1046591979970691293, F17: 6035619393906677852, F18: 44, F19: -35, F20: 13229, F21: -9922, F22: 110044048, F23: -274670656, F24: -569093003380207757, F25: 1123194318418397082, F26: -2.3901263e+09, F27: 8.364022e+08, F28: 2.7867172951107295e+06, F29: -1.6993258794887742e+08, F30: {}}}, typeobject(any), VMap_VEnumAbc_VEnumAbc{B: A, C: C}}, F9: {F0: []VUnionDepth1_All{{F16: 16089353212084617993}, {F27: -5.3364102e+08}, {F16: 12603105066678282968}}, F7: 6, F26: -4.3563632e+08}, F10: {F12: 52300}, F11: {F8: A}}, ?VStructDepth2_Rand0{}}",
		Source: []interface{}{
			&VStructDepth2_Rand0{
				F0: VArray3_Any{
					VList_VStructDepth1_All{
						{
							F0: VSet_Int64{
								-142983328942982573: struct{}{},
								0:                   struct{}{},
							},
							F1: true,
							F2: true,
							F3: "mnopΔ",
							F4: "defghijkl",
							F5: vdl.AnyType,
							F6: 129,
							F7: 195,
							F8: VEnumAbcB,
							F11: verror.FromWire(vdl.WireError{
								Id:  "bcdefghijklmno",
								Msg: "opΔΘΠΣΦ王普",
							}),
							F12: 58791,
							F13: 25457,
							F14: 2961929109,
							F15: 3120902661,
							F16: 1046591979970691293,
							F17: 6035619393906677852,
							F18: 44,
							F19: -35,
							F20: 13229,
							F21: -9922,
							F22: 110044048,
							F23: -274670656,
							F24: -569093003380207757,
							F25: 1123194318418397082,
							F26: -2.3901263e+09,
							F27: 8.364022e+08,
							F28: 2.7867172951107295e+06,
							F29: -1.6993258794887742e+08,
							F30: &VStructEmpty{},
						},
					},
					vdl.AnyType,
					VMap_VEnumAbc_VEnumAbc{
						VEnumAbcB: VEnumAbcA,
						VEnumAbcC: VEnumAbcC,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: []VUnionDepth1_All{
						VUnionDepth1_AllF16{16089353212084617993},
						VUnionDepth1_AllF27{-5.3364102e+08},
						VUnionDepth1_AllF16{12603105066678282968},
					},
					F7:  6,
					F26: -4.3563632e+08,
				},
				F10: VUnionDepth1_Rand0F12{52300},
				F11: VUnionDepth1_Rand1F8{},
			},
			&VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VList_OptVStructDepth2_Rand0{{F0: {VArray3_VString{\"普\", \"ghijklmnopΔΘΠΣ\", \"\"}, nil, VSet_VBool{false, true}}, F10: {F16: 17060164968669376726}, F11: {F11: {RetryCode: RetryRefetch, Msg: \"b\"}}}, {F0: {VArray3_VList_Any{}, map[VStructEmpty]VStructEmpty{{}: {}}, nil}, F9: {F7: 64, F9: C, F26: -2.9383488e+09}, F10: {F28: 8.978821982111119e+08}, F11: {F11: {Id: \"nopΔΘΠΣΦ王\", RetryCode: RetryRefetch, Msg: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\"}}}}",
		Target: VList_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray3_VString{
						"普",
						"ghijklmnopΔΘΠΣ",
						"",
					},
					nil,
					VSet_VBool{
						false: struct{}{},
						true:  struct{}{},
					},
				},
				F10: VUnionDepth1_Rand0F16{17060164968669376726},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "b",
				})},
			},
			{
				F0: VArray3_Any{
					VArray3_VList_Any{},
					map[VStructEmpty]VStructEmpty{
						{}: {},
					},
					nil,
				},
				F9: VStructDepth1_Rand1{
					F7:  64,
					F9:  VEnumBcdC,
					F26: -2.9383488e+09,
				},
				F10: VUnionDepth1_Rand0F28{8.978821982111119e+08},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					Id:        "nopΔΘΠΣΦ王",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "bcdefghijklmnopΔΘΠΣΦ王普澤世",
				})},
			},
		},
		SourceLabel: "VList_OptVStructDepth2_Rand0{{F0: {VArray3_VString{\"普\", \"ghijklmnopΔΘΠΣ\", \"\"}, nil, VSet_VBool{false, true}}, F10: {F16: 17060164968669376726}, F11: {F11: {RetryCode: RetryRefetch, Msg: \"b\"}}}, {F0: {VArray3_VList_Any{}, map[VStructEmpty]VStructEmpty{{}: {}}, nil}, F9: {F7: 64, F9: C, F26: -2.9383488e+09}, F10: {F28: 8.978821982111119e+08}, F11: {F11: {Id: \"nopΔΘΠΣΦ王\", RetryCode: RetryRefetch, Msg: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\"}}}}",
		Source: VList_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray3_VString{
						"普",
						"ghijklmnopΔΘΠΣ",
						"",
					},
					nil,
					VSet_VBool{
						false: struct{}{},
						true:  struct{}{},
					},
				},
				F10: VUnionDepth1_Rand0F16{17060164968669376726},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "b",
				})},
			},
			{
				F0: VArray3_Any{
					VArray3_VList_Any{},
					map[VStructEmpty]VStructEmpty{
						{}: {},
					},
					nil,
				},
				F9: VStructDepth1_Rand1{
					F7:  64,
					F9:  VEnumBcdC,
					F26: -2.9383488e+09,
				},
				F10: VUnionDepth1_Rand0F28{8.978821982111119e+08},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					Id:        "nopΔΘΠΣΦ王",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "bcdefghijklmnopΔΘΠΣΦ王普澤世",
				})},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VList_OptVStructDepth2_Rand0{{F0: {VArray3_VString{\"普\", \"ghijklmnopΔΘΠΣ\", \"\"}, nil, VSet_VBool{false, true}}, F10: {F16: 17060164968669376726}, F11: {F11: {RetryCode: RetryRefetch, Msg: \"b\"}}}, {F0: {VArray3_VList_Any{}, map[VStructEmpty]VStructEmpty{{}: {}}, nil}, F9: {F7: 64, F9: C, F26: -2.9383488e+09}, F10: {F28: 8.978821982111119e+08}, F11: {F11: {Id: \"nopΔΘΠΣΦ王\", RetryCode: RetryRefetch, Msg: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\"}}}}",
		Target: VList_OptVStructDepth2_Rand0{
			{
				F0: VArray3_Any{
					VArray3_VString{
						"普",
						"ghijklmnopΔΘΠΣ",
						"",
					},
					nil,
					VSet_VBool{
						false: struct{}{},
						true:  struct{}{},
					},
				},
				F10: VUnionDepth1_Rand0F16{17060164968669376726},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "b",
				})},
			},
			{
				F0: VArray3_Any{
					VArray3_VList_Any{},
					map[VStructEmpty]VStructEmpty{
						{}: {},
					},
					nil,
				},
				F9: VStructDepth1_Rand1{
					F7:  64,
					F9:  VEnumBcdC,
					F26: -2.9383488e+09,
				},
				F10: VUnionDepth1_Rand0F28{8.978821982111119e+08},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					Id:        "nopΔΘΠΣΦ王",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "bcdefghijklmnopΔΘΠΣΦ王普澤世",
				})},
			},
		},
		SourceLabel: "[]any{?VStructDepth2_Rand0{F0: {VArray3_VString{\"普\", \"ghijklmnopΔΘΠΣ\", \"\"}, nil, VSet_VBool{false, true}}, F10: {F16: 17060164968669376726}, F11: {F11: {RetryCode: RetryRefetch, Msg: \"b\"}}}, ?VStructDepth2_Rand0{F0: {VArray3_VList_Any{}, map[VStructEmpty]VStructEmpty{{}: {}}, nil}, F9: {F7: 64, F9: C, F26: -2.9383488e+09}, F10: {F28: 8.978821982111119e+08}, F11: {F11: {Id: \"nopΔΘΠΣΦ王\", RetryCode: RetryRefetch, Msg: \"bcdefghijklmnopΔΘΠΣΦ王普澤世\"}}}}",
		Source: []interface{}{
			&VStructDepth2_Rand0{
				F0: VArray3_Any{
					VArray3_VString{
						"普",
						"ghijklmnopΔΘΠΣ",
						"",
					},
					nil,
					VSet_VBool{
						false: struct{}{},
						true:  struct{}{},
					},
				},
				F10: VUnionDepth1_Rand0F16{17060164968669376726},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "b",
				})},
			},
			&VStructDepth2_Rand0{
				F0: VArray3_Any{
					VArray3_VList_Any{},
					map[VStructEmpty]VStructEmpty{
						{}: {},
					},
					nil,
				},
				F9: VStructDepth1_Rand1{
					F7:  64,
					F9:  VEnumBcdC,
					F26: -2.9383488e+09,
				},
				F10: VUnionDepth1_Rand0F28{8.978821982111119e+08},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{
					Id:        "nopΔΘΠΣΦ王",
					RetryCode: vdl.WireRetryCodeRetryRefetch,
					Msg:       "bcdefghijklmnopΔΘΠΣΦ王普澤世",
				})},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "set[VArray1_VStructDepth1_Rand0]{}",
		Target:      map[VArray1_VStructDepth1_Rand0]struct{}(nil),
		SourceLabel: "set[VArray1_VStructDepth1_Rand0]{}",
		Source:      map[VArray1_VStructDepth1_Rand0]struct{}(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "set[VArray1_VStructDepth1_Rand0]{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: map[VArray1_VStructDepth1_Rand0]struct{}{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			}: struct{}{},
		},
		SourceLabel: "set[VArray1_VStructDepth1_Rand0]{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: map[VArray1_VStructDepth1_Rand0]struct{}{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VArray1_VStructDepth1_Rand0]{{{F15: 201739660, F21: -2684}}, {{F4: \"fgh\", F15: 3831572259, F21: -215}}, {{F4: \"nopΔΘΠ\", F15: 677481460, F21: 9744}}}",
		Target: map[VArray1_VStructDepth1_Rand0]struct{}{
			{
				{
					F15: 201739660,
					F21: -2684,
				},
			}: struct{}{},
			{
				{
					F4:  "fgh",
					F15: 3831572259,
					F21: -215,
				},
			}: struct{}{},
			{
				{
					F4:  "nopΔΘΠ",
					F15: 677481460,
					F21: 9744,
				},
			}: struct{}{},
		},
		SourceLabel: "set[VArray1_VStructDepth1_Rand0]{{{F15: 201739660, F21: -2684}}, {{F4: \"fgh\", F15: 3831572259, F21: -215}}, {{F4: \"nopΔΘΠ\", F15: 677481460, F21: 9744}}}",
		Source: map[VArray1_VStructDepth1_Rand0]struct{}{
			{
				{
					F15: 201739660,
					F21: -2684,
				},
			}: struct{}{},
			{
				{
					F4:  "fgh",
					F15: 3831572259,
					F21: -215,
				},
			}: struct{}{},
			{
				{
					F4:  "nopΔΘΠ",
					F15: 677481460,
					F21: 9744,
				},
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "set[VArray1_VStructDepth1_Rand0]{{{F4: \"bcdefghijklm\", F15: 2513327673, F21: 4560}}}",
		Target: map[VArray1_VStructDepth1_Rand0]struct{}{
			{
				{
					F4:  "bcdefghijklm",
					F15: 2513327673,
					F21: 4560,
				},
			}: struct{}{},
		},
		SourceLabel: "set[VArray1_VStructDepth1_Rand0]{{{F4: \"bcdefghijklm\", F15: 2513327673, F21: 4560}}}",
		Source: map[VArray1_VStructDepth1_Rand0]struct{}{
			{
				{
					F4:  "bcdefghijklm",
					F15: 2513327673,
					F21: 4560,
				},
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VSet_VArray1_VArray3_Bool{}",
		Target:      VSet_VArray1_VArray3_Bool(nil),
		SourceLabel: "VSet_VArray1_VArray3_Bool{}",
		Source:      VSet_VArray1_VArray3_Bool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VSet_VArray1_VArray3_Bool{{{true, true, true}}}",
		Target: VSet_VArray1_VArray3_Bool{
			{
				{
					true,
					true,
					true,
				},
			}: struct{}{},
		},
		SourceLabel: "VSet_VArray1_VArray3_Bool{{{true, true, true}}}",
		Source: VSet_VArray1_VArray3_Bool{
			{
				{
					true,
					true,
					true,
				},
			}: struct{}{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "map[VArray1_VArray3_Bool]VArray1_VArray3_Bool{}",
		Target:      map[VArray1_VArray3_Bool]VArray1_VArray3_Bool(nil),
		SourceLabel: "map[VArray1_VArray3_Bool]VArray1_VArray3_Bool{}",
		Source:      map[VArray1_VArray3_Bool]VArray1_VArray3_Bool(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "map[VArray1_VArray3_Bool]VArray1_VArray3_Bool{{{true, true, true}}: {{true, true, true}}}",
		Target: map[VArray1_VArray3_Bool]VArray1_VArray3_Bool{
			{
				{
					true,
					true,
					true,
				},
			}: {
				{
					true,
					true,
					true,
				},
			},
		},
		SourceLabel: "map[VArray1_VArray3_Bool]VArray1_VArray3_Bool{{{true, true, true}}: {{true, true, true}}}",
		Source: map[VArray1_VArray3_Bool]VArray1_VArray3_Bool{
			{
				{
					true,
					true,
					true,
				},
			}: {
				{
					true,
					true,
					true,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{}",
		Target:      VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0(nil),
		SourceLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{}",
		Source:      VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{}",
		Target:      VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0(nil),
		SourceLabel: "map[VArray1_VStructEmpty]VArray1_VStructEmpty{}",
		Source:      map[VArray1_VStructEmpty]VArray1_VStructEmpty(nil),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			}: {
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
		SourceLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{{{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{
			{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			}: {
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{{}: {}}",
		Target: VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{
			{}: {},
		},
		SourceLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{{}: {}}",
		Source: VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{
			{}: {},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{{}: {}}",
		Target: VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{
			{}: {},
		},
		SourceLabel: "map[VArray1_VStructEmpty]VArray1_VStructEmpty{{}: {}}",
		Source: map[VArray1_VStructEmpty]VArray1_VStructEmpty{
			{}: {},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{{}: {{F4: \"hijklmnopΔΘΠΣΦ王普\", F15: 2714959790}}}",
		Target: VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{
			{}: {
				{
					F4:  "hijklmnopΔΘΠΣΦ王普",
					F15: 2714959790,
				},
			},
		},
		SourceLabel: "VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{{}: {{F4: \"hijklmnopΔΘΠΣΦ王普\", F15: 2714959790}}}",
		Source: VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0{
			{}: {
				{
					F4:  "hijklmnopΔΘΠΣΦ王普",
					F15: 2714959790,
				},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructDepth3_All{}",
		Target: VStructDepth3_All{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
		SourceLabel: "VStructDepth3_All{}",
		Source: VStructDepth3_All{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth3_All{}",
		Target: VStructDepth3_All{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
		SourceLabel: "VStructDepth3_Rand1{}",
		Source: VStructDepth3_Rand1{
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth3_All{}",
		Target: VStructDepth3_All{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
		SourceLabel: "?VStructEmpty{}",
		Source:      &VStructEmpty{},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VStructDepth3_All{F0: {{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}, F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F2: {{123}}, F3: {{true}}, F4: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F6: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, F9: {F7: {D: D}}, F10: {F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}, F11: {F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F12: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VStructDepth3_All{
			F0: VArray3_Map_String_String{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
			},
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F2: []VSet_Byte{
				{
					123: struct{}{},
				},
			},
			F3: VList_List_VBool{
				{
					true,
				},
			},
			F4: VSet_VStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F6: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			F9: VStructDepth2_Rand1{
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdD: VEnumBcdD,
				},
			},
			F10: VUnionDepth2_AllF13{&VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			}},
			F11: VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}},
			F12: &VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "VStructDepth3_All{F0: {{\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}, {\"abcdefghijklmnopΔΘΠΣΦ王普澤世界\": \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\"}}, F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F2: {{123}}, F3: {{true}}, F4: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F6: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}, F9: {F7: {D: D}}, F10: {F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}, F11: {F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F12: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: VStructDepth3_All{
			F0: VArray3_Map_String_String{
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
				{
					"abcdefghijklmnopΔΘΠΣΦ王普澤世界": "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				},
			},
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F2: []VSet_Byte{
				{
					123: struct{}{},
				},
			},
			F3: VList_List_VBool{
				{
					true,
				},
			},
			F4: VSet_VStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: struct{}{},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F6: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				}: {
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
			F9: VStructDepth2_Rand1{
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdD: VEnumBcdD,
				},
			},
			F10: VUnionDepth2_AllF13{&VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			}},
			F11: VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}},
			F12: &VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth3_All{F1: {{F21: 5963}}, F2: {{63}, {13, 173}}, F5: {{F16: 0}}, F6: {{F4: \"jklmnopΔΘΠ\", F15: 2001074335, F21: -11055}: {}, {F4: \"pΔΘΠ\", F15: 2601421373, F21: 4881}: {}}, F7: {{F28: 0}: {F28: -1.2233529086968143e+08}}, F8: {F9: {F0: []VUint64{}, F7: 209, F26: 1.1579731e+09}, F11: {F9: C}}, F9: {F7: {C: C, D: B}}, F11: {F2: {0, -1.5822282835641083e+08}}, F12: {F0: {[]typeobject{typeobject(error), typeobject(any), typeobject(VUnionDepth2_Rand0)}, nil, VMap_VByte_VByte{0: 27, 130: 217, 37: 0}}, F9: {F0: map[VStructEmpty]VStructEmpty{{}: {}}, F7: 223, F9: C}, F10: {F10: {}}, F11: {F11: {}}}}",
		Target: VStructDepth3_All{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F21: 5963,
				},
			},
			F2: []VSet_Byte{
				{
					63: struct{}{},
				},
				{
					13:  struct{}{},
					173: struct{}{},
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F16{}: struct{}{},
			},
			F6: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{
					F4:  "jklmnopΔΘΠ",
					F15: 2001074335,
					F21: -11055,
				}: {},
				{
					F4:  "pΔΘΠ",
					F15: 2601421373,
					F21: 4881,
				}: {},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{}: VUnionDepth1_Rand0F28{-1.2233529086968143e+08},
			},
			F8: VStructDepth2_Rand0{
				F9: VStructDepth1_Rand1{
					F0:  []VUint64(nil),
					F7:  209,
					F26: 1.1579731e+09,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F9{VEnumBcdC},
			},
			F9: VStructDepth2_Rand1{
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdC: VEnumBcdC,
					VEnumBcdD: VEnumBcdB,
				},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{[]float64{
				0,
				-1.5822282835641083e+08,
			}},
			F12: &VStructDepth2_Rand0{
				F0: VArray3_Any{
					[]*vdl.Type{
						vdl.ErrorType,
						vdl.AnyType,
						vdl.TypeOf((*VUnionDepth2_Rand0)(nil)),
					},
					nil,
					VMap_VByte_VByte{
						0:   27,
						130: 217,
						37:  0,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: map[VStructEmpty]VStructEmpty{
						{}: {},
					},
					F7: 223,
					F9: VEnumBcdC,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
			},
		},
		SourceLabel: "VStructDepth3_All{F1: {{F21: 5963}}, F2: {{63}, {13, 173}}, F5: {{F16: 0}}, F6: {{F4: \"jklmnopΔΘΠ\", F15: 2001074335, F21: -11055}: {}, {F4: \"pΔΘΠ\", F15: 2601421373, F21: 4881}: {}}, F7: {{F28: 0}: {F28: -1.2233529086968143e+08}}, F8: {F9: {F0: []VUint64{}, F7: 209, F26: 1.1579731e+09}, F11: {F9: C}}, F9: {F7: {C: C, D: B}}, F11: {F2: {0, -1.5822282835641083e+08}}, F12: {F0: {[]typeobject{typeobject(error), typeobject(any), typeobject(VUnionDepth2_Rand0)}, nil, VMap_VByte_VByte{0: 27, 130: 217, 37: 0}}, F9: {F0: map[VStructEmpty]VStructEmpty{{}: {}}, F7: 223, F9: C}, F10: {F10: {}}, F11: {F11: {}}}}",
		Source: VStructDepth3_All{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F21: 5963,
				},
			},
			F2: []VSet_Byte{
				{
					63: struct{}{},
				},
				{
					13:  struct{}{},
					173: struct{}{},
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F16{}: struct{}{},
			},
			F6: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{
					F4:  "jklmnopΔΘΠ",
					F15: 2001074335,
					F21: -11055,
				}: {},
				{
					F4:  "pΔΘΠ",
					F15: 2601421373,
					F21: 4881,
				}: {},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{}: VUnionDepth1_Rand0F28{-1.2233529086968143e+08},
			},
			F8: VStructDepth2_Rand0{
				F9: VStructDepth1_Rand1{
					F0:  []VUint64(nil),
					F7:  209,
					F26: 1.1579731e+09,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F9{VEnumBcdC},
			},
			F9: VStructDepth2_Rand1{
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdC: VEnumBcdC,
					VEnumBcdD: VEnumBcdB,
				},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{[]float64{
				0,
				-1.5822282835641083e+08,
			}},
			F12: &VStructDepth2_Rand0{
				F0: VArray3_Any{
					[]*vdl.Type{
						vdl.ErrorType,
						vdl.AnyType,
						vdl.TypeOf((*VUnionDepth2_Rand0)(nil)),
					},
					nil,
					VMap_VByte_VByte{
						0:   27,
						130: 217,
						37:  0,
					},
				},
				F9: VStructDepth1_Rand1{
					F0: map[VStructEmpty]VStructEmpty{
						{}: {},
					},
					F7: 223,
					F9: VEnumBcdC,
				},
				F10: VUnionDepth1_Rand0F10{},
				F11: VUnionDepth1_Rand1F11{verror.FromWire(vdl.WireError{})},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth3_All{F0: {{}, {\"cd\": \"\", \"j\": \"defg\"}, {\"\": \"ΔΘΠΣΦ\", \"cdefghijklmnopΔ\": \"ijklmnopΔΘΠΣ\"}}, F2: {{93}}, F4: {{F15: 996076780, F21: 9201}, {F4: \"abcdefg\", F15: 2297805629}, {F4: \"jklmnopΔΘΠΣΦ王普澤世\", F15: 2011160469, F21: -16009}}, F5: {{F8: A}}, F6: {{}: {F4: \"pΔΘΠΣ\", F15: 1844006525, F21: 4507}, {F4: \"ijklmnopΔ\"}: {F4: \"efghijklmnopΔΘΠΣΦ王普\", F15: 306107405, F21: 9563}}, F8: {F9: {F1: true, F7: 97, F26: 3.0552422e+09}, F11: {F20: -2954}}, F9: {F7: {B: B}}, F11: {F12: {F4: \"cde\", F15: 2264977470, F21: -1931}}}",
		Target: VStructDepth3_All{
			F0: VArray3_Map_String_String{
				nil,
				{
					"cd": "",
					"j":  "defg",
				},
				{
					"":                "ΔΘΠΣΦ",
					"cdefghijklmnopΔ": "ijklmnopΔΘΠΣ",
				},
			},
			F2: []VSet_Byte{
				{
					93: struct{}{},
				},
			},
			F4: VSet_VStructDepth1_Rand0{
				{
					F15: 996076780,
					F21: 9201,
				}: struct{}{},
				{
					F4:  "abcdefg",
					F15: 2297805629,
				}: struct{}{},
				{
					F4:  "jklmnopΔΘΠΣΦ王普澤世",
					F15: 2011160469,
					F21: -16009,
				}: struct{}{},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F8{}: struct{}{},
			},
			F6: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{}: {
					F4:  "pΔΘΠΣ",
					F15: 1844006525,
					F21: 4507,
				},
				{
					F4: "ijklmnopΔ",
				}: {
					F4:  "efghijklmnopΔΘΠΣΦ王普",
					F15: 306107405,
					F21: 9563,
				},
			},
			F8: VStructDepth2_Rand0{
				F9: VStructDepth1_Rand1{
					F1:  true,
					F7:  97,
					F26: 3.0552422e+09,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F20{-2954},
			},
			F9: VStructDepth2_Rand1{
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
				},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "cde",
				F15: 2264977470,
				F21: -1931,
			}},
		},
		SourceLabel: "VStructDepth3_All{F0: {{}, {\"cd\": \"\", \"j\": \"defg\"}, {\"\": \"ΔΘΠΣΦ\", \"cdefghijklmnopΔ\": \"ijklmnopΔΘΠΣ\"}}, F2: {{93}}, F4: {{F15: 996076780, F21: 9201}, {F4: \"abcdefg\", F15: 2297805629}, {F4: \"jklmnopΔΘΠΣΦ王普澤世\", F15: 2011160469, F21: -16009}}, F5: {{F8: A}}, F6: {{}: {F4: \"pΔΘΠΣ\", F15: 1844006525, F21: 4507}, {F4: \"ijklmnopΔ\"}: {F4: \"efghijklmnopΔΘΠΣΦ王普\", F15: 306107405, F21: 9563}}, F8: {F9: {F1: true, F7: 97, F26: 3.0552422e+09}, F11: {F20: -2954}}, F9: {F7: {B: B}}, F11: {F12: {F4: \"cde\", F15: 2264977470, F21: -1931}}}",
		Source: VStructDepth3_All{
			F0: VArray3_Map_String_String{
				nil,
				{
					"cd": "",
					"j":  "defg",
				},
				{
					"":                "ΔΘΠΣΦ",
					"cdefghijklmnopΔ": "ijklmnopΔΘΠΣ",
				},
			},
			F2: []VSet_Byte{
				{
					93: struct{}{},
				},
			},
			F4: VSet_VStructDepth1_Rand0{
				{
					F15: 996076780,
					F21: 9201,
				}: struct{}{},
				{
					F4:  "abcdefg",
					F15: 2297805629,
				}: struct{}{},
				{
					F4:  "jklmnopΔΘΠΣΦ王普澤世",
					F15: 2011160469,
					F21: -16009,
				}: struct{}{},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F8{}: struct{}{},
			},
			F6: map[VStructDepth1_Rand0]VStructDepth1_Rand0{
				{}: {
					F4:  "pΔΘΠΣ",
					F15: 1844006525,
					F21: 4507,
				},
				{
					F4: "ijklmnopΔ",
				}: {
					F4:  "efghijklmnopΔΘΠΣΦ王普",
					F15: 306107405,
					F21: 9563,
				},
			},
			F8: VStructDepth2_Rand0{
				F9: VStructDepth1_Rand1{
					F1:  true,
					F7:  97,
					F26: 3.0552422e+09,
				},
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F20{-2954},
			},
			F9: VStructDepth2_Rand1{
				F7: VMap_VEnumBcd_VEnumBcd{
					VEnumBcdB: VEnumBcdB,
				},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "cde",
				F15: 2264977470,
				F21: -1931,
			}},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructDepth3_Rand0{}",
		Target: VStructDepth3_Rand0{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VStructDepth3_Rand0{}",
		Source: VStructDepth3_Rand0{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth3_Rand0{}",
		Target: VStructDepth3_Rand0{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VStructDepth3_Rand1{}",
		Source: VStructDepth3_Rand1{
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth3_Rand0{}",
		Target: VStructDepth3_Rand0{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VStructDepth3_All{}",
		Source: VStructDepth3_All{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VStructDepth3_Rand0{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "VStructDepth3_Rand0{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VStructDepth3_Rand0{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "?VStructDepth3_Rand0{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: &VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth3_Rand0{F1: {{F4: \"pΔΘΠΣΦ王\", F15: 1596499299, F21: -2886}}, F5: {{F12: 15506}, {F12: 43858}}, F7: {{F10: {}}: {F8: A}, {F8: C}: {F16: 14166404087419230011}}, F8: {F0: {VFloat32(-2.5832847e+09), ?VStructDepth2_Rand0{F0: {set[VString]{}, VFloat64(-2.8717764090969205e+09), VArray2_VEnumBcd{}}, F9: {F0: VArray2_VEnumBcd{}, F9: D, F26: 1.7650328e+09}, F10: {F16: 8245883299685252923}}, nil}, F9: {F0: VMap_VInt16_VInt16{-2672: 4980}, F1: true, F9: C, F26: -9.091379e+07}, F10: {F8: B}, F11: {F9: B}}}",
		Target: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "pΔΘΠΣΦ王",
					F15: 1596499299,
					F21: -2886,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F12{15506}: struct{}{},
				VUnionDepth1_Rand0F12{43858}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}:         VUnionDepth1_Rand0F8{},
				VUnionDepth1_Rand0F8{VEnumAbcC}: VUnionDepth1_Rand0F16{14166404087419230011},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					VFloat32(-2.5832847e+09),
					&VStructDepth2_Rand0{
						F0: VArray3_Any{
							map[VString]struct{}(nil),
							VFloat64(-2.8717764090969205e+09),
							VArray2_VEnumBcd{},
						},
						F9: VStructDepth1_Rand1{
							F0:  VArray2_VEnumBcd{},
							F9:  VEnumBcdD,
							F26: 1.7650328e+09,
						},
						F10: VUnionDepth1_Rand0F16{8245883299685252923},
						F11: VUnionDepth1_Rand1F6{},
					},
					nil,
				},
				F9: VStructDepth1_Rand1{
					F0: VMap_VInt16_VInt16{
						-2672: 4980,
					},
					F1:  true,
					F9:  VEnumBcdC,
					F26: -9.091379e+07,
				},
				F10: VUnionDepth1_Rand0F8{VEnumAbcB},
				F11: VUnionDepth1_Rand1F9{},
			},
		},
		SourceLabel: "VStructDepth3_Rand0{F1: {{F4: \"pΔΘΠΣΦ王\", F15: 1596499299, F21: -2886}}, F5: {{F12: 15506}, {F12: 43858}}, F7: {{F10: {}}: {F8: A}, {F8: C}: {F16: 14166404087419230011}}, F8: {F0: {VFloat32(-2.5832847e+09), ?VStructDepth2_Rand0{F0: {set[VString]{}, VFloat64(-2.8717764090969205e+09), VArray2_VEnumBcd{}}, F9: {F0: VArray2_VEnumBcd{}, F9: D, F26: 1.7650328e+09}, F10: {F16: 8245883299685252923}}, nil}, F9: {F0: VMap_VInt16_VInt16{-2672: 4980}, F1: true, F9: C, F26: -9.091379e+07}, F10: {F8: B}, F11: {F9: B}}}",
		Source: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "pΔΘΠΣΦ王",
					F15: 1596499299,
					F21: -2886,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F12{15506}: struct{}{},
				VUnionDepth1_Rand0F12{43858}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}:         VUnionDepth1_Rand0F8{},
				VUnionDepth1_Rand0F8{VEnumAbcC}: VUnionDepth1_Rand0F16{14166404087419230011},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					VFloat32(-2.5832847e+09),
					&VStructDepth2_Rand0{
						F0: VArray3_Any{
							map[VString]struct{}(nil),
							VFloat64(-2.8717764090969205e+09),
							VArray2_VEnumBcd{},
						},
						F9: VStructDepth1_Rand1{
							F0:  VArray2_VEnumBcd{},
							F9:  VEnumBcdD,
							F26: 1.7650328e+09,
						},
						F10: VUnionDepth1_Rand0F16{8245883299685252923},
						F11: VUnionDepth1_Rand1F6{},
					},
					nil,
				},
				F9: VStructDepth1_Rand1{
					F0: VMap_VInt16_VInt16{
						-2672: 4980,
					},
					F1:  true,
					F9:  VEnumBcdC,
					F26: -9.091379e+07,
				},
				F10: VUnionDepth1_Rand0F8{VEnumAbcB},
				F11: VUnionDepth1_Rand1F9{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth3_Rand0{F1: {{F4: \"pΔΘΠΣΦ王\", F15: 1596499299, F21: -2886}}, F5: {{F12: 15506}, {F12: 43858}}, F7: {{F10: {}}: {F8: A}, {F8: C}: {F16: 14166404087419230011}}, F8: {F0: {VFloat32(-2.5832847e+09), ?VStructDepth2_Rand0{F0: {set[VString]{}, VFloat64(-2.8717764090969205e+09), VArray2_VEnumBcd{}}, F9: {F0: VArray2_VEnumBcd{}, F9: D, F26: 1.7650328e+09}, F10: {F16: 8245883299685252923}}, nil}, F9: {F0: VMap_VInt16_VInt16{-2672: 4980}, F1: true, F9: C, F26: -9.091379e+07}, F10: {F8: B}, F11: {F9: B}}}",
		Target: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "pΔΘΠΣΦ王",
					F15: 1596499299,
					F21: -2886,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F12{15506}: struct{}{},
				VUnionDepth1_Rand0F12{43858}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}:         VUnionDepth1_Rand0F8{},
				VUnionDepth1_Rand0F8{VEnumAbcC}: VUnionDepth1_Rand0F16{14166404087419230011},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					VFloat32(-2.5832847e+09),
					&VStructDepth2_Rand0{
						F0: VArray3_Any{
							map[VString]struct{}(nil),
							VFloat64(-2.8717764090969205e+09),
							VArray2_VEnumBcd{},
						},
						F9: VStructDepth1_Rand1{
							F0:  VArray2_VEnumBcd{},
							F9:  VEnumBcdD,
							F26: 1.7650328e+09,
						},
						F10: VUnionDepth1_Rand0F16{8245883299685252923},
						F11: VUnionDepth1_Rand1F6{},
					},
					nil,
				},
				F9: VStructDepth1_Rand1{
					F0: VMap_VInt16_VInt16{
						-2672: 4980,
					},
					F1:  true,
					F9:  VEnumBcdC,
					F26: -9.091379e+07,
				},
				F10: VUnionDepth1_Rand0F8{VEnumAbcB},
				F11: VUnionDepth1_Rand1F9{},
			},
		},
		SourceLabel: "VStructDepth3_All{F1: {{F4: \"pΔΘΠΣΦ王\", F15: 1596499299, F21: -2886}}, F5: {{F12: 15506}, {F12: 43858}}, F7: {{F10: {}}: {F8: A}, {F8: C}: {F16: 14166404087419230011}}, F8: {F0: {VFloat32(-2.5832847e+09), ?VStructDepth2_Rand0{F0: {set[VString]{}, VFloat64(-2.8717764090969205e+09), VArray2_VEnumBcd{}}, F9: {F0: VArray2_VEnumBcd{}, F9: D, F26: 1.7650328e+09}, F10: {F16: 8245883299685252923}}, nil}, F9: {F0: VMap_VInt16_VInt16{-2672: 4980}, F1: true, F9: C, F26: -9.091379e+07}, F10: {F8: B}, F11: {F9: B}}}",
		Source: VStructDepth3_All{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "pΔΘΠΣΦ王",
					F15: 1596499299,
					F21: -2886,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F12{15506}: struct{}{},
				VUnionDepth1_Rand0F12{43858}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}:         VUnionDepth1_Rand0F8{},
				VUnionDepth1_Rand0F8{VEnumAbcC}: VUnionDepth1_Rand0F16{14166404087419230011},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					VFloat32(-2.5832847e+09),
					&VStructDepth2_Rand0{
						F0: VArray3_Any{
							map[VString]struct{}(nil),
							VFloat64(-2.8717764090969205e+09),
							VArray2_VEnumBcd{},
						},
						F9: VStructDepth1_Rand1{
							F0:  VArray2_VEnumBcd{},
							F9:  VEnumBcdD,
							F26: 1.7650328e+09,
						},
						F10: VUnionDepth1_Rand0F16{8245883299685252923},
						F11: VUnionDepth1_Rand1F6{},
					},
					nil,
				},
				F9: VStructDepth1_Rand1{
					F0: VMap_VInt16_VInt16{
						-2672: 4980,
					},
					F1:  true,
					F9:  VEnumBcdC,
					F26: -9.091379e+07,
				},
				F10: VUnionDepth1_Rand0F8{VEnumAbcB},
				F11: VUnionDepth1_Rand1F9{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth3_Rand0{F1: {{F4: \"ΔΘΠΣΦ王普澤\", F15: 1262551243, F21: 1442}}, F5: {{F28: -2.915714154858796e+08}}, F8: {F0: {VStructDepth3_Rand0{F1: {{F4: \"h\", F15: 1305941959}}, F5: {{F28: -2.542972875244285e+08}, {F8: A}}, F7: {{F28: -2.641581944689649e+07}: {F8: A}, {F8: A}: {F10: {}}, {F8: B}: {F10: {}}}, F8: {F9: {F0: VFloat32(1.7031676e+09), F7: 129, F9: D, F26: -5.4684474e+08}, F11: {F8: C}}}, VString(\"p\"), nil}, F9: {F0: VArray2_VEnumBcd{}, F26: 1.0073211e+09}, F10: {F28: 4.8206917024954736e+08}}}",
		Target: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ΔΘΠΣΦ王普澤",
					F15: 1262551243,
					F21: 1442,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{-2.915714154858796e+08}: struct{}{},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					VStructDepth3_Rand0{
						F1: VArray1_OptVStructDepth1_Rand0{
							{
								F4:  "h",
								F15: 1305941959,
							},
						},
						F5: VSet_VUnionDepth1_Rand0{
							VUnionDepth1_Rand0F28{-2.542972875244285e+08}: struct{}{},
							VUnionDepth1_Rand0F8{}:                        struct{}{},
						},
						F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
							VUnionDepth1_Rand0F28{-2.641581944689649e+07}: VUnionDepth1_Rand0F8{},
							VUnionDepth1_Rand0F8{}:                        VUnionDepth1_Rand0F10{},
							VUnionDepth1_Rand0F8{VEnumAbcB}:               VUnionDepth1_Rand0F10{},
						},
						F8: VStructDepth2_Rand0{
							F9: VStructDepth1_Rand1{
								F0:  VFloat32(1.7031676e+09),
								F7:  129,
								F9:  VEnumBcdD,
								F26: -5.4684474e+08,
							},
							F10: VUnionDepth1_Rand0F8{},
							F11: VUnionDepth1_Rand1F8{VEnumAbcC},
						},
					},
					VString("p"),
					nil,
				},
				F9: VStructDepth1_Rand1{
					F0:  VArray2_VEnumBcd{},
					F26: 1.0073211e+09,
				},
				F10: VUnionDepth1_Rand0F28{4.8206917024954736e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VStructDepth3_Rand0{F1: {{F4: \"ΔΘΠΣΦ王普澤\", F15: 1262551243, F21: 1442}}, F5: {{F28: -2.915714154858796e+08}}, F8: {F0: {VStructDepth3_Rand0{F1: {{F4: \"h\", F15: 1305941959}}, F5: {{F28: -2.542972875244285e+08}, {F8: A}}, F7: {{F28: -2.641581944689649e+07}: {F8: A}, {F8: A}: {F10: {}}, {F8: B}: {F10: {}}}, F8: {F9: {F0: VFloat32(1.7031676e+09), F7: 129, F9: D, F26: -5.4684474e+08}, F11: {F8: C}}}, VString(\"p\"), nil}, F9: {F0: VArray2_VEnumBcd{}, F26: 1.0073211e+09}, F10: {F28: 4.8206917024954736e+08}}}",
		Source: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ΔΘΠΣΦ王普澤",
					F15: 1262551243,
					F21: 1442,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{-2.915714154858796e+08}: struct{}{},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					VStructDepth3_Rand0{
						F1: VArray1_OptVStructDepth1_Rand0{
							{
								F4:  "h",
								F15: 1305941959,
							},
						},
						F5: VSet_VUnionDepth1_Rand0{
							VUnionDepth1_Rand0F28{-2.542972875244285e+08}: struct{}{},
							VUnionDepth1_Rand0F8{}:                        struct{}{},
						},
						F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
							VUnionDepth1_Rand0F28{-2.641581944689649e+07}: VUnionDepth1_Rand0F8{},
							VUnionDepth1_Rand0F8{}:                        VUnionDepth1_Rand0F10{},
							VUnionDepth1_Rand0F8{VEnumAbcB}:               VUnionDepth1_Rand0F10{},
						},
						F8: VStructDepth2_Rand0{
							F9: VStructDepth1_Rand1{
								F0:  VFloat32(1.7031676e+09),
								F7:  129,
								F9:  VEnumBcdD,
								F26: -5.4684474e+08,
							},
							F10: VUnionDepth1_Rand0F8{},
							F11: VUnionDepth1_Rand1F8{VEnumAbcC},
						},
					},
					VString("p"),
					nil,
				},
				F9: VStructDepth1_Rand1{
					F0:  VArray2_VEnumBcd{},
					F26: 1.0073211e+09,
				},
				F10: VUnionDepth1_Rand0F28{4.8206917024954736e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth3_Rand0{F1: {{F4: \"ΔΘΠΣΦ王普澤\", F15: 1262551243, F21: 1442}}, F5: {{F28: -2.915714154858796e+08}}, F8: {F0: {VStructDepth3_Rand0{F1: {{F4: \"h\", F15: 1305941959}}, F5: {{F28: -2.542972875244285e+08}, {F8: A}}, F7: {{F28: -2.641581944689649e+07}: {F8: A}, {F8: A}: {F10: {}}, {F8: B}: {F10: {}}}, F8: {F9: {F0: VFloat32(1.7031676e+09), F7: 129, F9: D, F26: -5.4684474e+08}, F11: {F8: C}}}, VString(\"p\"), nil}, F9: {F0: VArray2_VEnumBcd{}, F26: 1.0073211e+09}, F10: {F28: 4.8206917024954736e+08}}}",
		Target: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ΔΘΠΣΦ王普澤",
					F15: 1262551243,
					F21: 1442,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{-2.915714154858796e+08}: struct{}{},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					VStructDepth3_Rand0{
						F1: VArray1_OptVStructDepth1_Rand0{
							{
								F4:  "h",
								F15: 1305941959,
							},
						},
						F5: VSet_VUnionDepth1_Rand0{
							VUnionDepth1_Rand0F28{-2.542972875244285e+08}: struct{}{},
							VUnionDepth1_Rand0F8{}:                        struct{}{},
						},
						F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
							VUnionDepth1_Rand0F28{-2.641581944689649e+07}: VUnionDepth1_Rand0F8{},
							VUnionDepth1_Rand0F8{}:                        VUnionDepth1_Rand0F10{},
							VUnionDepth1_Rand0F8{VEnumAbcB}:               VUnionDepth1_Rand0F10{},
						},
						F8: VStructDepth2_Rand0{
							F9: VStructDepth1_Rand1{
								F0:  VFloat32(1.7031676e+09),
								F7:  129,
								F9:  VEnumBcdD,
								F26: -5.4684474e+08,
							},
							F10: VUnionDepth1_Rand0F8{},
							F11: VUnionDepth1_Rand1F8{VEnumAbcC},
						},
					},
					VString("p"),
					nil,
				},
				F9: VStructDepth1_Rand1{
					F0:  VArray2_VEnumBcd{},
					F26: 1.0073211e+09,
				},
				F10: VUnionDepth1_Rand0F28{4.8206917024954736e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VStructDepth3_All{F1: {{F4: \"ΔΘΠΣΦ王普澤\", F15: 1262551243, F21: 1442}}, F5: {{F28: -2.915714154858796e+08}}, F8: {F0: {VStructDepth3_Rand0{F1: {{F4: \"h\", F15: 1305941959}}, F5: {{F28: -2.542972875244285e+08}, {F8: A}}, F7: {{F28: -2.641581944689649e+07}: {F8: A}, {F8: A}: {F10: {}}, {F8: B}: {F10: {}}}, F8: {F9: {F0: VFloat32(1.7031676e+09), F7: 129, F9: D, F26: -5.4684474e+08}, F11: {F8: C}}}, VString(\"p\"), nil}, F9: {F0: VArray2_VEnumBcd{}, F26: 1.0073211e+09}, F10: {F28: 4.8206917024954736e+08}}}",
		Source: VStructDepth3_All{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ΔΘΠΣΦ王普澤",
					F15: 1262551243,
					F21: 1442,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{-2.915714154858796e+08}: struct{}{},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					VStructDepth3_Rand0{
						F1: VArray1_OptVStructDepth1_Rand0{
							{
								F4:  "h",
								F15: 1305941959,
							},
						},
						F5: VSet_VUnionDepth1_Rand0{
							VUnionDepth1_Rand0F28{-2.542972875244285e+08}: struct{}{},
							VUnionDepth1_Rand0F8{}:                        struct{}{},
						},
						F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
							VUnionDepth1_Rand0F28{-2.641581944689649e+07}: VUnionDepth1_Rand0F8{},
							VUnionDepth1_Rand0F8{}:                        VUnionDepth1_Rand0F10{},
							VUnionDepth1_Rand0F8{VEnumAbcB}:               VUnionDepth1_Rand0F10{},
						},
						F8: VStructDepth2_Rand0{
							F9: VStructDepth1_Rand1{
								F0:  VFloat32(1.7031676e+09),
								F7:  129,
								F9:  VEnumBcdD,
								F26: -5.4684474e+08,
							},
							F10: VUnionDepth1_Rand0F8{},
							F11: VUnionDepth1_Rand1F8{VEnumAbcC},
						},
					},
					VString("p"),
					nil,
				},
				F9: VStructDepth1_Rand1{
					F0:  VArray2_VEnumBcd{},
					F26: 1.0073211e+09,
				},
				F10: VUnionDepth1_Rand0F28{4.8206917024954736e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VStructDepth3_Rand1{}",
		Target: VStructDepth3_Rand1{
			F11: VUnionDepth2_Rand0F2{},
		},
		SourceLabel: "VStructDepth3_Rand1{}",
		Source: VStructDepth3_Rand1{
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth3_Rand1{}",
		Target: VStructDepth3_Rand1{
			F11: VUnionDepth2_Rand0F2{},
		},
		SourceLabel: "VStructDepth3_All{}",
		Source: VStructDepth3_All{
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		Label:       "Zero",
		TargetLabel: "VStructDepth3_Rand1{}",
		Target: VStructDepth3_Rand1{
			F11: VUnionDepth2_Rand0F2{},
		},
		SourceLabel: "?VStructEmpty{}",
		Source:      &VStructEmpty{},
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VStructDepth3_Rand1{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F2: {{123}}, F11: {F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VStructDepth3_Rand1{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F2: []VSet_Byte{
				{
					123: struct{}{},
				},
			},
			F11: VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}},
		},
		SourceLabel: "VStructDepth3_Rand1{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F2: {{123}}, F11: {F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VStructDepth3_Rand1{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F2: []VSet_Byte{
				{
					123: struct{}{},
				},
			},
			F11: VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "VStructDepth3_Rand1{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F2: {{123}}, F11: {F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Target: VStructDepth3_Rand1{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F2: []VSet_Byte{
				{
					123: struct{}{},
				},
			},
			F11: VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}},
		},
		SourceLabel: "VStructDepth3_All{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F2: {{123}}, F11: {F12: {F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}}",
		Source: VStructDepth3_All{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F2: []VSet_Byte{
				{
					123: struct{}{},
				},
			},
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F12{&VStructDepth1_Rand0{
				F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
				F15: 123,
				F21: -123,
			}},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth3_Rand1{F1: {{}}, F2: {{0, 164, 209}}, F11: {F2: {-3.533790996615131e+09}}}",
		Target: VStructDepth3_Rand1{
			F1: VArray1_OptVStructDepth1_Rand0{
				{},
			},
			F2: []VSet_Byte{
				{
					0:   struct{}{},
					164: struct{}{},
					209: struct{}{},
				},
			},
			F11: VUnionDepth2_Rand0F2{[]float64{
				-3.533790996615131e+09,
			}},
		},
		SourceLabel: "VStructDepth3_Rand1{F1: {{}}, F2: {{0, 164, 209}}, F11: {F2: {-3.533790996615131e+09}}}",
		Source: VStructDepth3_Rand1{
			F1: VArray1_OptVStructDepth1_Rand0{
				{},
			},
			F2: []VSet_Byte{
				{
					0:   struct{}{},
					164: struct{}{},
					209: struct{}{},
				},
			},
			F11: VUnionDepth2_Rand0F2{[]float64{
				-3.533790996615131e+09,
			}},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth3_Rand1{F1: {{}}, F2: {{0, 164, 209}}, F11: {F2: {-3.533790996615131e+09}}}",
		Target: VStructDepth3_Rand1{
			F1: VArray1_OptVStructDepth1_Rand0{
				{},
			},
			F2: []VSet_Byte{
				{
					0:   struct{}{},
					164: struct{}{},
					209: struct{}{},
				},
			},
			F11: VUnionDepth2_Rand0F2{[]float64{
				-3.533790996615131e+09,
			}},
		},
		SourceLabel: "VStructDepth3_All{F1: {{}}, F2: {{0, 164, 209}}, F11: {F2: {-3.533790996615131e+09}}}",
		Source: VStructDepth3_All{
			F1: VArray1_OptVStructDepth1_Rand0{
				{},
			},
			F2: []VSet_Byte{
				{
					0:   struct{}{},
					164: struct{}{},
					209: struct{}{},
				},
			},
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{[]float64{
				-3.533790996615131e+09,
			}},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VStructDepth3_Rand1{F1: {{F4: \"ghij\", F15: 80996295, F21: -5309}}, F2: {{0, 20, 251}, {0, 149}}, F11: {F8: {F0: VList_VStructDepth1_All{{}, {F0: set[VInt16]{0}, F1: true, F2: true, F3: \"c\", F5: typeobject(map[VStructEmpty]VStructEmpty), F6: 138, F7: 163, F9: D, F11: {}, F13: 30937, F14: 4155677196, F15: 3955525049, F16: 13679873392269893151, F17: 170251795262137316, F18: 58, F19: 31, F21: -8650, F23: 644771894, F24: -1523315482545761606, F25: 1896955378938196776, F27: -4.857471e+08, F28: -1.1037972867594013e+09, F29: 7.619924770321474e+08, F30: {}}}, F1: true, F3: \"f\", F7: 164, F9: D, F11: {RetryCode: RetryConnection, Msg: \"澤世\"}, F12: 45934, F13: 8064, F14: 3005475201, F15: 3425237137, F16: 8121153969766534976, F18: -50, F19: 41, F20: -12830, F21: 13483, F22: -849006944, F23: 77576641, F25: -4578627630527119507, F26: -3.2894675e+08, F27: -1.7948606e+08, F28: -1.2780311895176792e+09, F29: -1.5072935547036042e+09, F30: {}}}}",
		Target: VStructDepth3_Rand1{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ghij",
					F15: 80996295,
					F21: -5309,
				},
			},
			F2: []VSet_Byte{
				{
					0:   struct{}{},
					20:  struct{}{},
					251: struct{}{},
				},
				{
					0:   struct{}{},
					149: struct{}{},
				},
			},
			F11: VUnionDepth2_Rand0F8{VStructDepth1_All{
				F0: VList_VStructDepth1_All{
					{
						F5: vdl.AnyType,
					},
					{
						F0: map[VInt16]struct{}{
							0: struct{}{},
						},
						F1:  true,
						F2:  true,
						F3:  "c",
						F5:  vdl.TypeOf((*map[VStructEmpty]VStructEmpty)(nil)),
						F6:  138,
						F7:  163,
						F9:  VEnumBcdD,
						F11: verror.FromWire(vdl.WireError{}),
						F13: 30937,
						F14: 4155677196,
						F15: 3955525049,
						F16: 13679873392269893151,
						F17: 170251795262137316,
						F18: 58,
						F19: 31,
						F21: -8650,
						F23: 644771894,
						F24: -1523315482545761606,
						F25: 1896955378938196776,
						F27: -4.857471e+08,
						F28: -1.1037972867594013e+09,
						F29: 7.619924770321474e+08,
						F30: &VStructEmpty{},
					},
				},
				F1: true,
				F3: "f",
				F5: vdl.AnyType,
				F7: 164,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryConnection,
					Msg:       "澤世",
				}),
				F12: 45934,
				F13: 8064,
				F14: 3005475201,
				F15: 3425237137,
				F16: 8121153969766534976,
				F18: -50,
				F19: 41,
				F20: -12830,
				F21: 13483,
				F22: -849006944,
				F23: 77576641,
				F25: -4578627630527119507,
				F26: -3.2894675e+08,
				F27: -1.7948606e+08,
				F28: -1.2780311895176792e+09,
				F29: -1.5072935547036042e+09,
				F30: &VStructEmpty{},
			}},
		},
		SourceLabel: "VStructDepth3_Rand1{F1: {{F4: \"ghij\", F15: 80996295, F21: -5309}}, F2: {{0, 20, 251}, {0, 149}}, F11: {F8: {F0: VList_VStructDepth1_All{{}, {F0: set[VInt16]{0}, F1: true, F2: true, F3: \"c\", F5: typeobject(map[VStructEmpty]VStructEmpty), F6: 138, F7: 163, F9: D, F11: {}, F13: 30937, F14: 4155677196, F15: 3955525049, F16: 13679873392269893151, F17: 170251795262137316, F18: 58, F19: 31, F21: -8650, F23: 644771894, F24: -1523315482545761606, F25: 1896955378938196776, F27: -4.857471e+08, F28: -1.1037972867594013e+09, F29: 7.619924770321474e+08, F30: {}}}, F1: true, F3: \"f\", F7: 164, F9: D, F11: {RetryCode: RetryConnection, Msg: \"澤世\"}, F12: 45934, F13: 8064, F14: 3005475201, F15: 3425237137, F16: 8121153969766534976, F18: -50, F19: 41, F20: -12830, F21: 13483, F22: -849006944, F23: 77576641, F25: -4578627630527119507, F26: -3.2894675e+08, F27: -1.7948606e+08, F28: -1.2780311895176792e+09, F29: -1.5072935547036042e+09, F30: {}}}}",
		Source: VStructDepth3_Rand1{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ghij",
					F15: 80996295,
					F21: -5309,
				},
			},
			F2: []VSet_Byte{
				{
					0:   struct{}{},
					20:  struct{}{},
					251: struct{}{},
				},
				{
					0:   struct{}{},
					149: struct{}{},
				},
			},
			F11: VUnionDepth2_Rand0F8{VStructDepth1_All{
				F0: VList_VStructDepth1_All{
					{
						F5: vdl.AnyType,
					},
					{
						F0: map[VInt16]struct{}{
							0: struct{}{},
						},
						F1:  true,
						F2:  true,
						F3:  "c",
						F5:  vdl.TypeOf((*map[VStructEmpty]VStructEmpty)(nil)),
						F6:  138,
						F7:  163,
						F9:  VEnumBcdD,
						F11: verror.FromWire(vdl.WireError{}),
						F13: 30937,
						F14: 4155677196,
						F15: 3955525049,
						F16: 13679873392269893151,
						F17: 170251795262137316,
						F18: 58,
						F19: 31,
						F21: -8650,
						F23: 644771894,
						F24: -1523315482545761606,
						F25: 1896955378938196776,
						F27: -4.857471e+08,
						F28: -1.1037972867594013e+09,
						F29: 7.619924770321474e+08,
						F30: &VStructEmpty{},
					},
				},
				F1: true,
				F3: "f",
				F5: vdl.AnyType,
				F7: 164,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryConnection,
					Msg:       "澤世",
				}),
				F12: 45934,
				F13: 8064,
				F14: 3005475201,
				F15: 3425237137,
				F16: 8121153969766534976,
				F18: -50,
				F19: 41,
				F20: -12830,
				F21: 13483,
				F22: -849006944,
				F23: 77576641,
				F25: -4578627630527119507,
				F26: -3.2894675e+08,
				F27: -1.7948606e+08,
				F28: -1.2780311895176792e+09,
				F29: -1.5072935547036042e+09,
				F30: &VStructEmpty{},
			}},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "VStructDepth3_Rand1{F1: {{F4: \"ghij\", F15: 80996295, F21: -5309}}, F2: {{0, 20, 251}, {0, 149}}, F11: {F8: {F0: VList_VStructDepth1_All{{}, {F0: set[VInt16]{0}, F1: true, F2: true, F3: \"c\", F5: typeobject(map[VStructEmpty]VStructEmpty), F6: 138, F7: 163, F9: D, F11: {}, F13: 30937, F14: 4155677196, F15: 3955525049, F16: 13679873392269893151, F17: 170251795262137316, F18: 58, F19: 31, F21: -8650, F23: 644771894, F24: -1523315482545761606, F25: 1896955378938196776, F27: -4.857471e+08, F28: -1.1037972867594013e+09, F29: 7.619924770321474e+08, F30: {}}}, F1: true, F3: \"f\", F7: 164, F9: D, F11: {RetryCode: RetryConnection, Msg: \"澤世\"}, F12: 45934, F13: 8064, F14: 3005475201, F15: 3425237137, F16: 8121153969766534976, F18: -50, F19: 41, F20: -12830, F21: 13483, F22: -849006944, F23: 77576641, F25: -4578627630527119507, F26: -3.2894675e+08, F27: -1.7948606e+08, F28: -1.2780311895176792e+09, F29: -1.5072935547036042e+09, F30: {}}}}",
		Target: VStructDepth3_Rand1{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ghij",
					F15: 80996295,
					F21: -5309,
				},
			},
			F2: []VSet_Byte{
				{
					0:   struct{}{},
					20:  struct{}{},
					251: struct{}{},
				},
				{
					0:   struct{}{},
					149: struct{}{},
				},
			},
			F11: VUnionDepth2_Rand0F8{VStructDepth1_All{
				F0: VList_VStructDepth1_All{
					{
						F5: vdl.AnyType,
					},
					{
						F0: map[VInt16]struct{}{
							0: struct{}{},
						},
						F1:  true,
						F2:  true,
						F3:  "c",
						F5:  vdl.TypeOf((*map[VStructEmpty]VStructEmpty)(nil)),
						F6:  138,
						F7:  163,
						F9:  VEnumBcdD,
						F11: verror.FromWire(vdl.WireError{}),
						F13: 30937,
						F14: 4155677196,
						F15: 3955525049,
						F16: 13679873392269893151,
						F17: 170251795262137316,
						F18: 58,
						F19: 31,
						F21: -8650,
						F23: 644771894,
						F24: -1523315482545761606,
						F25: 1896955378938196776,
						F27: -4.857471e+08,
						F28: -1.1037972867594013e+09,
						F29: 7.619924770321474e+08,
						F30: &VStructEmpty{},
					},
				},
				F1: true,
				F3: "f",
				F5: vdl.AnyType,
				F7: 164,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryConnection,
					Msg:       "澤世",
				}),
				F12: 45934,
				F13: 8064,
				F14: 3005475201,
				F15: 3425237137,
				F16: 8121153969766534976,
				F18: -50,
				F19: 41,
				F20: -12830,
				F21: 13483,
				F22: -849006944,
				F23: 77576641,
				F25: -4578627630527119507,
				F26: -3.2894675e+08,
				F27: -1.7948606e+08,
				F28: -1.2780311895176792e+09,
				F29: -1.5072935547036042e+09,
				F30: &VStructEmpty{},
			}},
		},
		SourceLabel: "VStructDepth3_All{F1: {{F4: \"ghij\", F15: 80996295, F21: -5309}}, F2: {{0, 20, 251}, {0, 149}}, F11: {F8: {F0: VList_VStructDepth1_All{{}, {F0: set[VInt16]{0}, F1: true, F2: true, F3: \"c\", F5: typeobject(map[VStructEmpty]VStructEmpty), F6: 138, F7: 163, F9: D, F11: {}, F13: 30937, F14: 4155677196, F15: 3955525049, F16: 13679873392269893151, F17: 170251795262137316, F18: 58, F19: 31, F21: -8650, F23: 644771894, F24: -1523315482545761606, F25: 1896955378938196776, F27: -4.857471e+08, F28: -1.1037972867594013e+09, F29: 7.619924770321474e+08, F30: {}}}, F1: true, F3: \"f\", F7: 164, F9: D, F11: {RetryCode: RetryConnection, Msg: \"澤世\"}, F12: 45934, F13: 8064, F14: 3005475201, F15: 3425237137, F16: 8121153969766534976, F18: -50, F19: 41, F20: -12830, F21: 13483, F22: -849006944, F23: 77576641, F25: -4578627630527119507, F26: -3.2894675e+08, F27: -1.7948606e+08, F28: -1.2780311895176792e+09, F29: -1.5072935547036042e+09, F30: {}}}}",
		Source: VStructDepth3_All{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "ghij",
					F15: 80996295,
					F21: -5309,
				},
			},
			F2: []VSet_Byte{
				{
					0:   struct{}{},
					20:  struct{}{},
					251: struct{}{},
				},
				{
					0:   struct{}{},
					149: struct{}{},
				},
			},
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F8{VStructDepth1_All{
				F0: VList_VStructDepth1_All{
					{
						F5: vdl.AnyType,
					},
					{
						F0: map[VInt16]struct{}{
							0: struct{}{},
						},
						F1:  true,
						F2:  true,
						F3:  "c",
						F5:  vdl.TypeOf((*map[VStructEmpty]VStructEmpty)(nil)),
						F6:  138,
						F7:  163,
						F9:  VEnumBcdD,
						F11: verror.FromWire(vdl.WireError{}),
						F13: 30937,
						F14: 4155677196,
						F15: 3955525049,
						F16: 13679873392269893151,
						F17: 170251795262137316,
						F18: 58,
						F19: 31,
						F21: -8650,
						F23: 644771894,
						F24: -1523315482545761606,
						F25: 1896955378938196776,
						F27: -4.857471e+08,
						F28: -1.1037972867594013e+09,
						F29: 7.619924770321474e+08,
						F30: &VStructEmpty{},
					},
				},
				F1: true,
				F3: "f",
				F5: vdl.AnyType,
				F7: 164,
				F9: VEnumBcdD,
				F11: verror.FromWire(vdl.WireError{
					RetryCode: vdl.WireRetryCodeRetryConnection,
					Msg:       "澤世",
				}),
				F12: 45934,
				F13: 8064,
				F14: 3005475201,
				F15: 3425237137,
				F16: 8121153969766534976,
				F18: -50,
				F19: 41,
				F20: -12830,
				F21: 13483,
				F22: -849006944,
				F23: 77576641,
				F25: -4578627630527119507,
				F26: -3.2894675e+08,
				F27: -1.7948606e+08,
				F28: -1.2780311895176792e+09,
				F29: -1.5072935547036042e+09,
				F30: &VStructEmpty{},
			}},
		},
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUnionDepth3_All{F0: {}}",
		Target:      VUnionDepth3_All(VUnionDepth3_AllF0{}),
		SourceLabel: "VUnionDepth3_All{F0: {}}",
		Source:      VUnionDepth3_All(VUnionDepth3_AllF0{}),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUnionDepth3_All{F12: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: VUnionDepth3_All(VUnionDepth3_AllF12{&VStructDepth2_Rand0{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		}}),
		SourceLabel: "VUnionDepth3_All{F12: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: VUnionDepth3_All(VUnionDepth3_AllF12{&VStructDepth2_Rand0{
			F0: VArray3_Any{
				int64(-123),
				int64(-123),
				int64(-123),
			},
			F9: VStructDepth1_Rand1{
				F0:  int64(-123),
				F1:  true,
				F7:  123,
				F9:  VEnumBcdD,
				F26: 1.23,
			},
			F10: VUnionDepth1_Rand0F28{1.23},
			F11: VUnionDepth1_Rand1F20{-123},
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth3_All{F10: {F3: {}}}",
		Target:      VUnionDepth3_All(VUnionDepth3_AllF10{VUnionDepth2_AllF3{}}),
		SourceLabel: "VUnionDepth3_All{F10: {F3: {}}}",
		Source:      VUnionDepth3_All(VUnionDepth3_AllF10{VUnionDepth2_AllF3{}}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth3_All{F10: {F3: {}}}",
		Target:      VUnionDepth3_All(VUnionDepth3_AllF10{VUnionDepth2_AllF3{}}),
		SourceLabel: "VUnionDepth3_Rand1{F10: {F3: {}}}",
		Source:      VUnionDepth3_Rand1(VUnionDepth3_Rand1F10{VUnionDepth2_AllF3{}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth3_All{F5: {}}",
		Target:      VUnionDepth3_All(VUnionDepth3_AllF5{}),
		SourceLabel: "VUnionDepth3_All{F5: {}}",
		Source:      VUnionDepth3_All(VUnionDepth3_AllF5{}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth3_All{F5: {}}",
		Target:      VUnionDepth3_All(VUnionDepth3_AllF5{}),
		SourceLabel: "VUnionDepth3_Rand1{F5: {}}",
		Source:      VUnionDepth3_Rand1(VUnionDepth3_Rand1F5{}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUnionDepth3_Rand0{F2: {}}",
		Target:      VUnionDepth3_Rand0(VUnionDepth3_Rand0F2{}),
		SourceLabel: "VUnionDepth3_Rand0{F2: {}}",
		Source:      VUnionDepth3_Rand0(VUnionDepth3_Rand0F2{}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth3_Rand0{F2: {}}",
		Target:      VUnionDepth3_Rand0(VUnionDepth3_Rand0F2{}),
		SourceLabel: "VUnionDepth3_All{F2: {}}",
		Source:      VUnionDepth3_All(VUnionDepth3_AllF2{}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth3_Rand0{F2: {}}",
		Target:      VUnionDepth3_Rand0(VUnionDepth3_Rand0F2{}),
		SourceLabel: "VUnionDepth3_Rand1{F2: {}}",
		Source:      VUnionDepth3_Rand1(VUnionDepth3_Rand1F2{}),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUnionDepth3_Rand0{F2: {{C}}}",
		Target: VUnionDepth3_Rand0(VUnionDepth3_Rand0F2{[][]VEnumAbc{
			{
				VEnumAbcC,
			},
		}}),
		SourceLabel: "VUnionDepth3_Rand0{F2: {{C}}}",
		Source: VUnionDepth3_Rand0(VUnionDepth3_Rand0F2{[][]VEnumAbc{
			{
				VEnumAbcC,
			},
		}}),
	},
	{
		Label:       "Full",
		TargetLabel: "VUnionDepth3_Rand0{F2: {{C}}}",
		Target: VUnionDepth3_Rand0(VUnionDepth3_Rand0F2{[][]VEnumAbc{
			{
				VEnumAbcC,
			},
		}}),
		SourceLabel: "VUnionDepth3_All{F2: {{C}}}",
		Source: VUnionDepth3_All(VUnionDepth3_AllF2{[][]VEnumAbc{
			{
				VEnumAbcC,
			},
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "VUnionDepth3_Rand1{F1: {}}",
		Target: VUnionDepth3_Rand1(VUnionDepth3_Rand1F1{VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
		}}),
		SourceLabel: "VUnionDepth3_Rand1{F1: {}}",
		Source: VUnionDepth3_Rand1(VUnionDepth3_Rand1F1{VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
		}}),
	},
	{
		Label:       "Zero",
		TargetLabel: "VUnionDepth3_Rand1{F1: {}}",
		Target: VUnionDepth3_Rand1(VUnionDepth3_Rand1F1{VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
		}}),
		SourceLabel: "VUnionDepth3_All{F1: {}}",
		Source: VUnionDepth3_All(VUnionDepth3_AllF1{VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
			VUnionDepth1_Rand1F6{},
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "VUnionDepth3_Rand1{F10: {F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}}",
		Target: VUnionDepth3_Rand1(VUnionDepth3_Rand1F10{VUnionDepth2_AllF13{&VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		}}}),
		SourceLabel: "VUnionDepth3_Rand1{F10: {F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}}",
		Source: VUnionDepth3_Rand1(VUnionDepth3_Rand1F10{VUnionDepth2_AllF13{&VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		}}}),
	},
	{
		Label:       "Full",
		TargetLabel: "VUnionDepth3_Rand1{F10: {F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}}",
		Target: VUnionDepth3_Rand1(VUnionDepth3_Rand1F10{VUnionDepth2_AllF13{&VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		}}}),
		SourceLabel: "VUnionDepth3_All{F10: {F13: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}}}",
		Source: VUnionDepth3_All(VUnionDepth3_AllF10{VUnionDepth2_AllF13{&VStructDepth1_Rand1{
			F0:  int64(-123),
			F1:  true,
			F7:  123,
			F9:  VEnumBcdD,
			F26: 1.23,
		}}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth3_Rand1{F1: {{F20: 0}, {F9: D}, {F9: C}}}",
		Target: VUnionDepth3_Rand1(VUnionDepth3_Rand1F1{VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F20{},
			VUnionDepth1_Rand1F9{VEnumBcdD},
			VUnionDepth1_Rand1F9{VEnumBcdC},
		}}),
		SourceLabel: "VUnionDepth3_Rand1{F1: {{F20: 0}, {F9: D}, {F9: C}}}",
		Source: VUnionDepth3_Rand1(VUnionDepth3_Rand1F1{VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F20{},
			VUnionDepth1_Rand1F9{VEnumBcdD},
			VUnionDepth1_Rand1F9{VEnumBcdC},
		}}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth3_Rand1{F1: {{F20: 0}, {F9: D}, {F9: C}}}",
		Target: VUnionDepth3_Rand1(VUnionDepth3_Rand1F1{VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F20{},
			VUnionDepth1_Rand1F9{VEnumBcdD},
			VUnionDepth1_Rand1F9{VEnumBcdC},
		}}),
		SourceLabel: "VUnionDepth3_All{F1: {{F20: 0}, {F9: D}, {F9: C}}}",
		Source: VUnionDepth3_All(VUnionDepth3_AllF1{VArray3_VUnionDepth1_Rand1{
			VUnionDepth1_Rand1F20{},
			VUnionDepth1_Rand1F9{VEnumBcdD},
			VUnionDepth1_Rand1F9{VEnumBcdC},
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "VUnionDepth3_Rand1{F2: {{C, C, B}, {A}, {C, C, C}}}",
		Target: VUnionDepth3_Rand1(VUnionDepth3_Rand1F2{[][]VEnumAbc{
			{
				VEnumAbcC,
				VEnumAbcC,
				VEnumAbcB,
			},
			{
				VEnumAbcA,
			},
			{
				VEnumAbcC,
				VEnumAbcC,
				VEnumAbcC,
			},
		}}),
		SourceLabel: "VUnionDepth3_Rand1{F2: {{C, C, B}, {A}, {C, C, C}}}",
		Source: VUnionDepth3_Rand1(VUnionDepth3_Rand1F2{[][]VEnumAbc{
			{
				VEnumAbcC,
				VEnumAbcC,
				VEnumAbcB,
			},
			{
				VEnumAbcA,
			},
			{
				VEnumAbcC,
				VEnumAbcC,
				VEnumAbcC,
			},
		}}),
	},
	{
		Label:       "Random",
		TargetLabel: "VUnionDepth3_Rand1{F2: {{C, C, B}, {A}, {C, C, C}}}",
		Target: VUnionDepth3_Rand1(VUnionDepth3_Rand1F2{[][]VEnumAbc{
			{
				VEnumAbcC,
				VEnumAbcC,
				VEnumAbcB,
			},
			{
				VEnumAbcA,
			},
			{
				VEnumAbcC,
				VEnumAbcC,
				VEnumAbcC,
			},
		}}),
		SourceLabel: "VUnionDepth3_All{F2: {{C, C, B}, {A}, {C, C, C}}}",
		Source: VUnionDepth3_All(VUnionDepth3_AllF2{[][]VEnumAbc{
			{
				VEnumAbcC,
				VEnumAbcC,
				VEnumAbcB,
			},
			{
				VEnumAbcA,
			},
			{
				VEnumAbcC,
				VEnumAbcC,
				VEnumAbcC,
			},
		}}),
	},
	{
		IsCanonical: true,
		Label:       "Zero",
		TargetLabel: "?VStructDepth3_Rand0(nil)",
		Target:      (*VStructDepth3_Rand0)(nil),
		SourceLabel: "?VStructDepth3_Rand0(nil)",
		Source:      (*VStructDepth3_Rand0)(nil),
	},
	{
		Label:       "Zero",
		TargetLabel: "?VStructDepth3_Rand0(nil)",
		Target:      (*VStructDepth3_Rand0)(nil),
		SourceLabel: "?VStructEmpty(nil)",
		Source:      (*VStructEmpty)(nil),
	},
	{
		Label:       "NilAny",
		TargetLabel: "?VStructDepth3_Rand0(nil)",
		Target:      (*VStructDepth3_Rand0)(nil),
		SourceLabel: "any(nil)",
	},
	{
		IsCanonical: true,
		Label:       "Full",
		TargetLabel: "?VStructDepth3_Rand0{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: &VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "?VStructDepth3_Rand0{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: &VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		Label:       "Full",
		TargetLabel: "?VStructDepth3_Rand0{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Target: &VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
		SourceLabel: "VStructDepth3_Rand0{F1: {{F4: \"abcdefghijklmnopΔΘΠΣΦ王普澤世界\", F15: 123, F21: -123}}, F5: {{F28: 1.23}}, F7: {{F28: 1.23}: {F28: 1.23}}, F8: {F0: {int64(-123), int64(-123), int64(-123)}, F9: {F0: int64(-123), F1: true, F7: 123, F9: D, F26: 1.23}, F10: {F28: 1.23}, F11: {F20: -123}}}",
		Source: VStructDepth3_Rand0{
			F1: VArray1_OptVStructDepth1_Rand0{
				{
					F4:  "abcdefghijklmnopΔΘΠΣΦ王普澤世界",
					F15: 123,
					F21: -123,
				},
			},
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F28{1.23}: VUnionDepth1_Rand0F28{1.23},
			},
			F8: VStructDepth2_Rand0{
				F0: VArray3_Any{
					int64(-123),
					int64(-123),
					int64(-123),
				},
				F9: VStructDepth1_Rand1{
					F0:  int64(-123),
					F1:  true,
					F7:  123,
					F9:  VEnumBcdD,
					F26: 1.23,
				},
				F10: VUnionDepth1_Rand0F28{1.23},
				F11: VUnionDepth1_Rand1F20{-123},
			},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth3_Rand0{F5: {{F12: 23417}, {F28: -1.0675147565091993e+09}, {F8: C}}, F7: {{F10: {}}: {F8: A}}, F8: {F9: {F0: error{Id: \"cdefghijklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryBackoff, Msg: \"Φ王普\"}, F9: D, F26: -8.973381e+08}, F10: {F28: 6.954992858649766e+08}}}",
		Target: &VStructDepth3_Rand0{
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F12{23417}:                   struct{}{},
				VUnionDepth1_Rand0F28{-1.0675147565091993e+09}: struct{}{},
				VUnionDepth1_Rand0F8{VEnumAbcC}:                struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F8{},
			},
			F8: VStructDepth2_Rand0{
				F9: VStructDepth1_Rand1{
					F0: verror.FromWire(vdl.WireError{
						Id:        "cdefghijklmnopΔΘΠΣΦ王普澤",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "Φ王普",
					}),
					F9:  VEnumBcdD,
					F26: -8.973381e+08,
				},
				F10: VUnionDepth1_Rand0F28{6.954992858649766e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "?VStructDepth3_Rand0{F5: {{F12: 23417}, {F28: -1.0675147565091993e+09}, {F8: C}}, F7: {{F10: {}}: {F8: A}}, F8: {F9: {F0: error{Id: \"cdefghijklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryBackoff, Msg: \"Φ王普\"}, F9: D, F26: -8.973381e+08}, F10: {F28: 6.954992858649766e+08}}}",
		Source: &VStructDepth3_Rand0{
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F12{23417}:                   struct{}{},
				VUnionDepth1_Rand0F28{-1.0675147565091993e+09}: struct{}{},
				VUnionDepth1_Rand0F8{VEnumAbcC}:                struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F8{},
			},
			F8: VStructDepth2_Rand0{
				F9: VStructDepth1_Rand1{
					F0: verror.FromWire(vdl.WireError{
						Id:        "cdefghijklmnopΔΘΠΣΦ王普澤",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "Φ王普",
					}),
					F9:  VEnumBcdD,
					F26: -8.973381e+08,
				},
				F10: VUnionDepth1_Rand0F28{6.954992858649766e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth3_Rand0{F5: {{F12: 23417}, {F28: -1.0675147565091993e+09}, {F8: C}}, F7: {{F10: {}}: {F8: A}}, F8: {F9: {F0: error{Id: \"cdefghijklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryBackoff, Msg: \"Φ王普\"}, F9: D, F26: -8.973381e+08}, F10: {F28: 6.954992858649766e+08}}}",
		Target: &VStructDepth3_Rand0{
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F12{23417}:                   struct{}{},
				VUnionDepth1_Rand0F28{-1.0675147565091993e+09}: struct{}{},
				VUnionDepth1_Rand0F8{VEnumAbcC}:                struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F8{},
			},
			F8: VStructDepth2_Rand0{
				F9: VStructDepth1_Rand1{
					F0: verror.FromWire(vdl.WireError{
						Id:        "cdefghijklmnopΔΘΠΣΦ王普澤",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "Φ王普",
					}),
					F9:  VEnumBcdD,
					F26: -8.973381e+08,
				},
				F10: VUnionDepth1_Rand0F28{6.954992858649766e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VStructDepth3_All{F5: {{F12: 23417}, {F28: -1.0675147565091993e+09}, {F8: C}}, F7: {{F10: {}}: {F8: A}}, F8: {F9: {F0: error{Id: \"cdefghijklmnopΔΘΠΣΦ王普澤\", RetryCode: RetryBackoff, Msg: \"Φ王普\"}, F9: D, F26: -8.973381e+08}, F10: {F28: 6.954992858649766e+08}}}",
		Source: VStructDepth3_All{
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F12{23417}:                   struct{}{},
				VUnionDepth1_Rand0F28{-1.0675147565091993e+09}: struct{}{},
				VUnionDepth1_Rand0F8{VEnumAbcC}:                struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F8{},
			},
			F8: VStructDepth2_Rand0{
				F9: VStructDepth1_Rand1{
					F0: verror.FromWire(vdl.WireError{
						Id:        "cdefghijklmnopΔΘΠΣΦ王普澤",
						RetryCode: vdl.WireRetryCodeRetryBackoff,
						Msg:       "Φ王普",
					}),
					F9:  VEnumBcdD,
					F26: -8.973381e+08,
				},
				F10: VUnionDepth1_Rand0F28{6.954992858649766e+08},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
	},
	{
		IsCanonical: true,
		Label:       "Random",
		TargetLabel: "?VStructDepth3_Rand0{F5: {{F16: 7625294377182250282}, {F8: A}, {F8: B}}, F7: {{F10: {}}: {F16: 0}, {F8: A}: {F8: A}}}",
		Target: &VStructDepth3_Rand0{
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F16{7625294377182250282}: struct{}{},
				VUnionDepth1_Rand0F8{}:                     struct{}{},
				VUnionDepth1_Rand0F8{VEnumAbcB}:            struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F16{},
				VUnionDepth1_Rand0F8{}:  VUnionDepth1_Rand0F8{},
			},
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "?VStructDepth3_Rand0{F5: {{F16: 7625294377182250282}, {F8: A}, {F8: B}}, F7: {{F10: {}}: {F16: 0}, {F8: A}: {F8: A}}}",
		Source: &VStructDepth3_Rand0{
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F16{7625294377182250282}: struct{}{},
				VUnionDepth1_Rand0F8{}:                     struct{}{},
				VUnionDepth1_Rand0F8{VEnumAbcB}:            struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F16{},
				VUnionDepth1_Rand0F8{}:  VUnionDepth1_Rand0F8{},
			},
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
	},
	{
		Label:       "Random",
		TargetLabel: "?VStructDepth3_Rand0{F5: {{F16: 7625294377182250282}, {F8: A}, {F8: B}}, F7: {{F10: {}}: {F16: 0}, {F8: A}: {F8: A}}}",
		Target: &VStructDepth3_Rand0{
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F16{7625294377182250282}: struct{}{},
				VUnionDepth1_Rand0F8{}:                     struct{}{},
				VUnionDepth1_Rand0F8{VEnumAbcB}:            struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F16{},
				VUnionDepth1_Rand0F8{}:  VUnionDepth1_Rand0F8{},
			},
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
		},
		SourceLabel: "VStructDepth3_All{F5: {{F16: 7625294377182250282}, {F8: A}, {F8: B}}, F7: {{F10: {}}: {F16: 0}, {F8: A}: {F8: A}}}",
		Source: VStructDepth3_All{
			F5: VSet_VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F16{7625294377182250282}: struct{}{},
				VUnionDepth1_Rand0F8{}:                     struct{}{},
				VUnionDepth1_Rand0F8{VEnumAbcB}:            struct{}{},
			},
			F7: map[VUnionDepth1_Rand0]VUnionDepth1_Rand0{
				VUnionDepth1_Rand0F10{}: VUnionDepth1_Rand0F16{},
				VUnionDepth1_Rand0F8{}:  VUnionDepth1_Rand0F8{},
			},
			F8: VStructDepth2_Rand0{
				F10: VUnionDepth1_Rand0F8{},
				F11: VUnionDepth1_Rand1F6{},
			},
			F10: VUnionDepth2_AllF0{},
			F11: VUnionDepth2_Rand0F2{},
		},
	},
}

var __VDLInitCalled bool

// __VDLInit performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = __VDLInit()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func __VDLInit() struct{} {
	if __VDLInitCalled {
		return struct{}{}
	}
	__VDLInitCalled = true

	// Register types.
	vdl.Register((*Entry)(nil))
	vdl.Register((*VBool)(nil))
	vdl.Register((*VString)(nil))
	vdl.Register((*VByte)(nil))
	vdl.Register((*VEnumAbc)(nil))
	vdl.Register((*VEnumBcd)(nil))
	vdl.Register((*VStructEmpty)(nil))
	vdl.Register((*VUint16)(nil))
	vdl.Register((*VUint32)(nil))
	vdl.Register((*VUint64)(nil))
	vdl.Register((*VInt8)(nil))
	vdl.Register((*VInt16)(nil))
	vdl.Register((*VInt32)(nil))
	vdl.Register((*VInt64)(nil))
	vdl.Register((*VFloat32)(nil))
	vdl.Register((*VFloat64)(nil))
	vdl.Register((*VArray3_Any)(nil))
	vdl.Register((*VArray3_Bool)(nil))
	vdl.Register((*VArray3_VBool)(nil))
	vdl.Register((*VArray1_String)(nil))
	vdl.Register((*VArray3_VString)(nil))
	vdl.Register((*VArray2_TypeObject)(nil))
	vdl.Register((*VArray1_Byte)(nil))
	vdl.Register((*VArray2_VByte)(nil))
	vdl.Register((*VArray2_VEnumAbc)(nil))
	vdl.Register((*VArray2_VEnumBcd)(nil))
	vdl.Register((*VArray1_VStructEmpty)(nil))
	vdl.Register((*VArray1_Error)(nil))
	vdl.Register((*VArray2_Uint32)(nil))
	vdl.Register((*VArray1_Uint64)(nil))
	vdl.Register((*VArray3_Int64)(nil))
	vdl.Register((*VArray3_OptVStructEmpty)(nil))
	vdl.Register((*VList_Any)(nil))
	vdl.Register((*VList_Bool)(nil))
	vdl.Register((*VList_VBool)(nil))
	vdl.Register((*VList_String)(nil))
	vdl.Register((*VList_VString)(nil))
	vdl.Register((*VList_TypeObject)(nil))
	vdl.Register((*VList_Byte)(nil))
	vdl.Register((*VList_VByte)(nil))
	vdl.Register((*VList_VEnumAbc)(nil))
	vdl.Register((*VList_VEnumBcd)(nil))
	vdl.Register((*VList_VStructEmpty)(nil))
	vdl.Register((*VList_Error)(nil))
	vdl.Register((*VList_VUint32)(nil))
	vdl.Register((*VList_VInt32)(nil))
	vdl.Register((*VList_VFloat64)(nil))
	vdl.Register((*VList_OptVStructEmpty)(nil))
	vdl.Register((*VSet_Bool)(nil))
	vdl.Register((*VSet_VBool)(nil))
	vdl.Register((*VSet_String)(nil))
	vdl.Register((*VSet_VString)(nil))
	vdl.Register((*VSet_Byte)(nil))
	vdl.Register((*VSet_VByte)(nil))
	vdl.Register((*VSet_VEnumAbc)(nil))
	vdl.Register((*VSet_VEnumBcd)(nil))
	vdl.Register((*VSet_VStructEmpty)(nil))
	vdl.Register((*VSet_Int64)(nil))
	vdl.Register((*VSet_Float32)(nil))
	vdl.Register((*VSet_VFloat64)(nil))
	vdl.Register((*VMap_Bool_Bool)(nil))
	vdl.Register((*VMap_VBool_VBool)(nil))
	vdl.Register((*VMap_String_String)(nil))
	vdl.Register((*VMap_VString_VString)(nil))
	vdl.Register((*VMap_Byte_Byte)(nil))
	vdl.Register((*VMap_VByte_VByte)(nil))
	vdl.Register((*VMap_VEnumAbc_VEnumAbc)(nil))
	vdl.Register((*VMap_VEnumBcd_VEnumBcd)(nil))
	vdl.Register((*VMap_VStructEmpty_VStructEmpty)(nil))
	vdl.Register((*VMap_VInt16_VInt16)(nil))
	vdl.Register((*VMap_VInt32_VInt32)(nil))
	vdl.Register((*VMap_Float64_Float64)(nil))
	vdl.Register((*VStructDepth1_All)(nil))
	vdl.Register((*VStructDepth1_Rand0)(nil))
	vdl.Register((*VStructDepth1_Rand1)(nil))
	vdl.Register((*VUnionDepth1_All)(nil))
	vdl.Register((*VUnionDepth1_Rand0)(nil))
	vdl.Register((*VUnionDepth1_Rand1)(nil))
	vdl.Register((*VArray1_VArray3_Bool)(nil))
	vdl.Register((*VArray3_VList_Any)(nil))
	vdl.Register((*VArray2_VSet_String)(nil))
	vdl.Register((*VArray3_Map_String_String)(nil))
	vdl.Register((*VArray1_VStructDepth1_Rand0)(nil))
	vdl.Register((*VArray3_VUnionDepth1_Rand1)(nil))
	vdl.Register((*VArray1_OptVStructDepth1_Rand0)(nil))
	vdl.Register((*VList_VArray1_String)(nil))
	vdl.Register((*VList_List_VBool)(nil))
	vdl.Register((*VList_Set_VInt16)(nil))
	vdl.Register((*VList_VMap_VBool_VBool)(nil))
	vdl.Register((*VList_VStructDepth1_All)(nil))
	vdl.Register((*VList_VUnionDepth1_Rand0)(nil))
	vdl.Register((*VList_OptVStructDepth1_Rand0)(nil))
	vdl.Register((*VSet_VArray3_Bool)(nil))
	vdl.Register((*VSet_VStructDepth1_Rand0)(nil))
	vdl.Register((*VSet_VUnionDepth1_Rand0)(nil))
	vdl.Register((*VMap_VArray2_Uint32_VArray2_Uint32)(nil))
	vdl.Register((*VMap_VStructDepth1_Rand0_VStructDepth1_Rand0)(nil))
	vdl.Register((*VMap_VUnionDepth1_Rand0_VUnionDepth1_Rand0)(nil))
	vdl.Register((*VStructDepth2_All)(nil))
	vdl.Register((*VStructDepth2_Rand0)(nil))
	vdl.Register((*VStructDepth2_Rand1)(nil))
	vdl.Register((*VUnionDepth2_All)(nil))
	vdl.Register((*VUnionDepth2_Rand0)(nil))
	vdl.Register((*VUnionDepth2_Rand1)(nil))
	vdl.Register((*VArray3_VArray1_VStructDepth1_Rand0)(nil))
	vdl.Register((*VArray1_VList_VStructDepth1_All)(nil))
	vdl.Register((*VArray1_Set_VStructDepth1_Rand0)(nil))
	vdl.Register((*VArray1_Map_VArray1_VStructEmpty_VArray1_VStructEmpty)(nil))
	vdl.Register((*VArray1_VStructDepth2_Rand0)(nil))
	vdl.Register((*VArray1_VUnionDepth2_Rand1)(nil))
	vdl.Register((*VArray3_OptVStructDepth2_Rand0)(nil))
	vdl.Register((*VList_VArray1_OptVStructDepth1_Rand0)(nil))
	vdl.Register((*VList_List_VMap_VEnumBcd_VEnumBcd)(nil))
	vdl.Register((*VList_Set_VStructDepth1_Rand0)(nil))
	vdl.Register((*VList_VMap_VStructDepth1_Rand0_VStructDepth1_Rand0)(nil))
	vdl.Register((*VList_VStructDepth2_All)(nil))
	vdl.Register((*VList_VUnionDepth2_All)(nil))
	vdl.Register((*VList_OptVStructDepth2_Rand0)(nil))
	vdl.Register((*VSet_VArray1_VArray3_Bool)(nil))
	vdl.Register((*VMap_VArray1_VStructDepth1_Rand0_VArray1_VStructDepth1_Rand0)(nil))
	vdl.Register((*VStructDepth3_All)(nil))
	vdl.Register((*VStructDepth3_Rand0)(nil))
	vdl.Register((*VStructDepth3_Rand1)(nil))
	vdl.Register((*VUnionDepth3_All)(nil))
	vdl.Register((*VUnionDepth3_Rand0)(nil))
	vdl.Register((*VUnionDepth3_Rand1)(nil))

	return struct{}{}
}
