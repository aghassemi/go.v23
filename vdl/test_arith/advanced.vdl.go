// This file was auto-generated by the veyron vdl tool.
// Source: advanced.vdl

package arith

import (
	"veyron2/vdl/test_arith/exp"

	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_veyron2 "veyron2"
	_gen_ipc "veyron2/ipc"
	_gen_naming "veyron2/naming"
	_gen_rt "veyron2/rt"
	_gen_vdl "veyron2/vdl"
)

// Trigonometry is an interface that specifies a couple trigonometric functions.
// Trigonometry is the interface the client binds and uses.
// Trigonometry_InternalNoTagGetter is the interface without the TagGetter
// and UnresolveStep methods (both framework-added, rathern than user-defined),
// to enable embedding without method collisions.  Not to be used directly by
// clients.
type Trigonometry_InternalNoTagGetter interface {
	Sine(angle float64, opts ..._gen_ipc.ClientCallOpt) (reply float64, err error)
	Cosine(angle float64, opts ..._gen_ipc.ClientCallOpt) (reply float64, err error)
}
type Trigonometry interface {
	_gen_vdl.TagGetter
	// UnresolveStep returns the names for the remote service, rooted at the
	// service's immediate namespace ancestor.
	UnresolveStep(opts ..._gen_ipc.ClientCallOpt) ([]string, error)
	Trigonometry_InternalNoTagGetter
}

// TrigonometryService is the interface the server implements.
type TrigonometryService interface {
	Sine(context _gen_ipc.Context, angle float64) (reply float64, err error)
	Cosine(context _gen_ipc.Context, angle float64) (reply float64, err error)
}

// BindTrigonometry returns the client stub implementing the Trigonometry
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindTrigonometry(name string, opts ..._gen_ipc.BindOpt) (Trigonometry, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdl.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdl.ErrTooManyOptionsToBind
	}
	stub := &clientStubTrigonometry{client: client, name: name}

	return stub, nil
}

// NewServerTrigonometry creates a new server stub.
//
// It takes a regular server implementing the TrigonometryService
// interface, and returns a new server stub.
func NewServerTrigonometry(server TrigonometryService) interface{} {
	return &ServerStubTrigonometry{
		service: server,
	}
}

// clientStubTrigonometry implements Trigonometry.
type clientStubTrigonometry struct {
	client _gen_ipc.Client
	name   string
}

func (c *clientStubTrigonometry) GetMethodTags(method string) []interface{} {
	return GetTrigonometryMethodTags(method)
}

func (__gen_c *clientStubTrigonometry) Sine(angle float64, opts ..._gen_ipc.ClientCallOpt) (reply float64, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Sine", []interface{}{angle}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubTrigonometry) Cosine(angle float64, opts ..._gen_ipc.ClientCallOpt) (reply float64, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Cosine", []interface{}{angle}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c *clientStubTrigonometry) UnresolveStep(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = c.client.StartCall(c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubTrigonometry wraps a server that implements
// TrigonometryService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubTrigonometry struct {
	service TrigonometryService
}

func (s *ServerStubTrigonometry) GetMethodTags(method string) []interface{} {
	return GetTrigonometryMethodTags(method)
}

func (s *ServerStubTrigonometry) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubTrigonometry) Sine(call _gen_ipc.ServerCall, angle float64) (reply float64, err error) {
	reply, err = __gen_s.service.Sine(call, angle)
	return
}

func (__gen_s *ServerStubTrigonometry) Cosine(call _gen_ipc.ServerCall, angle float64) (reply float64, err error) {
	reply, err = __gen_s.service.Cosine(call, angle)
	return
}

func GetTrigonometryMethodTags(method string) []interface{} {
	switch method {
	case "Sine":
		return []interface{}{}
	case "Cosine":
		return []interface{}{}
	default:
		return nil
	}
}

// AdvancedMath is an interface for more advanced math than arith.  It embeds
// interfaces defined both in the same file and in an external package; and in
// turn it is embedded by arith.Calculator (which is in the same package but
// different file) to verify that embedding works in all these scenarios.
// AdvancedMath is the interface the client binds and uses.
// AdvancedMath_InternalNoTagGetter is the interface without the TagGetter
// and UnresolveStep methods (both framework-added, rathern than user-defined),
// to enable embedding without method collisions.  Not to be used directly by
// clients.
type AdvancedMath_InternalNoTagGetter interface {

	// Trigonometry is an interface that specifies a couple trigonometric functions.
	Trigonometry_InternalNoTagGetter
	exp.Exp_InternalNoTagGetter
}
type AdvancedMath interface {
	_gen_vdl.TagGetter
	// UnresolveStep returns the names for the remote service, rooted at the
	// service's immediate namespace ancestor.
	UnresolveStep(opts ..._gen_ipc.ClientCallOpt) ([]string, error)
	AdvancedMath_InternalNoTagGetter
}

// AdvancedMathService is the interface the server implements.
type AdvancedMathService interface {

	// Trigonometry is an interface that specifies a couple trigonometric functions.
	TrigonometryService
	exp.ExpService
}

// BindAdvancedMath returns the client stub implementing the AdvancedMath
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindAdvancedMath(name string, opts ..._gen_ipc.BindOpt) (AdvancedMath, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdl.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdl.ErrTooManyOptionsToBind
	}
	stub := &clientStubAdvancedMath{client: client, name: name}
	stub.Trigonometry_InternalNoTagGetter, _ = BindTrigonometry(name, client)
	stub.Exp_InternalNoTagGetter, _ = exp.BindExp(name, client)

	return stub, nil
}

// NewServerAdvancedMath creates a new server stub.
//
// It takes a regular server implementing the AdvancedMathService
// interface, and returns a new server stub.
func NewServerAdvancedMath(server AdvancedMathService) interface{} {
	return &ServerStubAdvancedMath{
		ServerStubTrigonometry: *NewServerTrigonometry(server).(*ServerStubTrigonometry),
		ServerStubExp:          *exp.NewServerExp(server).(*exp.ServerStubExp),
		service:                server,
	}
}

// clientStubAdvancedMath implements AdvancedMath.
type clientStubAdvancedMath struct {
	Trigonometry_InternalNoTagGetter
	exp.Exp_InternalNoTagGetter

	client _gen_ipc.Client
	name   string
}

func (c *clientStubAdvancedMath) GetMethodTags(method string) []interface{} {
	return GetAdvancedMathMethodTags(method)
}

func (c *clientStubAdvancedMath) UnresolveStep(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = c.client.StartCall(c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubAdvancedMath wraps a server that implements
// AdvancedMathService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubAdvancedMath struct {
	ServerStubTrigonometry
	exp.ServerStubExp

	service AdvancedMathService
}

func (s *ServerStubAdvancedMath) GetMethodTags(method string) []interface{} {
	return GetAdvancedMathMethodTags(method)
}

func (s *ServerStubAdvancedMath) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func GetAdvancedMathMethodTags(method string) []interface{} {
	if resp := GetTrigonometryMethodTags(method); resp != nil {
		return resp
	}
	if resp := exp.GetExpMethodTags(method); resp != nil {
		return resp
	}
	return nil
}
