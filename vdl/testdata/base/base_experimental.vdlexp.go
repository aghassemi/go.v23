// This file was auto-generated by the veyron vdl tool.
// Source: base_experimental.vdlexp

package base

import (
	// The non-user imports are prefixed with "__" to prevent collisions.
	__vdl "veyron.io/veyron/veyron2/vdl"
	__vdlutil "veyron.io/veyron/veyron2/vdl/vdlutil"
)

type NamedEnum int

const (
	NamedEnumA NamedEnum = iota
	NamedEnumB
	NamedEnumC
)

// NamedEnumAll holds all labels for NamedEnum.
var NamedEnumAll = []NamedEnum{NamedEnumA, NamedEnumB, NamedEnumC}

// NamedEnumFromString creates a NamedEnum from a string label.
// Returns true iff the label is valid.
func NamedEnumFromString(label string) (x NamedEnum, ok bool) {
	ok = x.Assign(label)
	return
}

// Assign assigns label to x.
// Returns true iff the label is valid.
func (x *NamedEnum) Assign(label string) bool {
	switch label {
	case "A":
		*x = NamedEnumA
		return true
	case "B":
		*x = NamedEnumB
		return true
	case "C":
		*x = NamedEnumC
		return true
	}
	*x = -1
	return false
}

// String returns the string label of x.
func (x NamedEnum) String() string {
	switch x {
	case NamedEnumA:
		return "A"
	case NamedEnumB:
		return "B"
	case NamedEnumC:
		return "C"
	}
	return ""
}

// __DescribeEnum describes the NamedEnum enum type.
func (NamedEnum) __DescribeEnum(struct{ A, B, C NamedEnum }) {}

type (
	// NamedOneOf represents any single field of the NamedOneOf oneof type.
	NamedOneOf interface {
		// Index returns the field index.
		Index() int
		// Name returns the field name.
		Name() string
		// __DescribeOneOf describes the NamedOneOf oneof type.
		__DescribeOneOf(__NamedOneOfDesc)
	}
	// NamedOneOfA represents field A of the NamedOneOf oneof type.
	NamedOneOfA struct{ Value bool }
	// NamedOneOfB represents field B of the NamedOneOf oneof type.
	NamedOneOfB struct{ Value string }
	// NamedOneOfC represents field C of the NamedOneOf oneof type.
	NamedOneOfC struct{ Value int32 }
	// __NamedOneOfDesc describes the NamedOneOf oneof type.
	__NamedOneOfDesc struct {
		NamedOneOf
		A NamedOneOfA
		B NamedOneOfB
		C NamedOneOfC
	}
)

func (NamedOneOfA) Index() int                       { return 0 }
func (NamedOneOfA) Name() string                     { return "A" }
func (NamedOneOfA) __DescribeOneOf(__NamedOneOfDesc) {}

func (NamedOneOfB) Index() int                       { return 1 }
func (NamedOneOfB) Name() string                     { return "B" }
func (NamedOneOfB) __DescribeOneOf(__NamedOneOfDesc) {}

func (NamedOneOfC) Index() int                       { return 2 }
func (NamedOneOfC) Name() string                     { return "C" }
func (NamedOneOfC) __DescribeOneOf(__NamedOneOfDesc) {}

type ScalarsExp struct {
	B13 NamedEnum
	B14 NamedOneOf
}

const Cenum = NamedEnumA

var Coneof = NamedOneOf(NamedOneOfA{true})

var Carray = [3]int32{
	1,
	2,
	3,
}

var Clist = []int32{
	1,
	2,
	3,
}

// TODO(toddw): test multiple items after ordering is fixed.
//Cset   = set[int32]{1, 2, 3}
var Cset = map[int32]struct{}{
	1: struct{}{},
}

// TODO(toddw): test multiple items after ordering is fixed.
//cmap   = map[int32]string{1: "A", 2: "B", 3: "C"}
var Cmap = map[int32]string{
	1: "A",
}

var Cargs = Args{
	A: 1,
	B: 2,
}

var CTVbool = __vdl.TypeOf(false)

var CTVstring = __vdl.TypeOf("")

var CTVbytes = __vdl.TypeOf([]byte(""))

var CTVbyte = __vdl.TypeOf(byte(0))

var CTVuint16 = __vdl.TypeOf(uint16(0))

var CTVint16 = __vdl.TypeOf(int16(0))

var CTVfloat32 = __vdl.TypeOf(float32(0))

var CTVcomplex64 = __vdl.TypeOf(complex64(0))

var CTVenum = __vdl.TypeOf(NamedEnumA)

var CTVArray = __vdl.TypeOf([3]string{})

var CTVList = __vdl.TypeOf([]string{})

var CTVSet = __vdl.TypeOf(map[string]struct{}{})

var CTVMap = __vdl.TypeOf(map[string]int64{})

var CTVStruct = __vdl.TypeOf(ScalarsExp{})

var CTVOneOf = __vdl.TypeOf(NamedOneOf(NamedOneOfA{false}))

var CTVAny = __vdl.TypeOf((*__vdlutil.Any)(nil))
