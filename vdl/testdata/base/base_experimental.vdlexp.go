// This file was auto-generated by the veyron vdl tool.
// Source: base_experimental.vdlexp

package base

import (
	// The non-user imports are prefixed with "__" to prevent collisions.
	__fmt "fmt"
	__vdl "v.io/core/veyron2/vdl"
	__vdlutil "v.io/core/veyron2/vdl/vdlutil"
)

type NamedEnum int

const (
	NamedEnumA NamedEnum = iota
	NamedEnumB
	NamedEnumC
)

// NamedEnumAll holds all labels for NamedEnum.
var NamedEnumAll = []NamedEnum{NamedEnumA, NamedEnumB, NamedEnumC}

// NamedEnumFromString creates a NamedEnum from a string label.
func NamedEnumFromString(label string) (x NamedEnum, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *NamedEnum) Set(label string) error {
	switch label {
	case "A", "a":
		*x = NamedEnumA
		return nil
	case "B", "b":
		*x = NamedEnumB
		return nil
	case "C", "c":
		*x = NamedEnumC
		return nil
	}
	*x = -1
	return __fmt.Errorf("unknown label %q in base.NamedEnum", label)
}

// String returns the string label of x.
func (x NamedEnum) String() string {
	switch x {
	case NamedEnumA:
		return "A"
	case NamedEnumB:
		return "B"
	case NamedEnumC:
		return "C"
	}
	return ""
}

func (NamedEnum) __VDLReflect(struct {
	Name string "v.io/core/veyron2/vdl/testdata/base.NamedEnum"
	Enum struct{ A, B, C string }
}) {
}

type (
	// NamedUnion represents any single field of the NamedUnion union type.
	NamedUnion interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the NamedUnion union type.
		__VDLReflect(__NamedUnionReflect)
	}
	// NamedUnionA represents field A of the NamedUnion union type.
	NamedUnionA struct{ Value bool }
	// NamedUnionB represents field B of the NamedUnion union type.
	NamedUnionB struct{ Value string }
	// NamedUnionC represents field C of the NamedUnion union type.
	NamedUnionC struct{ Value int32 }
	// __NamedUnionReflect describes the NamedUnion union type.
	__NamedUnionReflect struct {
		Name  string "v.io/core/veyron2/vdl/testdata/base.NamedUnion"
		Type  NamedUnion
		Union struct {
			A NamedUnionA
			B NamedUnionB
			C NamedUnionC
		}
	}
)

func (x NamedUnionA) Index() int                       { return 0 }
func (x NamedUnionA) Interface() interface{}           { return x.Value }
func (x NamedUnionA) Name() string                     { return "A" }
func (x NamedUnionA) __VDLReflect(__NamedUnionReflect) {}

func (x NamedUnionB) Index() int                       { return 1 }
func (x NamedUnionB) Interface() interface{}           { return x.Value }
func (x NamedUnionB) Name() string                     { return "B" }
func (x NamedUnionB) __VDLReflect(__NamedUnionReflect) {}

func (x NamedUnionC) Index() int                       { return 2 }
func (x NamedUnionC) Interface() interface{}           { return x.Value }
func (x NamedUnionC) Name() string                     { return "C" }
func (x NamedUnionC) __VDLReflect(__NamedUnionReflect) {}

type ScalarsExp struct {
	B13 NamedEnum
	B14 NamedUnion
}

func (ScalarsExp) __VDLReflect(struct {
	Name string "v.io/core/veyron2/vdl/testdata/base.ScalarsExp"
}) {
}

func init() {
	__vdl.Register(NamedEnumA)
	__vdl.Register(NamedUnion(NamedUnionA{false}))
	__vdl.Register(ScalarsExp{
		B14: NamedUnionA{false},
	})
}

const Cenum = NamedEnumA

var Cunion = NamedUnion(NamedUnionA{true})

var Carray = [3]int32{
	1,
	2,
	3,
}

var Clist = []int32{
	1,
	2,
	3,
}

// TODO(toddw): test multiple items after ordering is fixed.
//Cset   = set[int32]{1, 2, 3}
var Cset = map[int32]struct{}{
	1: struct{}{},
}

// TODO(toddw): test multiple items after ordering is fixed.
//cmap   = map[int32]string{1: "A", 2: "B", 3: "C"}
var Cmap = map[int32]string{
	1: "A",
}

var Cargs = Args{
	A: 1,
	B: 2,
}

var CTVbool = __vdl.TypeOf(false)

var CTVstring = __vdl.TypeOf("")

var CTVbytes = __vdl.TypeOf([]byte(""))

var CTVbyte = __vdl.TypeOf(byte(0))

var CTVuint16 = __vdl.TypeOf(uint16(0))

var CTVint16 = __vdl.TypeOf(int16(0))

var CTVfloat32 = __vdl.TypeOf(float32(0))

var CTVcomplex64 = __vdl.TypeOf(complex64(0))

var CTVenum = __vdl.TypeOf(NamedEnumA)

var CTVArray = __vdl.TypeOf([3]string{})

var CTVList = __vdl.TypeOf([]string(nil))

var CTVSet = __vdl.TypeOf(map[string]struct{}(nil))

var CTVMap = __vdl.TypeOf(map[string]int64(nil))

var CTVStruct = __vdl.TypeOf(ScalarsExp{
	B14: NamedUnionA{false},
})

var CTVUnion = __vdl.TypeOf(NamedUnion(NamedUnionA{false}))

var CTVAny = __vdl.TypeOf((*__vdlutil.Any)(nil))
