package java

import (
	"bytes"
	"log"

	"veyron.io/veyron/veyron2/vdl"
	"veyron.io/veyron/veyron2/vdl/compile"
	"veyron.io/veyron/veyron2/vdl/vdlutil"
)

const structTmpl = `// This file was auto-generated by the veyron vdl tool.
// Source: {{.Source}}
package {{.PackagePath}};

/**
 * type {{.Name}} {{.VdlTypeString}} {{.Doc}}
 **/
public final class {{.Name}} extends io.veyron.veyron.veyron2.vdl.AbstractVdlStruct
        implements android.os.Parcelable {
    {{/* Field declarations */}}
    {{ range $field := .Fields }}
      @com.google.gson.annotations.SerializedName("{{$field.Name}}")
      private {{$field.Type}} {{$field.LowercaseName}};
    {{ end }}

    public static final io.veyron.veyron.veyron2.vdl.VdlType VDL_TYPE =
            io.veyron.veyron.veyron2.vdl.Types.getVdlTypeFromReflection({{.Name}}.class);

    {{/* Constructors */}}
    public {{.Name}}() {
        super(VDL_TYPE);
    }

    public {{.Name}}({{ .FieldsAsArgs }}) {
        this();
        {{ range $field := .Fields }}
            this.{{$field.LowercaseName}} = {{$field.LowercaseName}};
        {{ end }}
    }

    {{/* Getters and setters */}}
    {{ range $field := .Fields }}
    public {{$field.Type}} get{{$field.Name}}() {
        return this.{{$field.LowercaseName}};
    }

    public void set{{$field.Name}}({{$field.Type}} {{$field.LowercaseName}}) {
        this.{{$field.LowercaseName}} = {{$field.LowercaseName}};
    }
    {{ end }}

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (this.getClass() != obj.getClass()) return false;
        final {{.Name}} other = ({{.Name}})obj;

        {{ range $field := .Fields }}
        {{ if .IsArray }}
        if (!java.util.Arrays.equals(this.{{$field.LowercaseName}}, other.{{$field.LowercaseName}})) {
            return false;
        }
        {{ else }}
        {{ if .IsClass }}
        if (this.{{$field.LowercaseName}} == null) {
            if (other.{{$field.LowercaseName}} != null) {
                return false;
            }
        } else if (!this.{{$field.LowercaseName}}.equals(other.{{$field.LowercaseName}})) {
            return false;
        }
        {{ else }}
        if (this.{{$field.LowercaseName}} != other.{{$field.LowercaseName}}) {
            return false;
        }
        {{ end }} {{/* if is class */}}
        {{ end }} {{/* if is array */}}
        {{ end }} {{/* range over fields */}}
        return true;
    }

    @Override
    public int hashCode() {
        int result = 1;
        final int prime = 31;
        {{ range $field := .Fields }}
        result = prime * result + {{$field.HashcodeComputation}};
        {{ end }}
        return result;
    }

    @Override
    public java.lang.String toString() {
        String result = "{";
        {{ range $index, $field := .Fields }}
            {{ if gt $index 0 }}
                result += ", ";
            {{ end }}
            result += "{{$field.LowercaseName}}:" + {{$field.LowercaseName}};
        {{ end }}
        return result + "}";
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
        try {
        {{ range $field := .Fields }}
            io.veyron.veyron.veyron2.vdl.ParcelUtil.writeValue(out, {{$field.LowercaseName}},
                getClass().getDeclaredField("{{$field.LowercaseName}}").getGenericType());
        {{ end }}
        } catch (NoSuchFieldException e) {
            // do nothing
        }
    }

    public static final android.os.Parcelable.Creator<{{.Name}}> CREATOR
        = new android.os.Parcelable.Creator<{{.Name}}>() {
        @SuppressWarnings("unchecked")
        @Override
        public {{.Name}} createFromParcel(android.os.Parcel in) {
            {{.Name}} value = new {{.Name}}();
            try {
            {{ range $field := .Fields }}
                value.set{{$field.Name}}(({{$field.Class}}) io.veyron.veyron.veyron2.vdl.ParcelUtil.readValue(
                in, getClass().getClassLoader(), getClass().getDeclaredField("{{$field.LowercaseName}}").getGenericType()));
            {{ end }}
            } catch (NoSuchFieldException e) {
                // do nothing
            }
            return value;
        }

        @Override
        public {{.Name}}[] newArray(int size) {
            return new {{.Name}}[size];
        }
    };
}`

type structDefinitionField struct {
	HashcodeComputation string
	IsClass             bool
	IsArray             bool
	LowercaseName       string
	Name                string
	Type                string
	Class               string
}

func javaFieldArgStr(structType *vdl.Type, env *compile.Env) string {
	var buf bytes.Buffer
	for i := 0; i < structType.NumField(); i++ {
		if i > 0 {
			buf.WriteString(", ")
		}
		fld := structType.Field(i)
		buf.WriteString("final ")
		buf.WriteString(javaType(fld.Type, false, env))
		buf.WriteString(" ")
		buf.WriteString(vdlutil.ToCamelCase(fld.Name))
	}
	return buf.String()
}

// genJavaStructFile generates the Java class file for the provided user-defined type.
func genJavaStructFile(tdef *compile.TypeDef, env *compile.Env) JavaFileInfo {
	fields := make([]structDefinitionField, tdef.Type.NumField())
	for i := 0; i < tdef.Type.NumField(); i++ {
		fld := tdef.Type.Field(i)
		fields[i] = structDefinitionField{
			HashcodeComputation: javaHashCode(vdlutil.ToCamelCase(fld.Name), fld.Type, env),
			IsClass:             isClass(fld.Type, env),
			IsArray:             isJavaNativeArray(fld.Type, env),
			LowercaseName:       vdlutil.ToCamelCase(fld.Name),
			Name:                fld.Name,
			Type:                javaType(fld.Type, false, env),
			Class:               javaType(fld.Type, true, env),
		}
	}

	data := struct {
		Doc           string
		Fields        []structDefinitionField
		FieldsAsArgs  string
		Name          string
		PackagePath   string
		Source        string
		VdlTypeString string
	}{
		Doc:           javaDocInComment(tdef.Doc),
		Fields:        fields,
		FieldsAsArgs:  javaFieldArgStr(tdef.Type, env),
		Name:          tdef.Name,
		PackagePath:   javaPath(javaGenPkgPath(tdef.File.Package.Path)),
		Source:        tdef.File.BaseName,
		VdlTypeString: tdef.Type.String(),
	}
	var buf bytes.Buffer
	err := parseTmpl("struct", structTmpl).Execute(&buf, data)
	if err != nil {
		log.Fatalf("vdl: couldn't execute struct template: %v", err)
	}
	return JavaFileInfo{
		Name: tdef.Name + ".java",
		Data: buf.Bytes(),
	}
}
