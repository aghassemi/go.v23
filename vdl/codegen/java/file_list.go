package java

import (
	"bytes"
	"log"

	"veyron2/vdl/compile"
)

const listTmpl = `// This file was auto-generated by the veyron vdl tool.
// Source: {{.SourceFile}}
package {{.Package}};

/**
 * type {{.Type}} {{.VdlTypeString}} {{.Doc}}
 **/
public final class {{.Type}} implements java.util.List<{{.ElemType}}> {
    private java.util.List<{{.ElemType}}> impl;

    public {{.Type}}(java.util.List<{{.ElemType}}> impl) {
        this.impl = impl;
    }
    public java.util.List<{{.ElemType}}> getValue() { return this.impl; }

    public void setValue(java.util.List<{{.ElemType}}> newImpl) {
        this.impl = newImpl;
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (this.getClass() != obj.getClass()) return false;
        final {{.Type}} other = ({{.Type}})obj;
        if (!(this.impl.equals(other.impl))) return false;
        return true;
    }
    @Override
    public int hashCode() {
        return (impl == null ? 0 : impl.hashCode());
    }
    @Override
    public void add(int location, {{.ElemType}} object) {
        impl.add(location, object);
    }
    @Override
    public boolean add({{.ElemType}} object) {
        return impl.add(object);
    }
    @Override
    public boolean addAll(int location, java.util.Collection<? extends {{.ElemType}}> collection) {
        return impl.addAll(location, collection);
    }
    @Override
    public boolean addAll(java.util.Collection<? extends {{.ElemType}}> collection) {
        return impl.addAll(collection);
    }
    @Override
    public void clear() {
        impl.clear();
    }
    @Override
    public boolean contains(java.lang.Object object) {
        return impl.contains(object);
    }
    @Override
    public boolean containsAll(java.util.Collection<?> collection) {
        return impl.containsAll(collection);
    }
    @Override
    public {{.ElemType}} get(int location) {
        return impl.get(location);
    }
    @Override
    public int indexOf(java.lang.Object object) {
        return impl.indexOf(object);
    }
    @Override
    public boolean isEmpty() {
        return impl.isEmpty();
    }
    @Override
    public java.util.Iterator<{{.ElemType}}> iterator() {
        return impl.iterator();
    }
    @Override
    public int lastIndexOf(java.lang.Object object) {
        return impl.lastIndexOf(object);
    }
    @Override
    public java.util.ListIterator<{{.ElemType}}> listIterator() {
        return impl.listIterator();
    }
    @Override
    public java.util.ListIterator<{{.ElemType}}> listIterator(int location) {
        return impl.listIterator(location);
    }
    @Override
    public {{.ElemType}} remove(int location) {
        return impl.remove(location);
    }
    @Override
    public boolean remove(java.lang.Object object) {
        return impl.remove(object);
    }
    @Override
    public boolean removeAll(java.util.Collection<?> collection) {
        return impl.removeAll(collection);
    }
    @Override
    public boolean retainAll(java.util.Collection<?> collection) {
        return impl.retainAll(collection);
    }
    @Override
    public {{.ElemType}} set(int location, {{.ElemType}} object) {
        return impl.set(location, object);
    }
    @Override
    public int size() {
        return impl.size();
    }
    @Override
    public java.util.List<{{.ElemType}}> subList(int start, int end) {
        return impl.subList(start, end);
    }
    @Override
    public java.lang.Object[] toArray() {
        return impl.toArray();
    }
    @Override
    public <T> T[] toArray(T[] array) {
        return impl.toArray(array);
    }
}
`

// genJavaListFile generates the Java class file for the provided named list type.
func genJavaListFile(tdef *compile.TypeDef, env *compile.Env) JavaFileInfo {
	elemDef := env.FindTypeDef(tdef.Type.Elem())
	data := struct {
		Doc           string
		ElemType      string
		Package       string
		SourceFile    string
		Type          string
		VdlTypeString string
	}{
		Doc:           javaDocInComment(tdef.Doc),
		ElemType:      javaFullyQualifiedNamedType(elemDef, true, env),
		Package:       javaPath(javaGenPkgPath(tdef.File.Package.Path)),
		SourceFile:    tdef.File.BaseName,
		Type:          tdef.Name,
		VdlTypeString: tdef.BaseType.String(),
	}
	var buf bytes.Buffer
	err := parseTmpl("list", listTmpl).Execute(&buf, data)
	if err != nil {
		log.Fatalf("vdl: couldn't execute list template: %v", err)
	}
	return JavaFileInfo{
		Name: tdef.Name + ".java",
		Data: buf.Bytes(),
	}
}
