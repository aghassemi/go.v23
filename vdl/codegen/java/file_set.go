package java

import (
	"bytes"
	"log"

	"veyron.io/veyron/veyron2/vdl/compile"
)

const setTmpl = `// This file was auto-generated by the veyron vdl tool.
// Source: {{.SourceFile}}

package {{.Package}};

/**
 * {{.Type}} {{.VdlTypeString}} {{.Doc}}
 **/
public final class {{.Type}} implements java.util.Set<{{.KeyType}}>, android.os.Parcelable, java.io.Serializable {
    static final long serialVersionUID = 0L;

    private java.util.Set<{{.KeyType}}> impl;

    public {{.Type}}(java.util.Set<{{.KeyType}}> impl) {
        this.impl = impl;
    }

    public java.util.Set<{{.KeyType}}> getValue() {
        return this.impl;
    }

    public void setValue(java.util.Set<{{.KeyType}}> newImpl) {
        this.impl = newImpl;
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (this.getClass() != obj.getClass())
            return false;
        final {{.Type}} other = ({{.Type}}) obj;
        if (!(this.impl.equals(other.impl)))
            return false;
        return true;
    }
    @Override
    public int hashCode() {
        return (impl == null) ? 0 : impl.hashCode();
    }

    @Override
    public void clear() {
        impl.clear();
    }
    @Override
    public boolean add({{.KeyType}} object) {
        return impl.add(object);
    }
    @Override
    public boolean addAll(java.util.Collection<? extends {{.KeyType}}> collection) {
        return impl.addAll(collection);
    }
    @Override
    public boolean contains(java.lang.Object object) {
        return impl.contains(object);
    }
    @Override
    public boolean containsAll(java.util.Collection<?> collection) {
        return impl.containsAll(collection);
    }
    @Override
    public boolean isEmpty() {
        return impl.isEmpty();
    }
    @Override
    public java.util.Iterator<{{.KeyType}}> iterator() {
        return impl.iterator();
    }
    @Override
    public boolean remove(java.lang.Object object) {
        return impl.remove(object);
    }
    @Override
    public boolean removeAll(java.util.Collection<?> collection) {
        return impl.removeAll(collection);
    }
    @Override
    public boolean retainAll(java.util.Collection<?> collection) {
        return impl.retainAll(collection);
    }
    @Override
    public int size() {
        return impl.size();
    }
    @Override
    public java.lang.Object[] toArray() {
        return impl.toArray();
    }
    @Override
    public <T> T[] toArray(T[] array) {
        return impl.toArray(array);
    }
    @Override
    public java.lang.String toString() {
        return io.veyron.veyron.veyron2.vdl.JSONUtil.getGsonBuilder().create().toJson(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }
    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
        io.veyron.veyron.veyron2.vdl.ParcelUtil.writeValue(out, impl);
    }
    public static final android.os.Parcelable.Creator<{{.Type}}> CREATOR = new android.os.Parcelable.Creator<{{.Type}}>() {
        @Override
        public {{.Type}} createFromParcel(android.os.Parcel in) {
            return new {{.Type}}(in);
        }
        @Override
        public {{.Type}}[] newArray(int size) {
            return new {{.Type}}[size];
        }
    };
    private {{.Type}}(android.os.Parcel in) {
        impl = (java.util.Set<{{.KeyType}}>) io.veyron.veyron.veyron2.vdl.ParcelUtil.readValue(in, getClass().getClassLoader(), impl);
    }
}
`

// genJavaSetFile generates the Java class file for the provided named set type.
func genJavaSetFile(tdef *compile.TypeDef, env *compile.Env) JavaFileInfo {
	keyDef := env.FindTypeDef(tdef.Type.Key())
	data := struct {
		Doc           string
		KeyType       string
		Package       string
		SourceFile    string
		Type          string
		VdlTypeString string
	}{
		Doc:           javaDocInComment(tdef.Doc),
		KeyType:       javaFullyQualifiedNamedType(keyDef, true, env),
		Package:       javaPath(javaGenPkgPath(tdef.File.Package.Path)),
		SourceFile:    tdef.File.BaseName,
		Type:          tdef.Name,
		VdlTypeString: tdef.BaseType.String(),
	}
	var buf bytes.Buffer
	err := parseTmpl("set", setTmpl).Execute(&buf, data)
	if err != nil {
		log.Fatalf("vdl: couldn't execute set template: %v", err)
	}
	return JavaFileInfo{
		Name: tdef.Name + ".java",
		Data: buf.Bytes(),
	}
}
