package java

import (
	"bytes"
	"log"

	"veyron2/vdl/compile"
)

const constTmpl = `// This file was auto-generated by the veyron vdl tool.
// Source(s): {{ .Source }}
package {{ .PackagePath }};


public final class {{ .ClassName }} {
    {{ range $file := .Files }}

    /* The following constants originate in file: {{ $file.Name }} */
    {{/*Constants*/}}
    {{ range $const := $file.Consts }}
    {{ $const.Doc }}
    public static final {{ $const.Type }} {{ $const.Name }} = {{ $const.Value }};
    {{ end }}
    {{/*Error IDs*/}}
    {{ range $errorid := $file.ErrorIDs }}
    {{ $errorid.Doc }}
    public static final java.lang.String {{ $errorid.Name }} = "{{ $errorid.ID }}";
    {{ end }}

    {{ end }}
}
`

type constConst struct {
	Doc   string
	Type  string
	Name  string
	Value string
}

type constErrorID struct {
	Doc  string
	Name string
	ID   string
}

type constFile struct {
	Name     string
	Consts   []constConst
	ErrorIDs []constErrorID
}

func shouldGenerateConstFile(pkg *compile.Package) bool {
	for _, file := range pkg.Files {
		if len(file.ConstDefs) > 0 || len(file.ErrorIDs) > 0 {
			return true
		}
	}
	return false
}

// genConstFileJava generates the (single) Java file that contains constant
// definitions from all the VDL files.
func genJavaConstFile(pkg *compile.Package, env *compile.Env) *JavaFileInfo {
	if !shouldGenerateConstFile(pkg) {
		return nil
	}

	className := toUpperCamelCase(pkg.Name) + "Constants"

	files := make([]constFile, len(pkg.Files))
	for i, file := range pkg.Files {
		consts := make([]constConst, len(file.ConstDefs))
		for j, cnst := range file.ConstDefs {
			consts[j].Doc = javaDoc(cnst.Doc)
			consts[j].Type = javaType(cnst.Value.Type(), false, env)
			consts[j].Name = toConstCase(cnst.Name)
			consts[j].Value = javaConstVal(cnst.Value, env)
		}
		errorids := make([]constErrorID, len(file.ErrorIDs))
		for j, errorid := range file.ErrorIDs {
			errorids[j].Doc = javaDoc(errorid.Doc)
			errorids[j].Name = toConstCase(errorid.Name)
			errorids[j].ID = errorid.ID
		}
		files[i].Name = file.BaseName
		files[i].Consts = consts
		files[i].ErrorIDs = errorids
	}

	data := struct {
		ClassName   string
		Source      string
		PackagePath string
		Files       []constFile
	}{
		ClassName:   className,
		Source:      javaFileNames(pkg.Files),
		PackagePath: javaPath(javaGenPkgPath(pkg.Path)),
		Files:       files,
	}
	var buf bytes.Buffer
	err := parseTmpl("const", constTmpl).Execute(&buf, data)
	if err != nil {
		log.Fatalf("vdl: couldn't execute const template: %v", err)
	}
	return &JavaFileInfo{
		Name: className + ".java",
		Data: buf.Bytes(),
	}
}
