package java

import (
	"bytes"
	"log"

	"v.io/v23/vdl"
	"v.io/v23/vdl/compile"
)

const primitiveTmpl = `
// This file was auto-generated by the veyron vdl tool.
// Source: {{.Source}}
package {{.PackagePath}};

/**
 * type {{.Name}} {{.VdlTypeString}} {{.Doc}}
 **/
@io.v.v23.vdl.GeneratedFromVdl(name = "{{.VdlTypeName}}")
{{ .AccessModifier }} final class {{.Name}} extends {{.VdlType}} {
    public static final io.v.v23.vdl.VdlType VDL_TYPE =
            io.v.v23.vdl.Types.getVdlTypeFromReflect({{.Name}}.class);

    public {{.Name}}({{.ConstructorType}} value) {
        super(VDL_TYPE, value);
    }

    @SuppressWarnings("hiding")
    public static final android.os.Parcelable.Creator<{{.Name}}> CREATOR
        = new android.os.Parcelable.Creator<{{.Name}}>() {
        @Override
        public {{.Name}} createFromParcel(android.os.Parcel in) {
            return new {{.Name}}({{.VdlType}}.CREATOR.createFromParcel(in).getValue());
        }
        @Override
        public {{.Name}}[] newArray(int size) {
            return new {{.Name}}[size];
        }
    };

    public {{.Name}}() {
        super(VDL_TYPE);
    }
}
`

// javaConstructorType returns java type that is used as a constructor argument
// type for a VDL primitive.
func javaConstructorType(t *vdl.Type) string {
	switch t.Kind() {
	case vdl.Uint16:
		return "short"
	case vdl.Uint32:
		return "int"
	case vdl.Uint64:
		return "long"
	default:
		constructorType, _ := javaBuiltInType(t, false)
		return constructorType
	}
}

// javaConstructorType returns java class that is used as a type adapter delegate
// argument for a VDL primitive.
func javaTypeAdapterDelegateClass(t *vdl.Type) string {
	switch t.Kind() {
	case vdl.Uint16:
		return "java.lang.Short"
	case vdl.Uint32:
		return "java.lang.Integer"
	case vdl.Uint64:
		return "java.lang.Long"
	default:
		typeAdapterDelegateClass, _ := javaBuiltInType(t, true)
		return typeAdapterDelegateClass
	}
}

// genJavaPrimitiveFile generates the Java class file for the provided user-defined type.
func genJavaPrimitiveFile(tdef *compile.TypeDef, env *compile.Env) JavaFileInfo {
	javaTypeName := toUpperCamelCase(tdef.Name)
	data := struct {
		AccessModifier           string
		Doc                      string
		Name                     string
		PackagePath              string
		Source                   string
		ConstructorType          string
		TypeAdapterDelegateClass string
		VdlType                  string
		VdlTypeName              string
		VdlTypeString            string
	}{
		AccessModifier:           accessModifierForName(tdef.Name),
		Doc:                      javaDocInComment(tdef.Doc),
		Name:                     javaTypeName,
		PackagePath:              javaPath(javaGenPkgPath(tdef.File.Package.GenPath)),
		Source:                   tdef.File.BaseName,
		ConstructorType:          javaConstructorType(tdef.Type),
		TypeAdapterDelegateClass: javaTypeAdapterDelegateClass(tdef.Type),
		VdlType:                  javaVdlPrimitiveType(tdef.Type.Kind()),
		VdlTypeName:              tdef.Type.Name(),
		VdlTypeString:            tdef.Type.String(),
	}
	var buf bytes.Buffer
	err := parseTmpl("primitive", primitiveTmpl).Execute(&buf, data)
	if err != nil {
		log.Fatalf("vdl: couldn't execute primitive template: %v", err)
	}
	return JavaFileInfo{
		Name: javaTypeName + ".java",
		Data: buf.Bytes(),
	}
}
