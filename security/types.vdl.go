// This file was auto-generated by the veyron vdl tool.
// Source: types.vdl

package security

import (
	// VDL system imports
	"v.io/core/veyron2/vdl"

	// VDL user imports
	"v.io/core/veyron2/uniqueid"
)

// BlessingPattern is a pattern that is matched by specific blessings.
//
// A pattern can be either a blessing (slash-separated human-readable string)
// or a blessing ending in "/$". A pattern not ending in "/$" is matched by
// blessings that can be extended to produce the same string as the pattern or
// blessings that are extensions of the pattern. For example, the pattern
// "a/b/c" is matched by all the patterns that match "a/b/c" ("a", "a/b",
// "a/b/c") and all delegates of "a/b/c" (like "a/b/c/d", "a/b/c/d/e" etc.).
//
// A pattern ending in "/$" is more restrive, and is only matched by blessings that
// can be extended to produce the same string as the pattern. For example, the
// pattern "a/b/c/$" is matched by the blessings "a", "a/b" and "a/b/c" but not
// "x", not "a/x", not "a/b/x" and not "a/b/c/x".
//
// A pattern string not having one of the above described structures is considered
// invalid.
// TODO(ataly, ashankar): Define a formal BNF grammar for blessings and blessing patterns.
type BlessingPattern string

func (BlessingPattern) __VDLReflect(struct {
	Name string "v.io/core/veyron2/security.BlessingPattern"
}) {
}

// Hash identifies a cryptographic hash function approved for use in signature algorithms.
type Hash string

func (Hash) __VDLReflect(struct {
	Name string "v.io/core/veyron2/security.Hash"
}) {
}

// Signature represents a digital signature.
type Signature struct {
	// Purpose of the signature. Can be used to prevent type attacks.
	// (See Section 4.2 of http://www-users.cs.york.ac.uk/~jac/PublishedPapers/reviewV1_1997.pdf for example).
	// The actual signature (R, S values for ECDSA keys) is produced by signing: Hash(Hash(message), Hash(Purpose)).
	Purpose []byte
	// Cryptographic hash function applied to the message before computing the signature.
	Hash Hash
	// Pair of integers that make up an ECDSA signature.
	R []byte
	S []byte
}

func (Signature) __VDLReflect(struct {
	Name string "v.io/core/veyron2/security.Signature"
}) {
}

// ThirdPartyRequirements specifies the information required by the third-party
// that will issue discharges for third-party caveats.
//
// These requirements are typically used to construct a DischargeImpetus, which
// will be sent to the third-party.
type ThirdPartyRequirements struct {
	ReportServer    bool // The blessings presented by the server of an IPC call.
	ReportMethod    bool // The name of the method being invoked.
	ReportArguments bool // Arguments to the method being invoked.
}

func (ThirdPartyRequirements) __VDLReflect(struct {
	Name string "v.io/core/veyron2/security.ThirdPartyRequirements"
}) {
}

// DischargeImpetus encapsulates the motivation for a discharge being sought.
//
// These values are reported by a principal that is requesting a Discharge for
// a third-party caveat on one of its blessings. The third-party issues
// discharges cannot safely assume that all these values are provided, or that
// they are provided honestly.
//
// Implementations of services that issue discharges are encouraged to add
// caveats to the discharge that bind the discharge to the impetus, thereby
// rendering the discharge unsuable for any other purpose.
type DischargeImpetus struct {
	Server    []BlessingPattern // The client intends to use the discharge to communicate with a server that has a blessing matching one of the patterns in this set.
	Method    string            // Name of the method being invoked by the client.
	Arguments []vdl.AnyRep      // Arguments to the method invocation.
}

func (DischargeImpetus) __VDLReflect(struct {
	Name string "v.io/core/veyron2/security.DischargeImpetus"
}) {
}

// Certificate represents the cryptographic proof of the binding of
// extensions of a blessing held by one principal to another (represented by
// a public key) under specific caveats.
//
// For example, if a principal P1 has a blessing "alice", then it can
// extend it with a Certificate to generate the blessing "alice/friend" for
// another principal P2.
type Certificate struct {
	Extension string    // Human-readable string extension bound to PublicKey.
	PublicKey []byte    // DER-encoded PKIX public key.
	Caveats   []Caveat  // Caveats on the binding of Name to PublicKey.
	Signature Signature // Signature by the blessing principal that binds the extension to the public key.
}

func (Certificate) __VDLReflect(struct {
	Name string "v.io/core/veyron2/security.Certificate"
}) {
}

// CaveatDescriptor defines an association between a caveat validation function
// (addressed by globally unique identifier) and the data needed by the
// validation function.
//
// For a validator to be invoked, a validation function must be registered with
// the validator description in the language that the function is defined in.
type CaveatDescriptor struct {
	Id        uniqueid.Id // The identifier of the caveat validation function.
	ParamType *vdl.Type   // The type of the parameter expected by the validation function.
}

func (CaveatDescriptor) __VDLReflect(struct {
	Name string "v.io/core/veyron2/security.CaveatDescriptor"
}) {
}

// Caveat is a condition on the validity of a blessing/discharge.
//
// These conditions are provided when asking a principal to create
// a blessing/discharge and are verified when extracting blessings
// (Blessings.ForName in the Go API).
//
// Given a Hash, the message digest of a caveat is:
// Hash(Hash(Id), Hash(ParamVom))
type Caveat struct {
	// TODO(ashankar): DEPRECATED: Remove before release.
	// While it exists (and length > 0), it will take precedence over
	// (Id, ParamVom)
	ValidatorVOM []byte
	Id           uniqueid.Id // The identifier of the caveat validation function.
	ParamVom     []byte      // VOM-encoded bytes of the parameters to be provided to the validation function.
}

func (Caveat) __VDLReflect(struct {
	Name string "v.io/core/veyron2/security.Caveat"
}) {
}

// WireBlessings encapsulates wire format of a set of blessings and the
// corresponding cryptographic proof that binds them to a principal
// (identified by a public key).
//
// This structure is the "wire" format for sending and receiving blessings
// in RPCs or marshaling to persistent storage. Typically, languages will
// provide a factory function that converts this wire representation to
// a more usable object to inspect and manipulate these blessings. For
// example, the NewBlessings factory function in Go.
// TODO(toddw,ashankar): When vom and config file support for VDL is
// in place, then in the config file for types.vdl specify a factory function
// that will convert between the "wire" type and the "in-memory"
// type (Blessings=blessingsImpl) via factory functions that will do the
// integrity checks.
type WireBlessings struct {
	// CertificateChains is an array of chains of certificates that bind
	// a blessing to the public key in the last certificate of the chain.
	CertificateChains [][]Certificate
}

func (WireBlessings) __VDLReflect(struct {
	Name string "v.io/core/veyron2/security.WireBlessings"
}) {
}

func init() {
	vdl.Register(BlessingPattern(""))
	vdl.Register(Hash(""))
	vdl.Register(Signature{})
	vdl.Register(ThirdPartyRequirements{})
	vdl.Register(DischargeImpetus{})
	vdl.Register(Certificate{})
	vdl.Register(CaveatDescriptor{
		ParamType: vdl.AnyType,
	})
	vdl.Register(Caveat{})
	vdl.Register(WireBlessings{})
}

// NoExtension is an optional terminator for a blessing pattern indicating that the pattern
// cannot match any extensions of the blessing from that point onwards.
const NoExtension = BlessingPattern("$")

// TODO(ataly, ashankar): The semantics of AllPrincipals breaks monotonicity in
// ACLS with NotIn clauses. For instance, the ACL "In: {AllPrincipals}, NotIn: {"foo"}
// matches the principal that presents no recognizable blessings ([]) however does not
// match the principal that presents "foo" as the only recognizable blessings (["foo"])
// We need to sort this out.
const AllPrincipals = BlessingPattern("...") // Glob pattern that matches all blessings.

const ChainSeparator = "/" // ChainSeparator joins blessing names to form a blessing chain name.

const SHA1Hash = Hash("SHA1") // SHA1 cryptographic hash function defined in RFC3174.

const SHA256Hash = Hash("SHA256") // SHA256 cryptographic hash function defined  in FIPS 180-4.

const SHA384Hash = Hash("SHA384") // SHA384 cryptographic hash function defined in FIPS 180-2.

const SHA512Hash = Hash("SHA512") // SHA512 cryptographic hash function defined in FIPS 180-2.

const SignatureForMessageSigning = "S" // Signature.Purpose used by a Principal to sign arbitrary messages.

const SignatureForBlessingCertificates = "B" // Signature.Purpose used by a Principal when signing Certificates for creating blessings.

const SignatureForDischarge = "D" // Signature.Purpose used by a Principal when signing discharges for public-key based third-party caveats.
