// This file was auto-generated by the veyron vdl tool.
// Source: types.vdl

package security

import (
	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_vdlutil "veyron2/vdl/vdlutil"
)

// Caveat is a condition on the applicability of a blessing (or
// a Discharge).
//
// These conditions are provided to PrivateID.Bless and are verified
// in PublicID.Authorize.
type Caveat struct {
	// ValidatorVOM holds the VOM-encoded bytes of the CaveatValidator
	// that validates this caveat.
	ValidatorVOM []byte
}

// BlessingPattern is a pattern that is matched by specific blessings.
//
// A pattern can be either a blessing (slash-separated human-readable string)
// or a blessing ending in a glob ("/..."). A blessing matches a pattern if it
// can be extended to produce the same string as the pattern.  For example, the
// pattern "a/b/c" is matched by the blessings "a", "a/b" and "a/b/c" but not
// "x", not "a/x", not "a/b/x" and not "a/b/c/x".
//
// Additionally, when the pattern ends with a glob ("/..."), it is matched by
// all blessings that represent delegates of the pattern string excluding the
// glob. For example, the pattern "a/b/c/..." is matched by all the patterns
// that match "a/b/c" ("a", "a/b", "a/b/c") and all delegates of "a/b/c" (like
// "a/b/c/d", "a/b/c/d/e" etc.).
type BlessingPattern string

// Label is an access control right, like Read, Write, Admin, etc.
type Label uint32

// LabelSet is a set of access control labels, represented as a bitmask.
type LabelSet Label

// ACL (Access Control List) tracks the set of blessings that grant
// access to an object and the type of access the blessing grants.
//
// When a principal presents multiple blessings, it should be authorized
// if any one of those blessings matches the ACL. Since the principal
// chooses the subset of its blessings to share (and can thus withold
// any particular one), requiring all presented blessings to match the
// ACL does not provide any security benefits.
type ACL struct {
	// In denotes the set of blessings (represented as BlessingPatterns)
	// that grant access to an object, unless blacklisted by an entry in
	// NotIn.
	//
	// For example:
	//
	//  In: {"foo/bar": "R"}
	//
	// grants "Read" access to a principal that holds the blessing "foo/bar"
	// or a delegator of "foo/bar" ("foo"), but
	// not delegates of "foo/bar" (like "foo/bar/a" or "foo/bar/b").
	//
	// While:
	//
	//  In: {"foo/bar/...": "R"}
	//
	// grants "Read" access to "foo/bar", all its delegates (like "foo/bar/baz")
	// and its delegators ("foo").
	In map[BlessingPattern]LabelSet
	// NotIn denotes the set of blessings (and their delegates) that
	// are explicitly blacklisted from specific kinds of access.
	//
	// The NotIn list is meant to be used as an override. For example:
	//
	//  In: {"foo/...": "RW"}, NotIn: {"foo/bar": "W"}
	//
	// will grant "Read" and "Write" access to "foo" and all its delegates
	// ("foo/friend", "foo/family" etc.) EXCEPT to "foo/bar" and its
	// delegates (e.g. "foo/bar/baz"), who only get "Read" access since
	// "Write" access has been explicitly blacklisted for them.
	NotIn map[string]LabelSet
}

// Hash identifies a cryptographic hash function approved for use in signature algorithms.
type Hash string

// Signature represents a digital signature.
type Signature struct {
	// Purpose of the signature. Can be used to prevent type attacks.
	// (See Section 4.2 of http://www-users.cs.york.ac.uk/~jac/PublishedPapers/reviewV1_1997.pdf for example).
	// The actual signature (R, S values for ECDSA keys) is produced by signing: Hash(Hash(message)+Purpose).
	Purpose []byte
	// Cryptographic hash function applied to the message before computing the signature.
	Hash Hash
	// Pair of integers that make up an ECDSA signature.
	R []byte
	S []byte
}

// DischargeImpetus encapsulates the motivation for a discharge being sought.
//
// These values are reported by the holder of a PublicID with ThirdPartyCaveats when
// requesting a Discharge. The third-party issuing discharges thus cannot safely
// assume that all values are provided, or that they are provided honestly.
//
// Implementations of services that issue discharges are encouraged to add caveats to the
// discharge that bind the discharge to the impetus, thereby rendering the discharge unsuable
// for any other purpose.
type DischargeImpetus struct {
	// Identity (security.PublicID) of the server on which the method is to be invoked.
	// TODO(ashankar): Replace vdlutil.Any here with the appropriate VDL representation of identities.
	Server _gen_vdlutil.Any
	// Name of the method being invoked which led to the request for a discharge.
	Method string
	// Arguments to the method invocation which led to the request for a discharge.
	Arguments []_gen_vdlutil.Any
}

const AllPrincipals = BlessingPattern("...") // Glob pattern that matches all blessings.

const ChainSeparator = "/" // ChainSeparator joins blessing names to form a blessing chain name.

const ResolveLabel = Label(1) // ResolveLabel applies to operations involving navigating the namespace.

const ReadLabel = Label(2) // ReadLabel applies to operations where state of the object is not changed.

const WriteLabel = Label(4) // WriteLabel applies to operations where the contents of an object are changed.

const AdminLabel = Label(8) // AdminLabel applies to operations where metadata about the object (such as access control) is changed.

const DebugLabel = Label(16) // DebugLabel applies to operations that returns metadata about the object.

const MonitoringLabel = Label(32) // MonitoringLabel is like DebugLabel.

const SHA1Hash = Hash("SHA1") // SHA1 cryptographic hash function defined in RFC3174.

const SHA256Hash = Hash("SHA256") // SHA256 cryptographic hash function defined  in FIPS 180-4.

const SHA384Hash = Hash("SHA384") // SHA384 cryptographic hash function defined in FIPS 180-2.

const SHA512Hash = Hash("SHA512") // SHA512 cryptographic hash function defined in FIPS 180-2.

const NoHash = Hash("") // Identity hash function. TODO(ashankar,ataly): REMOVE THIS BEFORE RELEASE. This is NOT a cryptographic hash function.
