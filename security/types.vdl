package security

// PrincipalPattern is a pattern identifying a set of principal names.
type PrincipalPattern string

// Label is an access control right, like Read, Write, Admin, etc.
type Label uint32

// LabelSet is a set of access control labels, represented as a bitmask.
type LabelSet Label

// ACL pairs principal sets with label sets. This should be treated as an
// unordered set, not as a dictionary.  A client with PublicID <pid> is
// allowed access using <label> if there exists a pair (principals, labels)
// in the ACL such that <pid>.Match(principals) and labels.HasLabel(label).
type ACL map[PrincipalPattern]LabelSet

// Hash identifies a cryptographic hash function.
type Hash string

const (
	// AllPrincipals is a pattern that all principals match.
	AllPrincipals = "*"

	// ResolveLabel allows resolve operations.
	ResolveLabel = Label(1 << 0)

	// ReadLabel allows read operations.
	ReadLabel = Label(1 << 1)

	// WriteLabel allows write operations.
	WriteLabel = Label(1 << 2)

	// AdminLabel allows administrative operations.
	AdminLabel = Label(1 << 3)

	// DebugLabel allows debug operations.
	DebugLabel = Label(1 << 4)

	// MonitoringLabel allows monitoring operations.
	MonitoringLabel = Label(1 << 5)

	// SHA1Hash denotes the SHA1 cryptographic hash function as defined
	// in RFC3174.
	SHA1Hash = Hash("SHA1")
	// SHA256Hash denotes the SHA256 cryptographic hash function as defined
	// in FIPS 180-4.
	SHA256Hash = Hash("SHA256")
	// SHA384Hash denotes the SHA384 cryptographic hash function as defined
	// in FIPS 180-2.
	SHA384Hash = Hash("SHA384")
	// SHA512Hash denotes the SHA512 cryptographic hash function as defined
	// in FIPS 180-2.
	SHA512Hash = Hash("SHA512")
	// NoHash denotes the identity hash function.
	NoHash = Hash("")
)

// Signature represents an ECDSA signature.
type Signature struct {
	// Hash specifies a cryptographic hash function that was used when this
	// signature was computed.
	Hash Hash
	// R, S specify the pair of integers that make up an ECDSA signature.
	R, S []byte
}
