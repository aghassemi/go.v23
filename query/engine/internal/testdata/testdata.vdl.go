// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: testdata

package testdata

import (
	"fmt"
	"reflect"
	"time"
	"v.io/v23/vdl"
	time_2 "v.io/v23/vdlroot/time"
)

type AddressInfo struct {
	Street string
	City   string
	State  string
	Zip    string
}

func (AddressInfo) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.AddressInfo"`
}) {
}

func (m *AddressInfo) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_AddressInfo == nil || __VDLType0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Street")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Street), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("City")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.City), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("State")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromString(string(m.State), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Zip")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget9.FromString(string(m.Zip), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *AddressInfo) MakeVDLTarget() vdl.Target {
	return &AddressInfoTarget{Value: m}
}

type AddressInfoTarget struct {
	Value        *AddressInfo
	streetTarget vdl.StringTarget
	cityTarget   vdl.StringTarget
	stateTarget  vdl.StringTarget
	zipTarget    vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *AddressInfoTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_AddressInfo) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_AddressInfo)
	}
	return t, nil
}
func (t *AddressInfoTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Street":
		t.streetTarget.Value = &t.Value.Street
		target, err := &t.streetTarget, error(nil)
		return nil, target, err
	case "City":
		t.cityTarget.Value = &t.Value.City
		target, err := &t.cityTarget, error(nil)
		return nil, target, err
	case "State":
		t.stateTarget.Value = &t.Value.State
		target, err := &t.stateTarget, error(nil)
		return nil, target, err
	case "Zip":
		t.zipTarget.Value = &t.Value.Zip
		target, err := &t.zipTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_AddressInfo)
	}
}
func (t *AddressInfoTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *AddressInfoTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type CreditAgency int

const (
	CreditAgencyEquifax CreditAgency = iota
	CreditAgencyExperian
	CreditAgencyTransUnion
)

// CreditAgencyAll holds all labels for CreditAgency.
var CreditAgencyAll = [...]CreditAgency{CreditAgencyEquifax, CreditAgencyExperian, CreditAgencyTransUnion}

// CreditAgencyFromString creates a CreditAgency from a string label.
func CreditAgencyFromString(label string) (x CreditAgency, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *CreditAgency) Set(label string) error {
	switch label {
	case "Equifax", "equifax":
		*x = CreditAgencyEquifax
		return nil
	case "Experian", "experian":
		*x = CreditAgencyExperian
		return nil
	case "TransUnion", "transunion":
		*x = CreditAgencyTransUnion
		return nil
	}
	*x = -1
	return fmt.Errorf("unknown label %q in testdata.CreditAgency", label)
}

// String returns the string label of x.
func (x CreditAgency) String() string {
	switch x {
	case CreditAgencyEquifax:
		return "Equifax"
	case CreditAgencyExperian:
		return "Experian"
	case CreditAgencyTransUnion:
		return "TransUnion"
	}
	return ""
}

func (CreditAgency) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.CreditAgency"`
	Enum struct{ Equifax, Experian, TransUnion string }
}) {
}

func (m *CreditAgency) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromEnumLabel((*m).String(), __VDLType_v_io_v23_query_engine_internal_testdata_CreditAgency); err != nil {
		return err
	}
	return nil
}

func (m *CreditAgency) MakeVDLTarget() vdl.Target {
	return &CreditAgencyTarget{Value: m}
}

type CreditAgencyTarget struct {
	Value *CreditAgency
	vdl.TargetBase
}

func (t *CreditAgencyTarget) FromEnumLabel(src string, tt *vdl.Type) error {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_CreditAgency) {
		return fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_CreditAgency)
	}
	switch src {
	case "Equifax":
		*t.Value = 0
	case "Experian":
		*t.Value = 1
	case "TransUnion":
		*t.Value = 2
	default:
		return fmt.Errorf("label %s not in enum %v", src, __VDLType_v_io_v23_query_engine_internal_testdata_CreditAgency)
	}

	return nil
}

type ExperianRating int

const (
	ExperianRatingGood ExperianRating = iota
	ExperianRatingBad
)

// ExperianRatingAll holds all labels for ExperianRating.
var ExperianRatingAll = [...]ExperianRating{ExperianRatingGood, ExperianRatingBad}

// ExperianRatingFromString creates a ExperianRating from a string label.
func ExperianRatingFromString(label string) (x ExperianRating, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *ExperianRating) Set(label string) error {
	switch label {
	case "Good", "good":
		*x = ExperianRatingGood
		return nil
	case "Bad", "bad":
		*x = ExperianRatingBad
		return nil
	}
	*x = -1
	return fmt.Errorf("unknown label %q in testdata.ExperianRating", label)
}

// String returns the string label of x.
func (x ExperianRating) String() string {
	switch x {
	case ExperianRatingGood:
		return "Good"
	case ExperianRatingBad:
		return "Bad"
	}
	return ""
}

func (ExperianRating) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.ExperianRating"`
	Enum struct{ Good, Bad string }
}) {
}

func (m *ExperianRating) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromEnumLabel((*m).String(), __VDLType_v_io_v23_query_engine_internal_testdata_ExperianRating); err != nil {
		return err
	}
	return nil
}

func (m *ExperianRating) MakeVDLTarget() vdl.Target {
	return &ExperianRatingTarget{Value: m}
}

type ExperianRatingTarget struct {
	Value *ExperianRating
	vdl.TargetBase
}

func (t *ExperianRatingTarget) FromEnumLabel(src string, tt *vdl.Type) error {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_ExperianRating) {
		return fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_ExperianRating)
	}
	switch src {
	case "Good":
		*t.Value = 0
	case "Bad":
		*t.Value = 1
	default:
		return fmt.Errorf("label %s not in enum %v", src, __VDLType_v_io_v23_query_engine_internal_testdata_ExperianRating)
	}

	return nil
}

type RatingsArray [4]int16

func (RatingsArray) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.RatingsArray"`
}) {
}

func (m *RatingsArray) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	listTarget1, err := t.StartList(__VDLType_v_io_v23_query_engine_internal_testdata_RatingsArray, 4)
	if err != nil {
		return err
	}
	for i, elem3 := range *m {
		elemTarget2, err := listTarget1.StartElem(i)
		if err != nil {
			return err
		}
		if err := elemTarget2.FromInt(int64(elem3), vdl.Int16Type); err != nil {
			return err
		}
		if err := listTarget1.FinishElem(elemTarget2); err != nil {
			return err
		}
	}
	if err := t.FinishList(listTarget1); err != nil {
		return err
	}
	return nil
}

func (m *RatingsArray) MakeVDLTarget() vdl.Target {
	return &RatingsArrayTarget{Value: m}
}

// RatingsArray
type RatingsArrayTarget struct {
	Value      *RatingsArray
	elemTarget vdl.Int16Target
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *RatingsArrayTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_RatingsArray) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_RatingsArray)
	}
	return t, nil
}
func (t *RatingsArrayTarget) StartElem(index int) (elem vdl.Target, _ error) {
	t.elemTarget.Value = &(*t.Value)[index]
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *RatingsArrayTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *RatingsArrayTarget) FinishList(elem vdl.ListTarget) error {

	return nil
}

type EquifaxCreditReport struct {
	Rating           byte
	FourScoreRatings RatingsArray
}

func (EquifaxCreditReport) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.EquifaxCreditReport"`
}) {
}

func (m *EquifaxCreditReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_EquifaxCreditReport == nil || __VDLType1 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Rating")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromUint(uint64(m.Rating), vdl.ByteType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("FourScoreRatings")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.FourScoreRatings.FillVDLTarget(fieldTarget5, __VDLType_v_io_v23_query_engine_internal_testdata_RatingsArray); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *EquifaxCreditReport) MakeVDLTarget() vdl.Target {
	return &EquifaxCreditReportTarget{Value: m}
}

type EquifaxCreditReportTarget struct {
	Value                  *EquifaxCreditReport
	ratingTarget           vdl.ByteTarget
	fourScoreRatingsTarget RatingsArrayTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *EquifaxCreditReportTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_EquifaxCreditReport) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_EquifaxCreditReport)
	}
	return t, nil
}
func (t *EquifaxCreditReportTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Rating":
		t.ratingTarget.Value = &t.Value.Rating
		target, err := &t.ratingTarget, error(nil)
		return nil, target, err
	case "FourScoreRatings":
		t.fourScoreRatingsTarget.Value = &t.Value.FourScoreRatings
		target, err := &t.fourScoreRatingsTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_EquifaxCreditReport)
	}
}
func (t *EquifaxCreditReportTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *EquifaxCreditReportTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type Tdh int

const (
	TdhTom Tdh = iota
	TdhDick
	TdhHarry
)

// TdhAll holds all labels for Tdh.
var TdhAll = [...]Tdh{TdhTom, TdhDick, TdhHarry}

// TdhFromString creates a Tdh from a string label.
func TdhFromString(label string) (x Tdh, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *Tdh) Set(label string) error {
	switch label {
	case "Tom", "tom":
		*x = TdhTom
		return nil
	case "Dick", "dick":
		*x = TdhDick
		return nil
	case "Harry", "harry":
		*x = TdhHarry
		return nil
	}
	*x = -1
	return fmt.Errorf("unknown label %q in testdata.Tdh", label)
}

// String returns the string label of x.
func (x Tdh) String() string {
	switch x {
	case TdhTom:
		return "Tom"
	case TdhDick:
		return "Dick"
	case TdhHarry:
		return "Harry"
	}
	return ""
}

func (Tdh) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.Tdh"`
	Enum struct{ Tom, Dick, Harry string }
}) {
}

func (m *Tdh) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromEnumLabel((*m).String(), __VDLType_v_io_v23_query_engine_internal_testdata_Tdh); err != nil {
		return err
	}
	return nil
}

func (m *Tdh) MakeVDLTarget() vdl.Target {
	return &TdhTarget{Value: m}
}

type TdhTarget struct {
	Value *Tdh
	vdl.TargetBase
}

func (t *TdhTarget) FromEnumLabel(src string, tt *vdl.Type) error {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_Tdh) {
		return fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_Tdh)
	}
	switch src {
	case "Tom":
		*t.Value = 0
	case "Dick":
		*t.Value = 1
	case "Harry":
		*t.Value = 2
	default:
		return fmt.Errorf("label %s not in enum %v", src, __VDLType_v_io_v23_query_engine_internal_testdata_Tdh)
	}

	return nil
}

type ExperianCreditReport struct {
	Rating       ExperianRating
	TdhApprovals map[Tdh]struct{}
	Auditor      Tdh
}

func (ExperianCreditReport) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.ExperianCreditReport"`
}) {
}

func (m *ExperianCreditReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_ExperianCreditReport == nil || __VDLType2 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Rating")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Rating.FillVDLTarget(fieldTarget3, __VDLType_v_io_v23_query_engine_internal_testdata_ExperianRating); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("TdhApprovals")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget6, err := fieldTarget5.StartSet(__VDLType3, len(m.TdhApprovals))
		if err != nil {
			return err
		}
		for key8 := range m.TdhApprovals {
			keyTarget7, err := setTarget6.StartKey()
			if err != nil {
				return err
			}

			if err := key8.FillVDLTarget(keyTarget7, __VDLType_v_io_v23_query_engine_internal_testdata_Tdh); err != nil {
				return err
			}
			if err := setTarget6.FinishKey(keyTarget7); err != nil {
				return err
			}
		}
		if err := fieldTarget5.FinishSet(setTarget6); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("Auditor")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Auditor.FillVDLTarget(fieldTarget10, __VDLType_v_io_v23_query_engine_internal_testdata_Tdh); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ExperianCreditReport) MakeVDLTarget() vdl.Target {
	return &ExperianCreditReportTarget{Value: m}
}

type ExperianCreditReportTarget struct {
	Value              *ExperianCreditReport
	ratingTarget       ExperianRatingTarget
	tdhApprovalsTarget unnamed_7365745b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e54646820656e756d7b546f6d3b4469636b3b48617272797d5dTarget
	auditorTarget      TdhTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ExperianCreditReportTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_ExperianCreditReport) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_ExperianCreditReport)
	}
	return t, nil
}
func (t *ExperianCreditReportTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Rating":
		t.ratingTarget.Value = &t.Value.Rating
		target, err := &t.ratingTarget, error(nil)
		return nil, target, err
	case "TdhApprovals":
		t.tdhApprovalsTarget.Value = &t.Value.TdhApprovals
		target, err := &t.tdhApprovalsTarget, error(nil)
		return nil, target, err
	case "Auditor":
		t.auditorTarget.Value = &t.Value.Auditor
		target, err := &t.auditorTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_ExperianCreditReport)
	}
}
func (t *ExperianCreditReportTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ExperianCreditReportTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// map[Tdh]struct{}
type unnamed_7365745b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e54646820656e756d7b546f6d3b4469636b3b48617272797d5dTarget struct {
	Value     *map[Tdh]struct{}
	currKey   Tdh
	keyTarget TdhTarget
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e54646820656e756d7b546f6d3b4469636b3b48617272797d5dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType3) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType3)
	}
	*t.Value = make(map[Tdh]struct{})
	return t, nil
}
func (t *unnamed_7365745b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e54646820656e756d7b546f6d3b4469636b3b48617272797d5dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = TdhTom
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e54646820656e756d7b546f6d3b4469636b3b48617272797d5dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e54646820656e756d7b546f6d3b4469636b3b48617272797d5dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

type TransUnionCreditReport struct {
	Rating          int16
	PreviousRatings map[string]int16
}

func (TransUnionCreditReport) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.TransUnionCreditReport"`
}) {
}

func (m *TransUnionCreditReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_TransUnionCreditReport == nil || __VDLType4 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Rating")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromInt(int64(m.Rating), vdl.Int16Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("PreviousRatings")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget6, err := fieldTarget5.StartMap(__VDLType5, len(m.PreviousRatings))
		if err != nil {
			return err
		}
		for key8, value10 := range m.PreviousRatings {
			keyTarget7, err := mapTarget6.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget7.FromString(string(key8), vdl.StringType); err != nil {
				return err
			}
			valueTarget9, err := mapTarget6.FinishKeyStartField(keyTarget7)
			if err != nil {
				return err
			}
			if err := valueTarget9.FromInt(int64(value10), vdl.Int16Type); err != nil {
				return err
			}
			if err := mapTarget6.FinishField(keyTarget7, valueTarget9); err != nil {
				return err
			}
		}
		if err := fieldTarget5.FinishMap(mapTarget6); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *TransUnionCreditReport) MakeVDLTarget() vdl.Target {
	return &TransUnionCreditReportTarget{Value: m}
}

type TransUnionCreditReportTarget struct {
	Value                 *TransUnionCreditReport
	ratingTarget          vdl.Int16Target
	previousRatingsTarget unnamed_6d61705b737472696e675d696e743136Target
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *TransUnionCreditReportTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_TransUnionCreditReport) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_TransUnionCreditReport)
	}
	return t, nil
}
func (t *TransUnionCreditReportTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Rating":
		t.ratingTarget.Value = &t.Value.Rating
		target, err := &t.ratingTarget, error(nil)
		return nil, target, err
	case "PreviousRatings":
		t.previousRatingsTarget.Value = &t.Value.PreviousRatings
		target, err := &t.previousRatingsTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_TransUnionCreditReport)
	}
}
func (t *TransUnionCreditReportTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *TransUnionCreditReportTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// map[string]int16
type unnamed_6d61705b737472696e675d696e743136Target struct {
	Value      *map[string]int16
	currKey    string
	currElem   int16
	keyTarget  vdl.StringTarget
	elemTarget vdl.Int16Target
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b737472696e675d696e743136Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType5) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType5)
	}
	*t.Value = make(map[string]int16)
	return t, nil
}
func (t *unnamed_6d61705b737472696e675d696e743136Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = ""
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b737472696e675d696e743136Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = int16(0)
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b737472696e675d696e743136Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b737472696e675d696e743136Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

type (
	// AgencyReport represents any single field of the AgencyReport union type.
	AgencyReport interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the AgencyReport union type.
		__VDLReflect(__AgencyReportReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
	}
	// AgencyReportEquifaxReport represents field EquifaxReport of the AgencyReport union type.
	AgencyReportEquifaxReport struct{ Value EquifaxCreditReport }
	// AgencyReportExperianReport represents field ExperianReport of the AgencyReport union type.
	AgencyReportExperianReport struct{ Value ExperianCreditReport }
	// AgencyReportTransUnionReport represents field TransUnionReport of the AgencyReport union type.
	AgencyReportTransUnionReport struct{ Value TransUnionCreditReport }
	// __AgencyReportReflect describes the AgencyReport union type.
	__AgencyReportReflect struct {
		Name  string `vdl:"v.io/v23/query/engine/internal/testdata.AgencyReport"`
		Type  AgencyReport
		Union struct {
			EquifaxReport    AgencyReportEquifaxReport
			ExperianReport   AgencyReportExperianReport
			TransUnionReport AgencyReportTransUnionReport
		}
	}
)

func (x AgencyReportEquifaxReport) Index() int                         { return 0 }
func (x AgencyReportEquifaxReport) Interface() interface{}             { return x.Value }
func (x AgencyReportEquifaxReport) Name() string                       { return "EquifaxReport" }
func (x AgencyReportEquifaxReport) __VDLReflect(__AgencyReportReflect) {}

func (m AgencyReportEquifaxReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_v_io_v23_query_engine_internal_testdata_AgencyReport)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("EquifaxReport")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_v_io_v23_query_engine_internal_testdata_EquifaxCreditReport); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m AgencyReportEquifaxReport) MakeVDLTarget() vdl.Target {
	return nil
}

func (x AgencyReportExperianReport) Index() int                         { return 1 }
func (x AgencyReportExperianReport) Interface() interface{}             { return x.Value }
func (x AgencyReportExperianReport) Name() string                       { return "ExperianReport" }
func (x AgencyReportExperianReport) __VDLReflect(__AgencyReportReflect) {}

func (m AgencyReportExperianReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_v_io_v23_query_engine_internal_testdata_AgencyReport)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("ExperianReport")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_v_io_v23_query_engine_internal_testdata_ExperianCreditReport); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m AgencyReportExperianReport) MakeVDLTarget() vdl.Target {
	return nil
}

func (x AgencyReportTransUnionReport) Index() int                         { return 2 }
func (x AgencyReportTransUnionReport) Interface() interface{}             { return x.Value }
func (x AgencyReportTransUnionReport) Name() string                       { return "TransUnionReport" }
func (x AgencyReportTransUnionReport) __VDLReflect(__AgencyReportReflect) {}

func (m AgencyReportTransUnionReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_v_io_v23_query_engine_internal_testdata_AgencyReport)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("TransUnionReport")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_v_io_v23_query_engine_internal_testdata_TransUnionCreditReport); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m AgencyReportTransUnionReport) MakeVDLTarget() vdl.Target {
	return nil
}

type CreditReport struct {
	Agency CreditAgency
	Report AgencyReport
}

func (CreditReport) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.CreditReport"`
}) {
}

func (m *CreditReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_CreditReport == nil || __VDLType6 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Agency")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Agency.FillVDLTarget(fieldTarget3, __VDLType_v_io_v23_query_engine_internal_testdata_CreditAgency); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Report")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		unionValue6 := m.Report
		if unionValue6 == nil {
			unionValue6 = AgencyReportEquifaxReport{}
		}
		if err := unionValue6.FillVDLTarget(fieldTarget5, __VDLType_v_io_v23_query_engine_internal_testdata_AgencyReport); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *CreditReport) MakeVDLTarget() vdl.Target {
	return &CreditReportTarget{Value: m}
}

type CreditReportTarget struct {
	Value        *CreditReport
	agencyTarget CreditAgencyTarget

	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *CreditReportTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_CreditReport) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_CreditReport)
	}
	return t, nil
}
func (t *CreditReportTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Agency":
		t.agencyTarget.Value = &t.Value.Agency
		target, err := &t.agencyTarget, error(nil)
		return nil, target, err
	case "Report":
		target, err := vdl.ReflectTarget(reflect.ValueOf(&t.Value.Report))
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_CreditReport)
	}
}
func (t *CreditReportTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *CreditReportTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type Customer struct {
	Name              string
	Id                int64
	Active            bool
	Address           AddressInfo
	PreviousAddresses []AddressInfo
	Credit            CreditReport
}

func (Customer) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.Customer"`
}) {
}

func (m *Customer) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_Customer == nil || __VDLType7 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Id")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromInt(int64(m.Id), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Active")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromBool(bool(m.Active), vdl.BoolType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Address")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Address.FillVDLTarget(fieldTarget9, __VDLType_v_io_v23_query_engine_internal_testdata_AddressInfo); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	keyTarget10, fieldTarget11, err := fieldsTarget1.StartField("PreviousAddresses")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget12, err := fieldTarget11.StartList(__VDLType8, len(m.PreviousAddresses))
		if err != nil {
			return err
		}
		for i, elem14 := range m.PreviousAddresses {
			elemTarget13, err := listTarget12.StartElem(i)
			if err != nil {
				return err
			}

			if err := elem14.FillVDLTarget(elemTarget13, __VDLType_v_io_v23_query_engine_internal_testdata_AddressInfo); err != nil {
				return err
			}
			if err := listTarget12.FinishElem(elemTarget13); err != nil {
				return err
			}
		}
		if err := fieldTarget11.FinishList(listTarget12); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget10, fieldTarget11); err != nil {
			return err
		}
	}
	keyTarget15, fieldTarget16, err := fieldsTarget1.StartField("Credit")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Credit.FillVDLTarget(fieldTarget16, __VDLType_v_io_v23_query_engine_internal_testdata_CreditReport); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget15, fieldTarget16); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Customer) MakeVDLTarget() vdl.Target {
	return &CustomerTarget{Value: m}
}

type CustomerTarget struct {
	Value                   *Customer
	nameTarget              vdl.StringTarget
	idTarget                vdl.Int64Target
	activeTarget            vdl.BoolTarget
	addressTarget           AddressInfoTarget
	previousAddressesTarget unnamed_5b5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e41646472657373496e666f207374727563747b53747265657420737472696e673b4369747920737472696e673b537461746520737472696e673b5a697020737472696e677dTarget
	creditTarget            CreditReportTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *CustomerTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_Customer) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_Customer)
	}
	return t, nil
}
func (t *CustomerTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Name":
		t.nameTarget.Value = &t.Value.Name
		target, err := &t.nameTarget, error(nil)
		return nil, target, err
	case "Id":
		t.idTarget.Value = &t.Value.Id
		target, err := &t.idTarget, error(nil)
		return nil, target, err
	case "Active":
		t.activeTarget.Value = &t.Value.Active
		target, err := &t.activeTarget, error(nil)
		return nil, target, err
	case "Address":
		t.addressTarget.Value = &t.Value.Address
		target, err := &t.addressTarget, error(nil)
		return nil, target, err
	case "PreviousAddresses":
		t.previousAddressesTarget.Value = &t.Value.PreviousAddresses
		target, err := &t.previousAddressesTarget, error(nil)
		return nil, target, err
	case "Credit":
		t.creditTarget.Value = &t.Value.Credit
		target, err := &t.creditTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_Customer)
	}
}
func (t *CustomerTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *CustomerTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// []AddressInfo
type unnamed_5b5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e41646472657373496e666f207374727563747b53747265657420737472696e673b4369747920737472696e673b537461746520737472696e673b5a697020737472696e677dTarget struct {
	Value      *[]AddressInfo
	elemTarget AddressInfoTarget
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *unnamed_5b5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e41646472657373496e666f207374727563747b53747265657420737472696e673b4369747920737472696e673b537461746520737472696e673b5a697020737472696e677dTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {

	if !vdl.Compatible(tt, __VDLType8) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType8)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]AddressInfo, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *unnamed_5b5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e41646472657373496e666f207374727563747b53747265657420737472696e673b4369747920737472696e673b537461746520737472696e673b5a697020737472696e677dTarget) StartElem(index int) (elem vdl.Target, _ error) {
	t.elemTarget.Value = &(*t.Value)[index]
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_5b5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e41646472657373496e666f207374727563747b53747265657420737472696e673b4369747920737472696e673b537461746520737472696e673b5a697020737472696e677dTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *unnamed_5b5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e41646472657373496e666f207374727563747b53747265657420737472696e673b4369747920737472696e673b537461746520737472696e673b5a697020737472696e677dTarget) FinishList(elem vdl.ListTarget) error {

	return nil
}

type Invoice struct {
	CustId      int64
	InvoiceNum  int64
	InvoiceDate time.Time
	Amount      int64
	ShipTo      AddressInfo
}

func (Invoice) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.Invoice"`
}) {
}

func (m *Invoice) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("CustId")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromInt(int64(m.CustId), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("InvoiceNum")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromInt(int64(m.InvoiceNum), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	var wireValue6 time_2.Time
	if err := time_2.TimeFromNative(&wireValue6, m.InvoiceDate); err != nil {
		return err
	}

	keyTarget7, fieldTarget8, err := fieldsTarget1.StartField("InvoiceDate")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue6.FillVDLTarget(fieldTarget8, __VDLType_time_Time); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget7, fieldTarget8); err != nil {
			return err
		}
	}
	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("Amount")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget10.FromInt(int64(m.Amount), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	keyTarget11, fieldTarget12, err := fieldsTarget1.StartField("ShipTo")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.ShipTo.FillVDLTarget(fieldTarget12, __VDLType_v_io_v23_query_engine_internal_testdata_AddressInfo); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget11, fieldTarget12); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Invoice) MakeVDLTarget() vdl.Target {
	return &InvoiceTarget{Value: m}
}

type InvoiceTarget struct {
	Value             *Invoice
	custIdTarget      vdl.Int64Target
	invoiceNumTarget  vdl.Int64Target
	invoiceDateTarget time_2.TimeTarget
	amountTarget      vdl.Int64Target
	shipToTarget      AddressInfoTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *InvoiceTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_Invoice) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_Invoice)
	}
	return t, nil
}
func (t *InvoiceTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "CustId":
		t.custIdTarget.Value = &t.Value.CustId
		target, err := &t.custIdTarget, error(nil)
		return nil, target, err
	case "InvoiceNum":
		t.invoiceNumTarget.Value = &t.Value.InvoiceNum
		target, err := &t.invoiceNumTarget, error(nil)
		return nil, target, err
	case "InvoiceDate":
		t.invoiceDateTarget.Value = &t.Value.InvoiceDate
		target, err := &t.invoiceDateTarget, error(nil)
		return nil, target, err
	case "Amount":
		t.amountTarget.Value = &t.Value.Amount
		target, err := &t.amountTarget, error(nil)
		return nil, target, err
	case "ShipTo":
		t.shipToTarget.Value = &t.Value.ShipTo
		target, err := &t.shipToTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_Invoice)
	}
}
func (t *InvoiceTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *InvoiceTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type Numbers struct {
	B    byte
	Ui16 uint16
	Ui32 uint32
	Ui64 uint64
	I16  int16
	I32  int32
	I64  int64
	F32  float32
	F64  float64
	C64  complex64
	C128 complex128
}

func (Numbers) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.Numbers"`
}) {
}

func (m *Numbers) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_Numbers == nil || __VDLType10 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("B")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromUint(uint64(m.B), vdl.ByteType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Ui16")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromUint(uint64(m.Ui16), vdl.Uint16Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Ui32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromUint(uint64(m.Ui32), vdl.Uint32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Ui64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget9.FromUint(uint64(m.Ui64), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	keyTarget10, fieldTarget11, err := fieldsTarget1.StartField("I16")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget11.FromInt(int64(m.I16), vdl.Int16Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget10, fieldTarget11); err != nil {
			return err
		}
	}
	keyTarget12, fieldTarget13, err := fieldsTarget1.StartField("I32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget13.FromInt(int64(m.I32), vdl.Int32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget12, fieldTarget13); err != nil {
			return err
		}
	}
	keyTarget14, fieldTarget15, err := fieldsTarget1.StartField("I64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget15.FromInt(int64(m.I64), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget14, fieldTarget15); err != nil {
			return err
		}
	}
	keyTarget16, fieldTarget17, err := fieldsTarget1.StartField("F32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget17.FromFloat(float64(m.F32), vdl.Float32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget16, fieldTarget17); err != nil {
			return err
		}
	}
	keyTarget18, fieldTarget19, err := fieldsTarget1.StartField("F64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget19.FromFloat(float64(m.F64), vdl.Float64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget18, fieldTarget19); err != nil {
			return err
		}
	}
	keyTarget20, fieldTarget21, err := fieldsTarget1.StartField("C64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget21.FromComplex(complex128(m.C64), vdl.Complex64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget20, fieldTarget21); err != nil {
			return err
		}
	}
	keyTarget22, fieldTarget23, err := fieldsTarget1.StartField("C128")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget23.FromComplex(complex128(m.C128), vdl.Complex128Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget22, fieldTarget23); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Numbers) MakeVDLTarget() vdl.Target {
	return &NumbersTarget{Value: m}
}

type NumbersTarget struct {
	Value      *Numbers
	bTarget    vdl.ByteTarget
	ui16Target vdl.Uint16Target
	ui32Target vdl.Uint32Target
	ui64Target vdl.Uint64Target
	i16Target  vdl.Int16Target
	i32Target  vdl.Int32Target
	i64Target  vdl.Int64Target
	f32Target  vdl.Float32Target
	f64Target  vdl.Float64Target
	c64Target  vdl.Complex64Target
	c128Target vdl.Complex128Target
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *NumbersTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_Numbers) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_Numbers)
	}
	return t, nil
}
func (t *NumbersTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "B":
		t.bTarget.Value = &t.Value.B
		target, err := &t.bTarget, error(nil)
		return nil, target, err
	case "Ui16":
		t.ui16Target.Value = &t.Value.Ui16
		target, err := &t.ui16Target, error(nil)
		return nil, target, err
	case "Ui32":
		t.ui32Target.Value = &t.Value.Ui32
		target, err := &t.ui32Target, error(nil)
		return nil, target, err
	case "Ui64":
		t.ui64Target.Value = &t.Value.Ui64
		target, err := &t.ui64Target, error(nil)
		return nil, target, err
	case "I16":
		t.i16Target.Value = &t.Value.I16
		target, err := &t.i16Target, error(nil)
		return nil, target, err
	case "I32":
		t.i32Target.Value = &t.Value.I32
		target, err := &t.i32Target, error(nil)
		return nil, target, err
	case "I64":
		t.i64Target.Value = &t.Value.I64
		target, err := &t.i64Target, error(nil)
		return nil, target, err
	case "F32":
		t.f32Target.Value = &t.Value.F32
		target, err := &t.f32Target, error(nil)
		return nil, target, err
	case "F64":
		t.f64Target.Value = &t.Value.F64
		target, err := &t.f64Target, error(nil)
		return nil, target, err
	case "C64":
		t.c64Target.Value = &t.Value.C64
		target, err := &t.c64Target, error(nil)
		return nil, target, err
	case "C128":
		t.c128Target.Value = &t.Value.C128
		target, err := &t.c128Target, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_Numbers)
	}
}
func (t *NumbersTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *NumbersTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type FooType struct {
	Bar BarType
}

func (FooType) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.FooType"`
}) {
}

func (m *FooType) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_FooType == nil || __VDLType11 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Bar")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Bar.FillVDLTarget(fieldTarget3, __VDLType_v_io_v23_query_engine_internal_testdata_BarType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *FooType) MakeVDLTarget() vdl.Target {
	return &FooTypeTarget{Value: m}
}

type FooTypeTarget struct {
	Value     *FooType
	barTarget BarTypeTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *FooTypeTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_FooType) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_FooType)
	}
	return t, nil
}
func (t *FooTypeTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Bar":
		t.barTarget.Value = &t.Value.Bar
		target, err := &t.barTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_FooType)
	}
}
func (t *FooTypeTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *FooTypeTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type BarTypeTarget struct {
	Value     *BarType
	bazTarget BazTypeTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *BarTypeTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_BarType) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_BarType)
	}
	return t, nil
}
func (t *BarTypeTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Baz":
		t.bazTarget.Value = &t.Value.Baz
		target, err := &t.bazTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_BarType)
	}
}
func (t *BarTypeTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *BarTypeTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type BazTypeTarget struct {
	Value      *BazType
	nameTarget vdl.StringTarget

	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *BazTypeTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_BazType) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_BazType)
	}
	return t, nil
}
func (t *BazTypeTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Name":
		t.nameTarget.Value = &t.Value.Name
		target, err := &t.nameTarget, error(nil)
		return nil, target, err
	case "TitleOrValue":
		target, err := vdl.ReflectTarget(reflect.ValueOf(&t.Value.TitleOrValue))
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_BazType)
	}
}
func (t *BazTypeTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *BazTypeTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type BarType struct {
	Baz BazType
}

func (BarType) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.BarType"`
}) {
}

func (m *BarType) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_BarType == nil || __VDLType12 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Baz")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Baz.FillVDLTarget(fieldTarget3, __VDLType_v_io_v23_query_engine_internal_testdata_BazType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *BarType) MakeVDLTarget() vdl.Target {
	return &BarTypeTarget{Value: m}
}

type (
	// TitleOrValueType represents any single field of the TitleOrValueType union type.
	TitleOrValueType interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the TitleOrValueType union type.
		__VDLReflect(__TitleOrValueTypeReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
	}
	// TitleOrValueTypeTitle represents field Title of the TitleOrValueType union type.
	TitleOrValueTypeTitle struct{ Value string }
	// TitleOrValueTypeValue represents field Value of the TitleOrValueType union type.
	TitleOrValueTypeValue struct{ Value int64 }
	// __TitleOrValueTypeReflect describes the TitleOrValueType union type.
	__TitleOrValueTypeReflect struct {
		Name  string `vdl:"v.io/v23/query/engine/internal/testdata.TitleOrValueType"`
		Type  TitleOrValueType
		Union struct {
			Title TitleOrValueTypeTitle
			Value TitleOrValueTypeValue
		}
	}
)

func (x TitleOrValueTypeTitle) Index() int                             { return 0 }
func (x TitleOrValueTypeTitle) Interface() interface{}                 { return x.Value }
func (x TitleOrValueTypeTitle) Name() string                           { return "Title" }
func (x TitleOrValueTypeTitle) __VDLReflect(__TitleOrValueTypeReflect) {}

func (m TitleOrValueTypeTitle) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_v_io_v23_query_engine_internal_testdata_TitleOrValueType)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Title")
	if err != nil {
		return err
	}
	if err := fieldTarget3.FromString(string(m.Value), vdl.StringType); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m TitleOrValueTypeTitle) MakeVDLTarget() vdl.Target {
	return nil
}

func (x TitleOrValueTypeValue) Index() int                             { return 1 }
func (x TitleOrValueTypeValue) Interface() interface{}                 { return x.Value }
func (x TitleOrValueTypeValue) Name() string                           { return "Value" }
func (x TitleOrValueTypeValue) __VDLReflect(__TitleOrValueTypeReflect) {}

func (m TitleOrValueTypeValue) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	fieldsTarget1, err := t.StartFields(__VDLType_v_io_v23_query_engine_internal_testdata_TitleOrValueType)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Value")
	if err != nil {
		return err
	}
	if err := fieldTarget3.FromInt(int64(m.Value), vdl.Int64Type); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m TitleOrValueTypeValue) MakeVDLTarget() vdl.Target {
	return nil
}

type BazType struct {
	Name         string
	TitleOrValue TitleOrValueType
}

func (BazType) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.BazType"`
}) {
}

func (m *BazType) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_BazType == nil || __VDLType13 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("TitleOrValue")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		unionValue6 := m.TitleOrValue
		if unionValue6 == nil {
			unionValue6 = TitleOrValueTypeTitle{}
		}
		if err := unionValue6.FillVDLTarget(fieldTarget5, __VDLType_v_io_v23_query_engine_internal_testdata_TitleOrValueType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *BazType) MakeVDLTarget() vdl.Target {
	return &BazTypeTarget{Value: m}
}

type K struct {
	A byte
	B string
}

func (K) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.K"`
}) {
}

func (m *K) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_K == nil || __VDLType14 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("A")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromUint(uint64(m.A), vdl.ByteType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("B")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.B), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *K) MakeVDLTarget() vdl.Target {
	return &KTarget{Value: m}
}

type KTarget struct {
	Value   *K
	aTarget vdl.ByteTarget
	bTarget vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *KTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_K) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_K)
	}
	return t, nil
}
func (t *KTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "A":
		t.aTarget.Value = &t.Value.A
		target, err := &t.aTarget, error(nil)
		return nil, target, err
	case "B":
		t.bTarget.Value = &t.Value.B
		target, err := &t.bTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_K)
	}
}
func (t *KTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *KTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type V struct {
	A string
	B float32
}

func (V) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.V"`
}) {
}

func (m *V) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_V == nil || __VDLType15 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("A")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.A), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("B")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromFloat(float64(m.B), vdl.Float32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *V) MakeVDLTarget() vdl.Target {
	return &VTarget{Value: m}
}

type VTarget struct {
	Value   *V
	aTarget vdl.StringTarget
	bTarget vdl.Float32Target
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *VTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_V) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_V)
	}
	return t, nil
}
func (t *VTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "A":
		t.aTarget.Value = &t.Value.A
		target, err := &t.aTarget, error(nil)
		return nil, target, err
	case "B":
		t.bTarget.Value = &t.Value.B
		target, err := &t.bTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_V)
	}
}
func (t *VTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *VTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type FunWithMaps struct {
	Key       K
	Map       map[K]V
	Confusing map[int16][]map[string]struct{}
}

func (FunWithMaps) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.FunWithMaps"`
}) {
}

func (m *FunWithMaps) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_FunWithMaps == nil || __VDLType16 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Key")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Key.FillVDLTarget(fieldTarget3, __VDLType_v_io_v23_query_engine_internal_testdata_K); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Map")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget6, err := fieldTarget5.StartMap(__VDLType17, len(m.Map))
		if err != nil {
			return err
		}
		for key8, value10 := range m.Map {
			keyTarget7, err := mapTarget6.StartKey()
			if err != nil {
				return err
			}

			if err := key8.FillVDLTarget(keyTarget7, __VDLType_v_io_v23_query_engine_internal_testdata_K); err != nil {
				return err
			}
			valueTarget9, err := mapTarget6.FinishKeyStartField(keyTarget7)
			if err != nil {
				return err
			}

			if err := value10.FillVDLTarget(valueTarget9, __VDLType_v_io_v23_query_engine_internal_testdata_V); err != nil {
				return err
			}
			if err := mapTarget6.FinishField(keyTarget7, valueTarget9); err != nil {
				return err
			}
		}
		if err := fieldTarget5.FinishMap(mapTarget6); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget11, fieldTarget12, err := fieldsTarget1.StartField("Confusing")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget13, err := fieldTarget12.StartMap(__VDLType18, len(m.Confusing))
		if err != nil {
			return err
		}
		for key15, value17 := range m.Confusing {
			keyTarget14, err := mapTarget13.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget14.FromInt(int64(key15), vdl.Int16Type); err != nil {
				return err
			}
			valueTarget16, err := mapTarget13.FinishKeyStartField(keyTarget14)
			if err != nil {
				return err
			}

			listTarget18, err := valueTarget16.StartList(__VDLType19, len(value17))
			if err != nil {
				return err
			}
			for i, elem20 := range value17 {
				elemTarget19, err := listTarget18.StartElem(i)
				if err != nil {
					return err
				}

				setTarget21, err := elemTarget19.StartSet(__VDLType20, len(elem20))
				if err != nil {
					return err
				}
				for key23 := range elem20 {
					keyTarget22, err := setTarget21.StartKey()
					if err != nil {
						return err
					}
					if err := keyTarget22.FromString(string(key23), vdl.StringType); err != nil {
						return err
					}
					if err := setTarget21.FinishKey(keyTarget22); err != nil {
						return err
					}
				}
				if err := elemTarget19.FinishSet(setTarget21); err != nil {
					return err
				}
				if err := listTarget18.FinishElem(elemTarget19); err != nil {
					return err
				}
			}
			if err := valueTarget16.FinishList(listTarget18); err != nil {
				return err
			}
			if err := mapTarget13.FinishField(keyTarget14, valueTarget16); err != nil {
				return err
			}
		}
		if err := fieldTarget12.FinishMap(mapTarget13); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget11, fieldTarget12); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *FunWithMaps) MakeVDLTarget() vdl.Target {
	return &FunWithMapsTarget{Value: m}
}

type FunWithMapsTarget struct {
	Value           *FunWithMaps
	keyTarget       KTarget
	mapTarget       unnamed_6d61705b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e4b207374727563747b4120627974653b4220737472696e677d5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e56207374727563747b4120737472696e673b4220666c6f617433327dTarget
	confusingTarget unnamed_6d61705b696e7431365d5b5d7365745b737472696e675dTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *FunWithMapsTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_FunWithMaps) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_FunWithMaps)
	}
	return t, nil
}
func (t *FunWithMapsTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Key":
		t.keyTarget.Value = &t.Value.Key
		target, err := &t.keyTarget, error(nil)
		return nil, target, err
	case "Map":
		t.mapTarget.Value = &t.Value.Map
		target, err := &t.mapTarget, error(nil)
		return nil, target, err
	case "Confusing":
		t.confusingTarget.Value = &t.Value.Confusing
		target, err := &t.confusingTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_FunWithMaps)
	}
}
func (t *FunWithMapsTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *FunWithMapsTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// map[K]V
type unnamed_6d61705b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e4b207374727563747b4120627974653b4220737472696e677d5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e56207374727563747b4120737472696e673b4220666c6f617433327dTarget struct {
	Value      *map[K]V
	currKey    K
	currElem   V
	keyTarget  KTarget
	elemTarget VTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e4b207374727563747b4120627974653b4220737472696e677d5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e56207374727563747b4120737472696e673b4220666c6f617433327dTarget) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType17) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType17)
	}
	*t.Value = make(map[K]V)
	return t, nil
}
func (t *unnamed_6d61705b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e4b207374727563747b4120627974653b4220737472696e677d5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e56207374727563747b4120737472696e673b4220666c6f617433327dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = K{}
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e4b207374727563747b4120627974653b4220737472696e677d5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e56207374727563747b4120737472696e673b4220666c6f617433327dTarget) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = V{}
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e4b207374727563747b4120627974653b4220737472696e677d5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e56207374727563747b4120737472696e673b4220666c6f617433327dTarget) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e4b207374727563747b4120627974653b4220737472696e677d5d762e696f2f7632332f71756572792f656e67696e652f696e7465726e616c2f74657374646174612e56207374727563747b4120737472696e673b4220666c6f617433327dTarget) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[int16][]map[string]struct{}
type unnamed_6d61705b696e7431365d5b5d7365745b737472696e675dTarget struct {
	Value      *map[int16][]map[string]struct{}
	currKey    int16
	currElem   []map[string]struct{}
	keyTarget  vdl.Int16Target
	elemTarget unnamed_5b5d7365745b737472696e675dTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b696e7431365d5b5d7365745b737472696e675dTarget) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType18) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType18)
	}
	*t.Value = make(map[int16][]map[string]struct{})
	return t, nil
}
func (t *unnamed_6d61705b696e7431365d5b5d7365745b737472696e675dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = int16(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b696e7431365d5b5d7365745b737472696e675dTarget) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = []map[string]struct{}(nil)
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b696e7431365d5b5d7365745b737472696e675dTarget) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b696e7431365d5b5d7365745b737472696e675dTarget) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// []map[string]struct{}
type unnamed_5b5d7365745b737472696e675dTarget struct {
	Value      *[]map[string]struct{}
	elemTarget unnamed_7365745b737472696e675dTarget
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *unnamed_5b5d7365745b737472696e675dTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {

	if !vdl.Compatible(tt, __VDLType19) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType19)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]map[string]struct{}, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *unnamed_5b5d7365745b737472696e675dTarget) StartElem(index int) (elem vdl.Target, _ error) {
	t.elemTarget.Value = &(*t.Value)[index]
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_5b5d7365745b737472696e675dTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *unnamed_5b5d7365745b737472696e675dTarget) FinishList(elem vdl.ListTarget) error {

	return nil
}

// map[string]struct{}
type unnamed_7365745b737472696e675dTarget struct {
	Value     *map[string]struct{}
	currKey   string
	keyTarget vdl.StringTarget
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b737472696e675dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType20) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType20)
	}
	*t.Value = make(map[string]struct{})
	return t, nil
}
func (t *unnamed_7365745b737472696e675dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = ""
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b737472696e675dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b737472696e675dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

type FunWithTypes struct {
	T1 *vdl.Type
	T2 *vdl.Type
}

func (FunWithTypes) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.FunWithTypes"`
}) {
}

func (m *FunWithTypes) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_FunWithTypes == nil || __VDLType21 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("T1")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		typeObjectVal4 := m.T1
		if typeObjectVal4 == nil {
			typeObjectVal4 = vdl.AnyType
		}
		if err := fieldTarget3.FromTypeObject(typeObjectVal4); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget5, fieldTarget6, err := fieldsTarget1.StartField("T2")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		typeObjectVal7 := m.T2
		if typeObjectVal7 == nil {
			typeObjectVal7 = vdl.AnyType
		}
		if err := fieldTarget6.FromTypeObject(typeObjectVal7); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget5, fieldTarget6); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *FunWithTypes) MakeVDLTarget() vdl.Target {
	return &FunWithTypesTarget{Value: m}
}

type FunWithTypesTarget struct {
	Value    *FunWithTypes
	t1Target vdl.TypeObjectTarget
	t2Target vdl.TypeObjectTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *FunWithTypesTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_FunWithTypes) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_FunWithTypes)
	}
	return t, nil
}
func (t *FunWithTypesTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "T1":
		t.t1Target.Value = &t.Value.T1
		target, err := &t.t1Target, error(nil)
		return nil, target, err
	case "T2":
		t.t2Target.Value = &t.Value.T2
		target, err := &t.t2Target, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_FunWithTypes)
	}
}
func (t *FunWithTypesTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *FunWithTypesTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

type ManyMaps struct {
	B    map[bool]string
	By   map[byte]string
	U16  map[uint16]string
	U32  map[uint32]string
	U64  map[uint64]string
	I16  map[int16]string
	I32  map[int32]string
	I64  map[int64]string
	F32  map[float32]string
	F64  map[float64]string
	C64  map[complex64]string
	C128 map[complex128]string
	S    map[string]string
	Ms   map[string]map[string]string
	T    map[time.Time]string
}

func (ManyMaps) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.ManyMaps"`
}) {
}

func (m *ManyMaps) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("B")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget4, err := fieldTarget3.StartMap(__VDLType23, len(m.B))
		if err != nil {
			return err
		}
		for key6, value8 := range m.B {
			keyTarget5, err := mapTarget4.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget5.FromBool(bool(key6), vdl.BoolType); err != nil {
				return err
			}
			valueTarget7, err := mapTarget4.FinishKeyStartField(keyTarget5)
			if err != nil {
				return err
			}
			if err := valueTarget7.FromString(string(value8), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget4.FinishField(keyTarget5, valueTarget7); err != nil {
				return err
			}
		}
		if err := fieldTarget3.FinishMap(mapTarget4); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("By")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget11, err := fieldTarget10.StartMap(__VDLType24, len(m.By))
		if err != nil {
			return err
		}
		for key13, value15 := range m.By {
			keyTarget12, err := mapTarget11.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget12.FromUint(uint64(key13), vdl.ByteType); err != nil {
				return err
			}
			valueTarget14, err := mapTarget11.FinishKeyStartField(keyTarget12)
			if err != nil {
				return err
			}
			if err := valueTarget14.FromString(string(value15), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget11.FinishField(keyTarget12, valueTarget14); err != nil {
				return err
			}
		}
		if err := fieldTarget10.FinishMap(mapTarget11); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	keyTarget16, fieldTarget17, err := fieldsTarget1.StartField("U16")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget18, err := fieldTarget17.StartMap(__VDLType25, len(m.U16))
		if err != nil {
			return err
		}
		for key20, value22 := range m.U16 {
			keyTarget19, err := mapTarget18.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget19.FromUint(uint64(key20), vdl.Uint16Type); err != nil {
				return err
			}
			valueTarget21, err := mapTarget18.FinishKeyStartField(keyTarget19)
			if err != nil {
				return err
			}
			if err := valueTarget21.FromString(string(value22), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget18.FinishField(keyTarget19, valueTarget21); err != nil {
				return err
			}
		}
		if err := fieldTarget17.FinishMap(mapTarget18); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget16, fieldTarget17); err != nil {
			return err
		}
	}
	keyTarget23, fieldTarget24, err := fieldsTarget1.StartField("U32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget25, err := fieldTarget24.StartMap(__VDLType26, len(m.U32))
		if err != nil {
			return err
		}
		for key27, value29 := range m.U32 {
			keyTarget26, err := mapTarget25.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget26.FromUint(uint64(key27), vdl.Uint32Type); err != nil {
				return err
			}
			valueTarget28, err := mapTarget25.FinishKeyStartField(keyTarget26)
			if err != nil {
				return err
			}
			if err := valueTarget28.FromString(string(value29), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget25.FinishField(keyTarget26, valueTarget28); err != nil {
				return err
			}
		}
		if err := fieldTarget24.FinishMap(mapTarget25); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget23, fieldTarget24); err != nil {
			return err
		}
	}
	keyTarget30, fieldTarget31, err := fieldsTarget1.StartField("U64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget32, err := fieldTarget31.StartMap(__VDLType27, len(m.U64))
		if err != nil {
			return err
		}
		for key34, value36 := range m.U64 {
			keyTarget33, err := mapTarget32.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget33.FromUint(uint64(key34), vdl.Uint64Type); err != nil {
				return err
			}
			valueTarget35, err := mapTarget32.FinishKeyStartField(keyTarget33)
			if err != nil {
				return err
			}
			if err := valueTarget35.FromString(string(value36), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget32.FinishField(keyTarget33, valueTarget35); err != nil {
				return err
			}
		}
		if err := fieldTarget31.FinishMap(mapTarget32); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget30, fieldTarget31); err != nil {
			return err
		}
	}
	keyTarget37, fieldTarget38, err := fieldsTarget1.StartField("I16")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget39, err := fieldTarget38.StartMap(__VDLType28, len(m.I16))
		if err != nil {
			return err
		}
		for key41, value43 := range m.I16 {
			keyTarget40, err := mapTarget39.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget40.FromInt(int64(key41), vdl.Int16Type); err != nil {
				return err
			}
			valueTarget42, err := mapTarget39.FinishKeyStartField(keyTarget40)
			if err != nil {
				return err
			}
			if err := valueTarget42.FromString(string(value43), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget39.FinishField(keyTarget40, valueTarget42); err != nil {
				return err
			}
		}
		if err := fieldTarget38.FinishMap(mapTarget39); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget37, fieldTarget38); err != nil {
			return err
		}
	}
	keyTarget44, fieldTarget45, err := fieldsTarget1.StartField("I32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget46, err := fieldTarget45.StartMap(__VDLType29, len(m.I32))
		if err != nil {
			return err
		}
		for key48, value50 := range m.I32 {
			keyTarget47, err := mapTarget46.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget47.FromInt(int64(key48), vdl.Int32Type); err != nil {
				return err
			}
			valueTarget49, err := mapTarget46.FinishKeyStartField(keyTarget47)
			if err != nil {
				return err
			}
			if err := valueTarget49.FromString(string(value50), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget46.FinishField(keyTarget47, valueTarget49); err != nil {
				return err
			}
		}
		if err := fieldTarget45.FinishMap(mapTarget46); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget44, fieldTarget45); err != nil {
			return err
		}
	}
	keyTarget51, fieldTarget52, err := fieldsTarget1.StartField("I64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget53, err := fieldTarget52.StartMap(__VDLType30, len(m.I64))
		if err != nil {
			return err
		}
		for key55, value57 := range m.I64 {
			keyTarget54, err := mapTarget53.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget54.FromInt(int64(key55), vdl.Int64Type); err != nil {
				return err
			}
			valueTarget56, err := mapTarget53.FinishKeyStartField(keyTarget54)
			if err != nil {
				return err
			}
			if err := valueTarget56.FromString(string(value57), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget53.FinishField(keyTarget54, valueTarget56); err != nil {
				return err
			}
		}
		if err := fieldTarget52.FinishMap(mapTarget53); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget51, fieldTarget52); err != nil {
			return err
		}
	}
	keyTarget58, fieldTarget59, err := fieldsTarget1.StartField("F32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget60, err := fieldTarget59.StartMap(__VDLType31, len(m.F32))
		if err != nil {
			return err
		}
		for key62, value64 := range m.F32 {
			keyTarget61, err := mapTarget60.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget61.FromFloat(float64(key62), vdl.Float32Type); err != nil {
				return err
			}
			valueTarget63, err := mapTarget60.FinishKeyStartField(keyTarget61)
			if err != nil {
				return err
			}
			if err := valueTarget63.FromString(string(value64), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget60.FinishField(keyTarget61, valueTarget63); err != nil {
				return err
			}
		}
		if err := fieldTarget59.FinishMap(mapTarget60); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget58, fieldTarget59); err != nil {
			return err
		}
	}
	keyTarget65, fieldTarget66, err := fieldsTarget1.StartField("F64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget67, err := fieldTarget66.StartMap(__VDLType32, len(m.F64))
		if err != nil {
			return err
		}
		for key69, value71 := range m.F64 {
			keyTarget68, err := mapTarget67.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget68.FromFloat(float64(key69), vdl.Float64Type); err != nil {
				return err
			}
			valueTarget70, err := mapTarget67.FinishKeyStartField(keyTarget68)
			if err != nil {
				return err
			}
			if err := valueTarget70.FromString(string(value71), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget67.FinishField(keyTarget68, valueTarget70); err != nil {
				return err
			}
		}
		if err := fieldTarget66.FinishMap(mapTarget67); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget65, fieldTarget66); err != nil {
			return err
		}
	}
	keyTarget72, fieldTarget73, err := fieldsTarget1.StartField("C64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget74, err := fieldTarget73.StartMap(__VDLType33, len(m.C64))
		if err != nil {
			return err
		}
		for key76, value78 := range m.C64 {
			keyTarget75, err := mapTarget74.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget75.FromComplex(complex128(key76), vdl.Complex64Type); err != nil {
				return err
			}
			valueTarget77, err := mapTarget74.FinishKeyStartField(keyTarget75)
			if err != nil {
				return err
			}
			if err := valueTarget77.FromString(string(value78), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget74.FinishField(keyTarget75, valueTarget77); err != nil {
				return err
			}
		}
		if err := fieldTarget73.FinishMap(mapTarget74); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget72, fieldTarget73); err != nil {
			return err
		}
	}
	keyTarget79, fieldTarget80, err := fieldsTarget1.StartField("C128")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget81, err := fieldTarget80.StartMap(__VDLType34, len(m.C128))
		if err != nil {
			return err
		}
		for key83, value85 := range m.C128 {
			keyTarget82, err := mapTarget81.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget82.FromComplex(complex128(key83), vdl.Complex128Type); err != nil {
				return err
			}
			valueTarget84, err := mapTarget81.FinishKeyStartField(keyTarget82)
			if err != nil {
				return err
			}
			if err := valueTarget84.FromString(string(value85), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget81.FinishField(keyTarget82, valueTarget84); err != nil {
				return err
			}
		}
		if err := fieldTarget80.FinishMap(mapTarget81); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget79, fieldTarget80); err != nil {
			return err
		}
	}
	keyTarget86, fieldTarget87, err := fieldsTarget1.StartField("S")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget88, err := fieldTarget87.StartMap(__VDLType35, len(m.S))
		if err != nil {
			return err
		}
		for key90, value92 := range m.S {
			keyTarget89, err := mapTarget88.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget89.FromString(string(key90), vdl.StringType); err != nil {
				return err
			}
			valueTarget91, err := mapTarget88.FinishKeyStartField(keyTarget89)
			if err != nil {
				return err
			}
			if err := valueTarget91.FromString(string(value92), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget88.FinishField(keyTarget89, valueTarget91); err != nil {
				return err
			}
		}
		if err := fieldTarget87.FinishMap(mapTarget88); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget86, fieldTarget87); err != nil {
			return err
		}
	}
	keyTarget93, fieldTarget94, err := fieldsTarget1.StartField("Ms")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget95, err := fieldTarget94.StartMap(__VDLType36, len(m.Ms))
		if err != nil {
			return err
		}
		for key97, value99 := range m.Ms {
			keyTarget96, err := mapTarget95.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget96.FromString(string(key97), vdl.StringType); err != nil {
				return err
			}
			valueTarget98, err := mapTarget95.FinishKeyStartField(keyTarget96)
			if err != nil {
				return err
			}

			mapTarget100, err := valueTarget98.StartMap(__VDLType35, len(value99))
			if err != nil {
				return err
			}
			for key102, value104 := range value99 {
				keyTarget101, err := mapTarget100.StartKey()
				if err != nil {
					return err
				}
				if err := keyTarget101.FromString(string(key102), vdl.StringType); err != nil {
					return err
				}
				valueTarget103, err := mapTarget100.FinishKeyStartField(keyTarget101)
				if err != nil {
					return err
				}
				if err := valueTarget103.FromString(string(value104), vdl.StringType); err != nil {
					return err
				}
				if err := mapTarget100.FinishField(keyTarget101, valueTarget103); err != nil {
					return err
				}
			}
			if err := valueTarget98.FinishMap(mapTarget100); err != nil {
				return err
			}
			if err := mapTarget95.FinishField(keyTarget96, valueTarget98); err != nil {
				return err
			}
		}
		if err := fieldTarget94.FinishMap(mapTarget95); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget93, fieldTarget94); err != nil {
			return err
		}
	}
	keyTarget105, fieldTarget106, err := fieldsTarget1.StartField("T")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget107, err := fieldTarget106.StartMap(__VDLType37, len(m.T))
		if err != nil {
			return err
		}
		for key109, value111 := range m.T {
			keyTarget108, err := mapTarget107.StartKey()
			if err != nil {
				return err
			}

			var wireValue112 time_2.Time
			if err := time_2.TimeFromNative(&wireValue112, key109); err != nil {
				return err
			}

			if err := wireValue112.FillVDLTarget(keyTarget108, __VDLType_time_Time); err != nil {
				return err
			}
			valueTarget110, err := mapTarget107.FinishKeyStartField(keyTarget108)
			if err != nil {
				return err
			}
			if err := valueTarget110.FromString(string(value111), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget107.FinishField(keyTarget108, valueTarget110); err != nil {
				return err
			}
		}
		if err := fieldTarget106.FinishMap(mapTarget107); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget105, fieldTarget106); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ManyMaps) MakeVDLTarget() vdl.Target {
	return &ManyMapsTarget{Value: m}
}

type ManyMapsTarget struct {
	Value      *ManyMaps
	bTarget    unnamed_6d61705b626f6f6c5d737472696e67Target
	byTarget   unnamed_6d61705b627974655d737472696e67Target
	u16Target  unnamed_6d61705b75696e7431365d737472696e67Target
	u32Target  unnamed_6d61705b75696e7433325d737472696e67Target
	u64Target  unnamed_6d61705b75696e7436345d737472696e67Target
	i16Target  unnamed_6d61705b696e7431365d737472696e67Target
	i32Target  unnamed_6d61705b696e7433325d737472696e67Target
	i64Target  unnamed_6d61705b696e7436345d737472696e67Target
	f32Target  unnamed_6d61705b666c6f617433325d737472696e67Target
	f64Target  unnamed_6d61705b666c6f617436345d737472696e67Target
	c64Target  unnamed_6d61705b636f6d706c657836345d737472696e67Target
	c128Target unnamed_6d61705b636f6d706c65783132385d737472696e67Target
	sTarget    unnamed_6d61705b737472696e675d737472696e67Target
	msTarget   unnamed_6d61705b737472696e675d6d61705b737472696e675d737472696e67Target
	tTarget    unnamed_6d61705b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5d737472696e67Target
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ManyMapsTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps)
	}
	return t, nil
}
func (t *ManyMapsTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "B":
		t.bTarget.Value = &t.Value.B
		target, err := &t.bTarget, error(nil)
		return nil, target, err
	case "By":
		t.byTarget.Value = &t.Value.By
		target, err := &t.byTarget, error(nil)
		return nil, target, err
	case "U16":
		t.u16Target.Value = &t.Value.U16
		target, err := &t.u16Target, error(nil)
		return nil, target, err
	case "U32":
		t.u32Target.Value = &t.Value.U32
		target, err := &t.u32Target, error(nil)
		return nil, target, err
	case "U64":
		t.u64Target.Value = &t.Value.U64
		target, err := &t.u64Target, error(nil)
		return nil, target, err
	case "I16":
		t.i16Target.Value = &t.Value.I16
		target, err := &t.i16Target, error(nil)
		return nil, target, err
	case "I32":
		t.i32Target.Value = &t.Value.I32
		target, err := &t.i32Target, error(nil)
		return nil, target, err
	case "I64":
		t.i64Target.Value = &t.Value.I64
		target, err := &t.i64Target, error(nil)
		return nil, target, err
	case "F32":
		t.f32Target.Value = &t.Value.F32
		target, err := &t.f32Target, error(nil)
		return nil, target, err
	case "F64":
		t.f64Target.Value = &t.Value.F64
		target, err := &t.f64Target, error(nil)
		return nil, target, err
	case "C64":
		t.c64Target.Value = &t.Value.C64
		target, err := &t.c64Target, error(nil)
		return nil, target, err
	case "C128":
		t.c128Target.Value = &t.Value.C128
		target, err := &t.c128Target, error(nil)
		return nil, target, err
	case "S":
		t.sTarget.Value = &t.Value.S
		target, err := &t.sTarget, error(nil)
		return nil, target, err
	case "Ms":
		t.msTarget.Value = &t.Value.Ms
		target, err := &t.msTarget, error(nil)
		return nil, target, err
	case "T":
		t.tTarget.Value = &t.Value.T
		target, err := &t.tTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps)
	}
}
func (t *ManyMapsTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ManyMapsTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// map[bool]string
type unnamed_6d61705b626f6f6c5d737472696e67Target struct {
	Value      *map[bool]string
	currKey    bool
	currElem   string
	keyTarget  vdl.BoolTarget
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b626f6f6c5d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType23) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType23)
	}
	*t.Value = make(map[bool]string)
	return t, nil
}
func (t *unnamed_6d61705b626f6f6c5d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = false
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b626f6f6c5d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b626f6f6c5d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b626f6f6c5d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[byte]string
type unnamed_6d61705b627974655d737472696e67Target struct {
	Value      *map[byte]string
	currKey    byte
	currElem   string
	keyTarget  vdl.ByteTarget
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b627974655d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType24) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType24)
	}
	*t.Value = make(map[byte]string)
	return t, nil
}
func (t *unnamed_6d61705b627974655d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = byte(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b627974655d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b627974655d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b627974655d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[uint16]string
type unnamed_6d61705b75696e7431365d737472696e67Target struct {
	Value      *map[uint16]string
	currKey    uint16
	currElem   string
	keyTarget  vdl.Uint16Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b75696e7431365d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType25) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType25)
	}
	*t.Value = make(map[uint16]string)
	return t, nil
}
func (t *unnamed_6d61705b75696e7431365d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = uint16(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b75696e7431365d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b75696e7431365d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b75696e7431365d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[uint32]string
type unnamed_6d61705b75696e7433325d737472696e67Target struct {
	Value      *map[uint32]string
	currKey    uint32
	currElem   string
	keyTarget  vdl.Uint32Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b75696e7433325d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType26) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType26)
	}
	*t.Value = make(map[uint32]string)
	return t, nil
}
func (t *unnamed_6d61705b75696e7433325d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = uint32(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b75696e7433325d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b75696e7433325d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b75696e7433325d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[uint64]string
type unnamed_6d61705b75696e7436345d737472696e67Target struct {
	Value      *map[uint64]string
	currKey    uint64
	currElem   string
	keyTarget  vdl.Uint64Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b75696e7436345d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType27) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType27)
	}
	*t.Value = make(map[uint64]string)
	return t, nil
}
func (t *unnamed_6d61705b75696e7436345d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = uint64(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b75696e7436345d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b75696e7436345d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b75696e7436345d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[int16]string
type unnamed_6d61705b696e7431365d737472696e67Target struct {
	Value      *map[int16]string
	currKey    int16
	currElem   string
	keyTarget  vdl.Int16Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b696e7431365d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType28) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType28)
	}
	*t.Value = make(map[int16]string)
	return t, nil
}
func (t *unnamed_6d61705b696e7431365d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = int16(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b696e7431365d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b696e7431365d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b696e7431365d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[int32]string
type unnamed_6d61705b696e7433325d737472696e67Target struct {
	Value      *map[int32]string
	currKey    int32
	currElem   string
	keyTarget  vdl.Int32Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b696e7433325d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType29) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType29)
	}
	*t.Value = make(map[int32]string)
	return t, nil
}
func (t *unnamed_6d61705b696e7433325d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = int32(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b696e7433325d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b696e7433325d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b696e7433325d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[int64]string
type unnamed_6d61705b696e7436345d737472696e67Target struct {
	Value      *map[int64]string
	currKey    int64
	currElem   string
	keyTarget  vdl.Int64Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b696e7436345d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType30) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType30)
	}
	*t.Value = make(map[int64]string)
	return t, nil
}
func (t *unnamed_6d61705b696e7436345d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = int64(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b696e7436345d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b696e7436345d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b696e7436345d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[float32]string
type unnamed_6d61705b666c6f617433325d737472696e67Target struct {
	Value      *map[float32]string
	currKey    float32
	currElem   string
	keyTarget  vdl.Float32Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b666c6f617433325d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType31) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType31)
	}
	*t.Value = make(map[float32]string)
	return t, nil
}
func (t *unnamed_6d61705b666c6f617433325d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = float32(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b666c6f617433325d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b666c6f617433325d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b666c6f617433325d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[float64]string
type unnamed_6d61705b666c6f617436345d737472696e67Target struct {
	Value      *map[float64]string
	currKey    float64
	currElem   string
	keyTarget  vdl.Float64Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b666c6f617436345d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType32) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType32)
	}
	*t.Value = make(map[float64]string)
	return t, nil
}
func (t *unnamed_6d61705b666c6f617436345d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = float64(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b666c6f617436345d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b666c6f617436345d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b666c6f617436345d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[complex64]string
type unnamed_6d61705b636f6d706c657836345d737472696e67Target struct {
	Value      *map[complex64]string
	currKey    complex64
	currElem   string
	keyTarget  vdl.Complex64Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b636f6d706c657836345d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType33) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType33)
	}
	*t.Value = make(map[complex64]string)
	return t, nil
}
func (t *unnamed_6d61705b636f6d706c657836345d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = complex64(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b636f6d706c657836345d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b636f6d706c657836345d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b636f6d706c657836345d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[complex128]string
type unnamed_6d61705b636f6d706c65783132385d737472696e67Target struct {
	Value      *map[complex128]string
	currKey    complex128
	currElem   string
	keyTarget  vdl.Complex128Target
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b636f6d706c65783132385d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType34) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType34)
	}
	*t.Value = make(map[complex128]string)
	return t, nil
}
func (t *unnamed_6d61705b636f6d706c65783132385d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = complex128(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b636f6d706c65783132385d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b636f6d706c65783132385d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b636f6d706c65783132385d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[string]string
type unnamed_6d61705b737472696e675d737472696e67Target struct {
	Value      *map[string]string
	currKey    string
	currElem   string
	keyTarget  vdl.StringTarget
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b737472696e675d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType35) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType35)
	}
	*t.Value = make(map[string]string)
	return t, nil
}
func (t *unnamed_6d61705b737472696e675d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = ""
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b737472696e675d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b737472696e675d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b737472696e675d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[string]map[string]string
type unnamed_6d61705b737472696e675d6d61705b737472696e675d737472696e67Target struct {
	Value      *map[string]map[string]string
	currKey    string
	currElem   map[string]string
	keyTarget  vdl.StringTarget
	elemTarget unnamed_6d61705b737472696e675d737472696e67Target
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b737472696e675d6d61705b737472696e675d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType36) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType36)
	}
	*t.Value = make(map[string]map[string]string)
	return t, nil
}
func (t *unnamed_6d61705b737472696e675d6d61705b737472696e675d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = ""
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b737472696e675d6d61705b737472696e675d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = map[string]string(nil)
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b737472696e675d6d61705b737472696e675d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b737472696e675d6d61705b737472696e675d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[time.Time]string
type unnamed_6d61705b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5d737472696e67Target struct {
	Value      *map[time.Time]string
	currKey    time.Time
	currElem   string
	keyTarget  time_2.TimeTarget
	elemTarget vdl.StringTarget
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *unnamed_6d61705b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5d737472696e67Target) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {

	if !vdl.Compatible(tt, __VDLType37) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType37)
	}
	*t.Value = make(map[time.Time]string)
	return t, nil
}
func (t *unnamed_6d61705b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5d737472696e67Target) StartKey() (key vdl.Target, _ error) {
	t.currKey = reflect.Zero(reflect.TypeOf(t.currKey)).Interface().(time.Time)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5d737472696e67Target) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = ""
	t.elemTarget.Value = &t.currElem
	target, err := &t.elemTarget, error(nil)
	return target, err
}
func (t *unnamed_6d61705b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5d737472696e67Target) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *unnamed_6d61705b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5d737472696e67Target) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

type ManySets struct {
	B    map[bool]struct{}
	By   map[byte]struct{}
	U16  map[uint16]struct{}
	U32  map[uint32]struct{}
	U64  map[uint64]struct{}
	I16  map[int16]struct{}
	I32  map[int32]struct{}
	I64  map[int64]struct{}
	F32  map[float32]struct{}
	F64  map[float64]struct{}
	C64  map[complex64]struct{}
	C128 map[complex128]struct{}
	S    map[string]struct{}
	T    map[time.Time]struct{}
}

func (ManySets) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.ManySets"`
}) {
}

func (m *ManySets) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("B")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget4, err := fieldTarget3.StartSet(__VDLType39, len(m.B))
		if err != nil {
			return err
		}
		for key6 := range m.B {
			keyTarget5, err := setTarget4.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget5.FromBool(bool(key6), vdl.BoolType); err != nil {
				return err
			}
			if err := setTarget4.FinishKey(keyTarget5); err != nil {
				return err
			}
		}
		if err := fieldTarget3.FinishSet(setTarget4); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget7, fieldTarget8, err := fieldsTarget1.StartField("By")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget9, err := fieldTarget8.StartSet(__VDLType40, len(m.By))
		if err != nil {
			return err
		}
		for key11 := range m.By {
			keyTarget10, err := setTarget9.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget10.FromUint(uint64(key11), vdl.ByteType); err != nil {
				return err
			}
			if err := setTarget9.FinishKey(keyTarget10); err != nil {
				return err
			}
		}
		if err := fieldTarget8.FinishSet(setTarget9); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget7, fieldTarget8); err != nil {
			return err
		}
	}
	keyTarget12, fieldTarget13, err := fieldsTarget1.StartField("U16")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget14, err := fieldTarget13.StartSet(__VDLType41, len(m.U16))
		if err != nil {
			return err
		}
		for key16 := range m.U16 {
			keyTarget15, err := setTarget14.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget15.FromUint(uint64(key16), vdl.Uint16Type); err != nil {
				return err
			}
			if err := setTarget14.FinishKey(keyTarget15); err != nil {
				return err
			}
		}
		if err := fieldTarget13.FinishSet(setTarget14); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget12, fieldTarget13); err != nil {
			return err
		}
	}
	keyTarget17, fieldTarget18, err := fieldsTarget1.StartField("U32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget19, err := fieldTarget18.StartSet(__VDLType42, len(m.U32))
		if err != nil {
			return err
		}
		for key21 := range m.U32 {
			keyTarget20, err := setTarget19.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget20.FromUint(uint64(key21), vdl.Uint32Type); err != nil {
				return err
			}
			if err := setTarget19.FinishKey(keyTarget20); err != nil {
				return err
			}
		}
		if err := fieldTarget18.FinishSet(setTarget19); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget17, fieldTarget18); err != nil {
			return err
		}
	}
	keyTarget22, fieldTarget23, err := fieldsTarget1.StartField("U64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget24, err := fieldTarget23.StartSet(__VDLType43, len(m.U64))
		if err != nil {
			return err
		}
		for key26 := range m.U64 {
			keyTarget25, err := setTarget24.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget25.FromUint(uint64(key26), vdl.Uint64Type); err != nil {
				return err
			}
			if err := setTarget24.FinishKey(keyTarget25); err != nil {
				return err
			}
		}
		if err := fieldTarget23.FinishSet(setTarget24); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget22, fieldTarget23); err != nil {
			return err
		}
	}
	keyTarget27, fieldTarget28, err := fieldsTarget1.StartField("I16")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget29, err := fieldTarget28.StartSet(__VDLType44, len(m.I16))
		if err != nil {
			return err
		}
		for key31 := range m.I16 {
			keyTarget30, err := setTarget29.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget30.FromInt(int64(key31), vdl.Int16Type); err != nil {
				return err
			}
			if err := setTarget29.FinishKey(keyTarget30); err != nil {
				return err
			}
		}
		if err := fieldTarget28.FinishSet(setTarget29); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget27, fieldTarget28); err != nil {
			return err
		}
	}
	keyTarget32, fieldTarget33, err := fieldsTarget1.StartField("I32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget34, err := fieldTarget33.StartSet(__VDLType45, len(m.I32))
		if err != nil {
			return err
		}
		for key36 := range m.I32 {
			keyTarget35, err := setTarget34.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget35.FromInt(int64(key36), vdl.Int32Type); err != nil {
				return err
			}
			if err := setTarget34.FinishKey(keyTarget35); err != nil {
				return err
			}
		}
		if err := fieldTarget33.FinishSet(setTarget34); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget32, fieldTarget33); err != nil {
			return err
		}
	}
	keyTarget37, fieldTarget38, err := fieldsTarget1.StartField("I64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget39, err := fieldTarget38.StartSet(__VDLType46, len(m.I64))
		if err != nil {
			return err
		}
		for key41 := range m.I64 {
			keyTarget40, err := setTarget39.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget40.FromInt(int64(key41), vdl.Int64Type); err != nil {
				return err
			}
			if err := setTarget39.FinishKey(keyTarget40); err != nil {
				return err
			}
		}
		if err := fieldTarget38.FinishSet(setTarget39); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget37, fieldTarget38); err != nil {
			return err
		}
	}
	keyTarget42, fieldTarget43, err := fieldsTarget1.StartField("F32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget44, err := fieldTarget43.StartSet(__VDLType47, len(m.F32))
		if err != nil {
			return err
		}
		for key46 := range m.F32 {
			keyTarget45, err := setTarget44.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget45.FromFloat(float64(key46), vdl.Float32Type); err != nil {
				return err
			}
			if err := setTarget44.FinishKey(keyTarget45); err != nil {
				return err
			}
		}
		if err := fieldTarget43.FinishSet(setTarget44); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget42, fieldTarget43); err != nil {
			return err
		}
	}
	keyTarget47, fieldTarget48, err := fieldsTarget1.StartField("F64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget49, err := fieldTarget48.StartSet(__VDLType48, len(m.F64))
		if err != nil {
			return err
		}
		for key51 := range m.F64 {
			keyTarget50, err := setTarget49.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget50.FromFloat(float64(key51), vdl.Float64Type); err != nil {
				return err
			}
			if err := setTarget49.FinishKey(keyTarget50); err != nil {
				return err
			}
		}
		if err := fieldTarget48.FinishSet(setTarget49); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget47, fieldTarget48); err != nil {
			return err
		}
	}
	keyTarget52, fieldTarget53, err := fieldsTarget1.StartField("C64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget54, err := fieldTarget53.StartSet(__VDLType49, len(m.C64))
		if err != nil {
			return err
		}
		for key56 := range m.C64 {
			keyTarget55, err := setTarget54.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget55.FromComplex(complex128(key56), vdl.Complex64Type); err != nil {
				return err
			}
			if err := setTarget54.FinishKey(keyTarget55); err != nil {
				return err
			}
		}
		if err := fieldTarget53.FinishSet(setTarget54); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget52, fieldTarget53); err != nil {
			return err
		}
	}
	keyTarget57, fieldTarget58, err := fieldsTarget1.StartField("C128")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget59, err := fieldTarget58.StartSet(__VDLType50, len(m.C128))
		if err != nil {
			return err
		}
		for key61 := range m.C128 {
			keyTarget60, err := setTarget59.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget60.FromComplex(complex128(key61), vdl.Complex128Type); err != nil {
				return err
			}
			if err := setTarget59.FinishKey(keyTarget60); err != nil {
				return err
			}
		}
		if err := fieldTarget58.FinishSet(setTarget59); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget57, fieldTarget58); err != nil {
			return err
		}
	}
	keyTarget62, fieldTarget63, err := fieldsTarget1.StartField("S")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget64, err := fieldTarget63.StartSet(__VDLType20, len(m.S))
		if err != nil {
			return err
		}
		for key66 := range m.S {
			keyTarget65, err := setTarget64.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget65.FromString(string(key66), vdl.StringType); err != nil {
				return err
			}
			if err := setTarget64.FinishKey(keyTarget65); err != nil {
				return err
			}
		}
		if err := fieldTarget63.FinishSet(setTarget64); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget62, fieldTarget63); err != nil {
			return err
		}
	}
	keyTarget67, fieldTarget68, err := fieldsTarget1.StartField("T")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget69, err := fieldTarget68.StartSet(__VDLType51, len(m.T))
		if err != nil {
			return err
		}
		for key71 := range m.T {
			keyTarget70, err := setTarget69.StartKey()
			if err != nil {
				return err
			}

			var wireValue72 time_2.Time
			if err := time_2.TimeFromNative(&wireValue72, key71); err != nil {
				return err
			}

			if err := wireValue72.FillVDLTarget(keyTarget70, __VDLType_time_Time); err != nil {
				return err
			}
			if err := setTarget69.FinishKey(keyTarget70); err != nil {
				return err
			}
		}
		if err := fieldTarget68.FinishSet(setTarget69); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget67, fieldTarget68); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ManySets) MakeVDLTarget() vdl.Target {
	return &ManySetsTarget{Value: m}
}

type ManySetsTarget struct {
	Value      *ManySets
	bTarget    unnamed_7365745b626f6f6c5dTarget
	byTarget   unnamed_7365745b627974655dTarget
	u16Target  unnamed_7365745b75696e7431365dTarget
	u32Target  unnamed_7365745b75696e7433325dTarget
	u64Target  unnamed_7365745b75696e7436345dTarget
	i16Target  unnamed_7365745b696e7431365dTarget
	i32Target  unnamed_7365745b696e7433325dTarget
	i64Target  unnamed_7365745b696e7436345dTarget
	f32Target  unnamed_7365745b666c6f617433325dTarget
	f64Target  unnamed_7365745b666c6f617436345dTarget
	c64Target  unnamed_7365745b636f6d706c657836345dTarget
	c128Target unnamed_7365745b636f6d706c65783132385dTarget
	sTarget    unnamed_7365745b737472696e675dTarget
	tTarget    unnamed_7365745b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5dTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ManySetsTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_ManySets) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_ManySets)
	}
	return t, nil
}
func (t *ManySetsTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "B":
		t.bTarget.Value = &t.Value.B
		target, err := &t.bTarget, error(nil)
		return nil, target, err
	case "By":
		t.byTarget.Value = &t.Value.By
		target, err := &t.byTarget, error(nil)
		return nil, target, err
	case "U16":
		t.u16Target.Value = &t.Value.U16
		target, err := &t.u16Target, error(nil)
		return nil, target, err
	case "U32":
		t.u32Target.Value = &t.Value.U32
		target, err := &t.u32Target, error(nil)
		return nil, target, err
	case "U64":
		t.u64Target.Value = &t.Value.U64
		target, err := &t.u64Target, error(nil)
		return nil, target, err
	case "I16":
		t.i16Target.Value = &t.Value.I16
		target, err := &t.i16Target, error(nil)
		return nil, target, err
	case "I32":
		t.i32Target.Value = &t.Value.I32
		target, err := &t.i32Target, error(nil)
		return nil, target, err
	case "I64":
		t.i64Target.Value = &t.Value.I64
		target, err := &t.i64Target, error(nil)
		return nil, target, err
	case "F32":
		t.f32Target.Value = &t.Value.F32
		target, err := &t.f32Target, error(nil)
		return nil, target, err
	case "F64":
		t.f64Target.Value = &t.Value.F64
		target, err := &t.f64Target, error(nil)
		return nil, target, err
	case "C64":
		t.c64Target.Value = &t.Value.C64
		target, err := &t.c64Target, error(nil)
		return nil, target, err
	case "C128":
		t.c128Target.Value = &t.Value.C128
		target, err := &t.c128Target, error(nil)
		return nil, target, err
	case "S":
		t.sTarget.Value = &t.Value.S
		target, err := &t.sTarget, error(nil)
		return nil, target, err
	case "T":
		t.tTarget.Value = &t.Value.T
		target, err := &t.tTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_ManySets)
	}
}
func (t *ManySetsTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ManySetsTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

// map[bool]struct{}
type unnamed_7365745b626f6f6c5dTarget struct {
	Value     *map[bool]struct{}
	currKey   bool
	keyTarget vdl.BoolTarget
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b626f6f6c5dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType39) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType39)
	}
	*t.Value = make(map[bool]struct{})
	return t, nil
}
func (t *unnamed_7365745b626f6f6c5dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = false
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b626f6f6c5dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b626f6f6c5dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[byte]struct{}
type unnamed_7365745b627974655dTarget struct {
	Value     *map[byte]struct{}
	currKey   byte
	keyTarget vdl.ByteTarget
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b627974655dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType40) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType40)
	}
	*t.Value = make(map[byte]struct{})
	return t, nil
}
func (t *unnamed_7365745b627974655dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = byte(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b627974655dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b627974655dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[uint16]struct{}
type unnamed_7365745b75696e7431365dTarget struct {
	Value     *map[uint16]struct{}
	currKey   uint16
	keyTarget vdl.Uint16Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b75696e7431365dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType41) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType41)
	}
	*t.Value = make(map[uint16]struct{})
	return t, nil
}
func (t *unnamed_7365745b75696e7431365dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = uint16(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b75696e7431365dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b75696e7431365dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[uint32]struct{}
type unnamed_7365745b75696e7433325dTarget struct {
	Value     *map[uint32]struct{}
	currKey   uint32
	keyTarget vdl.Uint32Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b75696e7433325dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType42) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType42)
	}
	*t.Value = make(map[uint32]struct{})
	return t, nil
}
func (t *unnamed_7365745b75696e7433325dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = uint32(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b75696e7433325dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b75696e7433325dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[uint64]struct{}
type unnamed_7365745b75696e7436345dTarget struct {
	Value     *map[uint64]struct{}
	currKey   uint64
	keyTarget vdl.Uint64Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b75696e7436345dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType43) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType43)
	}
	*t.Value = make(map[uint64]struct{})
	return t, nil
}
func (t *unnamed_7365745b75696e7436345dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = uint64(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b75696e7436345dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b75696e7436345dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[int16]struct{}
type unnamed_7365745b696e7431365dTarget struct {
	Value     *map[int16]struct{}
	currKey   int16
	keyTarget vdl.Int16Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b696e7431365dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType44) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType44)
	}
	*t.Value = make(map[int16]struct{})
	return t, nil
}
func (t *unnamed_7365745b696e7431365dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = int16(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b696e7431365dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b696e7431365dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[int32]struct{}
type unnamed_7365745b696e7433325dTarget struct {
	Value     *map[int32]struct{}
	currKey   int32
	keyTarget vdl.Int32Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b696e7433325dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType45) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType45)
	}
	*t.Value = make(map[int32]struct{})
	return t, nil
}
func (t *unnamed_7365745b696e7433325dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = int32(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b696e7433325dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b696e7433325dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[int64]struct{}
type unnamed_7365745b696e7436345dTarget struct {
	Value     *map[int64]struct{}
	currKey   int64
	keyTarget vdl.Int64Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b696e7436345dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType46) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType46)
	}
	*t.Value = make(map[int64]struct{})
	return t, nil
}
func (t *unnamed_7365745b696e7436345dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = int64(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b696e7436345dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b696e7436345dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[float32]struct{}
type unnamed_7365745b666c6f617433325dTarget struct {
	Value     *map[float32]struct{}
	currKey   float32
	keyTarget vdl.Float32Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b666c6f617433325dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType47) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType47)
	}
	*t.Value = make(map[float32]struct{})
	return t, nil
}
func (t *unnamed_7365745b666c6f617433325dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = float32(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b666c6f617433325dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b666c6f617433325dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[float64]struct{}
type unnamed_7365745b666c6f617436345dTarget struct {
	Value     *map[float64]struct{}
	currKey   float64
	keyTarget vdl.Float64Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b666c6f617436345dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType48) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType48)
	}
	*t.Value = make(map[float64]struct{})
	return t, nil
}
func (t *unnamed_7365745b666c6f617436345dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = float64(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b666c6f617436345dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b666c6f617436345dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[complex64]struct{}
type unnamed_7365745b636f6d706c657836345dTarget struct {
	Value     *map[complex64]struct{}
	currKey   complex64
	keyTarget vdl.Complex64Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b636f6d706c657836345dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType49) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType49)
	}
	*t.Value = make(map[complex64]struct{})
	return t, nil
}
func (t *unnamed_7365745b636f6d706c657836345dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = complex64(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b636f6d706c657836345dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b636f6d706c657836345dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[complex128]struct{}
type unnamed_7365745b636f6d706c65783132385dTarget struct {
	Value     *map[complex128]struct{}
	currKey   complex128
	keyTarget vdl.Complex128Target
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b636f6d706c65783132385dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType50) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType50)
	}
	*t.Value = make(map[complex128]struct{})
	return t, nil
}
func (t *unnamed_7365745b636f6d706c65783132385dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = complex128(0)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b636f6d706c65783132385dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b636f6d706c65783132385dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

// map[time.Time]struct{}
type unnamed_7365745b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5dTarget struct {
	Value     *map[time.Time]struct{}
	currKey   time.Time
	keyTarget time_2.TimeTarget
	vdl.TargetBase
	vdl.SetTargetBase
}

func (t *unnamed_7365745b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5dTarget) StartSet(tt *vdl.Type, len int) (vdl.SetTarget, error) {

	if !vdl.Compatible(tt, __VDLType51) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType51)
	}
	*t.Value = make(map[time.Time]struct{})
	return t, nil
}
func (t *unnamed_7365745b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = reflect.Zero(reflect.TypeOf(t.currKey)).Interface().(time.Time)
	t.keyTarget.Value = &t.currKey
	target, err := &t.keyTarget, error(nil)
	return target, err
}
func (t *unnamed_7365745b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5dTarget) FinishKey(key vdl.Target) error {
	(*t.Value)[t.currKey] = struct{}{}
	return nil
}
func (t *unnamed_7365745b74696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d5dTarget) FinishSet(list vdl.SetTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}

	return nil
}

type BigData struct {
	Key string // A dup of the key stored in the value.
}

func (BigData) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/query/engine/internal/testdata.BigData"`
}) {
}

func (m *BigData) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_v_io_v23_query_engine_internal_testdata_BigData == nil || __VDLType52 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Key")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Key), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *BigData) MakeVDLTarget() vdl.Target {
	return &BigDataTarget{Value: m}
}

type BigDataTarget struct {
	Value     *BigData
	keyTarget vdl.StringTarget
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *BigDataTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {

	if !vdl.Compatible(tt, __VDLType_v_io_v23_query_engine_internal_testdata_BigData) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_query_engine_internal_testdata_BigData)
	}
	return t, nil
}
func (t *BigDataTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Key":
		t.keyTarget.Value = &t.Value.Key
		target, err := &t.keyTarget, error(nil)
		return nil, target, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_v_io_v23_query_engine_internal_testdata_BigData)
	}
}
func (t *BigDataTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *BigDataTarget) FinishFields(_ vdl.FieldsTarget) error {

	return nil
}

func init() {
	vdl.Register((*AddressInfo)(nil))
	vdl.Register((*CreditAgency)(nil))
	vdl.Register((*ExperianRating)(nil))
	vdl.Register((*RatingsArray)(nil))
	vdl.Register((*EquifaxCreditReport)(nil))
	vdl.Register((*Tdh)(nil))
	vdl.Register((*ExperianCreditReport)(nil))
	vdl.Register((*TransUnionCreditReport)(nil))
	vdl.Register((*AgencyReport)(nil))
	vdl.Register((*CreditReport)(nil))
	vdl.Register((*Customer)(nil))
	vdl.Register((*Invoice)(nil))
	vdl.Register((*Numbers)(nil))
	vdl.Register((*FooType)(nil))
	vdl.Register((*BarType)(nil))
	vdl.Register((*TitleOrValueType)(nil))
	vdl.Register((*BazType)(nil))
	vdl.Register((*K)(nil))
	vdl.Register((*V)(nil))
	vdl.Register((*FunWithMaps)(nil))
	vdl.Register((*FunWithTypes)(nil))
	vdl.Register((*ManyMaps)(nil))
	vdl.Register((*ManySets)(nil))
	vdl.Register((*BigData)(nil))
}

var __VDLType0 *vdl.Type = vdl.TypeOf((*AddressInfo)(nil))
var __VDLType12 *vdl.Type = vdl.TypeOf((*BarType)(nil))
var __VDLType13 *vdl.Type = vdl.TypeOf((*BazType)(nil))
var __VDLType52 *vdl.Type = vdl.TypeOf((*BigData)(nil))
var __VDLType6 *vdl.Type = vdl.TypeOf((*CreditReport)(nil))
var __VDLType7 *vdl.Type = vdl.TypeOf((*Customer)(nil))
var __VDLType1 *vdl.Type = vdl.TypeOf((*EquifaxCreditReport)(nil))
var __VDLType2 *vdl.Type = vdl.TypeOf((*ExperianCreditReport)(nil))
var __VDLType11 *vdl.Type = vdl.TypeOf((*FooType)(nil))
var __VDLType16 *vdl.Type = vdl.TypeOf((*FunWithMaps)(nil))
var __VDLType21 *vdl.Type = vdl.TypeOf((*FunWithTypes)(nil))
var __VDLType9 *vdl.Type

func __VDLType9_gen() *vdl.Type {
	__VDLType9Builder := vdl.TypeBuilder{}

	__VDLType91 := __VDLType9Builder.Optional()
	__VDLType92 := __VDLType9Builder.Struct()
	__VDLType93 := __VDLType9Builder.Named("v.io/v23/query/engine/internal/testdata.Invoice").AssignBase(__VDLType92)
	__VDLType94 := vdl.Int64Type
	__VDLType92.AppendField("CustId", __VDLType94)
	__VDLType92.AppendField("InvoiceNum", __VDLType94)
	__VDLType95 := __VDLType9Builder.Struct()
	__VDLType96 := __VDLType9Builder.Named("time.Time").AssignBase(__VDLType95)
	__VDLType95.AppendField("Seconds", __VDLType94)
	__VDLType97 := vdl.Int32Type
	__VDLType95.AppendField("Nanos", __VDLType97)
	__VDLType92.AppendField("InvoiceDate", __VDLType96)
	__VDLType92.AppendField("Amount", __VDLType94)
	__VDLType98 := __VDLType9Builder.Struct()
	__VDLType99 := __VDLType9Builder.Named("v.io/v23/query/engine/internal/testdata.AddressInfo").AssignBase(__VDLType98)
	__VDLType910 := vdl.StringType
	__VDLType98.AppendField("Street", __VDLType910)
	__VDLType98.AppendField("City", __VDLType910)
	__VDLType98.AppendField("State", __VDLType910)
	__VDLType98.AppendField("Zip", __VDLType910)
	__VDLType92.AppendField("ShipTo", __VDLType99)
	__VDLType91.AssignElem(__VDLType93)
	__VDLType9Builder.Build()
	__VDLType9v, err := __VDLType91.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType9v
}
func init() {
	__VDLType9 = __VDLType9_gen()
}

var __VDLType14 *vdl.Type = vdl.TypeOf((*K)(nil))
var __VDLType22 *vdl.Type

func __VDLType22_gen() *vdl.Type {
	__VDLType22Builder := vdl.TypeBuilder{}

	__VDLType221 := __VDLType22Builder.Optional()
	__VDLType222 := __VDLType22Builder.Struct()
	__VDLType223 := __VDLType22Builder.Named("v.io/v23/query/engine/internal/testdata.ManyMaps").AssignBase(__VDLType222)
	__VDLType224 := __VDLType22Builder.Map()
	__VDLType225 := vdl.BoolType
	__VDLType224.AssignKey(__VDLType225)
	__VDLType226 := vdl.StringType
	__VDLType224.AssignElem(__VDLType226)
	__VDLType222.AppendField("B", __VDLType224)
	__VDLType227 := __VDLType22Builder.Map()
	__VDLType228 := vdl.ByteType
	__VDLType227.AssignKey(__VDLType228)
	__VDLType227.AssignElem(__VDLType226)
	__VDLType222.AppendField("By", __VDLType227)
	__VDLType229 := __VDLType22Builder.Map()
	__VDLType2210 := vdl.Uint16Type
	__VDLType229.AssignKey(__VDLType2210)
	__VDLType229.AssignElem(__VDLType226)
	__VDLType222.AppendField("U16", __VDLType229)
	__VDLType2211 := __VDLType22Builder.Map()
	__VDLType2212 := vdl.Uint32Type
	__VDLType2211.AssignKey(__VDLType2212)
	__VDLType2211.AssignElem(__VDLType226)
	__VDLType222.AppendField("U32", __VDLType2211)
	__VDLType2213 := __VDLType22Builder.Map()
	__VDLType2214 := vdl.Uint64Type
	__VDLType2213.AssignKey(__VDLType2214)
	__VDLType2213.AssignElem(__VDLType226)
	__VDLType222.AppendField("U64", __VDLType2213)
	__VDLType2215 := __VDLType22Builder.Map()
	__VDLType2216 := vdl.Int16Type
	__VDLType2215.AssignKey(__VDLType2216)
	__VDLType2215.AssignElem(__VDLType226)
	__VDLType222.AppendField("I16", __VDLType2215)
	__VDLType2217 := __VDLType22Builder.Map()
	__VDLType2218 := vdl.Int32Type
	__VDLType2217.AssignKey(__VDLType2218)
	__VDLType2217.AssignElem(__VDLType226)
	__VDLType222.AppendField("I32", __VDLType2217)
	__VDLType2219 := __VDLType22Builder.Map()
	__VDLType2220 := vdl.Int64Type
	__VDLType2219.AssignKey(__VDLType2220)
	__VDLType2219.AssignElem(__VDLType226)
	__VDLType222.AppendField("I64", __VDLType2219)
	__VDLType2221 := __VDLType22Builder.Map()
	__VDLType2222 := vdl.Float32Type
	__VDLType2221.AssignKey(__VDLType2222)
	__VDLType2221.AssignElem(__VDLType226)
	__VDLType222.AppendField("F32", __VDLType2221)
	__VDLType2223 := __VDLType22Builder.Map()
	__VDLType2224 := vdl.Float64Type
	__VDLType2223.AssignKey(__VDLType2224)
	__VDLType2223.AssignElem(__VDLType226)
	__VDLType222.AppendField("F64", __VDLType2223)
	__VDLType2225 := __VDLType22Builder.Map()
	__VDLType2226 := vdl.Complex64Type
	__VDLType2225.AssignKey(__VDLType2226)
	__VDLType2225.AssignElem(__VDLType226)
	__VDLType222.AppendField("C64", __VDLType2225)
	__VDLType2227 := __VDLType22Builder.Map()
	__VDLType2228 := vdl.Complex128Type
	__VDLType2227.AssignKey(__VDLType2228)
	__VDLType2227.AssignElem(__VDLType226)
	__VDLType222.AppendField("C128", __VDLType2227)
	__VDLType2229 := __VDLType22Builder.Map()
	__VDLType2229.AssignKey(__VDLType226)
	__VDLType2229.AssignElem(__VDLType226)
	__VDLType222.AppendField("S", __VDLType2229)
	__VDLType2230 := __VDLType22Builder.Map()
	__VDLType2230.AssignKey(__VDLType226)
	__VDLType2230.AssignElem(__VDLType2229)
	__VDLType222.AppendField("Ms", __VDLType2230)
	__VDLType2231 := __VDLType22Builder.Map()
	__VDLType2232 := __VDLType22Builder.Struct()
	__VDLType2233 := __VDLType22Builder.Named("time.Time").AssignBase(__VDLType2232)
	__VDLType2232.AppendField("Seconds", __VDLType2220)
	__VDLType2232.AppendField("Nanos", __VDLType2218)
	__VDLType2231.AssignKey(__VDLType2233)
	__VDLType2231.AssignElem(__VDLType226)
	__VDLType222.AppendField("T", __VDLType2231)
	__VDLType221.AssignElem(__VDLType223)
	__VDLType22Builder.Build()
	__VDLType22v, err := __VDLType221.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType22v
}
func init() {
	__VDLType22 = __VDLType22_gen()
}

var __VDLType38 *vdl.Type

func __VDLType38_gen() *vdl.Type {
	__VDLType38Builder := vdl.TypeBuilder{}

	__VDLType381 := __VDLType38Builder.Optional()
	__VDLType382 := __VDLType38Builder.Struct()
	__VDLType383 := __VDLType38Builder.Named("v.io/v23/query/engine/internal/testdata.ManySets").AssignBase(__VDLType382)
	__VDLType384 := __VDLType38Builder.Set()
	__VDLType385 := vdl.BoolType
	__VDLType384.AssignKey(__VDLType385)
	__VDLType382.AppendField("B", __VDLType384)
	__VDLType386 := __VDLType38Builder.Set()
	__VDLType387 := vdl.ByteType
	__VDLType386.AssignKey(__VDLType387)
	__VDLType382.AppendField("By", __VDLType386)
	__VDLType388 := __VDLType38Builder.Set()
	__VDLType389 := vdl.Uint16Type
	__VDLType388.AssignKey(__VDLType389)
	__VDLType382.AppendField("U16", __VDLType388)
	__VDLType3810 := __VDLType38Builder.Set()
	__VDLType3811 := vdl.Uint32Type
	__VDLType3810.AssignKey(__VDLType3811)
	__VDLType382.AppendField("U32", __VDLType3810)
	__VDLType3812 := __VDLType38Builder.Set()
	__VDLType3813 := vdl.Uint64Type
	__VDLType3812.AssignKey(__VDLType3813)
	__VDLType382.AppendField("U64", __VDLType3812)
	__VDLType3814 := __VDLType38Builder.Set()
	__VDLType3815 := vdl.Int16Type
	__VDLType3814.AssignKey(__VDLType3815)
	__VDLType382.AppendField("I16", __VDLType3814)
	__VDLType3816 := __VDLType38Builder.Set()
	__VDLType3817 := vdl.Int32Type
	__VDLType3816.AssignKey(__VDLType3817)
	__VDLType382.AppendField("I32", __VDLType3816)
	__VDLType3818 := __VDLType38Builder.Set()
	__VDLType3819 := vdl.Int64Type
	__VDLType3818.AssignKey(__VDLType3819)
	__VDLType382.AppendField("I64", __VDLType3818)
	__VDLType3820 := __VDLType38Builder.Set()
	__VDLType3821 := vdl.Float32Type
	__VDLType3820.AssignKey(__VDLType3821)
	__VDLType382.AppendField("F32", __VDLType3820)
	__VDLType3822 := __VDLType38Builder.Set()
	__VDLType3823 := vdl.Float64Type
	__VDLType3822.AssignKey(__VDLType3823)
	__VDLType382.AppendField("F64", __VDLType3822)
	__VDLType3824 := __VDLType38Builder.Set()
	__VDLType3825 := vdl.Complex64Type
	__VDLType3824.AssignKey(__VDLType3825)
	__VDLType382.AppendField("C64", __VDLType3824)
	__VDLType3826 := __VDLType38Builder.Set()
	__VDLType3827 := vdl.Complex128Type
	__VDLType3826.AssignKey(__VDLType3827)
	__VDLType382.AppendField("C128", __VDLType3826)
	__VDLType3828 := __VDLType38Builder.Set()
	__VDLType3829 := vdl.StringType
	__VDLType3828.AssignKey(__VDLType3829)
	__VDLType382.AppendField("S", __VDLType3828)
	__VDLType3830 := __VDLType38Builder.Set()
	__VDLType3831 := __VDLType38Builder.Struct()
	__VDLType3832 := __VDLType38Builder.Named("time.Time").AssignBase(__VDLType3831)
	__VDLType3831.AppendField("Seconds", __VDLType3819)
	__VDLType3831.AppendField("Nanos", __VDLType3817)
	__VDLType3830.AssignKey(__VDLType3832)
	__VDLType382.AppendField("T", __VDLType3830)
	__VDLType381.AssignElem(__VDLType383)
	__VDLType38Builder.Build()
	__VDLType38v, err := __VDLType381.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType38v
}
func init() {
	__VDLType38 = __VDLType38_gen()
}

var __VDLType10 *vdl.Type = vdl.TypeOf((*Numbers)(nil))
var __VDLType4 *vdl.Type = vdl.TypeOf((*TransUnionCreditReport)(nil))
var __VDLType15 *vdl.Type = vdl.TypeOf((*V)(nil))
var __VDLType19 *vdl.Type = vdl.TypeOf([]map[string]struct{}(nil))
var __VDLType8 *vdl.Type = vdl.TypeOf([]AddressInfo(nil))
var __VDLType23 *vdl.Type = vdl.TypeOf(map[bool]string(nil))
var __VDLType24 *vdl.Type = vdl.TypeOf(map[byte]string(nil))
var __VDLType34 *vdl.Type = vdl.TypeOf(map[complex128]string(nil))
var __VDLType33 *vdl.Type = vdl.TypeOf(map[complex64]string(nil))
var __VDLType31 *vdl.Type = vdl.TypeOf(map[float32]string(nil))
var __VDLType32 *vdl.Type = vdl.TypeOf(map[float64]string(nil))
var __VDLType18 *vdl.Type = vdl.TypeOf(map[int16][]map[string]struct{}(nil))
var __VDLType28 *vdl.Type = vdl.TypeOf(map[int16]string(nil))
var __VDLType29 *vdl.Type = vdl.TypeOf(map[int32]string(nil))
var __VDLType30 *vdl.Type = vdl.TypeOf(map[int64]string(nil))
var __VDLType5 *vdl.Type = vdl.TypeOf(map[string]int16(nil))
var __VDLType36 *vdl.Type = vdl.TypeOf(map[string]map[string]string(nil))
var __VDLType35 *vdl.Type = vdl.TypeOf(map[string]string(nil))
var __VDLType37 *vdl.Type

func __VDLType37_gen() *vdl.Type {
	__VDLType37Builder := vdl.TypeBuilder{}

	__VDLType371 := __VDLType37Builder.Map()
	__VDLType372 := __VDLType37Builder.Struct()
	__VDLType373 := __VDLType37Builder.Named("time.Time").AssignBase(__VDLType372)
	__VDLType374 := vdl.Int64Type
	__VDLType372.AppendField("Seconds", __VDLType374)
	__VDLType375 := vdl.Int32Type
	__VDLType372.AppendField("Nanos", __VDLType375)
	__VDLType371.AssignKey(__VDLType373)
	__VDLType376 := vdl.StringType
	__VDLType371.AssignElem(__VDLType376)
	__VDLType37Builder.Build()
	__VDLType37v, err := __VDLType371.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType37v
}
func init() {
	__VDLType37 = __VDLType37_gen()
}

var __VDLType25 *vdl.Type = vdl.TypeOf(map[uint16]string(nil))
var __VDLType26 *vdl.Type = vdl.TypeOf(map[uint32]string(nil))
var __VDLType27 *vdl.Type = vdl.TypeOf(map[uint64]string(nil))
var __VDLType17 *vdl.Type = vdl.TypeOf(map[K]V(nil))
var __VDLType39 *vdl.Type = vdl.TypeOf(map[bool]struct{}(nil))
var __VDLType40 *vdl.Type = vdl.TypeOf(map[byte]struct{}(nil))
var __VDLType50 *vdl.Type = vdl.TypeOf(map[complex128]struct{}(nil))
var __VDLType49 *vdl.Type = vdl.TypeOf(map[complex64]struct{}(nil))
var __VDLType47 *vdl.Type = vdl.TypeOf(map[float32]struct{}(nil))
var __VDLType48 *vdl.Type = vdl.TypeOf(map[float64]struct{}(nil))
var __VDLType44 *vdl.Type = vdl.TypeOf(map[int16]struct{}(nil))
var __VDLType45 *vdl.Type = vdl.TypeOf(map[int32]struct{}(nil))
var __VDLType46 *vdl.Type = vdl.TypeOf(map[int64]struct{}(nil))
var __VDLType20 *vdl.Type = vdl.TypeOf(map[string]struct{}(nil))
var __VDLType51 *vdl.Type

func __VDLType51_gen() *vdl.Type {
	__VDLType51Builder := vdl.TypeBuilder{}

	__VDLType511 := __VDLType51Builder.Set()
	__VDLType512 := __VDLType51Builder.Struct()
	__VDLType513 := __VDLType51Builder.Named("time.Time").AssignBase(__VDLType512)
	__VDLType514 := vdl.Int64Type
	__VDLType512.AppendField("Seconds", __VDLType514)
	__VDLType515 := vdl.Int32Type
	__VDLType512.AppendField("Nanos", __VDLType515)
	__VDLType511.AssignKey(__VDLType513)
	__VDLType51Builder.Build()
	__VDLType51v, err := __VDLType511.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType51v
}
func init() {
	__VDLType51 = __VDLType51_gen()
}

var __VDLType41 *vdl.Type = vdl.TypeOf(map[uint16]struct{}(nil))
var __VDLType42 *vdl.Type = vdl.TypeOf(map[uint32]struct{}(nil))
var __VDLType43 *vdl.Type = vdl.TypeOf(map[uint64]struct{}(nil))
var __VDLType3 *vdl.Type = vdl.TypeOf(map[Tdh]struct{}(nil))
var __VDLType_time_Time *vdl.Type

func __VDLType_time_Time_gen() *vdl.Type {
	__VDLType_time_TimeBuilder := vdl.TypeBuilder{}

	__VDLType_time_Time1 := __VDLType_time_TimeBuilder.Struct()
	__VDLType_time_Time2 := __VDLType_time_TimeBuilder.Named("time.Time").AssignBase(__VDLType_time_Time1)
	__VDLType_time_Time3 := vdl.Int64Type
	__VDLType_time_Time1.AppendField("Seconds", __VDLType_time_Time3)
	__VDLType_time_Time4 := vdl.Int32Type
	__VDLType_time_Time1.AppendField("Nanos", __VDLType_time_Time4)
	__VDLType_time_TimeBuilder.Build()
	__VDLType_time_Timev, err := __VDLType_time_Time2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_time_Timev
}
func init() {
	__VDLType_time_Time = __VDLType_time_Time_gen()
}

var __VDLType_v_io_v23_query_engine_internal_testdata_AddressInfo *vdl.Type = vdl.TypeOf(AddressInfo{})
var __VDLType_v_io_v23_query_engine_internal_testdata_AgencyReport *vdl.Type = vdl.TypeOf(AgencyReport(AgencyReportEquifaxReport{EquifaxCreditReport{}}))
var __VDLType_v_io_v23_query_engine_internal_testdata_BarType *vdl.Type = vdl.TypeOf(BarType{
	Baz: BazType{
		TitleOrValue: TitleOrValueTypeTitle{""},
	},
})
var __VDLType_v_io_v23_query_engine_internal_testdata_BazType *vdl.Type = vdl.TypeOf(BazType{
	TitleOrValue: TitleOrValueTypeTitle{""},
})
var __VDLType_v_io_v23_query_engine_internal_testdata_BigData *vdl.Type = vdl.TypeOf(BigData{})
var __VDLType_v_io_v23_query_engine_internal_testdata_CreditAgency *vdl.Type = vdl.TypeOf(CreditAgencyEquifax)
var __VDLType_v_io_v23_query_engine_internal_testdata_CreditReport *vdl.Type = vdl.TypeOf(CreditReport{
	Report: AgencyReportEquifaxReport{EquifaxCreditReport{}},
})
var __VDLType_v_io_v23_query_engine_internal_testdata_Customer *vdl.Type = vdl.TypeOf(Customer{
	Credit: CreditReport{
		Report: AgencyReportEquifaxReport{EquifaxCreditReport{}},
	},
})
var __VDLType_v_io_v23_query_engine_internal_testdata_EquifaxCreditReport *vdl.Type = vdl.TypeOf(EquifaxCreditReport{})
var __VDLType_v_io_v23_query_engine_internal_testdata_ExperianCreditReport *vdl.Type = vdl.TypeOf(ExperianCreditReport{})
var __VDLType_v_io_v23_query_engine_internal_testdata_ExperianRating *vdl.Type = vdl.TypeOf(ExperianRatingGood)
var __VDLType_v_io_v23_query_engine_internal_testdata_FooType *vdl.Type = vdl.TypeOf(FooType{
	Bar: BarType{
		Baz: BazType{
			TitleOrValue: TitleOrValueTypeTitle{""},
		},
	},
})
var __VDLType_v_io_v23_query_engine_internal_testdata_FunWithMaps *vdl.Type = vdl.TypeOf(FunWithMaps{})
var __VDLType_v_io_v23_query_engine_internal_testdata_FunWithTypes *vdl.Type = vdl.TypeOf(FunWithTypes{
	T1: vdl.AnyType,
	T2: vdl.AnyType,
})
var __VDLType_v_io_v23_query_engine_internal_testdata_Invoice *vdl.Type

func __VDLType_v_io_v23_query_engine_internal_testdata_Invoice_gen() *vdl.Type {
	__VDLType_v_io_v23_query_engine_internal_testdata_InvoiceBuilder := vdl.TypeBuilder{}

	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice1 := __VDLType_v_io_v23_query_engine_internal_testdata_InvoiceBuilder.Struct()
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice2 := __VDLType_v_io_v23_query_engine_internal_testdata_InvoiceBuilder.Named("v.io/v23/query/engine/internal/testdata.Invoice").AssignBase(__VDLType_v_io_v23_query_engine_internal_testdata_Invoice1)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice3 := vdl.Int64Type
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice1.AppendField("CustId", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice3)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice1.AppendField("InvoiceNum", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice3)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice4 := __VDLType_v_io_v23_query_engine_internal_testdata_InvoiceBuilder.Struct()
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice5 := __VDLType_v_io_v23_query_engine_internal_testdata_InvoiceBuilder.Named("time.Time").AssignBase(__VDLType_v_io_v23_query_engine_internal_testdata_Invoice4)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice4.AppendField("Seconds", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice3)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice6 := vdl.Int32Type
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice4.AppendField("Nanos", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice6)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice1.AppendField("InvoiceDate", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice5)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice1.AppendField("Amount", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice3)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice7 := __VDLType_v_io_v23_query_engine_internal_testdata_InvoiceBuilder.Struct()
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice8 := __VDLType_v_io_v23_query_engine_internal_testdata_InvoiceBuilder.Named("v.io/v23/query/engine/internal/testdata.AddressInfo").AssignBase(__VDLType_v_io_v23_query_engine_internal_testdata_Invoice7)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice9 := vdl.StringType
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice7.AppendField("Street", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice9)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice7.AppendField("City", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice9)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice7.AppendField("State", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice9)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice7.AppendField("Zip", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice9)
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice1.AppendField("ShipTo", __VDLType_v_io_v23_query_engine_internal_testdata_Invoice8)
	__VDLType_v_io_v23_query_engine_internal_testdata_InvoiceBuilder.Build()
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoicev, err := __VDLType_v_io_v23_query_engine_internal_testdata_Invoice2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_v_io_v23_query_engine_internal_testdata_Invoicev
}
func init() {
	__VDLType_v_io_v23_query_engine_internal_testdata_Invoice = __VDLType_v_io_v23_query_engine_internal_testdata_Invoice_gen()
}

var __VDLType_v_io_v23_query_engine_internal_testdata_K *vdl.Type = vdl.TypeOf(K{})
var __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps *vdl.Type

func __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps_gen() *vdl.Type {
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder := vdl.TypeBuilder{}

	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Struct()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps2 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Named("v.io/v23/query/engine/internal/testdata.ManyMaps").AssignBase(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps3 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps4 := vdl.BoolType
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps3.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps4)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5 := vdl.StringType
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps3.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("B", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps3)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps6 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps7 := vdl.ByteType
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps6.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps7)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps6.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("By", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps6)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps8 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps9 := vdl.Uint16Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps8.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps9)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps8.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("U16", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps8)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps10 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps11 := vdl.Uint32Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps10.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps11)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps10.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("U32", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps10)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps12 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps13 := vdl.Uint64Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps12.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps13)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps12.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("U64", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps12)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps14 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps15 := vdl.Int16Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps14.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps15)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps14.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("I16", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps14)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps16 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps17 := vdl.Int32Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps16.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps17)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps16.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("I32", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps16)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps18 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps19 := vdl.Int64Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps18.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps19)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps18.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("I64", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps18)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps20 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps21 := vdl.Float32Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps20.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps21)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps20.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("F32", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps20)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps22 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps23 := vdl.Float64Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps22.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps23)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps22.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("F64", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps22)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps24 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps25 := vdl.Complex64Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps24.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps25)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps24.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("C64", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps24)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps26 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps27 := vdl.Complex128Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps26.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps27)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps26.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("C128", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps26)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps28 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps28.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps28.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("S", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps28)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps29 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps29.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps29.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps28)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("Ms", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps29)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps30 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Map()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps31 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Struct()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps32 := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Named("time.Time").AssignBase(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps31)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps31.AppendField("Seconds", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps19)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps31.AppendField("Nanos", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps17)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps30.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps32)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps30.AssignElem(__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps1.AppendField("T", __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps30)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsBuilder.Build()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsv, err := __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_v_io_v23_query_engine_internal_testdata_ManyMapsv
}
func init() {
	__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps = __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps_gen()
}

var __VDLType_v_io_v23_query_engine_internal_testdata_ManySets *vdl.Type

func __VDLType_v_io_v23_query_engine_internal_testdata_ManySets_gen() *vdl.Type {
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder := vdl.TypeBuilder{}

	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Struct()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets2 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Named("v.io/v23/query/engine/internal/testdata.ManySets").AssignBase(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets3 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets4 := vdl.BoolType
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets3.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets4)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("B", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets3)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets5 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets6 := vdl.ByteType
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets5.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets6)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("By", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets5)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets7 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets8 := vdl.Uint16Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets7.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets8)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("U16", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets7)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets9 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets10 := vdl.Uint32Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets9.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets10)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("U32", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets9)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets11 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets12 := vdl.Uint64Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets11.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets12)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("U64", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets11)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets13 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets14 := vdl.Int16Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets13.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets14)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("I16", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets13)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets15 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets16 := vdl.Int32Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets15.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets16)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("I32", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets15)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets17 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets18 := vdl.Int64Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets17.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets18)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("I64", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets17)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets19 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets20 := vdl.Float32Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets19.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets20)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("F32", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets19)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets21 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets22 := vdl.Float64Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets21.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets22)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("F64", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets21)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets23 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets24 := vdl.Complex64Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets23.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets24)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("C64", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets23)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets25 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets26 := vdl.Complex128Type
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets25.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets26)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("C128", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets25)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets27 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets28 := vdl.StringType
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets27.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets28)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("S", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets27)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets29 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Set()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets30 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Struct()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets31 := __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Named("time.Time").AssignBase(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets30)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets30.AppendField("Seconds", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets18)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets30.AppendField("Nanos", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets16)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets29.AssignKey(__VDLType_v_io_v23_query_engine_internal_testdata_ManySets31)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets1.AppendField("T", __VDLType_v_io_v23_query_engine_internal_testdata_ManySets29)
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySetsBuilder.Build()
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySetsv, err := __VDLType_v_io_v23_query_engine_internal_testdata_ManySets2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_v_io_v23_query_engine_internal_testdata_ManySetsv
}
func init() {
	__VDLType_v_io_v23_query_engine_internal_testdata_ManySets = __VDLType_v_io_v23_query_engine_internal_testdata_ManySets_gen()
}

var __VDLType_v_io_v23_query_engine_internal_testdata_Numbers *vdl.Type = vdl.TypeOf(Numbers{})
var __VDLType_v_io_v23_query_engine_internal_testdata_RatingsArray *vdl.Type = vdl.TypeOf(RatingsArray{})
var __VDLType_v_io_v23_query_engine_internal_testdata_Tdh *vdl.Type = vdl.TypeOf(TdhTom)
var __VDLType_v_io_v23_query_engine_internal_testdata_TitleOrValueType *vdl.Type = vdl.TypeOf(TitleOrValueType(TitleOrValueTypeTitle{""}))
var __VDLType_v_io_v23_query_engine_internal_testdata_TransUnionCreditReport *vdl.Type = vdl.TypeOf(TransUnionCreditReport{})
var __VDLType_v_io_v23_query_engine_internal_testdata_V *vdl.Type = vdl.TypeOf(V{})

func __VDLEnsureNativeBuilt() {
	if __VDLType9 == nil {
		__VDLType9 = __VDLType9_gen()
	}
	if __VDLType22 == nil {
		__VDLType22 = __VDLType22_gen()
	}
	if __VDLType38 == nil {
		__VDLType38 = __VDLType38_gen()
	}
	if __VDLType37 == nil {
		__VDLType37 = __VDLType37_gen()
	}
	if __VDLType51 == nil {
		__VDLType51 = __VDLType51_gen()
	}
	if __VDLType_time_Time == nil {
		__VDLType_time_Time = __VDLType_time_Time_gen()
	}
	if __VDLType_v_io_v23_query_engine_internal_testdata_Invoice == nil {
		__VDLType_v_io_v23_query_engine_internal_testdata_Invoice = __VDLType_v_io_v23_query_engine_internal_testdata_Invoice_gen()
	}
	if __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps == nil {
		__VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps = __VDLType_v_io_v23_query_engine_internal_testdata_ManyMaps_gen()
	}
	if __VDLType_v_io_v23_query_engine_internal_testdata_ManySets == nil {
		__VDLType_v_io_v23_query_engine_internal_testdata_ManySets = __VDLType_v_io_v23_query_engine_internal_testdata_ManySets_gen()
	}
}
