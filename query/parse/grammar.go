//line grammar.y:13

// This grammar.go file was auto-generated by yacc from grammar.y.

package parse

import __yyfmt__ "fmt"

//line grammar.y:15
import (
	"fmt"
	"math/big"
	"path"
	"strings"
)

type strPos struct {
	str string
	pos Pos
}

func (s strPos) String() string {
	return fmt.Sprintf("{str:%s pos:%s}", s.str, s.pos)
}

type intPos struct {
	int *big.Int
	pos Pos
}

func (i intPos) String() string {
	return fmt.Sprintf("{int:%s pos:%s}", i.int, i.pos)
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

func (r ratPos) String() string {
	return fmt.Sprintf("{rat:%s pos:%s}", r.rat, r.pos)
}

func (y yySymType) String() string {
	return fmt.Sprintf("{yys:%d pos:%s strpos:%s intpos:%s ratpos:%s pipeline:%s WildcardName:%s pred:%s expr:%s}",
		y.yys, y.pos, y.strpos, y.intpos, y.ratpos, y.pipeline, y.wildcardname, y.pred, y.expr)
}

func newWildcardName(name strPos, yylex yyLexer) *WildcardName {
	if strings.Index(name.str, "/") == 0 {
		lexAbort(yylex, "Names must be relative.  Found leading '/'")
		return &WildcardName{}
	}
	parts := strings.Split(name.str, "/")
	if len(parts) == 0 || (len(parts) == 1 && parts[0] == "") {
		lexAbort(yylex, "Must provide a name, an expansion ('.', '*') or both")
		return &WildcardName{}
	}
	var clean []string
	for i, c := range parts {
		switch c {
		case "", ".":
			// Do nothing.
		case "..":
			if len(clean) > 0 {
				clean = clean[:len(clean)-1]
			} else {
				lexAbort(yylex, "Not possible to use '..' to traverse above the root of the query")
				return &WildcardName{}
			}
		case "*":
			if i != len(parts)-1 {
				lexAbort(yylex, fmt.Sprintf("'%s' is supported only as the last component", c))
				return &WildcardName{}
			} else {
				clean = append(clean, c)
			}
		default:
			clean = append(clean, c)
		}
	}
	if len(clean) > 0 && clean[len(clean)-1] == "*" {
		return &WildcardName{path.Join(clean[:len(clean)-1]...), Star, name.pos}
	}
	return &WildcardName{path.Join(clean...), Self, name.pos}
}

//line grammar.y:100
type yySymType struct {
	yys          int
	pos          Pos
	strpos       strPos
	intpos       intPos
	ratpos       ratPos
	pipeline     Pipeline
	wildcardname *WildcardName
	pred         Predicate
	expr         Expr
	exprlist     []Expr
	alias        Alias
	aliaslist    []Alias
}

const tOROR = 57346
const tANDAND = 57347
const tLE = 57348
const tGE = 57349
const tNE = 57350
const tEQEQ = 57351
const tDOTDOT = 57352
const tTRUE = 57353
const tFALSE = 57354
const tTYPE = 57355
const tAS = 57356
const tHIDDEN = 57357
const tIDENT = 57358
const tSTRLIT = 57359
const tINTLIT = 57360
const tRATLIT = 57361

var yyToknames = []string{
	" .",
	" {",
	" }",
	" $",
	" !",
	" (",
	" )",
	" =",
	" <",
	" >",
	" *",
	" /",
	" :",
	" ?",
	" &",
	" |",
	" -",
	" +",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tDOTDOT",
	"tTRUE",
	"tFALSE",
	"tTYPE",
	"tAS",
	"tHIDDEN",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 88,
	11, 47,
	12, 47,
	13, 47,
	24, 47,
	25, 47,
	26, 47,
	27, 47,
	-2, 41,
}

const yyNprod = 61
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 120

var yyAct = []int{

	30, 67, 41, 31, 29, 60, 64, 84, 85, 68,
	37, 16, 17, 26, 37, 38, 39, 24, 93, 38,
	39, 88, 86, 81, 27, 28, 91, 22, 47, 32,
	33, 35, 34, 62, 33, 35, 34, 90, 65, 61,
	63, 23, 12, 49, 69, 57, 87, 25, 59, 87,
	87, 73, 74, 75, 76, 77, 78, 79, 37, 69,
	80, 70, 71, 38, 39, 7, 48, 47, 83, 12,
	46, 45, 44, 20, 72, 8, 10, 62, 33, 35,
	34, 15, 66, 69, 89, 19, 48, 47, 92, 9,
	14, 13, 11, 4, 82, 6, 5, 58, 43, 11,
	42, 2, 21, 50, 53, 55, 18, 1, 40, 36,
	3, 0, 0, 0, 0, 0, 54, 56, 52, 51,
}
var yyPact = []int{

	61, -1000, 23, -1000, -1000, -1000, 76, 75, 66, -1000,
	-1000, -23, 68, 13, -1000, -1000, -1000, -1000, -1000, -5,
	61, 89, 57, 56, 55, -1000, 44, -1000, -1000, -5,
	92, -5, 88, -1000, -1000, -1000, 33, -30, 43, 43,
	0, -1000, 50, -1, -1000, -1000, -1000, -5, -5, 64,
	43, 43, 43, 43, 43, 43, 43, -1000, 43, -11,
	-1000, -1000, 85, -1000, -1000, 61, -27, 12, -1000, -1000,
	-1000, 5, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11, -1000, 43, -1000, 4, -7, -1000, 43, -1000, 8,
	-1000, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 100, 110, 93, 13, 0, 1, 109, 2, 108,
	107,
}
var yyR1 = []int{

	0, 10, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 7, 7, 9, 9, 8, 8, 8, 8,
	8,
}
var yyR2 = []int{

	0, 1, 1, 3, 1, 4, 5, 6, 3, 5,
	1, 3, 3, 3, 1, 1, 1, 3, 4, 4,
	4, 2, 1, 2, 2, 1, 2, 2, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 4, 1, 1, 1, 1, 2, 4, 2, 2,
	1, 3, 1, 3, 1, 3, 1, 3, 3, 4,
	4,
}
var yyChk = []int{

	-1000, -10, -1, -2, -3, 35, 34, 4, 14, 28,
	15, 31, 19, 15, 15, 15, 34, 35, -3, 17,
	5, 34, 14, 28, 4, 34, -4, 29, 30, 9,
	-5, 8, 34, 35, 37, 36, -7, 15, 20, 21,
	-9, -8, -1, 9, 15, 15, 15, 23, 22, -4,
	11, 27, 26, 12, 24, 13, 25, -4, 9, 15,
	35, -5, 34, -5, 6, 38, 32, -6, 10, -5,
	-4, -4, 10, -5, -5, -5, -5, -5, -5, -5,
	-6, 34, 9, -8, 34, 35, 10, 38, 10, -6,
	33, 33, -5, 10,
}
var yyDef = []int{

	0, -2, 1, 2, 4, 10, 14, 15, 16, 22,
	25, 0, 0, 21, 23, 24, 26, 27, 3, 0,
	0, 8, 11, 12, 13, 17, 5, 28, 29, 0,
	0, 0, 52, 42, 43, 44, 45, 0, 0, 0,
	0, 54, 56, 0, 20, 19, 18, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	46, 48, 52, 49, 6, 0, 0, 0, 9, 50,
	38, 39, 30, 31, 32, 33, 34, 35, 36, 37,
	0, 53, 0, 55, 57, 58, 7, 0, -2, 0,
	59, 60, 51, 47,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 8, 3, 3, 7, 3, 18, 3,
	9, 10, 14, 21, 38, 20, 4, 15, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 16, 3,
	12, 11, 13, 17, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 19, 6,
}
var yyTok2 = []int{

	2, 3, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line grammar.y:165
		{
			lexASTResult(yylex, yyS[yypt-0].pipeline)
		}
	case 2:
		//line grammar.y:169
		{
			yyVAL.pipeline = &PipelineName{yyS[yypt-0].wildcardname, yyS[yypt-0].wildcardname.Pos}
		}
	case 3:
		//line grammar.y:171
		{
			yyVAL.pipeline = &PipelineType{yyS[yypt-2].pipeline, yyS[yypt-0].strpos.str, yyS[yypt-1].pos}
		}
	case 4:
		//line grammar.y:173
		{
			lexAbort(yylex, "'type' cannot start a pipeline")
		}
	case 5:
		//line grammar.y:177
		{
			yyVAL.pipeline = &PipelineFilter{yyS[yypt-3].pipeline, yyS[yypt-0].pred, yyS[yypt-2].pos}
		}
	case 6:
		//line grammar.y:179
		{
			yyVAL.pipeline = &PipelineSelection{yyS[yypt-4].pipeline, yyS[yypt-1].aliaslist, yyS[yypt-3].pos}
		}
	case 7:
		//line grammar.y:181
		{
			yyVAL.pipeline = &PipelineFunc{yyS[yypt-5].pipeline, yyS[yypt-3].strpos.str, yyS[yypt-1].exprlist, yyS[yypt-4].pos}
		}
	case 8:
		//line grammar.y:183
		{
			yyVAL.pipeline = &PipelineFunc{yyS[yypt-2].pipeline, yyS[yypt-0].strpos.str, nil, yyS[yypt-1].pos}
		}
	case 9:
		//line grammar.y:185
		{
			yyVAL.pipeline = &PipelineFunc{yyS[yypt-4].pipeline, yyS[yypt-2].strpos.str, nil, yyS[yypt-3].pos}
		}
	case 10:
		//line grammar.y:190
		{
			yyVAL.wildcardname = newWildcardName(yyS[yypt-0].strpos, yylex)
		}
	case 11:
		//line grammar.y:192
		{
			yyVAL.wildcardname = &WildcardName{yyS[yypt-2].strpos.str, Star, yyS[yypt-2].strpos.pos}
		}
	case 12:
		//line grammar.y:194
		{
			yyVAL.wildcardname = &WildcardName{"", Self, yyS[yypt-2].strpos.pos}
		}
	case 13:
		//line grammar.y:196
		{
			yyVAL.wildcardname = &WildcardName{yyS[yypt-2].strpos.str, Self, yyS[yypt-2].strpos.pos}
		}
	case 14:
		//line grammar.y:198
		{
			yyVAL.wildcardname = &WildcardName{yyS[yypt-0].strpos.str, Self, yyS[yypt-0].strpos.pos}
		}
	case 15:
		//line grammar.y:200
		{
			yyVAL.wildcardname = &WildcardName{"", Self, yyS[yypt-0].pos}
		}
	case 16:
		//line grammar.y:202
		{
			yyVAL.wildcardname = &WildcardName{"", Star, yyS[yypt-0].pos}
		}
	case 17:
		//line grammar.y:204
		{
			lexAbort(yylex, "Found '/'.  Multi-component names must be passed as string literals")
			yyVAL.wildcardname = &WildcardName{} // Avoid nil pointer dereference in pipeline.
		}
	case 18:
		//line grammar.y:209
		{
			lexAbort(yylex, "Found '/'.  Multi-component names must be passed as string literals")
			yyVAL.wildcardname = &WildcardName{} // Avoid nil pointer dereference in pipeline.
		}
	case 19:
		//line grammar.y:214
		{
			lexAbort(yylex, "Found '/'.  Multi-component names must be passed as string literals")
			yyVAL.wildcardname = &WildcardName{} // Avoid nil pointer dereference in pipeline.
		}
	case 20:
		//line grammar.y:219
		{
			lexAbort(yylex, "'*' is supported only as the last component of a name")
			yyVAL.wildcardname = &WildcardName{} // Avoid nil pointer dereference in pipeline.
		}
	case 21:
		//line grammar.y:224
		{
			lexAbort(yylex, "Found spurious trailing '/'")
			yyVAL.wildcardname = &WildcardName{} // Avoid nil pointer dereference in pipeline.
		}
	case 22:
		//line grammar.y:229
		{
			lexAbort(yylex, "Not possible to use '..' to traverse above the root of the query")
			yyVAL.wildcardname = &WildcardName{} // Avoid nil pointer dereference in pipeline.
		}
	case 23:
		//line grammar.y:234
		{
			lexAbort(yylex, "Found '/'.  Multi-component names must be passed as string literals")
			yyVAL.wildcardname = &WildcardName{} // Avoid nil pointer dereference in pipeline.
		}
	case 24:
		//line grammar.y:239
		{
			lexAbort(yylex, "'...' is supported only as the last component of a name")
			yyVAL.wildcardname = &WildcardName{} // Avoid nil pointer dereference in pipeline.
		}
	case 25:
		//line grammar.y:244
		{
			lexAbort(yylex, "Names must be relative.  Found leading '/'")
			yyVAL.wildcardname = &WildcardName{} // Avoid nil pointer dereference in pipeline.
		}
	case 26:
		//line grammar.y:251
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 27:
		//line grammar.y:253
		{
			yyVAL.strpos = yyS[yypt-0].strpos
		}
	case 28:
		//line grammar.y:257
		{
			yyVAL.pred = &PredicateBool{true, yyS[yypt-0].pos}
		}
	case 29:
		//line grammar.y:259
		{
			yyVAL.pred = &PredicateBool{false, yyS[yypt-0].pos}
		}
	case 30:
		//line grammar.y:261
		{
			yyVAL.pred = yyS[yypt-1].pred
		}
	case 31:
		//line grammar.y:263
		{
			yyVAL.pred = &PredicateCompare{yyS[yypt-2].expr, yyS[yypt-0].expr, CompEQ, yyS[yypt-1].pos}
		}
	case 32:
		//line grammar.y:265
		{
			yyVAL.pred = &PredicateCompare{yyS[yypt-2].expr, yyS[yypt-0].expr, CompEQ, yyS[yypt-1].pos}
		}
	case 33:
		//line grammar.y:267
		{
			yyVAL.pred = &PredicateCompare{yyS[yypt-2].expr, yyS[yypt-0].expr, CompNE, yyS[yypt-1].pos}
		}
	case 34:
		//line grammar.y:269
		{
			yyVAL.pred = &PredicateCompare{yyS[yypt-2].expr, yyS[yypt-0].expr, CompLT, yyS[yypt-1].pos}
		}
	case 35:
		//line grammar.y:271
		{
			yyVAL.pred = &PredicateCompare{yyS[yypt-2].expr, yyS[yypt-0].expr, CompLE, yyS[yypt-1].pos}
		}
	case 36:
		//line grammar.y:273
		{
			yyVAL.pred = &PredicateCompare{yyS[yypt-2].expr, yyS[yypt-0].expr, CompGT, yyS[yypt-1].pos}
		}
	case 37:
		//line grammar.y:275
		{
			yyVAL.pred = &PredicateCompare{yyS[yypt-2].expr, yyS[yypt-0].expr, CompGE, yyS[yypt-1].pos}
		}
	case 38:
		//line grammar.y:277
		{
			yyVAL.pred = &PredicateAnd{yyS[yypt-2].pred, yyS[yypt-0].pred, yyS[yypt-1].pos}
		}
	case 39:
		//line grammar.y:279
		{
			yyVAL.pred = &PredicateOr{yyS[yypt-2].pred, yyS[yypt-0].pred, yyS[yypt-1].pos}
		}
	case 40:
		//line grammar.y:281
		{
			yyVAL.pred = &PredicateNot{yyS[yypt-0].pred, yyS[yypt-1].pos}
		}
	case 41:
		//line grammar.y:283
		{
			yyVAL.pred = &PredicateFunc{yyS[yypt-3].strpos.str, yyS[yypt-1].exprlist, yyS[yypt-3].strpos.pos}
		}
	case 42:
		//line grammar.y:287
		{
			yyVAL.expr = &ExprString{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 43:
		//line grammar.y:289
		{
			yyVAL.expr = &ExprRat{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 44:
		//line grammar.y:291
		{
			yyVAL.expr = &ExprInt{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 45:
		//line grammar.y:293
		{
			yyVAL.expr = &ExprName{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 46:
		//line grammar.y:295
		{
			yyVAL.expr = &ExprName{yyS[yypt-0].strpos.str, yyS[yypt-1].pos}
		}
	case 47:
		//line grammar.y:297
		{
			yyVAL.expr = &ExprFunc{yyS[yypt-3].strpos.str, yyS[yypt-1].exprlist, yyS[yypt-3].strpos.pos}
		}
	case 48:
		//line grammar.y:299
		{
			yyVAL.expr = &ExprUnary{yyS[yypt-0].expr, OpNeg, yyS[yypt-1].pos}
		}
	case 49:
		//line grammar.y:301
		{
			yyVAL.expr = &ExprUnary{yyS[yypt-0].expr, OpPos, yyS[yypt-1].pos}
		}
	case 50:
		//line grammar.y:305
		{
			yyVAL.exprlist = []Expr{yyS[yypt-0].expr}
		}
	case 51:
		//line grammar.y:307
		{
			yyVAL.exprlist = append(yyS[yypt-2].exprlist, yyS[yypt-0].expr)
		}
	case 52:
		yyVAL.strpos = yyS[yypt-0].strpos
	case 53:
		//line grammar.y:314
		{
			yyVAL.strpos = strPos{path.Join(yyS[yypt-2].strpos.str, yyS[yypt-0].strpos.str), yyS[yypt-2].strpos.pos}
		}
	case 54:
		//line grammar.y:318
		{
			yyVAL.aliaslist = []Alias{yyS[yypt-0].alias}
		}
	case 55:
		//line grammar.y:320
		{
			yyVAL.aliaslist = append(yyS[yypt-2].aliaslist, yyS[yypt-0].alias)
		}
	case 56:
		//line grammar.y:324
		{
			yyVAL.alias = Alias{yyS[yypt-0].pipeline, "", false}
		}
	case 57:
		//line grammar.y:326
		{
			yyVAL.alias = Alias{yyS[yypt-2].pipeline, yyS[yypt-0].strpos.str, false}
		}
	case 58:
		//line grammar.y:328
		{
			yyVAL.alias = Alias{yyS[yypt-2].pipeline, yyS[yypt-0].strpos.str, false}
		}
	case 59:
		//line grammar.y:330
		{
			yyVAL.alias = Alias{yyS[yypt-3].pipeline, yyS[yypt-1].strpos.str, true}
		}
	case 60:
		//line grammar.y:332
		{
			yyVAL.alias = Alias{yyS[yypt-3].pipeline, yyS[yypt-1].strpos.str, true}
		}
	}
	goto yystack /* stack new state and value */
}
