// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: types.vdl

package nosql

import (
	"fmt"
	"reflect"
	"time"
	"v.io/v23/services/syncbase/nosql"
	"v.io/v23/vdl"
	time_2 "v.io/v23/vdlroot/time"
)

// Conflict contains information to fully specify a conflict. Since syncbase
// supports batches there can be one or more rows within the batch that has a
// conflict. Each of these rows will be sent together as part of a single
// conflict. Each row contains an Id of the batch to which it belongs,
// enabling the client to group together rows that are part of a batch. Note
// that a single row can be part of more than one batch.
//
// WriteSet contains rows that were written.
// ReadSet contains rows that were read within a batch corresponding to a row
// within the write set.
// ScanSet contains scans performed within a batch corresponding to a row
// within the write set.
// Batches is a map of unique ids to BatchInfo objects. The id is unique only in
// the context of a given conflict and is otherwise meaningless.
type Conflict struct {
	ReadSet  *ConflictRowSet
	WriteSet *ConflictRowSet
	ScanSet  *ConflictScanSet
	Batches  map[uint64]nosql.BatchInfo
}

func (Conflict) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql.Conflict"`
}) {
}

func (m *Conflict) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_types()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("ReadSet")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if m.ReadSet == nil {
			if err := fieldTarget3.FromNil(__VDLTypetypes1); err != nil {
				return err
			}
		} else {
			if err := m.ReadSet.FillVDLTarget(fieldTarget3, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("WriteSet")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if m.WriteSet == nil {
			if err := fieldTarget5.FromNil(__VDLTypetypes1); err != nil {
				return err
			}
		} else {
			if err := m.WriteSet.FillVDLTarget(fieldTarget5, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("ScanSet")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if m.ScanSet == nil {
			if err := fieldTarget7.FromNil(__VDLTypetypes2); err != nil {
				return err
			}
		} else {
			if err := m.ScanSet.FillVDLTarget(fieldTarget7, __VDLType_types_v_io_v23_syncbase_nosql_ConflictScanSet); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Batches")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget10, err := fieldTarget9.StartMap(__VDLTypetypes3, len(m.Batches))
		if err != nil {
			return err
		}
		for key12, value14 := range m.Batches {
			keyTarget11, err := mapTarget10.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget11.FromUint(uint64(key12), vdl.Uint64Type); err != nil {
				return err
			}
			valueTarget13, err := mapTarget10.FinishKeyStartField(keyTarget11)
			if err != nil {
				return err
			}

			if err := value14.FillVDLTarget(valueTarget13, __VDLType_types_v_io_v23_services_syncbase_nosql_BatchInfo); err != nil {
				return err
			}
			if err := mapTarget10.FinishField(keyTarget11, valueTarget13); err != nil {
				return err
			}
		}
		if err := fieldTarget9.FinishMap(mapTarget10); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Conflict) MakeVDLTarget() vdl.Target {
	return &ConflictTarget{Value: m}
}

type ConflictTarget struct {
	Value *Conflict
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ConflictTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_v23_syncbase_nosql_Conflict) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_v23_syncbase_nosql_Conflict)
	}
	return t, nil
}
func (t *ConflictTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "ReadSet":
		val, err := &types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77536574207374727563747b42794b6579206d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347d3b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f777dTarget{Value: &t.Value.ReadSet}, error(nil)
		return nil, val, err
	case "WriteSet":
		val, err := &types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77536574207374727563747b42794b6579206d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347d3b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f777dTarget{Value: &t.Value.WriteSet}, error(nil)
		return nil, val, err
	case "ScanSet":
		val, err := &types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c6963745363616e536574207374727563747b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677d7dTarget{Value: &t.Value.ScanSet}, error(nil)
		return nil, val, err
	case "Batches":
		val, err := &types6d61705b75696e7436345d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368496e666f207374727563747b49642075696e7436343b48696e7420737472696e673b536f7572636520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368536f7572636520656e756d7b4c6f63616c3b52656d6f74657d7dTarget{Value: &t.Value.Batches}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_v23_syncbase_nosql_Conflict)
	}
}
func (t *ConflictTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ConflictTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77536574207374727563747b42794b6579206d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347d3b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f777dTarget struct {
	Value **ConflictRowSet
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77536574207374727563747b42794b6579206d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347d3b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f777dTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if *t.Value == nil {
		*t.Value = &ConflictRowSet{}
	}
	target, err := &ConflictRowSetTarget{Value: *t.Value}, error(nil)
	if err != nil {
		return nil, err
	}
	return target.StartFields(tt)
}
func (t *types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77536574207374727563747b42794b6579206d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347d3b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f777dTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}
func (t *types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77536574207374727563747b42794b6579206d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347d3b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f777dTarget) FromNil(tt *vdl.Type) error {
	*t.Value = nil
	return nil
}

type ConflictRowSetTarget struct {
	Value *ConflictRowSet
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ConflictRowSetTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet)
	}
	return t, nil
}
func (t *ConflictRowSetTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "ByKey":
		val, err := &types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget{Value: &t.Value.ByKey}, error(nil)
		return nil, val, err
	case "ByBatch":
		val, err := &types6d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget{Value: &t.Value.ByBatch}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet)
	}
}
func (t *ConflictRowSetTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ConflictRowSetTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget struct {
	Value    *map[string]ConflictRow
	currKey  string
	currElem ConflictRow
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes5) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes5)
	}
	*t.Value = make(map[string]ConflictRow)
	return t, nil
}
func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = ""
	return &vdl.StringTarget{Value: &t.currKey}, error(nil)
}
func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = reflect.Zero(reflect.TypeOf(t.currElem)).Interface().(ConflictRow)
	return &ConflictRowTarget{Value: &t.currElem}, error(nil)
}
func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}
	return nil
}

type ConflictRowTarget struct {
	Value *ConflictRow
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ConflictRowTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow)
	}
	return t, nil
}
func (t *ConflictRowTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Key":
		val, err := &vdl.StringTarget{Value: &t.Value.Key}, error(nil)
		return nil, val, err
	case "LocalValue":
		val, err := &ValueTarget{Value: &t.Value.LocalValue}, error(nil)
		return nil, val, err
	case "RemoteValue":
		val, err := &ValueTarget{Value: &t.Value.RemoteValue}, error(nil)
		return nil, val, err
	case "AncestorValue":
		val, err := &ValueTarget{Value: &t.Value.AncestorValue}, error(nil)
		return nil, val, err
	case "BatchIds":
		val, err := &types5b5d75696e743634Target{Value: &t.Value.BatchIds}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow)
	}
}
func (t *ConflictRowTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ConflictRowTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type ValueTarget struct {
	Value *Value
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ValueTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_v23_syncbase_nosql_Value) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_v23_syncbase_nosql_Value)
	}
	return t, nil
}
func (t *ValueTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "State":
		val, err := &nosql.ValueStateTarget{Value: &t.Value.State}, error(nil)
		return nil, val, err
	case "Val":
		val, err := &vdl.BytesTarget{Value: &t.Value.Val}, error(nil)
		return nil, val, err
	case "WriteTs":
		val, err := vdl.ReflectTarget(reflect.ValueOf(&t.Value.WriteTs))
		return nil, val, err
	case "Selection":
		val, err := &nosql.ValueSelectionTarget{Value: &t.Value.Selection}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_v23_syncbase_nosql_Value)
	}
}
func (t *ValueTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ValueTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type types5b5d75696e743634Target struct {
	Value *[]uint64
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *types5b5d75696e743634Target) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes4) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes4)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]uint64, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *types5b5d75696e743634Target) StartElem(index int) (elem vdl.Target, _ error) {
	return &vdl.Uint64Target{Value: &(*t.Value)[index]}, error(nil)
}
func (t *types5b5d75696e743634Target) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *types5b5d75696e743634Target) FinishList(elem vdl.ListTarget) error {
	return nil
}

type types6d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget struct {
	Value    *map[uint64][]ConflictRow
	currKey  uint64
	currElem []ConflictRow
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes7) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes7)
	}
	*t.Value = make(map[uint64][]ConflictRow)
	return t, nil
}
func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = uint64(0)
	return &vdl.Uint64Target{Value: &t.currKey}, error(nil)
}
func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = reflect.Zero(reflect.TypeOf(t.currElem)).Interface().([]ConflictRow)
	return &types5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget{Value: &t.currElem}, error(nil)
}
func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}
	return nil
}

type types5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget struct {
	Value *[]ConflictRow
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *types5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes6) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes6)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]ConflictRow, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *types5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) StartElem(index int) (elem vdl.Target, _ error) {
	return &ConflictRowTarget{Value: &(*t.Value)[index]}, error(nil)
}
func (t *types5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *types5b5d762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c696374526f77207374727563747b4b657920737472696e673b4c6f63616c56616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d3b52656d6f746556616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b416e636573746f7256616c756520762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c75653b4261746368496473205b5d75696e7436347dTarget) FinishList(elem vdl.ListTarget) error {
	return nil
}

type types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c6963745363616e536574207374727563747b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677d7dTarget struct {
	Value **ConflictScanSet
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c6963745363616e536574207374727563747b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677d7dTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if *t.Value == nil {
		*t.Value = &ConflictScanSet{}
	}
	target, err := &ConflictScanSetTarget{Value: *t.Value}, error(nil)
	if err != nil {
		return nil, err
	}
	return target.StartFields(tt)
}
func (t *types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c6963745363616e536574207374727563747b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677d7dTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}
func (t *types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e436f6e666c6963745363616e536574207374727563747b42794261746368206d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677d7dTarget) FromNil(tt *vdl.Type) error {
	*t.Value = nil
	return nil
}

type ConflictScanSetTarget struct {
	Value *ConflictScanSet
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ConflictScanSetTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_v23_syncbase_nosql_ConflictScanSet) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_v23_syncbase_nosql_ConflictScanSet)
	}
	return t, nil
}
func (t *ConflictScanSetTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "ByBatch":
		val, err := &types6d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget{Value: &t.Value.ByBatch}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_v23_syncbase_nosql_ConflictScanSet)
	}
}
func (t *ConflictScanSetTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ConflictScanSetTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type types6d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget struct {
	Value    *map[uint64][]nosql.ScanOp
	currKey  uint64
	currElem []nosql.ScanOp
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes9) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes9)
	}
	*t.Value = make(map[uint64][]nosql.ScanOp)
	return t, nil
}
func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = uint64(0)
	return &vdl.Uint64Target{Value: &t.currKey}, error(nil)
}
func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = []nosql.ScanOp(nil)
	return &types5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget{Value: &t.currElem}, error(nil)
}
func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *types6d61705b75696e7436345d5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}
	return nil
}

type types5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget struct {
	Value *[]nosql.ScanOp
	vdl.TargetBase
	vdl.ListTargetBase
}

func (t *types5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget) StartList(tt *vdl.Type, len int) (vdl.ListTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes8) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes8)
	}
	if cap(*t.Value) < len {
		*t.Value = make([]nosql.ScanOp, len)
	} else {
		*t.Value = (*t.Value)[:len]
	}
	return t, nil
}
func (t *types5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget) StartElem(index int) (elem vdl.Target, _ error) {
	return &nosql.ScanOpTarget{Value: &(*t.Value)[index]}, error(nil)
}
func (t *types5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget) FinishElem(elem vdl.Target) error {
	return nil
}
func (t *types5b5d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e5363616e4f70207374727563747b537461727420737472696e673b4c696d697420737472696e677dTarget) FinishList(elem vdl.ListTarget) error {
	return nil
}

type types6d61705b75696e7436345d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368496e666f207374727563747b49642075696e7436343b48696e7420737472696e673b536f7572636520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368536f7572636520656e756d7b4c6f63616c3b52656d6f74657d7dTarget struct {
	Value    *map[uint64]nosql.BatchInfo
	currKey  uint64
	currElem nosql.BatchInfo
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *types6d61705b75696e7436345d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368496e666f207374727563747b49642075696e7436343b48696e7420737472696e673b536f7572636520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368536f7572636520656e756d7b4c6f63616c3b52656d6f74657d7dTarget) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes3) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes3)
	}
	*t.Value = make(map[uint64]nosql.BatchInfo)
	return t, nil
}
func (t *types6d61705b75696e7436345d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368496e666f207374727563747b49642075696e7436343b48696e7420737472696e673b536f7572636520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368536f7572636520656e756d7b4c6f63616c3b52656d6f74657d7dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = uint64(0)
	return &vdl.Uint64Target{Value: &t.currKey}, error(nil)
}
func (t *types6d61705b75696e7436345d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368496e666f207374727563747b49642075696e7436343b48696e7420737472696e673b536f7572636520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368536f7572636520656e756d7b4c6f63616c3b52656d6f74657d7dTarget) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = nosql.BatchInfo{}
	return &nosql.BatchInfoTarget{Value: &t.currElem}, error(nil)
}
func (t *types6d61705b75696e7436345d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368496e666f207374727563747b49642075696e7436343b48696e7420737472696e673b536f7572636520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368536f7572636520656e756d7b4c6f63616c3b52656d6f74657d7dTarget) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *types6d61705b75696e7436345d762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368496e666f207374727563747b49642075696e7436343b48696e7420737472696e673b536f7572636520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e4261746368536f7572636520656e756d7b4c6f63616c3b52656d6f74657d7dTarget) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}
	return nil
}

// ConflictRowSet contains a set of rows under conflict. It provides two different
// ways to access the same set.
// ByKey is a map of ConflictRows keyed by the row key.
// ByBatch is a map of []ConflictRows keyed by batch id. This map lets the client
// access all ConflictRows within this set that contain a given hint.
type ConflictRowSet struct {
	ByKey   map[string]ConflictRow
	ByBatch map[uint64][]ConflictRow
}

func (ConflictRowSet) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql.ConflictRowSet"`
}) {
}

func (m *ConflictRowSet) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_types()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("ByKey")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget4, err := fieldTarget3.StartMap(__VDLTypetypes5, len(m.ByKey))
		if err != nil {
			return err
		}
		for key6, value8 := range m.ByKey {
			keyTarget5, err := mapTarget4.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget5.FromString(string(key6), vdl.StringType); err != nil {
				return err
			}
			valueTarget7, err := mapTarget4.FinishKeyStartField(keyTarget5)
			if err != nil {
				return err
			}

			if err := value8.FillVDLTarget(valueTarget7, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow); err != nil {
				return err
			}
			if err := mapTarget4.FinishField(keyTarget5, valueTarget7); err != nil {
				return err
			}
		}
		if err := fieldTarget3.FinishMap(mapTarget4); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("ByBatch")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget11, err := fieldTarget10.StartMap(__VDLTypetypes7, len(m.ByBatch))
		if err != nil {
			return err
		}
		for key13, value15 := range m.ByBatch {
			keyTarget12, err := mapTarget11.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget12.FromUint(uint64(key13), vdl.Uint64Type); err != nil {
				return err
			}
			valueTarget14, err := mapTarget11.FinishKeyStartField(keyTarget12)
			if err != nil {
				return err
			}

			listTarget16, err := valueTarget14.StartList(__VDLTypetypes6, len(value15))
			if err != nil {
				return err
			}
			for i, elem18 := range value15 {
				elemTarget17, err := listTarget16.StartElem(i)
				if err != nil {
					return err
				}

				if err := elem18.FillVDLTarget(elemTarget17, __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow); err != nil {
					return err
				}
				if err := listTarget16.FinishElem(elemTarget17); err != nil {
					return err
				}
			}
			if err := valueTarget14.FinishList(listTarget16); err != nil {
				return err
			}
			if err := mapTarget11.FinishField(keyTarget12, valueTarget14); err != nil {
				return err
			}
		}
		if err := fieldTarget10.FinishMap(mapTarget11); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ConflictRowSet) MakeVDLTarget() vdl.Target {
	return &ConflictRowSetTarget{Value: m}
}

// ConflictScanSet contains a set of scans under conflict.
// ByBatch is a map of array of ScanOps keyed by batch id.
type ConflictScanSet struct {
	ByBatch map[uint64][]nosql.ScanOp
}

func (ConflictScanSet) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql.ConflictScanSet"`
}) {
}

func (m *ConflictScanSet) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if __VDLType_types_v_io_v23_syncbase_nosql_ConflictScanSet == nil || __VDLTypetypes2 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("ByBatch")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget4, err := fieldTarget3.StartMap(__VDLTypetypes9, len(m.ByBatch))
		if err != nil {
			return err
		}
		for key6, value8 := range m.ByBatch {
			keyTarget5, err := mapTarget4.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget5.FromUint(uint64(key6), vdl.Uint64Type); err != nil {
				return err
			}
			valueTarget7, err := mapTarget4.FinishKeyStartField(keyTarget5)
			if err != nil {
				return err
			}

			listTarget9, err := valueTarget7.StartList(__VDLTypetypes8, len(value8))
			if err != nil {
				return err
			}
			for i, elem11 := range value8 {
				elemTarget10, err := listTarget9.StartElem(i)
				if err != nil {
					return err
				}

				if err := elem11.FillVDLTarget(elemTarget10, __VDLType_types_v_io_v23_services_syncbase_nosql_ScanOp); err != nil {
					return err
				}
				if err := listTarget9.FinishElem(elemTarget10); err != nil {
					return err
				}
			}
			if err := valueTarget7.FinishList(listTarget9); err != nil {
				return err
			}
			if err := mapTarget4.FinishField(keyTarget5, valueTarget7); err != nil {
				return err
			}
		}
		if err := fieldTarget3.FinishMap(mapTarget4); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ConflictScanSet) MakeVDLTarget() vdl.Target {
	return &ConflictScanSetTarget{Value: m}
}

// ConflictRow represents a row under conflict.
// Key is the key for the row.
// LocalValue is the value present in the local db.
// RemoteValue is the value received via sync.
// AncestorValue is the value for the key which is the lowest common
// ancestor of the two values represented by LocalValue and RemoteValue.
// AncestorValue's state is NoExists if the ConflictRow is a part of the read set.
// BatchIds is a list of ids of all the batches that this row belongs to.
type ConflictRow struct {
	Key           string
	LocalValue    Value
	RemoteValue   Value
	AncestorValue Value
	BatchIds      []uint64
}

func (ConflictRow) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql.ConflictRow"`
}) {
}

func (m *ConflictRow) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_types()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Key")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Key), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("LocalValue")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.LocalValue.FillVDLTarget(fieldTarget5, __VDLType_types_v_io_v23_syncbase_nosql_Value); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("RemoteValue")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.RemoteValue.FillVDLTarget(fieldTarget7, __VDLType_types_v_io_v23_syncbase_nosql_Value); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("AncestorValue")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.AncestorValue.FillVDLTarget(fieldTarget9, __VDLType_types_v_io_v23_syncbase_nosql_Value); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	keyTarget10, fieldTarget11, err := fieldsTarget1.StartField("BatchIds")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget12, err := fieldTarget11.StartList(__VDLTypetypes4, len(m.BatchIds))
		if err != nil {
			return err
		}
		for i, elem14 := range m.BatchIds {
			elemTarget13, err := listTarget12.StartElem(i)
			if err != nil {
				return err
			}
			if err := elemTarget13.FromUint(uint64(elem14), vdl.Uint64Type); err != nil {
				return err
			}
			if err := listTarget12.FinishElem(elemTarget13); err != nil {
				return err
			}
		}
		if err := fieldTarget11.FinishList(listTarget12); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget10, fieldTarget11); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ConflictRow) MakeVDLTarget() vdl.Target {
	return &ConflictRowTarget{Value: m}
}

// Resolution contains the application’s reply to a conflict. It must contain a
// resolved value for each conflict row within the WriteSet of the given
// conflict.
// ResultSet is a map of row key to ResolvedRow.
type Resolution struct {
	ResultSet map[string]ResolvedRow
}

func (Resolution) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql.Resolution"`
}) {
}

func (m *Resolution) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_types()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("ResultSet")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget4, err := fieldTarget3.StartMap(__VDLTypetypes12, len(m.ResultSet))
		if err != nil {
			return err
		}
		for key6, value8 := range m.ResultSet {
			keyTarget5, err := mapTarget4.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget5.FromString(string(key6), vdl.StringType); err != nil {
				return err
			}
			valueTarget7, err := mapTarget4.FinishKeyStartField(keyTarget5)
			if err != nil {
				return err
			}

			if err := value8.FillVDLTarget(valueTarget7, __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow); err != nil {
				return err
			}
			if err := mapTarget4.FinishField(keyTarget5, valueTarget7); err != nil {
				return err
			}
		}
		if err := fieldTarget3.FinishMap(mapTarget4); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Resolution) MakeVDLTarget() vdl.Target {
	return &ResolutionTarget{Value: m}
}

type ResolutionTarget struct {
	Value *Resolution
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ResolutionTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_v23_syncbase_nosql_Resolution) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_v23_syncbase_nosql_Resolution)
	}
	return t, nil
}
func (t *ResolutionTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "ResultSet":
		val, err := &types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e5265736f6c766564526f77207374727563747b4b657920737472696e673b526573756c74203f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d7dTarget{Value: &t.Value.ResultSet}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_v23_syncbase_nosql_Resolution)
	}
}
func (t *ResolutionTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ResolutionTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e5265736f6c766564526f77207374727563747b4b657920737472696e673b526573756c74203f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d7dTarget struct {
	Value    *map[string]ResolvedRow
	currKey  string
	currElem ResolvedRow
	vdl.TargetBase
	vdl.MapTargetBase
}

func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e5265736f6c766564526f77207374727563747b4b657920737472696e673b526573756c74203f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d7dTarget) StartMap(tt *vdl.Type, len int) (vdl.MapTarget, error) {
	if !vdl.Compatible(tt, __VDLTypetypes12) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLTypetypes12)
	}
	*t.Value = make(map[string]ResolvedRow)
	return t, nil
}
func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e5265736f6c766564526f77207374727563747b4b657920737472696e673b526573756c74203f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d7dTarget) StartKey() (key vdl.Target, _ error) {
	t.currKey = ""
	return &vdl.StringTarget{Value: &t.currKey}, error(nil)
}
func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e5265736f6c766564526f77207374727563747b4b657920737472696e673b526573756c74203f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d7dTarget) FinishKeyStartField(key vdl.Target) (field vdl.Target, _ error) {
	t.currElem = reflect.Zero(reflect.TypeOf(t.currElem)).Interface().(ResolvedRow)
	return &ResolvedRowTarget{Value: &t.currElem}, error(nil)
}
func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e5265736f6c766564526f77207374727563747b4b657920737472696e673b526573756c74203f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d7dTarget) FinishField(key, field vdl.Target) error {
	(*t.Value)[t.currKey] = t.currElem
	return nil
}
func (t *types6d61705b737472696e675d762e696f2f7632332f73796e63626173652f6e6f73716c2e5265736f6c766564526f77207374727563747b4b657920737472696e673b526573756c74203f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7d7dTarget) FinishMap(elem vdl.MapTarget) error {
	if len(*t.Value) == 0 {
		*t.Value = nil
	}
	return nil
}

type ResolvedRowTarget struct {
	Value *ResolvedRow
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *ResolvedRowTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if !vdl.Compatible(tt, __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow) {
		return nil, fmt.Errorf("type %v incompatible with %v", tt, __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow)
	}
	return t, nil
}
func (t *ResolvedRowTarget) StartField(name string) (key, field vdl.Target, _ error) {
	switch name {
	case "Key":
		val, err := &vdl.StringTarget{Value: &t.Value.Key}, error(nil)
		return nil, val, err
	case "Result":
		val, err := &types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7dTarget{Value: &t.Value.Result}, error(nil)
		return nil, val, err
	default:
		return nil, nil, fmt.Errorf("field %s not in struct %v", name, __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow)
	}
}
func (t *ResolvedRowTarget) FinishField(_, _ vdl.Target) error {
	return nil
}
func (t *ResolvedRowTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}

type types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7dTarget struct {
	Value **Value
	vdl.TargetBase
	vdl.FieldsTargetBase
}

func (t *types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7dTarget) StartFields(tt *vdl.Type) (vdl.FieldsTarget, error) {
	if *t.Value == nil {
		*t.Value = &Value{}
	}
	target, err := &ValueTarget{Value: *t.Value}, error(nil)
	if err != nil {
		return nil, err
	}
	return target.StartFields(tt)
}
func (t *types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7dTarget) FinishFields(_ vdl.FieldsTarget) error {
	return nil
}
func (t *types3f762e696f2f7632332f73796e63626173652f6e6f73716c2e56616c7565207374727563747b537461746520762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c7565537461746520656e756d7b4578697374733b4e6f4578697374733b44656c657465643b556e6b6e6f776e7d3b56616c205b5d627974653b577269746554732074696d652e54696d65207374727563747b5365636f6e647320696e7436343b4e616e6f7320696e7433327d3b53656c656374696f6e20762e696f2f7632332f73657276696365732f73796e63626173652f6e6f73716c2e56616c756553656c656374696f6e20656e756d7b4c6f63616c3b52656d6f74653b4f746865727d7dTarget) FromNil(tt *vdl.Type) error {
	*t.Value = nil
	return nil
}

// ResolvedRow represents a result of resolution of a row under conflict.
// Key is the key for the row.
// Result is the result of the conflict resolution. Delete is represented
// by nil.
type ResolvedRow struct {
	Key    string
	Result *Value
}

func (ResolvedRow) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql.ResolvedRow"`
}) {
}

func (m *ResolvedRow) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_types()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Key")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Key), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Result")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if m.Result == nil {
			if err := fieldTarget5.FromNil(__VDLTypetypes14); err != nil {
				return err
			}
		} else {
			if err := m.Result.FillVDLTarget(fieldTarget5, __VDLType_types_v_io_v23_syncbase_nosql_Value); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ResolvedRow) MakeVDLTarget() vdl.Target {
	return &ResolvedRowTarget{Value: m}
}

// Value contains a specific version of data for the row under conflict along
// with the write timestamp and hints associated with the version.
// State defines whether the value is empty or not. It can be empty for
// reasons like Deleted or Unknown.
// WriteTs is the write timestamp for this value.
type Value struct {
	State   nosql.ValueState
	Val     []byte
	WriteTs time.Time
	// TODO(jlodhia): Since field Selection cannot be package private in VDL,
	// review the ConflictResolution API to see if we should keep this field
	// or not.
	Selection nosql.ValueSelection
}

func (Value) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql.Value"`
}) {
}

func (m *Value) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	__VDLEnsureNativeBuilt_types()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("State")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.State.FillVDLTarget(fieldTarget3, __VDLType_types_v_io_v23_services_syncbase_nosql_ValueState); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Val")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := fieldTarget5.FromBytes([]byte(m.Val), __VDLTypetypes15); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	var wireValue6 time_2.Time
	if err := time_2.TimeFromNative(&wireValue6, m.WriteTs); err != nil {
		return err
	}

	keyTarget7, fieldTarget8, err := fieldsTarget1.StartField("WriteTs")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue6.FillVDLTarget(fieldTarget8, __VDLType_types_time_Time); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget7, fieldTarget8); err != nil {
			return err
		}
	}
	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("Selection")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Selection.FillVDLTarget(fieldTarget10, __VDLType_types_v_io_v23_services_syncbase_nosql_ValueSelection); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Value) MakeVDLTarget() vdl.Target {
	return &ValueTarget{Value: m}
}

func init() {
	vdl.Register((*Conflict)(nil))
	vdl.Register((*ConflictRowSet)(nil))
	vdl.Register((*ConflictScanSet)(nil))
	vdl.Register((*ConflictRow)(nil))
	vdl.Register((*Resolution)(nil))
	vdl.Register((*ResolvedRow)(nil))
	vdl.Register((*Value)(nil))
}

var __VDLTypetypes0 *vdl.Type

func __VDLTypetypes0_gen() *vdl.Type {
	__VDLTypetypes0Builder := vdl.TypeBuilder{}

	__VDLTypetypes01 := __VDLTypetypes0Builder.Optional()
	__VDLTypetypes02 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes03 := __VDLTypetypes0Builder.Named("v.io/v23/syncbase/nosql.Conflict").AssignBase(__VDLTypetypes02)
	__VDLTypetypes04 := __VDLTypetypes0Builder.Optional()
	__VDLTypetypes05 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes06 := __VDLTypetypes0Builder.Named("v.io/v23/syncbase/nosql.ConflictRowSet").AssignBase(__VDLTypetypes05)
	__VDLTypetypes07 := __VDLTypetypes0Builder.Map()
	__VDLTypetypes08 := vdl.StringType
	__VDLTypetypes07.AssignKey(__VDLTypetypes08)
	__VDLTypetypes09 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes010 := __VDLTypetypes0Builder.Named("v.io/v23/syncbase/nosql.ConflictRow").AssignBase(__VDLTypetypes09)
	__VDLTypetypes09.AppendField("Key", __VDLTypetypes08)
	__VDLTypetypes011 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes012 := __VDLTypetypes0Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes011)
	__VDLTypetypes013 := __VDLTypetypes0Builder.Enum()
	__VDLTypetypes014 := __VDLTypetypes0Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes013)
	__VDLTypetypes013.AppendLabel("Exists")
	__VDLTypetypes013.AppendLabel("NoExists")
	__VDLTypetypes013.AppendLabel("Deleted")
	__VDLTypetypes013.AppendLabel("Unknown")
	__VDLTypetypes011.AppendField("State", __VDLTypetypes014)
	__VDLTypetypes015 := __VDLTypetypes0Builder.List()
	__VDLTypetypes016 := vdl.ByteType
	__VDLTypetypes015.AssignElem(__VDLTypetypes016)
	__VDLTypetypes011.AppendField("Val", __VDLTypetypes015)
	__VDLTypetypes017 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes018 := __VDLTypetypes0Builder.Named("time.Time").AssignBase(__VDLTypetypes017)
	__VDLTypetypes019 := vdl.Int64Type
	__VDLTypetypes017.AppendField("Seconds", __VDLTypetypes019)
	__VDLTypetypes020 := vdl.Int32Type
	__VDLTypetypes017.AppendField("Nanos", __VDLTypetypes020)
	__VDLTypetypes011.AppendField("WriteTs", __VDLTypetypes018)
	__VDLTypetypes021 := __VDLTypetypes0Builder.Enum()
	__VDLTypetypes022 := __VDLTypetypes0Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes021)
	__VDLTypetypes021.AppendLabel("Local")
	__VDLTypetypes021.AppendLabel("Remote")
	__VDLTypetypes021.AppendLabel("Other")
	__VDLTypetypes011.AppendField("Selection", __VDLTypetypes022)
	__VDLTypetypes09.AppendField("LocalValue", __VDLTypetypes012)
	__VDLTypetypes09.AppendField("RemoteValue", __VDLTypetypes012)
	__VDLTypetypes09.AppendField("AncestorValue", __VDLTypetypes012)
	__VDLTypetypes023 := __VDLTypetypes0Builder.List()
	__VDLTypetypes024 := vdl.Uint64Type
	__VDLTypetypes023.AssignElem(__VDLTypetypes024)
	__VDLTypetypes09.AppendField("BatchIds", __VDLTypetypes023)
	__VDLTypetypes07.AssignElem(__VDLTypetypes010)
	__VDLTypetypes05.AppendField("ByKey", __VDLTypetypes07)
	__VDLTypetypes025 := __VDLTypetypes0Builder.Map()
	__VDLTypetypes025.AssignKey(__VDLTypetypes024)
	__VDLTypetypes026 := __VDLTypetypes0Builder.List()
	__VDLTypetypes026.AssignElem(__VDLTypetypes010)
	__VDLTypetypes025.AssignElem(__VDLTypetypes026)
	__VDLTypetypes05.AppendField("ByBatch", __VDLTypetypes025)
	__VDLTypetypes04.AssignElem(__VDLTypetypes06)
	__VDLTypetypes02.AppendField("ReadSet", __VDLTypetypes04)
	__VDLTypetypes02.AppendField("WriteSet", __VDLTypetypes04)
	__VDLTypetypes027 := __VDLTypetypes0Builder.Optional()
	__VDLTypetypes028 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes029 := __VDLTypetypes0Builder.Named("v.io/v23/syncbase/nosql.ConflictScanSet").AssignBase(__VDLTypetypes028)
	__VDLTypetypes030 := __VDLTypetypes0Builder.Map()
	__VDLTypetypes030.AssignKey(__VDLTypetypes024)
	__VDLTypetypes031 := __VDLTypetypes0Builder.List()
	__VDLTypetypes032 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes033 := __VDLTypetypes0Builder.Named("v.io/v23/services/syncbase/nosql.ScanOp").AssignBase(__VDLTypetypes032)
	__VDLTypetypes032.AppendField("Start", __VDLTypetypes08)
	__VDLTypetypes032.AppendField("Limit", __VDLTypetypes08)
	__VDLTypetypes031.AssignElem(__VDLTypetypes033)
	__VDLTypetypes030.AssignElem(__VDLTypetypes031)
	__VDLTypetypes028.AppendField("ByBatch", __VDLTypetypes030)
	__VDLTypetypes027.AssignElem(__VDLTypetypes029)
	__VDLTypetypes02.AppendField("ScanSet", __VDLTypetypes027)
	__VDLTypetypes034 := __VDLTypetypes0Builder.Map()
	__VDLTypetypes034.AssignKey(__VDLTypetypes024)
	__VDLTypetypes035 := __VDLTypetypes0Builder.Struct()
	__VDLTypetypes036 := __VDLTypetypes0Builder.Named("v.io/v23/services/syncbase/nosql.BatchInfo").AssignBase(__VDLTypetypes035)
	__VDLTypetypes035.AppendField("Id", __VDLTypetypes024)
	__VDLTypetypes035.AppendField("Hint", __VDLTypetypes08)
	__VDLTypetypes037 := __VDLTypetypes0Builder.Enum()
	__VDLTypetypes038 := __VDLTypetypes0Builder.Named("v.io/v23/services/syncbase/nosql.BatchSource").AssignBase(__VDLTypetypes037)
	__VDLTypetypes037.AppendLabel("Local")
	__VDLTypetypes037.AppendLabel("Remote")
	__VDLTypetypes035.AppendField("Source", __VDLTypetypes038)
	__VDLTypetypes034.AssignElem(__VDLTypetypes036)
	__VDLTypetypes02.AppendField("Batches", __VDLTypetypes034)
	__VDLTypetypes01.AssignElem(__VDLTypetypes03)
	__VDLTypetypes0Builder.Build()
	__VDLTypetypes0v, err := __VDLTypetypes01.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes0v
}
func init() {
	__VDLTypetypes0 = __VDLTypetypes0_gen()
}

var __VDLTypetypes10 *vdl.Type

func __VDLTypetypes10_gen() *vdl.Type {
	__VDLTypetypes10Builder := vdl.TypeBuilder{}

	__VDLTypetypes101 := __VDLTypetypes10Builder.Optional()
	__VDLTypetypes102 := __VDLTypetypes10Builder.Struct()
	__VDLTypetypes103 := __VDLTypetypes10Builder.Named("v.io/v23/syncbase/nosql.ConflictRow").AssignBase(__VDLTypetypes102)
	__VDLTypetypes104 := vdl.StringType
	__VDLTypetypes102.AppendField("Key", __VDLTypetypes104)
	__VDLTypetypes105 := __VDLTypetypes10Builder.Struct()
	__VDLTypetypes106 := __VDLTypetypes10Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes105)
	__VDLTypetypes107 := __VDLTypetypes10Builder.Enum()
	__VDLTypetypes108 := __VDLTypetypes10Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes107)
	__VDLTypetypes107.AppendLabel("Exists")
	__VDLTypetypes107.AppendLabel("NoExists")
	__VDLTypetypes107.AppendLabel("Deleted")
	__VDLTypetypes107.AppendLabel("Unknown")
	__VDLTypetypes105.AppendField("State", __VDLTypetypes108)
	__VDLTypetypes109 := __VDLTypetypes10Builder.List()
	__VDLTypetypes1010 := vdl.ByteType
	__VDLTypetypes109.AssignElem(__VDLTypetypes1010)
	__VDLTypetypes105.AppendField("Val", __VDLTypetypes109)
	__VDLTypetypes1011 := __VDLTypetypes10Builder.Struct()
	__VDLTypetypes1012 := __VDLTypetypes10Builder.Named("time.Time").AssignBase(__VDLTypetypes1011)
	__VDLTypetypes1013 := vdl.Int64Type
	__VDLTypetypes1011.AppendField("Seconds", __VDLTypetypes1013)
	__VDLTypetypes1014 := vdl.Int32Type
	__VDLTypetypes1011.AppendField("Nanos", __VDLTypetypes1014)
	__VDLTypetypes105.AppendField("WriteTs", __VDLTypetypes1012)
	__VDLTypetypes1015 := __VDLTypetypes10Builder.Enum()
	__VDLTypetypes1016 := __VDLTypetypes10Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes1015)
	__VDLTypetypes1015.AppendLabel("Local")
	__VDLTypetypes1015.AppendLabel("Remote")
	__VDLTypetypes1015.AppendLabel("Other")
	__VDLTypetypes105.AppendField("Selection", __VDLTypetypes1016)
	__VDLTypetypes102.AppendField("LocalValue", __VDLTypetypes106)
	__VDLTypetypes102.AppendField("RemoteValue", __VDLTypetypes106)
	__VDLTypetypes102.AppendField("AncestorValue", __VDLTypetypes106)
	__VDLTypetypes1017 := __VDLTypetypes10Builder.List()
	__VDLTypetypes1018 := vdl.Uint64Type
	__VDLTypetypes1017.AssignElem(__VDLTypetypes1018)
	__VDLTypetypes102.AppendField("BatchIds", __VDLTypetypes1017)
	__VDLTypetypes101.AssignElem(__VDLTypetypes103)
	__VDLTypetypes10Builder.Build()
	__VDLTypetypes10v, err := __VDLTypetypes101.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes10v
}
func init() {
	__VDLTypetypes10 = __VDLTypetypes10_gen()
}

var __VDLTypetypes1 *vdl.Type

func __VDLTypetypes1_gen() *vdl.Type {
	__VDLTypetypes1Builder := vdl.TypeBuilder{}

	__VDLTypetypes11 := __VDLTypetypes1Builder.Optional()
	__VDLTypetypes12 := __VDLTypetypes1Builder.Struct()
	__VDLTypetypes13 := __VDLTypetypes1Builder.Named("v.io/v23/syncbase/nosql.ConflictRowSet").AssignBase(__VDLTypetypes12)
	__VDLTypetypes14 := __VDLTypetypes1Builder.Map()
	__VDLTypetypes15 := vdl.StringType
	__VDLTypetypes14.AssignKey(__VDLTypetypes15)
	__VDLTypetypes16 := __VDLTypetypes1Builder.Struct()
	__VDLTypetypes17 := __VDLTypetypes1Builder.Named("v.io/v23/syncbase/nosql.ConflictRow").AssignBase(__VDLTypetypes16)
	__VDLTypetypes16.AppendField("Key", __VDLTypetypes15)
	__VDLTypetypes18 := __VDLTypetypes1Builder.Struct()
	__VDLTypetypes19 := __VDLTypetypes1Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes18)
	__VDLTypetypes110 := __VDLTypetypes1Builder.Enum()
	__VDLTypetypes111 := __VDLTypetypes1Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes110)
	__VDLTypetypes110.AppendLabel("Exists")
	__VDLTypetypes110.AppendLabel("NoExists")
	__VDLTypetypes110.AppendLabel("Deleted")
	__VDLTypetypes110.AppendLabel("Unknown")
	__VDLTypetypes18.AppendField("State", __VDLTypetypes111)
	__VDLTypetypes112 := __VDLTypetypes1Builder.List()
	__VDLTypetypes113 := vdl.ByteType
	__VDLTypetypes112.AssignElem(__VDLTypetypes113)
	__VDLTypetypes18.AppendField("Val", __VDLTypetypes112)
	__VDLTypetypes114 := __VDLTypetypes1Builder.Struct()
	__VDLTypetypes115 := __VDLTypetypes1Builder.Named("time.Time").AssignBase(__VDLTypetypes114)
	__VDLTypetypes116 := vdl.Int64Type
	__VDLTypetypes114.AppendField("Seconds", __VDLTypetypes116)
	__VDLTypetypes117 := vdl.Int32Type
	__VDLTypetypes114.AppendField("Nanos", __VDLTypetypes117)
	__VDLTypetypes18.AppendField("WriteTs", __VDLTypetypes115)
	__VDLTypetypes118 := __VDLTypetypes1Builder.Enum()
	__VDLTypetypes119 := __VDLTypetypes1Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes118)
	__VDLTypetypes118.AppendLabel("Local")
	__VDLTypetypes118.AppendLabel("Remote")
	__VDLTypetypes118.AppendLabel("Other")
	__VDLTypetypes18.AppendField("Selection", __VDLTypetypes119)
	__VDLTypetypes16.AppendField("LocalValue", __VDLTypetypes19)
	__VDLTypetypes16.AppendField("RemoteValue", __VDLTypetypes19)
	__VDLTypetypes16.AppendField("AncestorValue", __VDLTypetypes19)
	__VDLTypetypes120 := __VDLTypetypes1Builder.List()
	__VDLTypetypes121 := vdl.Uint64Type
	__VDLTypetypes120.AssignElem(__VDLTypetypes121)
	__VDLTypetypes16.AppendField("BatchIds", __VDLTypetypes120)
	__VDLTypetypes14.AssignElem(__VDLTypetypes17)
	__VDLTypetypes12.AppendField("ByKey", __VDLTypetypes14)
	__VDLTypetypes122 := __VDLTypetypes1Builder.Map()
	__VDLTypetypes122.AssignKey(__VDLTypetypes121)
	__VDLTypetypes123 := __VDLTypetypes1Builder.List()
	__VDLTypetypes123.AssignElem(__VDLTypetypes17)
	__VDLTypetypes122.AssignElem(__VDLTypetypes123)
	__VDLTypetypes12.AppendField("ByBatch", __VDLTypetypes122)
	__VDLTypetypes11.AssignElem(__VDLTypetypes13)
	__VDLTypetypes1Builder.Build()
	__VDLTypetypes1v, err := __VDLTypetypes11.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes1v
}
func init() {
	__VDLTypetypes1 = __VDLTypetypes1_gen()
}

var __VDLTypetypes2 *vdl.Type = vdl.TypeOf((*ConflictScanSet)(nil))
var __VDLTypetypes11 *vdl.Type

func __VDLTypetypes11_gen() *vdl.Type {
	__VDLTypetypes11Builder := vdl.TypeBuilder{}

	__VDLTypetypes111 := __VDLTypetypes11Builder.Optional()
	__VDLTypetypes112 := __VDLTypetypes11Builder.Struct()
	__VDLTypetypes113 := __VDLTypetypes11Builder.Named("v.io/v23/syncbase/nosql.Resolution").AssignBase(__VDLTypetypes112)
	__VDLTypetypes114 := __VDLTypetypes11Builder.Map()
	__VDLTypetypes115 := vdl.StringType
	__VDLTypetypes114.AssignKey(__VDLTypetypes115)
	__VDLTypetypes116 := __VDLTypetypes11Builder.Struct()
	__VDLTypetypes117 := __VDLTypetypes11Builder.Named("v.io/v23/syncbase/nosql.ResolvedRow").AssignBase(__VDLTypetypes116)
	__VDLTypetypes116.AppendField("Key", __VDLTypetypes115)
	__VDLTypetypes118 := __VDLTypetypes11Builder.Optional()
	__VDLTypetypes119 := __VDLTypetypes11Builder.Struct()
	__VDLTypetypes1110 := __VDLTypetypes11Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes119)
	__VDLTypetypes1111 := __VDLTypetypes11Builder.Enum()
	__VDLTypetypes1112 := __VDLTypetypes11Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes1111)
	__VDLTypetypes1111.AppendLabel("Exists")
	__VDLTypetypes1111.AppendLabel("NoExists")
	__VDLTypetypes1111.AppendLabel("Deleted")
	__VDLTypetypes1111.AppendLabel("Unknown")
	__VDLTypetypes119.AppendField("State", __VDLTypetypes1112)
	__VDLTypetypes1113 := __VDLTypetypes11Builder.List()
	__VDLTypetypes1114 := vdl.ByteType
	__VDLTypetypes1113.AssignElem(__VDLTypetypes1114)
	__VDLTypetypes119.AppendField("Val", __VDLTypetypes1113)
	__VDLTypetypes1115 := __VDLTypetypes11Builder.Struct()
	__VDLTypetypes1116 := __VDLTypetypes11Builder.Named("time.Time").AssignBase(__VDLTypetypes1115)
	__VDLTypetypes1117 := vdl.Int64Type
	__VDLTypetypes1115.AppendField("Seconds", __VDLTypetypes1117)
	__VDLTypetypes1118 := vdl.Int32Type
	__VDLTypetypes1115.AppendField("Nanos", __VDLTypetypes1118)
	__VDLTypetypes119.AppendField("WriteTs", __VDLTypetypes1116)
	__VDLTypetypes1119 := __VDLTypetypes11Builder.Enum()
	__VDLTypetypes1120 := __VDLTypetypes11Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes1119)
	__VDLTypetypes1119.AppendLabel("Local")
	__VDLTypetypes1119.AppendLabel("Remote")
	__VDLTypetypes1119.AppendLabel("Other")
	__VDLTypetypes119.AppendField("Selection", __VDLTypetypes1120)
	__VDLTypetypes118.AssignElem(__VDLTypetypes1110)
	__VDLTypetypes116.AppendField("Result", __VDLTypetypes118)
	__VDLTypetypes114.AssignElem(__VDLTypetypes117)
	__VDLTypetypes112.AppendField("ResultSet", __VDLTypetypes114)
	__VDLTypetypes111.AssignElem(__VDLTypetypes113)
	__VDLTypetypes11Builder.Build()
	__VDLTypetypes11v, err := __VDLTypetypes111.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes11v
}
func init() {
	__VDLTypetypes11 = __VDLTypetypes11_gen()
}

var __VDLTypetypes13 *vdl.Type

func __VDLTypetypes13_gen() *vdl.Type {
	__VDLTypetypes13Builder := vdl.TypeBuilder{}

	__VDLTypetypes131 := __VDLTypetypes13Builder.Optional()
	__VDLTypetypes132 := __VDLTypetypes13Builder.Struct()
	__VDLTypetypes133 := __VDLTypetypes13Builder.Named("v.io/v23/syncbase/nosql.ResolvedRow").AssignBase(__VDLTypetypes132)
	__VDLTypetypes134 := vdl.StringType
	__VDLTypetypes132.AppendField("Key", __VDLTypetypes134)
	__VDLTypetypes135 := __VDLTypetypes13Builder.Optional()
	__VDLTypetypes136 := __VDLTypetypes13Builder.Struct()
	__VDLTypetypes137 := __VDLTypetypes13Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes136)
	__VDLTypetypes138 := __VDLTypetypes13Builder.Enum()
	__VDLTypetypes139 := __VDLTypetypes13Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes138)
	__VDLTypetypes138.AppendLabel("Exists")
	__VDLTypetypes138.AppendLabel("NoExists")
	__VDLTypetypes138.AppendLabel("Deleted")
	__VDLTypetypes138.AppendLabel("Unknown")
	__VDLTypetypes136.AppendField("State", __VDLTypetypes139)
	__VDLTypetypes1310 := __VDLTypetypes13Builder.List()
	__VDLTypetypes1311 := vdl.ByteType
	__VDLTypetypes1310.AssignElem(__VDLTypetypes1311)
	__VDLTypetypes136.AppendField("Val", __VDLTypetypes1310)
	__VDLTypetypes1312 := __VDLTypetypes13Builder.Struct()
	__VDLTypetypes1313 := __VDLTypetypes13Builder.Named("time.Time").AssignBase(__VDLTypetypes1312)
	__VDLTypetypes1314 := vdl.Int64Type
	__VDLTypetypes1312.AppendField("Seconds", __VDLTypetypes1314)
	__VDLTypetypes1315 := vdl.Int32Type
	__VDLTypetypes1312.AppendField("Nanos", __VDLTypetypes1315)
	__VDLTypetypes136.AppendField("WriteTs", __VDLTypetypes1313)
	__VDLTypetypes1316 := __VDLTypetypes13Builder.Enum()
	__VDLTypetypes1317 := __VDLTypetypes13Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes1316)
	__VDLTypetypes1316.AppendLabel("Local")
	__VDLTypetypes1316.AppendLabel("Remote")
	__VDLTypetypes1316.AppendLabel("Other")
	__VDLTypetypes136.AppendField("Selection", __VDLTypetypes1317)
	__VDLTypetypes135.AssignElem(__VDLTypetypes137)
	__VDLTypetypes132.AppendField("Result", __VDLTypetypes135)
	__VDLTypetypes131.AssignElem(__VDLTypetypes133)
	__VDLTypetypes13Builder.Build()
	__VDLTypetypes13v, err := __VDLTypetypes131.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes13v
}
func init() {
	__VDLTypetypes13 = __VDLTypetypes13_gen()
}

var __VDLTypetypes14 *vdl.Type

func __VDLTypetypes14_gen() *vdl.Type {
	__VDLTypetypes14Builder := vdl.TypeBuilder{}

	__VDLTypetypes141 := __VDLTypetypes14Builder.Optional()
	__VDLTypetypes142 := __VDLTypetypes14Builder.Struct()
	__VDLTypetypes143 := __VDLTypetypes14Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes142)
	__VDLTypetypes144 := __VDLTypetypes14Builder.Enum()
	__VDLTypetypes145 := __VDLTypetypes14Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes144)
	__VDLTypetypes144.AppendLabel("Exists")
	__VDLTypetypes144.AppendLabel("NoExists")
	__VDLTypetypes144.AppendLabel("Deleted")
	__VDLTypetypes144.AppendLabel("Unknown")
	__VDLTypetypes142.AppendField("State", __VDLTypetypes145)
	__VDLTypetypes146 := __VDLTypetypes14Builder.List()
	__VDLTypetypes147 := vdl.ByteType
	__VDLTypetypes146.AssignElem(__VDLTypetypes147)
	__VDLTypetypes142.AppendField("Val", __VDLTypetypes146)
	__VDLTypetypes148 := __VDLTypetypes14Builder.Struct()
	__VDLTypetypes149 := __VDLTypetypes14Builder.Named("time.Time").AssignBase(__VDLTypetypes148)
	__VDLTypetypes1410 := vdl.Int64Type
	__VDLTypetypes148.AppendField("Seconds", __VDLTypetypes1410)
	__VDLTypetypes1411 := vdl.Int32Type
	__VDLTypetypes148.AppendField("Nanos", __VDLTypetypes1411)
	__VDLTypetypes142.AppendField("WriteTs", __VDLTypetypes149)
	__VDLTypetypes1412 := __VDLTypetypes14Builder.Enum()
	__VDLTypetypes1413 := __VDLTypetypes14Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes1412)
	__VDLTypetypes1412.AppendLabel("Local")
	__VDLTypetypes1412.AppendLabel("Remote")
	__VDLTypetypes1412.AppendLabel("Other")
	__VDLTypetypes142.AppendField("Selection", __VDLTypetypes1413)
	__VDLTypetypes141.AssignElem(__VDLTypetypes143)
	__VDLTypetypes14Builder.Build()
	__VDLTypetypes14v, err := __VDLTypetypes141.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes14v
}
func init() {
	__VDLTypetypes14 = __VDLTypetypes14_gen()
}

var __VDLTypetypes15 *vdl.Type = vdl.TypeOf([]byte(nil))
var __VDLTypetypes4 *vdl.Type = vdl.TypeOf([]uint64(nil))
var __VDLTypetypes8 *vdl.Type = vdl.TypeOf([]nosql.ScanOp(nil))
var __VDLTypetypes6 *vdl.Type

func __VDLTypetypes6_gen() *vdl.Type {
	__VDLTypetypes6Builder := vdl.TypeBuilder{}

	__VDLTypetypes61 := __VDLTypetypes6Builder.List()
	__VDLTypetypes62 := __VDLTypetypes6Builder.Struct()
	__VDLTypetypes63 := __VDLTypetypes6Builder.Named("v.io/v23/syncbase/nosql.ConflictRow").AssignBase(__VDLTypetypes62)
	__VDLTypetypes64 := vdl.StringType
	__VDLTypetypes62.AppendField("Key", __VDLTypetypes64)
	__VDLTypetypes65 := __VDLTypetypes6Builder.Struct()
	__VDLTypetypes66 := __VDLTypetypes6Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes65)
	__VDLTypetypes67 := __VDLTypetypes6Builder.Enum()
	__VDLTypetypes68 := __VDLTypetypes6Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes67)
	__VDLTypetypes67.AppendLabel("Exists")
	__VDLTypetypes67.AppendLabel("NoExists")
	__VDLTypetypes67.AppendLabel("Deleted")
	__VDLTypetypes67.AppendLabel("Unknown")
	__VDLTypetypes65.AppendField("State", __VDLTypetypes68)
	__VDLTypetypes69 := __VDLTypetypes6Builder.List()
	__VDLTypetypes610 := vdl.ByteType
	__VDLTypetypes69.AssignElem(__VDLTypetypes610)
	__VDLTypetypes65.AppendField("Val", __VDLTypetypes69)
	__VDLTypetypes611 := __VDLTypetypes6Builder.Struct()
	__VDLTypetypes612 := __VDLTypetypes6Builder.Named("time.Time").AssignBase(__VDLTypetypes611)
	__VDLTypetypes613 := vdl.Int64Type
	__VDLTypetypes611.AppendField("Seconds", __VDLTypetypes613)
	__VDLTypetypes614 := vdl.Int32Type
	__VDLTypetypes611.AppendField("Nanos", __VDLTypetypes614)
	__VDLTypetypes65.AppendField("WriteTs", __VDLTypetypes612)
	__VDLTypetypes615 := __VDLTypetypes6Builder.Enum()
	__VDLTypetypes616 := __VDLTypetypes6Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes615)
	__VDLTypetypes615.AppendLabel("Local")
	__VDLTypetypes615.AppendLabel("Remote")
	__VDLTypetypes615.AppendLabel("Other")
	__VDLTypetypes65.AppendField("Selection", __VDLTypetypes616)
	__VDLTypetypes62.AppendField("LocalValue", __VDLTypetypes66)
	__VDLTypetypes62.AppendField("RemoteValue", __VDLTypetypes66)
	__VDLTypetypes62.AppendField("AncestorValue", __VDLTypetypes66)
	__VDLTypetypes617 := __VDLTypetypes6Builder.List()
	__VDLTypetypes618 := vdl.Uint64Type
	__VDLTypetypes617.AssignElem(__VDLTypetypes618)
	__VDLTypetypes62.AppendField("BatchIds", __VDLTypetypes617)
	__VDLTypetypes61.AssignElem(__VDLTypetypes63)
	__VDLTypetypes6Builder.Build()
	__VDLTypetypes6v, err := __VDLTypetypes61.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes6v
}
func init() {
	__VDLTypetypes6 = __VDLTypetypes6_gen()
}

var __VDLTypetypes5 *vdl.Type

func __VDLTypetypes5_gen() *vdl.Type {
	__VDLTypetypes5Builder := vdl.TypeBuilder{}

	__VDLTypetypes51 := __VDLTypetypes5Builder.Map()
	__VDLTypetypes52 := vdl.StringType
	__VDLTypetypes51.AssignKey(__VDLTypetypes52)
	__VDLTypetypes53 := __VDLTypetypes5Builder.Struct()
	__VDLTypetypes54 := __VDLTypetypes5Builder.Named("v.io/v23/syncbase/nosql.ConflictRow").AssignBase(__VDLTypetypes53)
	__VDLTypetypes53.AppendField("Key", __VDLTypetypes52)
	__VDLTypetypes55 := __VDLTypetypes5Builder.Struct()
	__VDLTypetypes56 := __VDLTypetypes5Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes55)
	__VDLTypetypes57 := __VDLTypetypes5Builder.Enum()
	__VDLTypetypes58 := __VDLTypetypes5Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes57)
	__VDLTypetypes57.AppendLabel("Exists")
	__VDLTypetypes57.AppendLabel("NoExists")
	__VDLTypetypes57.AppendLabel("Deleted")
	__VDLTypetypes57.AppendLabel("Unknown")
	__VDLTypetypes55.AppendField("State", __VDLTypetypes58)
	__VDLTypetypes59 := __VDLTypetypes5Builder.List()
	__VDLTypetypes510 := vdl.ByteType
	__VDLTypetypes59.AssignElem(__VDLTypetypes510)
	__VDLTypetypes55.AppendField("Val", __VDLTypetypes59)
	__VDLTypetypes511 := __VDLTypetypes5Builder.Struct()
	__VDLTypetypes512 := __VDLTypetypes5Builder.Named("time.Time").AssignBase(__VDLTypetypes511)
	__VDLTypetypes513 := vdl.Int64Type
	__VDLTypetypes511.AppendField("Seconds", __VDLTypetypes513)
	__VDLTypetypes514 := vdl.Int32Type
	__VDLTypetypes511.AppendField("Nanos", __VDLTypetypes514)
	__VDLTypetypes55.AppendField("WriteTs", __VDLTypetypes512)
	__VDLTypetypes515 := __VDLTypetypes5Builder.Enum()
	__VDLTypetypes516 := __VDLTypetypes5Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes515)
	__VDLTypetypes515.AppendLabel("Local")
	__VDLTypetypes515.AppendLabel("Remote")
	__VDLTypetypes515.AppendLabel("Other")
	__VDLTypetypes55.AppendField("Selection", __VDLTypetypes516)
	__VDLTypetypes53.AppendField("LocalValue", __VDLTypetypes56)
	__VDLTypetypes53.AppendField("RemoteValue", __VDLTypetypes56)
	__VDLTypetypes53.AppendField("AncestorValue", __VDLTypetypes56)
	__VDLTypetypes517 := __VDLTypetypes5Builder.List()
	__VDLTypetypes518 := vdl.Uint64Type
	__VDLTypetypes517.AssignElem(__VDLTypetypes518)
	__VDLTypetypes53.AppendField("BatchIds", __VDLTypetypes517)
	__VDLTypetypes51.AssignElem(__VDLTypetypes54)
	__VDLTypetypes5Builder.Build()
	__VDLTypetypes5v, err := __VDLTypetypes51.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes5v
}
func init() {
	__VDLTypetypes5 = __VDLTypetypes5_gen()
}

var __VDLTypetypes12 *vdl.Type

func __VDLTypetypes12_gen() *vdl.Type {
	__VDLTypetypes12Builder := vdl.TypeBuilder{}

	__VDLTypetypes121 := __VDLTypetypes12Builder.Map()
	__VDLTypetypes122 := vdl.StringType
	__VDLTypetypes121.AssignKey(__VDLTypetypes122)
	__VDLTypetypes123 := __VDLTypetypes12Builder.Struct()
	__VDLTypetypes124 := __VDLTypetypes12Builder.Named("v.io/v23/syncbase/nosql.ResolvedRow").AssignBase(__VDLTypetypes123)
	__VDLTypetypes123.AppendField("Key", __VDLTypetypes122)
	__VDLTypetypes125 := __VDLTypetypes12Builder.Optional()
	__VDLTypetypes126 := __VDLTypetypes12Builder.Struct()
	__VDLTypetypes127 := __VDLTypetypes12Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes126)
	__VDLTypetypes128 := __VDLTypetypes12Builder.Enum()
	__VDLTypetypes129 := __VDLTypetypes12Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes128)
	__VDLTypetypes128.AppendLabel("Exists")
	__VDLTypetypes128.AppendLabel("NoExists")
	__VDLTypetypes128.AppendLabel("Deleted")
	__VDLTypetypes128.AppendLabel("Unknown")
	__VDLTypetypes126.AppendField("State", __VDLTypetypes129)
	__VDLTypetypes1210 := __VDLTypetypes12Builder.List()
	__VDLTypetypes1211 := vdl.ByteType
	__VDLTypetypes1210.AssignElem(__VDLTypetypes1211)
	__VDLTypetypes126.AppendField("Val", __VDLTypetypes1210)
	__VDLTypetypes1212 := __VDLTypetypes12Builder.Struct()
	__VDLTypetypes1213 := __VDLTypetypes12Builder.Named("time.Time").AssignBase(__VDLTypetypes1212)
	__VDLTypetypes1214 := vdl.Int64Type
	__VDLTypetypes1212.AppendField("Seconds", __VDLTypetypes1214)
	__VDLTypetypes1215 := vdl.Int32Type
	__VDLTypetypes1212.AppendField("Nanos", __VDLTypetypes1215)
	__VDLTypetypes126.AppendField("WriteTs", __VDLTypetypes1213)
	__VDLTypetypes1216 := __VDLTypetypes12Builder.Enum()
	__VDLTypetypes1217 := __VDLTypetypes12Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes1216)
	__VDLTypetypes1216.AppendLabel("Local")
	__VDLTypetypes1216.AppendLabel("Remote")
	__VDLTypetypes1216.AppendLabel("Other")
	__VDLTypetypes126.AppendField("Selection", __VDLTypetypes1217)
	__VDLTypetypes125.AssignElem(__VDLTypetypes127)
	__VDLTypetypes123.AppendField("Result", __VDLTypetypes125)
	__VDLTypetypes121.AssignElem(__VDLTypetypes124)
	__VDLTypetypes12Builder.Build()
	__VDLTypetypes12v, err := __VDLTypetypes121.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes12v
}
func init() {
	__VDLTypetypes12 = __VDLTypetypes12_gen()
}

var __VDLTypetypes9 *vdl.Type = vdl.TypeOf(map[uint64][]nosql.ScanOp(nil))
var __VDLTypetypes7 *vdl.Type

func __VDLTypetypes7_gen() *vdl.Type {
	__VDLTypetypes7Builder := vdl.TypeBuilder{}

	__VDLTypetypes71 := __VDLTypetypes7Builder.Map()
	__VDLTypetypes72 := vdl.Uint64Type
	__VDLTypetypes71.AssignKey(__VDLTypetypes72)
	__VDLTypetypes73 := __VDLTypetypes7Builder.List()
	__VDLTypetypes74 := __VDLTypetypes7Builder.Struct()
	__VDLTypetypes75 := __VDLTypetypes7Builder.Named("v.io/v23/syncbase/nosql.ConflictRow").AssignBase(__VDLTypetypes74)
	__VDLTypetypes76 := vdl.StringType
	__VDLTypetypes74.AppendField("Key", __VDLTypetypes76)
	__VDLTypetypes77 := __VDLTypetypes7Builder.Struct()
	__VDLTypetypes78 := __VDLTypetypes7Builder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLTypetypes77)
	__VDLTypetypes79 := __VDLTypetypes7Builder.Enum()
	__VDLTypetypes710 := __VDLTypetypes7Builder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLTypetypes79)
	__VDLTypetypes79.AppendLabel("Exists")
	__VDLTypetypes79.AppendLabel("NoExists")
	__VDLTypetypes79.AppendLabel("Deleted")
	__VDLTypetypes79.AppendLabel("Unknown")
	__VDLTypetypes77.AppendField("State", __VDLTypetypes710)
	__VDLTypetypes711 := __VDLTypetypes7Builder.List()
	__VDLTypetypes712 := vdl.ByteType
	__VDLTypetypes711.AssignElem(__VDLTypetypes712)
	__VDLTypetypes77.AppendField("Val", __VDLTypetypes711)
	__VDLTypetypes713 := __VDLTypetypes7Builder.Struct()
	__VDLTypetypes714 := __VDLTypetypes7Builder.Named("time.Time").AssignBase(__VDLTypetypes713)
	__VDLTypetypes715 := vdl.Int64Type
	__VDLTypetypes713.AppendField("Seconds", __VDLTypetypes715)
	__VDLTypetypes716 := vdl.Int32Type
	__VDLTypetypes713.AppendField("Nanos", __VDLTypetypes716)
	__VDLTypetypes77.AppendField("WriteTs", __VDLTypetypes714)
	__VDLTypetypes717 := __VDLTypetypes7Builder.Enum()
	__VDLTypetypes718 := __VDLTypetypes7Builder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLTypetypes717)
	__VDLTypetypes717.AppendLabel("Local")
	__VDLTypetypes717.AppendLabel("Remote")
	__VDLTypetypes717.AppendLabel("Other")
	__VDLTypetypes77.AppendField("Selection", __VDLTypetypes718)
	__VDLTypetypes74.AppendField("LocalValue", __VDLTypetypes78)
	__VDLTypetypes74.AppendField("RemoteValue", __VDLTypetypes78)
	__VDLTypetypes74.AppendField("AncestorValue", __VDLTypetypes78)
	__VDLTypetypes719 := __VDLTypetypes7Builder.List()
	__VDLTypetypes719.AssignElem(__VDLTypetypes72)
	__VDLTypetypes74.AppendField("BatchIds", __VDLTypetypes719)
	__VDLTypetypes73.AssignElem(__VDLTypetypes75)
	__VDLTypetypes71.AssignElem(__VDLTypetypes73)
	__VDLTypetypes7Builder.Build()
	__VDLTypetypes7v, err := __VDLTypetypes71.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypetypes7v
}
func init() {
	__VDLTypetypes7 = __VDLTypetypes7_gen()
}

var __VDLTypetypes3 *vdl.Type = vdl.TypeOf(map[uint64]nosql.BatchInfo(nil))
var __VDLType_types_time_Time *vdl.Type

func __VDLType_types_time_Time_gen() *vdl.Type {
	__VDLType_types_time_TimeBuilder := vdl.TypeBuilder{}

	__VDLType_types_time_Time1 := __VDLType_types_time_TimeBuilder.Struct()
	__VDLType_types_time_Time2 := __VDLType_types_time_TimeBuilder.Named("time.Time").AssignBase(__VDLType_types_time_Time1)
	__VDLType_types_time_Time3 := vdl.Int64Type
	__VDLType_types_time_Time1.AppendField("Seconds", __VDLType_types_time_Time3)
	__VDLType_types_time_Time4 := vdl.Int32Type
	__VDLType_types_time_Time1.AppendField("Nanos", __VDLType_types_time_Time4)
	__VDLType_types_time_TimeBuilder.Build()
	__VDLType_types_time_Timev, err := __VDLType_types_time_Time2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_time_Timev
}
func init() {
	__VDLType_types_time_Time = __VDLType_types_time_Time_gen()
}

var __VDLType_types_v_io_v23_services_syncbase_nosql_BatchInfo *vdl.Type = vdl.TypeOf(nosql.BatchInfo{})
var __VDLType_types_v_io_v23_services_syncbase_nosql_ScanOp *vdl.Type = vdl.TypeOf(nosql.ScanOp{})
var __VDLType_types_v_io_v23_services_syncbase_nosql_ValueSelection *vdl.Type = vdl.TypeOf(nosql.ValueSelectionLocal)
var __VDLType_types_v_io_v23_services_syncbase_nosql_ValueState *vdl.Type = vdl.TypeOf(nosql.ValueStateExists)
var __VDLType_types_v_io_v23_syncbase_nosql_Conflict *vdl.Type

func __VDLType_types_v_io_v23_syncbase_nosql_Conflict_gen() *vdl.Type {
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_v23_syncbase_nosql_Conflict1 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict2 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/syncbase/nosql.Conflict").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict1)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict3 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Optional()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict4 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict5 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/syncbase/nosql.ConflictRowSet").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict4)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict6 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Map()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict7 := vdl.StringType
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict6.AssignKey(__VDLType_types_v_io_v23_syncbase_nosql_Conflict7)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict8 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict9 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/syncbase/nosql.ConflictRow").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict8)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict8.AppendField("Key", __VDLType_types_v_io_v23_syncbase_nosql_Conflict7)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict10 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict11 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict10)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict12 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict13 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict12)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict12.AppendLabel("Exists")
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict12.AppendLabel("NoExists")
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict12.AppendLabel("Deleted")
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict12.AppendLabel("Unknown")
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict10.AppendField("State", __VDLType_types_v_io_v23_syncbase_nosql_Conflict13)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict14 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict15 := vdl.ByteType
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict14.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict15)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict10.AppendField("Val", __VDLType_types_v_io_v23_syncbase_nosql_Conflict14)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict16 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict17 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("time.Time").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict16)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict18 := vdl.Int64Type
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict16.AppendField("Seconds", __VDLType_types_v_io_v23_syncbase_nosql_Conflict18)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict19 := vdl.Int32Type
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict16.AppendField("Nanos", __VDLType_types_v_io_v23_syncbase_nosql_Conflict19)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict10.AppendField("WriteTs", __VDLType_types_v_io_v23_syncbase_nosql_Conflict17)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict20 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict21 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict20)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict20.AppendLabel("Local")
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict20.AppendLabel("Remote")
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict20.AppendLabel("Other")
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict10.AppendField("Selection", __VDLType_types_v_io_v23_syncbase_nosql_Conflict21)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict8.AppendField("LocalValue", __VDLType_types_v_io_v23_syncbase_nosql_Conflict11)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict8.AppendField("RemoteValue", __VDLType_types_v_io_v23_syncbase_nosql_Conflict11)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict8.AppendField("AncestorValue", __VDLType_types_v_io_v23_syncbase_nosql_Conflict11)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict22 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict23 := vdl.Uint64Type
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict22.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict23)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict8.AppendField("BatchIds", __VDLType_types_v_io_v23_syncbase_nosql_Conflict22)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict6.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict9)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict4.AppendField("ByKey", __VDLType_types_v_io_v23_syncbase_nosql_Conflict6)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict24 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Map()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict24.AssignKey(__VDLType_types_v_io_v23_syncbase_nosql_Conflict23)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict25 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict25.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict9)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict24.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict25)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict4.AppendField("ByBatch", __VDLType_types_v_io_v23_syncbase_nosql_Conflict24)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict3.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict5)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict1.AppendField("ReadSet", __VDLType_types_v_io_v23_syncbase_nosql_Conflict3)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict1.AppendField("WriteSet", __VDLType_types_v_io_v23_syncbase_nosql_Conflict3)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict26 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Optional()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict27 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict28 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/syncbase/nosql.ConflictScanSet").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict27)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict29 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Map()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict29.AssignKey(__VDLType_types_v_io_v23_syncbase_nosql_Conflict23)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict30 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict31 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict32 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/services/syncbase/nosql.ScanOp").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict31)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict31.AppendField("Start", __VDLType_types_v_io_v23_syncbase_nosql_Conflict7)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict31.AppendField("Limit", __VDLType_types_v_io_v23_syncbase_nosql_Conflict7)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict30.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict32)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict29.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict30)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict27.AppendField("ByBatch", __VDLType_types_v_io_v23_syncbase_nosql_Conflict29)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict26.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict28)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict1.AppendField("ScanSet", __VDLType_types_v_io_v23_syncbase_nosql_Conflict26)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict33 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Map()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict33.AssignKey(__VDLType_types_v_io_v23_syncbase_nosql_Conflict23)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict34 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict35 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/services/syncbase/nosql.BatchInfo").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict34)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict34.AppendField("Id", __VDLType_types_v_io_v23_syncbase_nosql_Conflict23)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict34.AppendField("Hint", __VDLType_types_v_io_v23_syncbase_nosql_Conflict7)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict36 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict37 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Named("v.io/v23/services/syncbase/nosql.BatchSource").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Conflict36)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict36.AppendLabel("Local")
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict36.AppendLabel("Remote")
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict34.AppendField("Source", __VDLType_types_v_io_v23_syncbase_nosql_Conflict37)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict33.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Conflict35)
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict1.AppendField("Batches", __VDLType_types_v_io_v23_syncbase_nosql_Conflict33)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictBuilder.Build()
	__VDLType_types_v_io_v23_syncbase_nosql_Conflictv, err := __VDLType_types_v_io_v23_syncbase_nosql_Conflict2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_v23_syncbase_nosql_Conflictv
}
func init() {
	__VDLType_types_v_io_v23_syncbase_nosql_Conflict = __VDLType_types_v_io_v23_syncbase_nosql_Conflict_gen()
}

var __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow *vdl.Type

func __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow_gen() *vdl.Type {
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow1 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow2 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Named("v.io/v23/syncbase/nosql.ConflictRow").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow1)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow3 := vdl.StringType
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow1.AppendField("Key", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow3)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow4 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow5 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow4)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow6 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow7 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow6)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow6.AppendLabel("Exists")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow6.AppendLabel("NoExists")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow6.AppendLabel("Deleted")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow6.AppendLabel("Unknown")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow4.AppendField("State", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow7)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow8 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow9 := vdl.ByteType
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow8.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow9)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow4.AppendField("Val", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow8)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow10 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow11 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Named("time.Time").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow10)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow12 := vdl.Int64Type
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow10.AppendField("Seconds", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow12)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow13 := vdl.Int32Type
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow10.AppendField("Nanos", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow13)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow4.AppendField("WriteTs", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow11)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow14 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow15 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow14)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow14.AppendLabel("Local")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow14.AppendLabel("Remote")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow14.AppendLabel("Other")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow4.AppendField("Selection", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow15)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow1.AppendField("LocalValue", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow5)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow1.AppendField("RemoteValue", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow5)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow1.AppendField("AncestorValue", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow5)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow16 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow17 := vdl.Uint64Type
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow16.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow17)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow1.AppendField("BatchIds", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow16)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowBuilder.Build()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowv, err := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowv
}
func init() {
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow = __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow_gen()
}

var __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet *vdl.Type

func __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet_gen() *vdl.Type {
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet1 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet2 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Named("v.io/v23/syncbase/nosql.ConflictRowSet").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet1)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet3 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Map()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet4 := vdl.StringType
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet3.AssignKey(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet4)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet5 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet6 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Named("v.io/v23/syncbase/nosql.ConflictRow").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet5)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet5.AppendField("Key", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet4)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet7 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet8 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet7)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet9 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet10 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet9)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet9.AppendLabel("Exists")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet9.AppendLabel("NoExists")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet9.AppendLabel("Deleted")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet9.AppendLabel("Unknown")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet7.AppendField("State", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet10)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet11 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet12 := vdl.ByteType
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet11.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet12)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet7.AppendField("Val", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet11)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet13 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet14 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Named("time.Time").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet13)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet15 := vdl.Int64Type
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet13.AppendField("Seconds", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet15)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet16 := vdl.Int32Type
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet13.AppendField("Nanos", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet16)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet7.AppendField("WriteTs", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet14)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet17 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet18 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet17)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet17.AppendLabel("Local")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet17.AppendLabel("Remote")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet17.AppendLabel("Other")
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet7.AppendField("Selection", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet18)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet5.AppendField("LocalValue", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet8)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet5.AppendField("RemoteValue", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet8)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet5.AppendField("AncestorValue", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet8)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet19 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet20 := vdl.Uint64Type
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet19.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet20)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet5.AppendField("BatchIds", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet19)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet3.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet6)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet1.AppendField("ByKey", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet3)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet21 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Map()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet21.AssignKey(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet20)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet22 := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet22.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet6)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet21.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet22)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet1.AppendField("ByBatch", __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet21)
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetBuilder.Build()
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetv, err := __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSetv
}
func init() {
	__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet = __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet_gen()
}

var __VDLType_types_v_io_v23_syncbase_nosql_ConflictScanSet *vdl.Type = vdl.TypeOf(ConflictScanSet{})
var __VDLType_types_v_io_v23_syncbase_nosql_Resolution *vdl.Type

func __VDLType_types_v_io_v23_syncbase_nosql_Resolution_gen() *vdl.Type {
	__VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_v23_syncbase_nosql_Resolution1 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution2 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Named("v.io/v23/syncbase/nosql.Resolution").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Resolution1)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution3 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Map()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution4 := vdl.StringType
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution3.AssignKey(__VDLType_types_v_io_v23_syncbase_nosql_Resolution4)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution5 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution6 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Named("v.io/v23/syncbase/nosql.ResolvedRow").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Resolution5)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution5.AppendField("Key", __VDLType_types_v_io_v23_syncbase_nosql_Resolution4)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution7 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Optional()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution8 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution9 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Resolution8)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution10 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution11 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Resolution10)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution10.AppendLabel("Exists")
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution10.AppendLabel("NoExists")
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution10.AppendLabel("Deleted")
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution10.AppendLabel("Unknown")
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution8.AppendField("State", __VDLType_types_v_io_v23_syncbase_nosql_Resolution11)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution12 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution13 := vdl.ByteType
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution12.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Resolution13)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution8.AppendField("Val", __VDLType_types_v_io_v23_syncbase_nosql_Resolution12)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution14 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution15 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Named("time.Time").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Resolution14)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution16 := vdl.Int64Type
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution14.AppendField("Seconds", __VDLType_types_v_io_v23_syncbase_nosql_Resolution16)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution17 := vdl.Int32Type
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution14.AppendField("Nanos", __VDLType_types_v_io_v23_syncbase_nosql_Resolution17)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution8.AppendField("WriteTs", __VDLType_types_v_io_v23_syncbase_nosql_Resolution15)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution18 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution19 := __VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Resolution18)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution18.AppendLabel("Local")
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution18.AppendLabel("Remote")
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution18.AppendLabel("Other")
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution8.AppendField("Selection", __VDLType_types_v_io_v23_syncbase_nosql_Resolution19)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution7.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Resolution9)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution5.AppendField("Result", __VDLType_types_v_io_v23_syncbase_nosql_Resolution7)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution3.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Resolution6)
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution1.AppendField("ResultSet", __VDLType_types_v_io_v23_syncbase_nosql_Resolution3)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolutionBuilder.Build()
	__VDLType_types_v_io_v23_syncbase_nosql_Resolutionv, err := __VDLType_types_v_io_v23_syncbase_nosql_Resolution2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_v23_syncbase_nosql_Resolutionv
}
func init() {
	__VDLType_types_v_io_v23_syncbase_nosql_Resolution = __VDLType_types_v_io_v23_syncbase_nosql_Resolution_gen()
}

var __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow *vdl.Type

func __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow_gen() *vdl.Type {
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow1 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow2 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Named("v.io/v23/syncbase/nosql.ResolvedRow").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow1)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow3 := vdl.StringType
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow1.AppendField("Key", __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow3)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow4 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Optional()
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow5 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow6 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow5)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow7 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow8 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow7)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow7.AppendLabel("Exists")
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow7.AppendLabel("NoExists")
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow7.AppendLabel("Deleted")
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow7.AppendLabel("Unknown")
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow5.AppendField("State", __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow8)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow9 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow10 := vdl.ByteType
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow9.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow10)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow5.AppendField("Val", __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow9)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow11 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow12 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Named("time.Time").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow11)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow13 := vdl.Int64Type
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow11.AppendField("Seconds", __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow13)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow14 := vdl.Int32Type
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow11.AppendField("Nanos", __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow14)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow5.AppendField("WriteTs", __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow12)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow15 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow16 := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow15)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow15.AppendLabel("Local")
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow15.AppendLabel("Remote")
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow15.AppendLabel("Other")
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow5.AppendField("Selection", __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow16)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow4.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow6)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow1.AppendField("Result", __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow4)
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowBuilder.Build()
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowv, err := __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRowv
}
func init() {
	__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow = __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow_gen()
}

var __VDLType_types_v_io_v23_syncbase_nosql_Value *vdl.Type

func __VDLType_types_v_io_v23_syncbase_nosql_Value_gen() *vdl.Type {
	__VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder := vdl.TypeBuilder{}

	__VDLType_types_v_io_v23_syncbase_nosql_Value1 := __VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Value2 := __VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.Named("v.io/v23/syncbase/nosql.Value").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Value1)
	__VDLType_types_v_io_v23_syncbase_nosql_Value3 := __VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_Value4 := __VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.Named("v.io/v23/services/syncbase/nosql.ValueState").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Value3)
	__VDLType_types_v_io_v23_syncbase_nosql_Value3.AppendLabel("Exists")
	__VDLType_types_v_io_v23_syncbase_nosql_Value3.AppendLabel("NoExists")
	__VDLType_types_v_io_v23_syncbase_nosql_Value3.AppendLabel("Deleted")
	__VDLType_types_v_io_v23_syncbase_nosql_Value3.AppendLabel("Unknown")
	__VDLType_types_v_io_v23_syncbase_nosql_Value1.AppendField("State", __VDLType_types_v_io_v23_syncbase_nosql_Value4)
	__VDLType_types_v_io_v23_syncbase_nosql_Value5 := __VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.List()
	__VDLType_types_v_io_v23_syncbase_nosql_Value6 := vdl.ByteType
	__VDLType_types_v_io_v23_syncbase_nosql_Value5.AssignElem(__VDLType_types_v_io_v23_syncbase_nosql_Value6)
	__VDLType_types_v_io_v23_syncbase_nosql_Value1.AppendField("Val", __VDLType_types_v_io_v23_syncbase_nosql_Value5)
	__VDLType_types_v_io_v23_syncbase_nosql_Value7 := __VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.Struct()
	__VDLType_types_v_io_v23_syncbase_nosql_Value8 := __VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.Named("time.Time").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Value7)
	__VDLType_types_v_io_v23_syncbase_nosql_Value9 := vdl.Int64Type
	__VDLType_types_v_io_v23_syncbase_nosql_Value7.AppendField("Seconds", __VDLType_types_v_io_v23_syncbase_nosql_Value9)
	__VDLType_types_v_io_v23_syncbase_nosql_Value10 := vdl.Int32Type
	__VDLType_types_v_io_v23_syncbase_nosql_Value7.AppendField("Nanos", __VDLType_types_v_io_v23_syncbase_nosql_Value10)
	__VDLType_types_v_io_v23_syncbase_nosql_Value1.AppendField("WriteTs", __VDLType_types_v_io_v23_syncbase_nosql_Value8)
	__VDLType_types_v_io_v23_syncbase_nosql_Value11 := __VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.Enum()
	__VDLType_types_v_io_v23_syncbase_nosql_Value12 := __VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.Named("v.io/v23/services/syncbase/nosql.ValueSelection").AssignBase(__VDLType_types_v_io_v23_syncbase_nosql_Value11)
	__VDLType_types_v_io_v23_syncbase_nosql_Value11.AppendLabel("Local")
	__VDLType_types_v_io_v23_syncbase_nosql_Value11.AppendLabel("Remote")
	__VDLType_types_v_io_v23_syncbase_nosql_Value11.AppendLabel("Other")
	__VDLType_types_v_io_v23_syncbase_nosql_Value1.AppendField("Selection", __VDLType_types_v_io_v23_syncbase_nosql_Value12)
	__VDLType_types_v_io_v23_syncbase_nosql_ValueBuilder.Build()
	__VDLType_types_v_io_v23_syncbase_nosql_Valuev, err := __VDLType_types_v_io_v23_syncbase_nosql_Value2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_types_v_io_v23_syncbase_nosql_Valuev
}
func init() {
	__VDLType_types_v_io_v23_syncbase_nosql_Value = __VDLType_types_v_io_v23_syncbase_nosql_Value_gen()
}
func __VDLEnsureNativeBuilt_types() {
	if __VDLTypetypes0 == nil {
		__VDLTypetypes0 = __VDLTypetypes0_gen()
	}
	if __VDLTypetypes10 == nil {
		__VDLTypetypes10 = __VDLTypetypes10_gen()
	}
	if __VDLTypetypes1 == nil {
		__VDLTypetypes1 = __VDLTypetypes1_gen()
	}
	if __VDLTypetypes11 == nil {
		__VDLTypetypes11 = __VDLTypetypes11_gen()
	}
	if __VDLTypetypes13 == nil {
		__VDLTypetypes13 = __VDLTypetypes13_gen()
	}
	if __VDLTypetypes14 == nil {
		__VDLTypetypes14 = __VDLTypetypes14_gen()
	}
	if __VDLTypetypes6 == nil {
		__VDLTypetypes6 = __VDLTypetypes6_gen()
	}
	if __VDLTypetypes5 == nil {
		__VDLTypetypes5 = __VDLTypetypes5_gen()
	}
	if __VDLTypetypes12 == nil {
		__VDLTypetypes12 = __VDLTypetypes12_gen()
	}
	if __VDLTypetypes7 == nil {
		__VDLTypetypes7 = __VDLTypetypes7_gen()
	}
	if __VDLType_types_time_Time == nil {
		__VDLType_types_time_Time = __VDLType_types_time_Time_gen()
	}
	if __VDLType_types_v_io_v23_syncbase_nosql_Conflict == nil {
		__VDLType_types_v_io_v23_syncbase_nosql_Conflict = __VDLType_types_v_io_v23_syncbase_nosql_Conflict_gen()
	}
	if __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow == nil {
		__VDLType_types_v_io_v23_syncbase_nosql_ConflictRow = __VDLType_types_v_io_v23_syncbase_nosql_ConflictRow_gen()
	}
	if __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet == nil {
		__VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet = __VDLType_types_v_io_v23_syncbase_nosql_ConflictRowSet_gen()
	}
	if __VDLType_types_v_io_v23_syncbase_nosql_Resolution == nil {
		__VDLType_types_v_io_v23_syncbase_nosql_Resolution = __VDLType_types_v_io_v23_syncbase_nosql_Resolution_gen()
	}
	if __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow == nil {
		__VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow = __VDLType_types_v_io_v23_syncbase_nosql_ResolvedRow_gen()
	}
	if __VDLType_types_v_io_v23_syncbase_nosql_Value == nil {
		__VDLType_types_v_io_v23_syncbase_nosql_Value = __VDLType_types_v_io_v23_syncbase_nosql_Value_gen()
	}
}
