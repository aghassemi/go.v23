// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: db_objects.vdl

package testdata

import (
	// VDL system imports
	"fmt"
	"v.io/v23/vdl"

	// VDL user imports
	"time"
	time_2 "v.io/v23/vdlroot/time"
)

type AddressInfo struct {
	Street string
	City   string
	State  string
	Zip    string
}

func (AddressInfo) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.AddressInfo"`
}) {
}

func (m *AddressInfo) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_AddressInfo == nil || __VDLTypedb_objects0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Street")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Street), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("City")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.City), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("State")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromString(string(m.State), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Zip")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget9.FromString(string(m.Zip), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *AddressInfo) MakeVDLTarget() vdl.Target {
	return nil
}

type CreditAgency int

const (
	CreditAgencyEquifax CreditAgency = iota
	CreditAgencyExperian
	CreditAgencyTransUnion
)

// CreditAgencyAll holds all labels for CreditAgency.
var CreditAgencyAll = [...]CreditAgency{CreditAgencyEquifax, CreditAgencyExperian, CreditAgencyTransUnion}

// CreditAgencyFromString creates a CreditAgency from a string label.
func CreditAgencyFromString(label string) (x CreditAgency, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *CreditAgency) Set(label string) error {
	switch label {
	case "Equifax", "equifax":
		*x = CreditAgencyEquifax
		return nil
	case "Experian", "experian":
		*x = CreditAgencyExperian
		return nil
	case "TransUnion", "transunion":
		*x = CreditAgencyTransUnion
		return nil
	}
	*x = -1
	return fmt.Errorf("unknown label %q in testdata.CreditAgency", label)
}

// String returns the string label of x.
func (x CreditAgency) String() string {
	switch x {
	case CreditAgencyEquifax:
		return "Equifax"
	case CreditAgencyExperian:
		return "Experian"
	case CreditAgencyTransUnion:
		return "TransUnion"
	}
	return ""
}

func (CreditAgency) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.CreditAgency"`
	Enum struct{ Equifax, Experian, TransUnion string }
}) {
}

func (m CreditAgency) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromEnumLabel(m.String(), __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_CreditAgency); err != nil {
		return err
	}
	return nil
}

func (m CreditAgency) MakeVDLTarget() vdl.Target {
	return nil
}

type ExperianRating int

const (
	ExperianRatingGood ExperianRating = iota
	ExperianRatingBad
)

// ExperianRatingAll holds all labels for ExperianRating.
var ExperianRatingAll = [...]ExperianRating{ExperianRatingGood, ExperianRatingBad}

// ExperianRatingFromString creates a ExperianRating from a string label.
func ExperianRatingFromString(label string) (x ExperianRating, err error) {
	err = x.Set(label)
	return
}

// Set assigns label to x.
func (x *ExperianRating) Set(label string) error {
	switch label {
	case "Good", "good":
		*x = ExperianRatingGood
		return nil
	case "Bad", "bad":
		*x = ExperianRatingBad
		return nil
	}
	*x = -1
	return fmt.Errorf("unknown label %q in testdata.ExperianRating", label)
}

// String returns the string label of x.
func (x ExperianRating) String() string {
	switch x {
	case ExperianRatingGood:
		return "Good"
	case ExperianRatingBad:
		return "Bad"
	}
	return ""
}

func (ExperianRating) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.ExperianRating"`
	Enum struct{ Good, Bad string }
}) {
}

func (m ExperianRating) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromEnumLabel(m.String(), __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_ExperianRating); err != nil {
		return err
	}
	return nil
}

func (m ExperianRating) MakeVDLTarget() vdl.Target {
	return nil
}

type EquifaxCreditReport struct {
	Rating byte
}

func (EquifaxCreditReport) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.EquifaxCreditReport"`
}) {
}

func (m *EquifaxCreditReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_EquifaxCreditReport == nil || __VDLTypedb_objects1 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Rating")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromUint(uint64(m.Rating), vdl.ByteType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *EquifaxCreditReport) MakeVDLTarget() vdl.Target {
	return nil
}

type ExperianCreditReport struct {
	Rating ExperianRating
}

func (ExperianCreditReport) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.ExperianCreditReport"`
}) {
}

func (m *ExperianCreditReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_ExperianCreditReport == nil || __VDLTypedb_objects2 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Rating")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Rating.FillVDLTarget(fieldTarget3, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_ExperianRating); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *ExperianCreditReport) MakeVDLTarget() vdl.Target {
	return nil
}

type TransUnionCreditReport struct {
	Rating int16
}

func (TransUnionCreditReport) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.TransUnionCreditReport"`
}) {
}

func (m *TransUnionCreditReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_TransUnionCreditReport == nil || __VDLTypedb_objects3 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Rating")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromInt(int64(m.Rating), vdl.Int16Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *TransUnionCreditReport) MakeVDLTarget() vdl.Target {
	return nil
}

type (
	// AgencyReport represents any single field of the AgencyReport union type.
	AgencyReport interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the AgencyReport union type.
		__VDLReflect(__AgencyReportReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
	}
	// AgencyReportEquifaxReport represents field EquifaxReport of the AgencyReport union type.
	AgencyReportEquifaxReport struct{ Value EquifaxCreditReport }
	// AgencyReportExperianReport represents field ExperianReport of the AgencyReport union type.
	AgencyReportExperianReport struct{ Value ExperianCreditReport }
	// AgencyReportTransUnionReport represents field TransUnionReport of the AgencyReport union type.
	AgencyReportTransUnionReport struct{ Value TransUnionCreditReport }
	// __AgencyReportReflect describes the AgencyReport union type.
	__AgencyReportReflect struct {
		Name  string `vdl:"v.io/v23/syncbase/nosql/testdata.AgencyReport"`
		Type  AgencyReport
		Union struct {
			EquifaxReport    AgencyReportEquifaxReport
			ExperianReport   AgencyReportExperianReport
			TransUnionReport AgencyReportTransUnionReport
		}
	}
)

func (x AgencyReportEquifaxReport) Index() int                         { return 0 }
func (x AgencyReportEquifaxReport) Interface() interface{}             { return x.Value }
func (x AgencyReportEquifaxReport) Name() string                       { return "EquifaxReport" }
func (x AgencyReportEquifaxReport) __VDLReflect(__AgencyReportReflect) {}

func (m AgencyReportEquifaxReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_AgencyReport)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("EquifaxReport")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_EquifaxCreditReport); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m AgencyReportEquifaxReport) MakeVDLTarget() vdl.Target {
	return nil
}

func (x AgencyReportExperianReport) Index() int                         { return 1 }
func (x AgencyReportExperianReport) Interface() interface{}             { return x.Value }
func (x AgencyReportExperianReport) Name() string                       { return "ExperianReport" }
func (x AgencyReportExperianReport) __VDLReflect(__AgencyReportReflect) {}

func (m AgencyReportExperianReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_AgencyReport)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("ExperianReport")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_ExperianCreditReport); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m AgencyReportExperianReport) MakeVDLTarget() vdl.Target {
	return nil
}

func (x AgencyReportTransUnionReport) Index() int                         { return 2 }
func (x AgencyReportTransUnionReport) Interface() interface{}             { return x.Value }
func (x AgencyReportTransUnionReport) Name() string                       { return "TransUnionReport" }
func (x AgencyReportTransUnionReport) __VDLReflect(__AgencyReportReflect) {}

func (m AgencyReportTransUnionReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_AgencyReport)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("TransUnionReport")
	if err != nil {
		return err
	}

	if err := m.Value.FillVDLTarget(fieldTarget3, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_TransUnionCreditReport); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m AgencyReportTransUnionReport) MakeVDLTarget() vdl.Target {
	return nil
}

type CreditReport struct {
	Agency CreditAgency
	Report AgencyReport
}

func (CreditReport) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.CreditReport"`
}) {
}

func (m *CreditReport) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_CreditReport == nil || __VDLTypedb_objects4 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Agency")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Agency.FillVDLTarget(fieldTarget3, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_CreditAgency); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Report")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		unionValue6 := m.Report
		if unionValue6 == nil {
			unionValue6 = AgencyReportEquifaxReport{}
		}
		if err := unionValue6.FillVDLTarget(fieldTarget5, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_AgencyReport); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *CreditReport) MakeVDLTarget() vdl.Target {
	return nil
}

type Customer struct {
	Name    string
	Id      int64
	Active  bool
	Address AddressInfo
	Credit  CreditReport
}

func (Customer) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.Customer"`
}) {
}

func (m *Customer) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Customer == nil || __VDLTypedb_objects5 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Id")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromInt(int64(m.Id), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Active")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromBool(bool(m.Active), vdl.BoolType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Address")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Address.FillVDLTarget(fieldTarget9, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_AddressInfo); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	keyTarget10, fieldTarget11, err := fieldsTarget1.StartField("Credit")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Credit.FillVDLTarget(fieldTarget11, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_CreditReport); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget10, fieldTarget11); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Customer) MakeVDLTarget() vdl.Target {
	return nil
}

type Invoice struct {
	CustId      int64
	InvoiceNum  int64
	InvoiceDate time.Time
	Amount      int64
	ShipTo      AddressInfo
}

func (Invoice) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.Invoice"`
}) {
}

func (m *Invoice) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	__VDLEnsureNativeBuilt_db_objects()
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("CustId")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromInt(int64(m.CustId), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("InvoiceNum")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromInt(int64(m.InvoiceNum), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	var wireValue6 time_2.Time
	if err := time_2.TimeFromNative(&wireValue6, m.InvoiceDate); err != nil {
		return err
	}

	keyTarget7, fieldTarget8, err := fieldsTarget1.StartField("InvoiceDate")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := wireValue6.FillVDLTarget(fieldTarget8, __VDLType_db_objects_time_Time); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget7, fieldTarget8); err != nil {
			return err
		}
	}
	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("Amount")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget10.FromInt(int64(m.Amount), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	keyTarget11, fieldTarget12, err := fieldsTarget1.StartField("ShipTo")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.ShipTo.FillVDLTarget(fieldTarget12, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_AddressInfo); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget11, fieldTarget12); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Invoice) MakeVDLTarget() vdl.Target {
	return nil
}

type Numbers struct {
	B    byte
	Ui16 uint16
	Ui32 uint32
	Ui64 uint64
	I16  int16
	I32  int32
	I64  int64
	F32  float32
	F64  float64
	C64  complex64
	C128 complex128
}

func (Numbers) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.Numbers"`
}) {
}

func (m *Numbers) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Numbers == nil || __VDLTypedb_objects7 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("B")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromUint(uint64(m.B), vdl.ByteType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Ui16")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromUint(uint64(m.Ui16), vdl.Uint16Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Ui32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromUint(uint64(m.Ui32), vdl.Uint32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Ui64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget9.FromUint(uint64(m.Ui64), vdl.Uint64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	keyTarget10, fieldTarget11, err := fieldsTarget1.StartField("I16")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget11.FromInt(int64(m.I16), vdl.Int16Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget10, fieldTarget11); err != nil {
			return err
		}
	}
	keyTarget12, fieldTarget13, err := fieldsTarget1.StartField("I32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget13.FromInt(int64(m.I32), vdl.Int32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget12, fieldTarget13); err != nil {
			return err
		}
	}
	keyTarget14, fieldTarget15, err := fieldsTarget1.StartField("I64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget15.FromInt(int64(m.I64), vdl.Int64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget14, fieldTarget15); err != nil {
			return err
		}
	}
	keyTarget16, fieldTarget17, err := fieldsTarget1.StartField("F32")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget17.FromFloat(float64(m.F32), vdl.Float32Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget16, fieldTarget17); err != nil {
			return err
		}
	}
	keyTarget18, fieldTarget19, err := fieldsTarget1.StartField("F64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget19.FromFloat(float64(m.F64), vdl.Float64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget18, fieldTarget19); err != nil {
			return err
		}
	}
	keyTarget20, fieldTarget21, err := fieldsTarget1.StartField("C64")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget21.FromComplex(complex128(m.C64), vdl.Complex64Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget20, fieldTarget21); err != nil {
			return err
		}
	}
	keyTarget22, fieldTarget23, err := fieldsTarget1.StartField("C128")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget23.FromComplex(complex128(m.C128), vdl.Complex128Type); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget22, fieldTarget23); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Numbers) MakeVDLTarget() vdl.Target {
	return nil
}

type FooType struct {
	Bar BarType
}

func (FooType) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.FooType"`
}) {
}

func (m *FooType) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_FooType == nil || __VDLTypedb_objects8 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Bar")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Bar.FillVDLTarget(fieldTarget3, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_BarType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *FooType) MakeVDLTarget() vdl.Target {
	return nil
}

type BarType struct {
	Baz BazType
}

func (BarType) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.BarType"`
}) {
}

func (m *BarType) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_BarType == nil || __VDLTypedb_objects9 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Baz")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.Baz.FillVDLTarget(fieldTarget3, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_BazType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *BarType) MakeVDLTarget() vdl.Target {
	return nil
}

type (
	// TitleOrValueType represents any single field of the TitleOrValueType union type.
	TitleOrValueType interface {
		// Index returns the field index.
		Index() int
		// Interface returns the field value as an interface.
		Interface() interface{}
		// Name returns the field name.
		Name() string
		// __VDLReflect describes the TitleOrValueType union type.
		__VDLReflect(__TitleOrValueTypeReflect)
		FillVDLTarget(vdl.Target, *vdl.Type) error
	}
	// TitleOrValueTypeTitle represents field Title of the TitleOrValueType union type.
	TitleOrValueTypeTitle struct{ Value string }
	// TitleOrValueTypeValue represents field Value of the TitleOrValueType union type.
	TitleOrValueTypeValue struct{ Value int64 }
	// __TitleOrValueTypeReflect describes the TitleOrValueType union type.
	__TitleOrValueTypeReflect struct {
		Name  string `vdl:"v.io/v23/syncbase/nosql/testdata.TitleOrValueType"`
		Type  TitleOrValueType
		Union struct {
			Title TitleOrValueTypeTitle
			Value TitleOrValueTypeValue
		}
	}
)

func (x TitleOrValueTypeTitle) Index() int                             { return 0 }
func (x TitleOrValueTypeTitle) Interface() interface{}                 { return x.Value }
func (x TitleOrValueTypeTitle) Name() string                           { return "Title" }
func (x TitleOrValueTypeTitle) __VDLReflect(__TitleOrValueTypeReflect) {}

func (m TitleOrValueTypeTitle) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_TitleOrValueType)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Title")
	if err != nil {
		return err
	}
	if err := fieldTarget3.FromString(string(m.Value), vdl.StringType); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m TitleOrValueTypeTitle) MakeVDLTarget() vdl.Target {
	return nil
}

func (x TitleOrValueTypeValue) Index() int                             { return 1 }
func (x TitleOrValueTypeValue) Interface() interface{}                 { return x.Value }
func (x TitleOrValueTypeValue) Name() string                           { return "Value" }
func (x TitleOrValueTypeValue) __VDLReflect(__TitleOrValueTypeReflect) {}

func (m TitleOrValueTypeValue) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	fieldsTarget1, err := t.StartFields(__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_TitleOrValueType)
	if err != nil {
		return err
	}
	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Value")
	if err != nil {
		return err
	}
	if err := fieldTarget3.FromInt(int64(m.Value), vdl.Int64Type); err != nil {
		return err
	}
	if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
		return err
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}

	return nil
}

func (m TitleOrValueTypeValue) MakeVDLTarget() vdl.Target {
	return nil
}

type BazType struct {
	Name         string
	TitleOrValue TitleOrValueType
}

func (BazType) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.BazType"`
}) {
}

func (m *BazType) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_BazType == nil || __VDLTypedb_objects10 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("TitleOrValue")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		unionValue6 := m.TitleOrValue
		if unionValue6 == nil {
			unionValue6 = TitleOrValueTypeTitle{}
		}
		if err := unionValue6.FillVDLTarget(fieldTarget5, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_TitleOrValueType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *BazType) MakeVDLTarget() vdl.Target {
	return nil
}

type ArrayOfFour [4]string

func (ArrayOfFour) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.ArrayOfFour"`
}) {
}

func (m ArrayOfFour) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	listTarget1, err := t.StartList(__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_ArrayOfFour, 4)
	if err != nil {
		return err
	}
	for i, elem3 := range m {
		elemTarget2, err := listTarget1.StartElem(i)
		if err != nil {
			return err
		}
		if err := elemTarget2.FromString(string(elem3), vdl.StringType); err != nil {
			return err
		}
		if err := listTarget1.FinishElem(elemTarget2); err != nil {
			return err
		}
	}
	if err := t.FinishList(listTarget1); err != nil {
		return err
	}
	return nil
}

func (m ArrayOfFour) MakeVDLTarget() vdl.Target {
	return nil
}

type KeyIndexData struct {
	A ArrayOfFour
	L []string
	M map[complex128]string
	S map[string]struct{}
}

func (KeyIndexData) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.KeyIndexData"`
}) {
}

func (m *KeyIndexData) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_KeyIndexData == nil || __VDLTypedb_objects11 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("A")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if err := m.A.FillVDLTarget(fieldTarget3, __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_ArrayOfFour); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("L")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget6, err := fieldTarget5.StartList(__VDLTypedb_objects12, len(m.L))
		if err != nil {
			return err
		}
		for i, elem8 := range m.L {
			elemTarget7, err := listTarget6.StartElem(i)
			if err != nil {
				return err
			}
			if err := elemTarget7.FromString(string(elem8), vdl.StringType); err != nil {
				return err
			}
			if err := listTarget6.FinishElem(elemTarget7); err != nil {
				return err
			}
		}
		if err := fieldTarget5.FinishList(listTarget6); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget9, fieldTarget10, err := fieldsTarget1.StartField("M")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		mapTarget11, err := fieldTarget10.StartMap(__VDLTypedb_objects13, len(m.M))
		if err != nil {
			return err
		}
		for key13, value15 := range m.M {
			keyTarget12, err := mapTarget11.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget12.FromComplex(complex128(key13), vdl.Complex128Type); err != nil {
				return err
			}
			valueTarget14, err := mapTarget11.FinishKeyStartField(keyTarget12)
			if err != nil {
				return err
			}
			if err := valueTarget14.FromString(string(value15), vdl.StringType); err != nil {
				return err
			}
			if err := mapTarget11.FinishField(keyTarget12, valueTarget14); err != nil {
				return err
			}
		}
		if err := fieldTarget10.FinishMap(mapTarget11); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget9, fieldTarget10); err != nil {
			return err
		}
	}
	keyTarget16, fieldTarget17, err := fieldsTarget1.StartField("S")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		setTarget18, err := fieldTarget17.StartSet(__VDLTypedb_objects14, len(m.S))
		if err != nil {
			return err
		}
		for key20 := range m.S {
			keyTarget19, err := setTarget18.StartKey()
			if err != nil {
				return err
			}
			if err := keyTarget19.FromString(string(key20), vdl.StringType); err != nil {
				return err
			}
			if err := setTarget18.FinishKey(keyTarget19); err != nil {
				return err
			}
		}
		if err := fieldTarget17.FinishSet(setTarget18); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget16, fieldTarget17); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *KeyIndexData) MakeVDLTarget() vdl.Target {
	return nil
}

type BigData struct {
	Key string // A dup of the key stored in the value.
}

func (BigData) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/syncbase/nosql/testdata.BigData"`
}) {
}

func (m *BigData) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_BigData == nil || __VDLTypedb_objects15 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Key")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Key), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *BigData) MakeVDLTarget() vdl.Target {
	return nil
}

func init() {
	vdl.Register((*AddressInfo)(nil))
	vdl.Register((*CreditAgency)(nil))
	vdl.Register((*ExperianRating)(nil))
	vdl.Register((*EquifaxCreditReport)(nil))
	vdl.Register((*ExperianCreditReport)(nil))
	vdl.Register((*TransUnionCreditReport)(nil))
	vdl.Register((*AgencyReport)(nil))
	vdl.Register((*CreditReport)(nil))
	vdl.Register((*Customer)(nil))
	vdl.Register((*Invoice)(nil))
	vdl.Register((*Numbers)(nil))
	vdl.Register((*FooType)(nil))
	vdl.Register((*BarType)(nil))
	vdl.Register((*TitleOrValueType)(nil))
	vdl.Register((*BazType)(nil))
	vdl.Register((*ArrayOfFour)(nil))
	vdl.Register((*KeyIndexData)(nil))
	vdl.Register((*BigData)(nil))
}

var __VDLTypedb_objects0 *vdl.Type = vdl.TypeOf((*AddressInfo)(nil))
var __VDLTypedb_objects9 *vdl.Type = vdl.TypeOf((*BarType)(nil))
var __VDLTypedb_objects10 *vdl.Type = vdl.TypeOf((*BazType)(nil))
var __VDLTypedb_objects15 *vdl.Type = vdl.TypeOf((*BigData)(nil))
var __VDLTypedb_objects4 *vdl.Type = vdl.TypeOf((*CreditReport)(nil))
var __VDLTypedb_objects5 *vdl.Type = vdl.TypeOf((*Customer)(nil))
var __VDLTypedb_objects1 *vdl.Type = vdl.TypeOf((*EquifaxCreditReport)(nil))
var __VDLTypedb_objects2 *vdl.Type = vdl.TypeOf((*ExperianCreditReport)(nil))
var __VDLTypedb_objects8 *vdl.Type = vdl.TypeOf((*FooType)(nil))
var __VDLTypedb_objects6 *vdl.Type

func __VDLTypedb_objects6_gen() *vdl.Type {
	__VDLTypedb_objects6Builder := vdl.TypeBuilder{}

	__VDLTypedb_objects61 := __VDLTypedb_objects6Builder.Optional()
	__VDLTypedb_objects62 := __VDLTypedb_objects6Builder.Struct()
	__VDLTypedb_objects63 := __VDLTypedb_objects6Builder.Named("v.io/v23/syncbase/nosql/testdata.Invoice").AssignBase(__VDLTypedb_objects62)
	__VDLTypedb_objects64 := vdl.Int64Type
	__VDLTypedb_objects62.AppendField("CustId", __VDLTypedb_objects64)
	__VDLTypedb_objects62.AppendField("InvoiceNum", __VDLTypedb_objects64)
	__VDLTypedb_objects65 := __VDLTypedb_objects6Builder.Struct()
	__VDLTypedb_objects66 := __VDLTypedb_objects6Builder.Named("time.Time").AssignBase(__VDLTypedb_objects65)
	__VDLTypedb_objects65.AppendField("Seconds", __VDLTypedb_objects64)
	__VDLTypedb_objects67 := vdl.Int32Type
	__VDLTypedb_objects65.AppendField("Nanos", __VDLTypedb_objects67)
	__VDLTypedb_objects62.AppendField("InvoiceDate", __VDLTypedb_objects66)
	__VDLTypedb_objects62.AppendField("Amount", __VDLTypedb_objects64)
	__VDLTypedb_objects68 := __VDLTypedb_objects6Builder.Struct()
	__VDLTypedb_objects69 := __VDLTypedb_objects6Builder.Named("v.io/v23/syncbase/nosql/testdata.AddressInfo").AssignBase(__VDLTypedb_objects68)
	__VDLTypedb_objects610 := vdl.StringType
	__VDLTypedb_objects68.AppendField("Street", __VDLTypedb_objects610)
	__VDLTypedb_objects68.AppendField("City", __VDLTypedb_objects610)
	__VDLTypedb_objects68.AppendField("State", __VDLTypedb_objects610)
	__VDLTypedb_objects68.AppendField("Zip", __VDLTypedb_objects610)
	__VDLTypedb_objects62.AppendField("ShipTo", __VDLTypedb_objects69)
	__VDLTypedb_objects61.AssignElem(__VDLTypedb_objects63)
	__VDLTypedb_objects6Builder.Build()
	__VDLTypedb_objects6v, err := __VDLTypedb_objects61.Built()
	if err != nil {
		panic(err)
	}
	return __VDLTypedb_objects6v
}
func init() {
	__VDLTypedb_objects6 = __VDLTypedb_objects6_gen()
}

var __VDLTypedb_objects11 *vdl.Type = vdl.TypeOf((*KeyIndexData)(nil))
var __VDLTypedb_objects7 *vdl.Type = vdl.TypeOf((*Numbers)(nil))
var __VDLTypedb_objects3 *vdl.Type = vdl.TypeOf((*TransUnionCreditReport)(nil))
var __VDLTypedb_objects12 *vdl.Type = vdl.TypeOf([]string(nil))
var __VDLTypedb_objects13 *vdl.Type = vdl.TypeOf(map[complex128]string(nil))
var __VDLTypedb_objects14 *vdl.Type = vdl.TypeOf(map[string]struct{}(nil))
var __VDLType_db_objects_time_Time *vdl.Type

func __VDLType_db_objects_time_Time_gen() *vdl.Type {
	__VDLType_db_objects_time_TimeBuilder := vdl.TypeBuilder{}

	__VDLType_db_objects_time_Time1 := __VDLType_db_objects_time_TimeBuilder.Struct()
	__VDLType_db_objects_time_Time2 := __VDLType_db_objects_time_TimeBuilder.Named("time.Time").AssignBase(__VDLType_db_objects_time_Time1)
	__VDLType_db_objects_time_Time3 := vdl.Int64Type
	__VDLType_db_objects_time_Time1.AppendField("Seconds", __VDLType_db_objects_time_Time3)
	__VDLType_db_objects_time_Time4 := vdl.Int32Type
	__VDLType_db_objects_time_Time1.AppendField("Nanos", __VDLType_db_objects_time_Time4)
	__VDLType_db_objects_time_TimeBuilder.Build()
	__VDLType_db_objects_time_Timev, err := __VDLType_db_objects_time_Time2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_db_objects_time_Timev
}
func init() {
	__VDLType_db_objects_time_Time = __VDLType_db_objects_time_Time_gen()
}

var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_AddressInfo *vdl.Type = vdl.TypeOf(AddressInfo{})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_AgencyReport *vdl.Type = vdl.TypeOf(AgencyReport(AgencyReportEquifaxReport{EquifaxCreditReport{}}))
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_ArrayOfFour *vdl.Type = vdl.TypeOf(ArrayOfFour{})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_BarType *vdl.Type = vdl.TypeOf(BarType{
	Baz: BazType{
		TitleOrValue: TitleOrValueTypeTitle{""},
	},
})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_BazType *vdl.Type = vdl.TypeOf(BazType{
	TitleOrValue: TitleOrValueTypeTitle{""},
})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_BigData *vdl.Type = vdl.TypeOf(BigData{})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_CreditAgency *vdl.Type = vdl.TypeOf(CreditAgencyEquifax)
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_CreditReport *vdl.Type = vdl.TypeOf(CreditReport{
	Report: AgencyReportEquifaxReport{EquifaxCreditReport{}},
})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Customer *vdl.Type = vdl.TypeOf(Customer{
	Credit: CreditReport{
		Report: AgencyReportEquifaxReport{EquifaxCreditReport{}},
	},
})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_EquifaxCreditReport *vdl.Type = vdl.TypeOf(EquifaxCreditReport{})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_ExperianCreditReport *vdl.Type = vdl.TypeOf(ExperianCreditReport{})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_ExperianRating *vdl.Type = vdl.TypeOf(ExperianRatingGood)
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_FooType *vdl.Type = vdl.TypeOf(FooType{
	Bar: BarType{
		Baz: BazType{
			TitleOrValue: TitleOrValueTypeTitle{""},
		},
	},
})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice *vdl.Type

func __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice_gen() *vdl.Type {
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_InvoiceBuilder := vdl.TypeBuilder{}

	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice1 := __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_InvoiceBuilder.Struct()
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice2 := __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_InvoiceBuilder.Named("v.io/v23/syncbase/nosql/testdata.Invoice").AssignBase(__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice1)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice3 := vdl.Int64Type
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice1.AppendField("CustId", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice3)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice1.AppendField("InvoiceNum", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice3)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice4 := __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_InvoiceBuilder.Struct()
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice5 := __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_InvoiceBuilder.Named("time.Time").AssignBase(__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice4)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice4.AppendField("Seconds", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice3)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice6 := vdl.Int32Type
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice4.AppendField("Nanos", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice6)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice1.AppendField("InvoiceDate", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice5)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice1.AppendField("Amount", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice3)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice7 := __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_InvoiceBuilder.Struct()
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice8 := __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_InvoiceBuilder.Named("v.io/v23/syncbase/nosql/testdata.AddressInfo").AssignBase(__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice7)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice9 := vdl.StringType
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice7.AppendField("Street", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice9)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice7.AppendField("City", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice9)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice7.AppendField("State", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice9)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice7.AppendField("Zip", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice9)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice1.AppendField("ShipTo", __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice8)
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_InvoiceBuilder.Build()
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoicev, err := __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice2.Built()
	if err != nil {
		panic(err)
	}
	return __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoicev
}
func init() {
	__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice = __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice_gen()
}

var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_KeyIndexData *vdl.Type = vdl.TypeOf(KeyIndexData{})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Numbers *vdl.Type = vdl.TypeOf(Numbers{})
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_TitleOrValueType *vdl.Type = vdl.TypeOf(TitleOrValueType(TitleOrValueTypeTitle{""}))
var __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_TransUnionCreditReport *vdl.Type = vdl.TypeOf(TransUnionCreditReport{})

func __VDLEnsureNativeBuilt_db_objects() {
	if __VDLTypedb_objects6 == nil {
		__VDLTypedb_objects6 = __VDLTypedb_objects6_gen()
	}
	if __VDLType_db_objects_time_Time == nil {
		__VDLType_db_objects_time_Time = __VDLType_db_objects_time_Time_gen()
	}
	if __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice == nil {
		__VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice = __VDLType_db_objects_v_io_v23_syncbase_nosql_testdata_Invoice_gen()
	}
}
