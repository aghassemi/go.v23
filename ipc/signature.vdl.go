// This file was auto-generated by the veyron vdl tool.
// Source: signature.vdl

package ipc

import (
	"veyron.io/veyron/veyron2/wiretype"

	// The non-user imports are prefixed with "__" to prevent collisions.
	__vdl "veyron.io/veyron/veyron2/vdl"
	__vdlutil "veyron.io/veyron/veyron2/vdl/vdlutil"
)

// InterfaceSig describes the signature of an interface.
type InterfaceSig struct {
	Name    string
	PkgPath string
	Doc     string
	Embeds  []EmbedSig  // No special ordering.
	Methods []MethodSig // Ordered by method name.
}

func (InterfaceSig) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/ipc.InterfaceSig"
}) {
}

// EmbedSig describes the signature of an embedded interface.
type EmbedSig struct {
	Name    string
	PkgPath string
	Doc     string
}

func (EmbedSig) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/ipc.EmbedSig"
}) {
}

// MethodSig describes the signature of an interface method.
type MethodSig struct {
	Name    string
	Doc     string
	InArgs  []ArgSig // Input arguments
	OutArgs []ArgSig // Output arguments
	// TODO(toddw): Remove Has{In,Out}StreamHACK when optional is available.
	InStreamHACK     ArgSig          // Input stream
	OutStreamHACK    ArgSig          // Output stream
	HasInStreamHACK  bool            // Does InStreamHack contain valid data?
	HasOutStreamHACK bool            // Does OutStreamHack contain valid data?
	Tags             []__vdlutil.Any // Method tags
}

func (MethodSig) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/ipc.MethodSig"
}) {
}

// ArgSig describes the signature of a single argument.
type ArgSig struct {
	Name string
	Doc  string
	Type *__vdl.Type // Type of the argument.
}

func (ArgSig) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/ipc.ArgSig"
}) {
}

// ServiceSignature represents the signature of the service. This includes type information needed
// to resolve the method argument types.
// TODO(bprosnitz) Rename this and move it to wiretype.
type ServiceSignature struct {
	TypeDefs []__vdlutil.Any // A slice of wiretype structures form the type definition.
	Methods  map[string]MethodSignature
}

func (ServiceSignature) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/ipc.ServiceSignature"
}) {
}

// MethodSignature represents the structure for passing around method
// signatures. This is usually sent in a ServiceSignature.
type MethodSignature struct {
	InArgs    []MethodArgument // Positional Argument information.
	OutArgs   []MethodArgument
	InStream  wiretype.TypeID // Type of streaming arguments (or TypeIDInvalid if none). The type IDs here use the definitions in ServiceSigature.TypeDefs.
	OutStream wiretype.TypeID
}

func (MethodSignature) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/ipc.MethodSignature"
}) {
}

// MethodArgument represents the argument to a method in a method signature.
type MethodArgument struct {
	Name string // Argument name
	Type wiretype.TypeID
}

func (MethodArgument) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/ipc.MethodArgument"
}) {
}

func init() {
	__vdl.Register(InterfaceSig{})
	__vdl.Register(EmbedSig{})
	__vdl.Register(MethodSig{})
	__vdl.Register(ArgSig{})
	__vdl.Register(ServiceSignature{})
	__vdl.Register(MethodSignature{})
	__vdl.Register(MethodArgument{})
}
