package storage

// This file exists because these types are shared between the client library
// (veyron2/storage) and the network API (veyron2/services/store).  We expect
// most clients to use the library, and we don't want them to have to do
// two imports.

// ID is the type of keys for the key/value store.  The key is a numeric
// identifier that is globally unique, meaning that if two stores contain an
// entry with the same ID, then the entries represent the same thing.  To
// ensure uniqueness, stores create unique IDs that have never before been used
// as identifier.  The ID is large enough that collisions are extremely
// unlikely.
type ID [16]byte

// Kind makes it possible to tell the difference between Dirs and Objects.
type Kind int16

const (
  DirKind = Kind(0)
  ObjectKind = Kind(1)
)

// Stat provides information about an entry in the store.
//
// TODO(jyh): Specify versioning more precisely.
type Stat struct {
	// Kind makes it possible to distinguish between Dirs and Objects.
	Kind Kind

	// ID is the unique identifier of the entry.
	ID ID

	// MTimeNS is the last modification time in Unix nanoseconds (see time.UnixNano).
	//
	// TODO(jyh): Use Veyron Time when it gets implemented.
	MTimeNS int64

	// Attrs are the attributes associated with the entry.
	Attrs []any
}

// Entry represents a value at some point in time in the store.
type Entry struct {
	// Stat is the entry's metadata.
	Stat Stat

	// Value is the value of the entry.
	Value any
}
