// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: uniqueid

package uniqueid

import (
	"fmt"
	"v.io/v23/vdl"
)

// An Id is a likely globally unique identifier.
type Id [16]byte

func (Id) __VDLReflect(struct {
	Name string `vdl:"v.io/v23/uniqueid.Id"`
}) {
}

func (m *Id) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {
	if err := t.FromBytes([]byte((*m)[:]), __VDLType_v_io_v23_uniqueid_Id); err != nil {
		return err
	}
	return nil
}

func (m *Id) MakeVDLTarget() vdl.Target {
	return &IdTarget{Value: m}
}

type IdTarget struct {
	Value *Id
	vdl.TargetBase
}

func (t *IdTarget) FromBytes(src []byte, tt *vdl.Type) error {
	if !vdl.Compatible(tt, __VDLType_v_io_v23_uniqueid_Id) {
		return fmt.Errorf("type %v incompatible with %v", tt, __VDLType_v_io_v23_uniqueid_Id)
	}
	copy((*t.Value)[:], src)

	return nil
}

func init() {
	vdl.Register((*Id)(nil))
}

var __VDLType_v_io_v23_uniqueid_Id *vdl.Type = vdl.TypeOf(Id{})

func __VDLEnsureNativeBuilt() {
}
