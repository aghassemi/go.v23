// This file was auto-generated by the veyron vdl tool.
// Source: wiretype.vdl

package wiretype

// TypeID serves as a reference to a type definition.  The TypeID is only unique
// within a single Encoder / Decoder stream; different streams may use different
// TypeIDs to represent the same types.
type TypeID uint64

// NamedPrimitiveType adds name and tag meta-information to a primitive type.
type NamedPrimitiveType struct {
	Type TypeID
	Name string
	Tags []string
}

// SliceType represents a variable-length sequence of Elem values.
type SliceType struct {
	Elem TypeID
	Name string
	Tags []string
}

// ArrayType represents a fixed-length sequence of Elem values.
type ArrayType struct {
	Elem TypeID
	Len  uint64
	Name string
	Tags []string
}

// MapType represents an unordered collection of Key,Elem values, where each Key
// is unique.  Go has a single canonical map, but other languages may use the
// tag to indicate the representation; e.g. C++ may use tags "rbtree" and
// "hashmap" to indicate std::map and std::unordered_map respectively.
type MapType struct {
	Key  TypeID
	Elem TypeID
	Name string
	Tags []string
}

// FieldType represents a single possibly-named field in a struct.
type FieldType struct {
	Type TypeID
	Name string
}

// StructType represents a struct; a sequence of fields.
type StructType struct {
	Fields []FieldType
	Name   string
	Tags   []string
}

// WARNING: DEPRECATED
// TODO(bprosnitz) Remove this.
// PtrType represents a pointer; a value referencing an underlying Elem value.
type PtrType struct {
	Elem TypeID
	Name string
	Tags []string
}
