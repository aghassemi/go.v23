package vom2

import (
	"io"
)

// Decoder manages the receipt and unmarshaling of typed values from the other
// side of a connection.
type Decoder struct {
	reader io.Reader
}

// NewDecoder returns a new Decoder that reads from the given reader.  The
// Decoder understands all formats generated by the Encoder.
func NewDecoder(r io.Reader) *Decoder {
	return nil
}

// Decode reads the next value from the reader and stores it in value v.
// The type of v need not exactly match the type of the originally encoded
// value; decoding succeeds as long as the values are compatible.
//
// Some types are special-cased, recursively throughout v:
//   reflect.Value - Decode into v, which must be settable.
//   *val.Value    - Decode into v.
//   *RawValue     - Store raw (uninterpreted) bytes in v.
//
// Decoding into a RawValue captures the value in a raw form, which may be
// subsequently passed to an Encoder for transcoding.
//
// Decode(nil) always returns an error.  Use Ignore() to ignore the next value.
func (d *Decoder) Decode(v interface{}) error {
	return nil
}

// Ignore() causes the Decoder to ignore the next value from the reader.
func (d *Decoder) Ignore() error {
	return nil
}
