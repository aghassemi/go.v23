// This is the input file for VOM test data, in the VDL config file format.  The
// purpose of this file is to make it easy to add VOM test cases for each
// generated language.
//
// In order to add new test cases, simply add new values to the list below.
// Test types are defined in the vomtype.vdl file in this directory; they can't
// appear in this file since they're not allowed in VDL config files.
//
// To re-generate the tests:
// 1) veyron go install veyron2/vdl/vdl veyron2/vom2/vomtestgen
// 2) veyron run vomtestgen
// 3) veyron run vdl generate veyron2/vom2/...
//
// Running "vomtestgen" against this file produces the vomdata.vdl file, and
// running "vdl generate" against the resulting package produces the VOM test
// data in each generated language.
config = x

import (
	t "veyron.io/veyron/veyron2/vom2/testdata"
)

const x = []any{
	// Values of simple unnamed types.
	bool(true), bool(false),
	string(""), string("abc"),
	[]byte(""), []byte("def"),
	byte(0), byte(8),
	uint16(0), uint16(16),
	uint32(0), uint32(32),
	uint64(0), uint64(64),
	int16(0), int16(16), int16(-16),
	int32(0), int32(32), int32(-32),
	int64(0), int64(64), int64(-64),
	float32(0), float32(32.5), float32(-32.5),
	float64(0), float64(64.5), float64(-64.5),
	complex64(0), complex64(64.5+64.5i), complex64(64.5-64.5i),
	complex128(0), complex128(128.5+128.5i), complex128(128.5-128.5i),

	// Values of simple named types.
	t.NBool(true), t.NBool(false),
	t.NString(""), t.NString("abc"),
	t.NByteSlice(""), t.NByteSlice("def"),
	t.NByte(0), t.NByte(8),
	t.NUint16(0), t.NUint16(16),
	t.NUint32(0), t.NUint32(32),
	t.NUint64(0), t.NUint64(64),
	t.NInt16(0), t.NInt16(16), t.NInt16(-16),
	t.NInt32(0), t.NInt32(32), t.NInt32(-32),
	t.NInt64(0), t.NInt64(64), t.NInt64(-64),
	t.NFloat32(0), t.NFloat32(32.5), t.NFloat32(-32.5),
	t.NFloat64(0), t.NFloat64(64.5), t.NFloat64(-64.5),
	t.NComplex64(0), t.NComplex64(64.5+64.5i), t.NComplex64(64.5-64.5i),
	t.NComplex128(0), t.NComplex128(128.5+128.5i), t.NComplex128(128.5-128.5i),

	// Values of composite types.
	//
	// TODO(toddw): Add more than 1 entry to the set and map values, after
	// accounting for possible ordering differences.
	[2]uint64{1, 2}, t.NArray2Uint64{1, 2},
	[]uint64{1, 2}, t.NListUint64{1, 2},
	set[uint64]{1}, t.NSetUint64{1},
	map[uint64]string{1:"abc"}, t.NMapUint64String{1:"abc"},
	t.NStruct{A: true, B: "abc", C: 123 },

	// Values of special types.
	// TODO(toddw): Add tests for Nilable, TypeVal, embedded Any, etc.
	t.NEnum.A, t.NEnum.B, t.NEnum.C,
	t.NOneOf(true), t.NOneOf(false),
	t.NOneOf(""), t.NOneOf("abc"),
	t.NOneOf(int64(0)), t.NOneOf(int64(123)), t.NOneOf(int64(-123)),
}
