// This file was auto-generated by the veyron vdl tool.
// Source: types.vdl

package vtrace

import (
	"veyron.io/veyron/veyron2/uniqueid"

	// The non-user imports are prefixed with "__" to prevent collisions.
	__vdl "veyron.io/veyron/veyron2/vdl"
)

type TraceRecord struct {
	ID    uniqueid.ID
	Spans []SpanRecord
}

func (TraceRecord) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/vtrace.TraceRecord"
}) {
}

// An Annotation represents data that is relevant at a specific moment.
// They can be attached to spans to add useful debugging information.
type Annotation struct {
	// When the annotation was added in nanoseconds since the epoch.
	// TODO(mattr): This should be a time type.
	When int64
	// The annotation message.
	// TODO(mattr): Allow richer annotations.
	Message string
}

func (Annotation) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/vtrace.Annotation"
}) {
}

// A SpanRecord is the wire format for a Span.
type SpanRecord struct {
	ID     uniqueid.ID // The ID of the Span.
	Parent uniqueid.ID // The ID of this Span's parent.
	Name   string      // The Name of this span.
	// TODO(mattr): These should both be time types.
	Start int64 // The start time of this span in ns since the epoch.
	End   int64 // The end time of this span in ns since the epoch.
	// A series of annotations.
	// TODO(mattr): Allow richer annotations.
	Annotations []Annotation
}

func (SpanRecord) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/vtrace.SpanRecord"
}) {
}

// TraceMethod specifies the mechanism by which this trace's data should
// be collected (if it is to be collected at all).
// TODO(mattr): This should be an enum or perhaps flags.
type TraceMethod int32

func (TraceMethod) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/vtrace.TraceMethod"
}) {
}

// Request is the object that carries trace informtion between processes.
type Request struct {
	SpanID  uniqueid.ID // The ID of the span that originated the RPC call.
	TraceID uniqueid.ID // The ID of the trace this call is a part of.
	Method  TraceMethod // The method of collection for the trace.
}

func (Request) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/vtrace.Request"
}) {
}

type Response struct {
	// Method is method of collection for the trace.
	// Note that a client will start collecting trace data if the server
	// responds with a non-None trace method, even if it was not previously collecting.
	Method TraceMethod
	// Trace is collected trace data.  This may be empty.
	// TODO(mattr): This should be optional if we support that feature.
	Trace TraceRecord
}

func (Response) __VDLReflect(struct {
	Name string "veyron.io/veyron/veyron2/vtrace.Response"
}) {
}

func init() {
	__vdl.Register(TraceRecord{})
	__vdl.Register(Annotation{})
	__vdl.Register(SpanRecord{})
	__vdl.Register(TraceMethod(0))
	__vdl.Register(Request{})
	__vdl.Register(Response{})
}

// None means that the trace should not be collected.
const None = TraceMethod(0)

// InMemory means that the trace data should be collected
// in memory and shipped back with the RPC Response.
const InMemory = TraceMethod(1)
