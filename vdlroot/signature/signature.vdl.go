// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: signature.vdl

// Package signature defines types representing interface and method signatures.
package signature

import (
	// VDL system imports
	"v.io/v23/vdl"
)

// Interface describes the signature of an interface.
type Interface struct {
	Name    string
	PkgPath string
	Doc     string
	Embeds  []Embed  // No special ordering.
	Methods []Method // Ordered by method name.
}

func (Interface) __VDLReflect(struct {
	Name string `vdl:"signature.Interface"`
}) {
}

func (m *Interface) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_signature_signature_Interface == nil || __VDLTypesignature0 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("PkgPath")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.PkgPath), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Doc")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromString(string(m.Doc), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget8, fieldTarget9, err := fieldsTarget1.StartField("Embeds")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget10, err := fieldTarget9.StartList(__VDLTypesignature1, len(m.Embeds))
		if err != nil {
			return err
		}
		for i, elem12 := range m.Embeds {
			elemTarget11, err := listTarget10.StartElem(i)
			if err != nil {
				return err
			}

			if err := elem12.FillVDLTarget(elemTarget11, __VDLType_signature_signature_Embed); err != nil {
				return err
			}
			if err := listTarget10.FinishElem(elemTarget11); err != nil {
				return err
			}
		}
		if err := fieldTarget9.FinishList(listTarget10); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget8, fieldTarget9); err != nil {
			return err
		}
	}
	keyTarget13, fieldTarget14, err := fieldsTarget1.StartField("Methods")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget15, err := fieldTarget14.StartList(__VDLTypesignature2, len(m.Methods))
		if err != nil {
			return err
		}
		for i, elem17 := range m.Methods {
			elemTarget16, err := listTarget15.StartElem(i)
			if err != nil {
				return err
			}

			if err := elem17.FillVDLTarget(elemTarget16, __VDLType_signature_signature_Method); err != nil {
				return err
			}
			if err := listTarget15.FinishElem(elemTarget16); err != nil {
				return err
			}
		}
		if err := fieldTarget14.FinishList(listTarget15); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget13, fieldTarget14); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Interface) MakeVDLTarget() vdl.Target {
	return nil
}

// Embed describes the signature of an embedded interface.
type Embed struct {
	Name    string
	PkgPath string
	Doc     string
}

func (Embed) __VDLReflect(struct {
	Name string `vdl:"signature.Embed"`
}) {
}

func (m *Embed) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_signature_signature_Embed == nil || __VDLTypesignature3 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("PkgPath")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.PkgPath), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Doc")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget7.FromString(string(m.Doc), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Embed) MakeVDLTarget() vdl.Target {
	return nil
}

// Method describes the signature of an interface method.
type Method struct {
	Name      string
	Doc       string
	InArgs    []Arg        // Input arguments
	OutArgs   []Arg        // Output arguments
	InStream  *Arg         // Input stream (optional)
	OutStream *Arg         // Output stream (optional)
	Tags      []*vdl.Value // Method tags
}

func (Method) __VDLReflect(struct {
	Name string `vdl:"signature.Method"`
}) {
}

func (m *Method) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_signature_signature_Method == nil || __VDLTypesignature4 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Doc")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.Doc), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("InArgs")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget8, err := fieldTarget7.StartList(__VDLTypesignature5, len(m.InArgs))
		if err != nil {
			return err
		}
		for i, elem10 := range m.InArgs {
			elemTarget9, err := listTarget8.StartElem(i)
			if err != nil {
				return err
			}

			if err := elem10.FillVDLTarget(elemTarget9, __VDLType_signature_signature_Arg); err != nil {
				return err
			}
			if err := listTarget8.FinishElem(elemTarget9); err != nil {
				return err
			}
		}
		if err := fieldTarget7.FinishList(listTarget8); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	keyTarget11, fieldTarget12, err := fieldsTarget1.StartField("OutArgs")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget13, err := fieldTarget12.StartList(__VDLTypesignature5, len(m.OutArgs))
		if err != nil {
			return err
		}
		for i, elem15 := range m.OutArgs {
			elemTarget14, err := listTarget13.StartElem(i)
			if err != nil {
				return err
			}

			if err := elem15.FillVDLTarget(elemTarget14, __VDLType_signature_signature_Arg); err != nil {
				return err
			}
			if err := listTarget13.FinishElem(elemTarget14); err != nil {
				return err
			}
		}
		if err := fieldTarget12.FinishList(listTarget13); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget11, fieldTarget12); err != nil {
			return err
		}
	}
	keyTarget16, fieldTarget17, err := fieldsTarget1.StartField("InStream")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if m.InStream == nil {
			if err := fieldTarget17.FromNil(__VDLTypesignature6); err != nil {
				return err
			}
		} else {
			if err := m.InStream.FillVDLTarget(fieldTarget17, __VDLType_signature_signature_Arg); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget16, fieldTarget17); err != nil {
			return err
		}
	}
	keyTarget18, fieldTarget19, err := fieldsTarget1.StartField("OutStream")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		if m.OutStream == nil {
			if err := fieldTarget19.FromNil(__VDLTypesignature6); err != nil {
				return err
			}
		} else {
			if err := m.OutStream.FillVDLTarget(fieldTarget19, __VDLType_signature_signature_Arg); err != nil {
				return err
			}
		}
		if err := fieldsTarget1.FinishField(keyTarget18, fieldTarget19); err != nil {
			return err
		}
	}
	keyTarget20, fieldTarget21, err := fieldsTarget1.StartField("Tags")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {

		listTarget22, err := fieldTarget21.StartList(__VDLTypesignature7, len(m.Tags))
		if err != nil {
			return err
		}
		for i, elem24 := range m.Tags {
			elemTarget23, err := listTarget22.StartElem(i)
			if err != nil {
				return err
			}

			if elem24 == nil {
				if err := elemTarget23.FromNil(vdl.AnyType); err != nil {
					return err
				}
			} else {
				if err := vdl.FromValue(elemTarget23, elem24); err != nil {
					return err
				}
			}
			if err := listTarget22.FinishElem(elemTarget23); err != nil {
				return err
			}
		}
		if err := fieldTarget21.FinishList(listTarget22); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget20, fieldTarget21); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Method) MakeVDLTarget() vdl.Target {
	return nil
}

// Arg describes the signature of a single argument.
type Arg struct {
	Name string
	Doc  string
	Type *vdl.Type // Type of the argument.
}

func (Arg) __VDLReflect(struct {
	Name string `vdl:"signature.Arg"`
}) {
}

func (m *Arg) FillVDLTarget(t vdl.Target, tt *vdl.Type) error {

	if __VDLType_signature_signature_Arg == nil || __VDLTypesignature6 == nil {
		panic("Initialization order error: types generated for FillVDLTarget not initialized. Consider moving caller to an init() block.")
	}
	fieldsTarget1, err := t.StartFields(tt)
	if err != nil {
		return err
	}

	keyTarget2, fieldTarget3, err := fieldsTarget1.StartField("Name")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget3.FromString(string(m.Name), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget2, fieldTarget3); err != nil {
			return err
		}
	}
	keyTarget4, fieldTarget5, err := fieldsTarget1.StartField("Doc")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		if err := fieldTarget5.FromString(string(m.Doc), vdl.StringType); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget4, fieldTarget5); err != nil {
			return err
		}
	}
	keyTarget6, fieldTarget7, err := fieldsTarget1.StartField("Type")
	if err != vdl.ErrFieldNoExist && err != nil {
		return err
	}
	if err != vdl.ErrFieldNoExist {
		typeObjectVal8 := m.Type
		if typeObjectVal8 == nil {
			typeObjectVal8 = vdl.AnyType
		}
		if err := fieldTarget7.FromTypeObject(typeObjectVal8); err != nil {
			return err
		}
		if err := fieldsTarget1.FinishField(keyTarget6, fieldTarget7); err != nil {
			return err
		}
	}
	if err := t.FinishFields(fieldsTarget1); err != nil {
		return err
	}
	return nil
}

func (m *Arg) MakeVDLTarget() vdl.Target {
	return nil
}

func init() {
	vdl.Register((*Interface)(nil))
	vdl.Register((*Embed)(nil))
	vdl.Register((*Method)(nil))
	vdl.Register((*Arg)(nil))
}

var __VDLTypesignature6 *vdl.Type = vdl.TypeOf((*Arg)(nil))
var __VDLTypesignature3 *vdl.Type = vdl.TypeOf((*Embed)(nil))
var __VDLTypesignature0 *vdl.Type = vdl.TypeOf((*Interface)(nil))
var __VDLTypesignature4 *vdl.Type = vdl.TypeOf((*Method)(nil))
var __VDLTypesignature7 *vdl.Type = vdl.TypeOf([]*vdl.Value(nil))
var __VDLTypesignature5 *vdl.Type = vdl.TypeOf([]Arg(nil))
var __VDLTypesignature1 *vdl.Type = vdl.TypeOf([]Embed(nil))
var __VDLTypesignature2 *vdl.Type = vdl.TypeOf([]Method(nil))
var __VDLType_signature_signature_Arg *vdl.Type = vdl.TypeOf(Arg{
	Type: vdl.AnyType,
})
var __VDLType_signature_signature_Embed *vdl.Type = vdl.TypeOf(Embed{})
var __VDLType_signature_signature_Interface *vdl.Type = vdl.TypeOf(Interface{})
var __VDLType_signature_signature_Method *vdl.Type = vdl.TypeOf(Method{})

func __VDLEnsureNativeBuilt_signature() {
}
