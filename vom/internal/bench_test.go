// Copyright 2016 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Do not modify! This file is generated by:
// jiri go generate v.io/v23/vom/internal/gen

package internal

import (
	"errors"
	"testing"
	"time"

	"v.io/v23/rpc"
	"v.io/v23/security"
	"v.io/v23/uniqueid"
	wiretime "v.io/v23/vdlroot/time"
	"v.io/v23/vom"
	"v.io/v23/vtrace"
)

func BenchmarkNumberSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XNumber(2))
}
func BenchmarkNumberRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XNumber(2))
}
func BenchmarkNumberSingleShotDecodeReflect(b *testing.B) {
	var tofill XNumber
	benchmarkSingleShotDecode(b, &tofill, XNumber(2))
}
func BenchmarkNumberRepeatedDecodeReflect(b *testing.B) {
	var tofill XNumber
	benchmarkRepeatedDecode(b, &tofill, XNumber(2))
}
func BenchmarkNumberSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VNumber(2))
}
func BenchmarkNumberRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VNumber(2))
}
func BenchmarkNumberSingleShotDecode(b *testing.B) {
	var tofill VNumber
	benchmarkSingleShotDecode(b, &tofill, VNumber(2))
}
func BenchmarkNumberRepeatedDecode(b *testing.B) {
	var tofill VNumber
	benchmarkRepeatedDecode(b, &tofill, VNumber(2))
}
func BenchmarkSmallStringSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XString("abc"))
}
func BenchmarkSmallStringRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XString("abc"))
}
func BenchmarkSmallStringSingleShotDecodeReflect(b *testing.B) {
	var tofill XString
	benchmarkSingleShotDecode(b, &tofill, XString("abc"))
}
func BenchmarkSmallStringRepeatedDecodeReflect(b *testing.B) {
	var tofill XString
	benchmarkRepeatedDecode(b, &tofill, XString("abc"))
}
func BenchmarkSmallStringSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VString("abc"))
}
func BenchmarkSmallStringRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VString("abc"))
}
func BenchmarkSmallStringSingleShotDecode(b *testing.B) {
	var tofill VString
	benchmarkSingleShotDecode(b, &tofill, VString("abc"))
}
func BenchmarkSmallStringRepeatedDecode(b *testing.B) {
	var tofill VString
	benchmarkRepeatedDecode(b, &tofill, VString("abc"))
}
func BenchmarkLargeStringSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XString(createString(65536)))
}
func BenchmarkLargeStringRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XString(createString(65536)))
}
func BenchmarkLargeStringSingleShotDecodeReflect(b *testing.B) {
	var tofill XString
	benchmarkSingleShotDecode(b, &tofill, XString(createString(65536)))
}
func BenchmarkLargeStringRepeatedDecodeReflect(b *testing.B) {
	var tofill XString
	benchmarkRepeatedDecode(b, &tofill, XString(createString(65536)))
}
func BenchmarkLargeStringSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VString(createString(65536)))
}
func BenchmarkLargeStringRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VString(createString(65536)))
}
func BenchmarkLargeStringSingleShotDecode(b *testing.B) {
	var tofill VString
	benchmarkSingleShotDecode(b, &tofill, VString(createString(65536)))
}
func BenchmarkLargeStringRepeatedDecode(b *testing.B) {
	var tofill VString
	benchmarkRepeatedDecode(b, &tofill, VString(createString(65536)))
}
func BenchmarkEnumSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VEnumA)
}
func BenchmarkEnumRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VEnumA)
}
func BenchmarkEnumSingleShotDecode(b *testing.B) {
	var tofill VEnum
	benchmarkSingleShotDecode(b, &tofill, VEnumA)
}
func BenchmarkEnumRepeatedDecode(b *testing.B) {
	var tofill VEnum
	benchmarkRepeatedDecode(b, &tofill, VEnumA)
}
func BenchmarkSmallByteListSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XByteList{1, 2, 3})
}
func BenchmarkSmallByteListRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XByteList{1, 2, 3})
}
func BenchmarkSmallByteListSingleShotDecodeReflect(b *testing.B) {
	var tofill XByteList
	benchmarkSingleShotDecode(b, &tofill, XByteList{1, 2, 3})
}
func BenchmarkSmallByteListRepeatedDecodeReflect(b *testing.B) {
	var tofill XByteList
	benchmarkRepeatedDecode(b, &tofill, XByteList{1, 2, 3})
}
func BenchmarkSmallByteListSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VByteList{1, 2, 3})
}
func BenchmarkSmallByteListRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VByteList{1, 2, 3})
}
func BenchmarkSmallByteListSingleShotDecode(b *testing.B) {
	var tofill VByteList
	benchmarkSingleShotDecode(b, &tofill, VByteList{1, 2, 3})
}
func BenchmarkSmallByteListRepeatedDecode(b *testing.B) {
	var tofill VByteList
	benchmarkRepeatedDecode(b, &tofill, VByteList{1, 2, 3})
}
func BenchmarkLargeByteListSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XByteList(createByteList(65536)))
}
func BenchmarkLargeByteListRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XByteList(createByteList(65536)))
}
func BenchmarkLargeByteListSingleShotDecodeReflect(b *testing.B) {
	var tofill XByteList
	benchmarkSingleShotDecode(b, &tofill, XByteList(createByteList(65536)))
}
func BenchmarkLargeByteListRepeatedDecodeReflect(b *testing.B) {
	var tofill XByteList
	benchmarkRepeatedDecode(b, &tofill, XByteList(createByteList(65536)))
}
func BenchmarkLargeByteListSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VByteList(createByteList(65536)))
}
func BenchmarkLargeByteListRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VByteList(createByteList(65536)))
}
func BenchmarkLargeByteListSingleShotDecode(b *testing.B) {
	var tofill VByteList
	benchmarkSingleShotDecode(b, &tofill, VByteList(createByteList(65536)))
}
func BenchmarkLargeByteListRepeatedDecode(b *testing.B) {
	var tofill VByteList
	benchmarkRepeatedDecode(b, &tofill, VByteList(createByteList(65536)))
}
func BenchmarkByteArraySingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XByteArray{1, 2, 3})
}
func BenchmarkByteArrayRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XByteArray{1, 2, 3})
}
func BenchmarkByteArraySingleShotDecodeReflect(b *testing.B) {
	var tofill XByteArray
	benchmarkSingleShotDecode(b, &tofill, XByteArray{1, 2, 3})
}
func BenchmarkByteArrayRepeatedDecodeReflect(b *testing.B) {
	var tofill XByteArray
	benchmarkRepeatedDecode(b, &tofill, XByteArray{1, 2, 3})
}
func BenchmarkByteArraySingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VByteArray{1, 2, 3})
}
func BenchmarkByteArrayRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VByteArray{1, 2, 3})
}
func BenchmarkByteArraySingleShotDecode(b *testing.B) {
	var tofill VByteArray
	benchmarkSingleShotDecode(b, &tofill, VByteArray{1, 2, 3})
}
func BenchmarkByteArrayRepeatedDecode(b *testing.B) {
	var tofill VByteArray
	benchmarkRepeatedDecode(b, &tofill, VByteArray{1, 2, 3})
}
func BenchmarkArraySingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XArray{1, 2, 3})
}
func BenchmarkArrayRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XArray{1, 2, 3})
}
func BenchmarkArraySingleShotDecodeReflect(b *testing.B) {
	var tofill XArray
	benchmarkSingleShotDecode(b, &tofill, XArray{1, 2, 3})
}
func BenchmarkArrayRepeatedDecodeReflect(b *testing.B) {
	var tofill XArray
	benchmarkRepeatedDecode(b, &tofill, XArray{1, 2, 3})
}
func BenchmarkArraySingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VArray{1, 2, 3})
}
func BenchmarkArrayRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VArray{1, 2, 3})
}
func BenchmarkArraySingleShotDecode(b *testing.B) {
	var tofill VArray
	benchmarkSingleShotDecode(b, &tofill, VArray{1, 2, 3})
}
func BenchmarkArrayRepeatedDecode(b *testing.B) {
	var tofill VArray
	benchmarkRepeatedDecode(b, &tofill, VArray{1, 2, 3})
}
func BenchmarkSmallListSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XList{1, 2, 3})
}
func BenchmarkSmallListRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XList{1, 2, 3})
}
func BenchmarkSmallListSingleShotDecodeReflect(b *testing.B) {
	var tofill XList
	benchmarkSingleShotDecode(b, &tofill, XList{1, 2, 3})
}
func BenchmarkSmallListRepeatedDecodeReflect(b *testing.B) {
	var tofill XList
	benchmarkRepeatedDecode(b, &tofill, XList{1, 2, 3})
}
func BenchmarkSmallListSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VList{1, 2, 3})
}
func BenchmarkSmallListRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VList{1, 2, 3})
}
func BenchmarkSmallListSingleShotDecode(b *testing.B) {
	var tofill VList
	benchmarkSingleShotDecode(b, &tofill, VList{1, 2, 3})
}
func BenchmarkSmallListRepeatedDecode(b *testing.B) {
	var tofill VList
	benchmarkRepeatedDecode(b, &tofill, VList{1, 2, 3})
}
func BenchmarkLargeListSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XList(createList(65536)))
}
func BenchmarkLargeListRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XList(createList(65536)))
}
func BenchmarkLargeListSingleShotDecodeReflect(b *testing.B) {
	var tofill XList
	benchmarkSingleShotDecode(b, &tofill, XList(createList(65536)))
}
func BenchmarkLargeListRepeatedDecodeReflect(b *testing.B) {
	var tofill XList
	benchmarkRepeatedDecode(b, &tofill, XList(createList(65536)))
}
func BenchmarkLargeListSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VList(createList(65536)))
}
func BenchmarkLargeListRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VList(createList(65536)))
}
func BenchmarkLargeListSingleShotDecode(b *testing.B) {
	var tofill VList
	benchmarkSingleShotDecode(b, &tofill, VList(createList(65536)))
}
func BenchmarkLargeListRepeatedDecode(b *testing.B) {
	var tofill VList
	benchmarkRepeatedDecode(b, &tofill, VList(createList(65536)))
}
func BenchmarkSmallListAnySingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XListAny{vom.RawBytesOf(1), vom.RawBytesOf(2), vom.RawBytesOf(3)})
}
func BenchmarkSmallListAnyRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XListAny{vom.RawBytesOf(1), vom.RawBytesOf(2), vom.RawBytesOf(3)})
}
func BenchmarkSmallListAnySingleShotDecodeReflect(b *testing.B) {
	var tofill XListAny
	benchmarkSingleShotDecode(b, &tofill, XListAny{vom.RawBytesOf(1), vom.RawBytesOf(2), vom.RawBytesOf(3)})
}
func BenchmarkSmallListAnyRepeatedDecodeReflect(b *testing.B) {
	var tofill XListAny
	benchmarkRepeatedDecode(b, &tofill, XListAny{vom.RawBytesOf(1), vom.RawBytesOf(2), vom.RawBytesOf(3)})
}
func BenchmarkSmallListAnySingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VListAny{vom.RawBytesOf(1), vom.RawBytesOf(2), vom.RawBytesOf(3)})
}
func BenchmarkSmallListAnyRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VListAny{vom.RawBytesOf(1), vom.RawBytesOf(2), vom.RawBytesOf(3)})
}
func BenchmarkSmallListAnySingleShotDecode(b *testing.B) {
	var tofill VListAny
	benchmarkSingleShotDecode(b, &tofill, VListAny{vom.RawBytesOf(1), vom.RawBytesOf(2), vom.RawBytesOf(3)})
}
func BenchmarkSmallListAnyRepeatedDecode(b *testing.B) {
	var tofill VListAny
	benchmarkRepeatedDecode(b, &tofill, VListAny{vom.RawBytesOf(1), vom.RawBytesOf(2), vom.RawBytesOf(3)})
}
func BenchmarkLargeListAnySingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XListAny(createListAny(65536)))
}
func BenchmarkLargeListAnyRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XListAny(createListAny(65536)))
}
func BenchmarkLargeListAnySingleShotDecodeReflect(b *testing.B) {
	var tofill XListAny
	benchmarkSingleShotDecode(b, &tofill, XListAny(createListAny(65536)))
}
func BenchmarkLargeListAnyRepeatedDecodeReflect(b *testing.B) {
	var tofill XListAny
	benchmarkRepeatedDecode(b, &tofill, XListAny(createListAny(65536)))
}
func BenchmarkLargeListAnySingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VListAny(createListAny(65536)))
}
func BenchmarkLargeListAnyRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VListAny(createListAny(65536)))
}
func BenchmarkLargeListAnySingleShotDecode(b *testing.B) {
	var tofill VListAny
	benchmarkSingleShotDecode(b, &tofill, VListAny(createListAny(65536)))
}
func BenchmarkLargeListAnyRepeatedDecode(b *testing.B) {
	var tofill VListAny
	benchmarkRepeatedDecode(b, &tofill, VListAny(createListAny(65536)))
}
func BenchmarkSetSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VSet{"A": struct{}{}, "B": struct{}{}, "C": struct{}{}})
}
func BenchmarkSetRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VSet{"A": struct{}{}, "B": struct{}{}, "C": struct{}{}})
}
func BenchmarkSetSingleShotDecode(b *testing.B) {
	var tofill VSet
	benchmarkSingleShotDecode(b, &tofill, VSet{"A": struct{}{}, "B": struct{}{}, "C": struct{}{}})
}
func BenchmarkSetRepeatedDecode(b *testing.B) {
	var tofill VSet
	benchmarkRepeatedDecode(b, &tofill, VSet{"A": struct{}{}, "B": struct{}{}, "C": struct{}{}})
}
func BenchmarkMapSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XMap{"A": true, "B": false, "C": true})
}
func BenchmarkMapRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XMap{"A": true, "B": false, "C": true})
}
func BenchmarkMapSingleShotDecodeReflect(b *testing.B) {
	var tofill XMap
	benchmarkSingleShotDecode(b, &tofill, XMap{"A": true, "B": false, "C": true})
}
func BenchmarkMapRepeatedDecodeReflect(b *testing.B) {
	var tofill XMap
	benchmarkRepeatedDecode(b, &tofill, XMap{"A": true, "B": false, "C": true})
}
func BenchmarkMapSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VMap{"A": true, "B": false, "C": true})
}
func BenchmarkMapRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VMap{"A": true, "B": false, "C": true})
}
func BenchmarkMapSingleShotDecode(b *testing.B) {
	var tofill VMap
	benchmarkSingleShotDecode(b, &tofill, VMap{"A": true, "B": false, "C": true})
}
func BenchmarkMapRepeatedDecode(b *testing.B) {
	var tofill VMap
	benchmarkRepeatedDecode(b, &tofill, VMap{"A": true, "B": false, "C": true})
}
func BenchmarkSmallStructSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, XSmallStruct{1, "A", true})
}
func BenchmarkSmallStructRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, XSmallStruct{1, "A", true})
}
func BenchmarkSmallStructSingleShotDecodeReflect(b *testing.B) {
	var tofill XSmallStruct
	benchmarkSingleShotDecode(b, &tofill, XSmallStruct{1, "A", true})
}
func BenchmarkSmallStructRepeatedDecodeReflect(b *testing.B) {
	var tofill XSmallStruct
	benchmarkRepeatedDecode(b, &tofill, XSmallStruct{1, "A", true})
}
func BenchmarkSmallStructSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VSmallStruct{1, "A", true})
}
func BenchmarkSmallStructRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VSmallStruct{1, "A", true})
}
func BenchmarkSmallStructSingleShotDecode(b *testing.B) {
	var tofill VSmallStruct
	benchmarkSingleShotDecode(b, &tofill, VSmallStruct{1, "A", true})
}
func BenchmarkSmallStructRepeatedDecode(b *testing.B) {
	var tofill VSmallStruct
	benchmarkRepeatedDecode(b, &tofill, VSmallStruct{1, "A", true})
}
func BenchmarkLargeStructSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, VLargeStruct{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50})
}
func BenchmarkLargeStructRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, VLargeStruct{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50})
}
func BenchmarkLargeStructSingleShotDecodeReflect(b *testing.B) {
	var tofill VLargeStruct
	benchmarkSingleShotDecode(b, &tofill, VLargeStruct{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50})
}
func BenchmarkLargeStructRepeatedDecodeReflect(b *testing.B) {
	var tofill VLargeStruct
	benchmarkRepeatedDecode(b, &tofill, VLargeStruct{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50})
}
func BenchmarkLargeStructSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VLargeStruct{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50})
}
func BenchmarkLargeStructRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VLargeStruct{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50})
}
func BenchmarkLargeStructSingleShotDecode(b *testing.B) {
	var tofill VLargeStruct
	benchmarkSingleShotDecode(b, &tofill, VLargeStruct{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50})
}
func BenchmarkLargeStructRepeatedDecode(b *testing.B) {
	var tofill VLargeStruct
	benchmarkRepeatedDecode(b, &tofill, VLargeStruct{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50})
}
func BenchmarkLargeStructZeroFieldsSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, VLargeStruct{})
}
func BenchmarkLargeStructZeroFieldsRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, VLargeStruct{})
}
func BenchmarkLargeStructZeroFieldsSingleShotDecodeReflect(b *testing.B) {
	var tofill VLargeStruct
	benchmarkSingleShotDecode(b, &tofill, VLargeStruct{})
}
func BenchmarkLargeStructZeroFieldsRepeatedDecodeReflect(b *testing.B) {
	var tofill VLargeStruct
	benchmarkRepeatedDecode(b, &tofill, VLargeStruct{})
}
func BenchmarkLargeStructZeroFieldsSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VLargeStruct{})
}
func BenchmarkLargeStructZeroFieldsRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VLargeStruct{})
}
func BenchmarkLargeStructZeroFieldsSingleShotDecode(b *testing.B) {
	var tofill VLargeStruct
	benchmarkSingleShotDecode(b, &tofill, VLargeStruct{})
}
func BenchmarkLargeStructZeroFieldsRepeatedDecode(b *testing.B) {
	var tofill VLargeStruct
	benchmarkRepeatedDecode(b, &tofill, VLargeStruct{})
}
func BenchmarkSmallUnionSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, VSmallUnionA{1})
}
func BenchmarkSmallUnionRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, VSmallUnionA{1})
}
func BenchmarkSmallUnionSingleShotDecode(b *testing.B) {
	var tofill VSmallUnion
	benchmarkSingleShotDecode(b, &tofill, VSmallUnionA{1})
}
func BenchmarkSmallUnionRepeatedDecode(b *testing.B) {
	var tofill VSmallUnion
	benchmarkRepeatedDecode(b, &tofill, VSmallUnionA{1})
}
func BenchmarkTimeSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
}
func BenchmarkTimeRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
}
func BenchmarkTimeSingleShotDecodeReflect(b *testing.B) {
	var tofill time.Time
	benchmarkSingleShotDecode(b, &tofill, time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
}
func BenchmarkTimeRepeatedDecodeReflect(b *testing.B) {
	var tofill time.Time
	benchmarkRepeatedDecode(b, &tofill, time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
}
func BenchmarkBlessingsSingleShotEncodeReflect(b *testing.B) {
	benchmarkSingleShotEncode(b, createTypicalBlessings())
}
func BenchmarkBlessingsRepeatedEncodeReflect(b *testing.B) {
	benchmarkRepeatedEncode(b, createTypicalBlessings())
}
func BenchmarkBlessingsSingleShotDecodeReflect(b *testing.B) {
	var tofill security.Blessings
	benchmarkSingleShotDecode(b, &tofill, createTypicalBlessings())
}
func BenchmarkBlessingsRepeatedDecodeReflect(b *testing.B) {
	var tofill security.Blessings
	benchmarkRepeatedDecode(b, &tofill, createTypicalBlessings())
}
func BenchmarkRpcRequestZeroSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, rpc.Request{})
}
func BenchmarkRpcRequestZeroRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, rpc.Request{})
}
func BenchmarkRpcRequestZeroSingleShotDecode(b *testing.B) {
	var tofill rpc.Request
	benchmarkSingleShotDecode(b, &tofill, rpc.Request{})
}
func BenchmarkRpcRequestZeroRepeatedDecode(b *testing.B) {
	var tofill rpc.Request
	benchmarkRepeatedDecode(b, &tofill, rpc.Request{})
}
func BenchmarkRpcRequestFullSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, rpc.Request{
		Suffix:        "a suffix",
		Method:        "a method",
		NumPosArgs:    23,
		EndStreamArgs: true,
		Deadline: wiretime.Deadline{
			time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC),
		},
		GrantedBlessings: createTypicalBlessings(),
		TraceRequest: vtrace.Request{
			SpanId:   uniqueid.Id{1, 2, 3, 4},
			TraceId:  uniqueid.Id{5, 6, 7, 8},
			Flags:    vtrace.CollectInMemory,
			LogLevel: 3,
		},
		Language: "en-us",
	})
}
func BenchmarkRpcRequestFullRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, rpc.Request{
		Suffix:        "a suffix",
		Method:        "a method",
		NumPosArgs:    23,
		EndStreamArgs: true,
		Deadline: wiretime.Deadline{
			time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC),
		},
		GrantedBlessings: createTypicalBlessings(),
		TraceRequest: vtrace.Request{
			SpanId:   uniqueid.Id{1, 2, 3, 4},
			TraceId:  uniqueid.Id{5, 6, 7, 8},
			Flags:    vtrace.CollectInMemory,
			LogLevel: 3,
		},
		Language: "en-us",
	})
}
func BenchmarkRpcRequestFullSingleShotDecode(b *testing.B) {
	var tofill rpc.Request
	benchmarkSingleShotDecode(b, &tofill, rpc.Request{
		Suffix:        "a suffix",
		Method:        "a method",
		NumPosArgs:    23,
		EndStreamArgs: true,
		Deadline: wiretime.Deadline{
			time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC),
		},
		GrantedBlessings: createTypicalBlessings(),
		TraceRequest: vtrace.Request{
			SpanId:   uniqueid.Id{1, 2, 3, 4},
			TraceId:  uniqueid.Id{5, 6, 7, 8},
			Flags:    vtrace.CollectInMemory,
			LogLevel: 3,
		},
		Language: "en-us",
	})
}
func BenchmarkRpcRequestFullRepeatedDecode(b *testing.B) {
	var tofill rpc.Request
	benchmarkRepeatedDecode(b, &tofill, rpc.Request{
		Suffix:        "a suffix",
		Method:        "a method",
		NumPosArgs:    23,
		EndStreamArgs: true,
		Deadline: wiretime.Deadline{
			time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC),
		},
		GrantedBlessings: createTypicalBlessings(),
		TraceRequest: vtrace.Request{
			SpanId:   uniqueid.Id{1, 2, 3, 4},
			TraceId:  uniqueid.Id{5, 6, 7, 8},
			Flags:    vtrace.CollectInMemory,
			LogLevel: 3,
		},
		Language: "en-us",
	})
}
func BenchmarkRpcResponseZeroSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, rpc.Response{})
}
func BenchmarkRpcResponseZeroRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, rpc.Response{})
}
func BenchmarkRpcResponseZeroSingleShotDecode(b *testing.B) {
	var tofill rpc.Response
	benchmarkSingleShotDecode(b, &tofill, rpc.Response{})
}
func BenchmarkRpcResponseZeroRepeatedDecode(b *testing.B) {
	var tofill rpc.Response
	benchmarkRepeatedDecode(b, &tofill, rpc.Response{})
}
func BenchmarkRpcResponseFullSingleShotEncode(b *testing.B) {
	benchmarkSingleShotEncode(b, rpc.Response{
		Error:            errors.New("testerror"),
		EndStreamResults: true,
		NumPosResults:    4,
		TraceResponse: vtrace.Response{
			Flags: vtrace.CollectInMemory,
			Trace: vtrace.TraceRecord{
				Id: uniqueid.Id{1, 2, 3, 4},
				Spans: []vtrace.SpanRecord{
					vtrace.SpanRecord{
						Id:     uniqueid.Id{1, 2, 3, 4},
						Parent: uniqueid.Id{4, 3, 2, 1},
						Name:   "span name",
						Start:  time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC),
						End:    time.Date(2009, time.November, 11, 23, 0, 0, 0, time.UTC),
						Annotations: []vtrace.Annotation{
							vtrace.Annotation{
								When:    time.Date(2009, time.November, 10, 23, 0, 0, 4, time.UTC),
								Message: "Annotation Message",
							},
						},
					},
				},
			},
		},
	})
}
func BenchmarkRpcResponseFullRepeatedEncode(b *testing.B) {
	benchmarkRepeatedEncode(b, rpc.Response{
		Error:            errors.New("testerror"),
		EndStreamResults: true,
		NumPosResults:    4,
		TraceResponse: vtrace.Response{
			Flags: vtrace.CollectInMemory,
			Trace: vtrace.TraceRecord{
				Id: uniqueid.Id{1, 2, 3, 4},
				Spans: []vtrace.SpanRecord{
					vtrace.SpanRecord{
						Id:     uniqueid.Id{1, 2, 3, 4},
						Parent: uniqueid.Id{4, 3, 2, 1},
						Name:   "span name",
						Start:  time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC),
						End:    time.Date(2009, time.November, 11, 23, 0, 0, 0, time.UTC),
						Annotations: []vtrace.Annotation{
							vtrace.Annotation{
								When:    time.Date(2009, time.November, 10, 23, 0, 0, 4, time.UTC),
								Message: "Annotation Message",
							},
						},
					},
				},
			},
		},
	})
}
func BenchmarkRpcResponseFullSingleShotDecode(b *testing.B) {
	var tofill rpc.Response
	benchmarkSingleShotDecode(b, &tofill, rpc.Response{
		Error:            errors.New("testerror"),
		EndStreamResults: true,
		NumPosResults:    4,
		TraceResponse: vtrace.Response{
			Flags: vtrace.CollectInMemory,
			Trace: vtrace.TraceRecord{
				Id: uniqueid.Id{1, 2, 3, 4},
				Spans: []vtrace.SpanRecord{
					vtrace.SpanRecord{
						Id:     uniqueid.Id{1, 2, 3, 4},
						Parent: uniqueid.Id{4, 3, 2, 1},
						Name:   "span name",
						Start:  time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC),
						End:    time.Date(2009, time.November, 11, 23, 0, 0, 0, time.UTC),
						Annotations: []vtrace.Annotation{
							vtrace.Annotation{
								When:    time.Date(2009, time.November, 10, 23, 0, 0, 4, time.UTC),
								Message: "Annotation Message",
							},
						},
					},
				},
			},
		},
	})
}
func BenchmarkRpcResponseFullRepeatedDecode(b *testing.B) {
	var tofill rpc.Response
	benchmarkRepeatedDecode(b, &tofill, rpc.Response{
		Error:            errors.New("testerror"),
		EndStreamResults: true,
		NumPosResults:    4,
		TraceResponse: vtrace.Response{
			Flags: vtrace.CollectInMemory,
			Trace: vtrace.TraceRecord{
				Id: uniqueid.Id{1, 2, 3, 4},
				Spans: []vtrace.SpanRecord{
					vtrace.SpanRecord{
						Id:     uniqueid.Id{1, 2, 3, 4},
						Parent: uniqueid.Id{4, 3, 2, 1},
						Name:   "span name",
						Start:  time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC),
						End:    time.Date(2009, time.November, 11, 23, 0, 0, 0, time.UTC),
						Annotations: []vtrace.Annotation{
							vtrace.Annotation{
								When:    time.Date(2009, time.November, 10, 23, 0, 0, 4, time.UTC),
								Message: "Annotation Message",
							},
						},
					},
				},
			},
		},
	})
}
