//line grammar.y:36

// This grammar.go file was auto-generated by yacc from grammar.y.

package parse

import __yyfmt__ "fmt"

//line grammar.y:38
import (
	"math/big"
	"strings"
)

type strPos struct {
	str string
	pos Pos
}

type intPos struct {
	int *big.Int
	pos Pos
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

type imagPos struct {
	imag *BigImag
	pos  Pos
}

// typeListToStrList converts a slice of Type to a slice of strPos.  Each type
// must be a TypeNamed with an empty PackageName, otherwise errors are reported,
// and ok=false is returned.
func typeListToStrList(yylex yyLexer, typeList []Type) (strList []strPos, ok bool) {
	ok = true
	for _, t := range typeList {
		var tn *TypeNamed
		if tn, ok = t.(*TypeNamed); !ok {
			lexPosErrorf(yylex, t.Pos(), "Expected one or more variable names, but received type %q.", t.String())
			return
		}
		if strings.ContainsRune(tn.Name, '.') {
			ok = false
			lexPosErrorf(yylex, t.Pos(), "Expected one or more variable names, but received package-qualified name %q.", tn.Name)
			return
		}
		strList = append(strList, strPos{tn.Name, tn.P})
	}
	return
}

// ensureNonEmptyToken reports an error if tok is empty.
func ensureNonEmptyToken(yylex yyLexer, tok strPos, errMsg string) {
	if len(tok.str) == 0 {
		lexPosErrorf(yylex, tok.pos, errMsg)
	}
}

//line grammar.y:97
type yySymType struct {
	yys        int
	pos        Pos
	strpos     strPos
	intpos     intPos
	ratpos     ratPos
	imagpos    imagPos
	typeexpr   Type
	typeexprs  []Type
	fields     []*Field
	iface      *Interface
	constexpr  ConstExpr
	constexprs []ConstExpr
}

const startImportsOnly = 57346
const startFullFile = 57347
const tOROR = 57348
const tANDAND = 57349
const tLE = 57350
const tGE = 57351
const tNE = 57352
const tEQEQ = 57353
const tLSH = 57354
const tRSH = 57355
const tPACKAGE = 57356
const tIMPORT = 57357
const tTYPE = 57358
const tMAP = 57359
const tSTRUCT = 57360
const tINTERFACE = 57361
const tSTREAM = 57362
const tCONST = 57363
const tTRUE = 57364
const tFALSE = 57365
const tERRORID = 57366
const tIDENT = 57367
const tSTRLIT = 57368
const tINTLIT = 57369
const tRATLIT = 57370
const tIMAGLIT = 57371
const notPackage = 57372

var yyToknames = []string{
	"startImportsOnly",
	"startFullFile",
	" ;",
	" ,",
	" .",
	" (",
	" )",
	" [",
	" ]",
	" {",
	" }",
	" <",
	" >",
	" =",
	" !",
	" +",
	" -",
	" *",
	" /",
	" %",
	" |",
	" &",
	" ^",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tLSH",
	"tRSH",
	"tPACKAGE",
	"tIMPORT",
	"tTYPE",
	"tMAP",
	"tSTRUCT",
	"tINTERFACE",
	"tSTREAM",
	"tCONST",
	"tTRUE",
	"tFALSE",
	"tERRORID",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
	"tIMAGLIT",
	"notPackage",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 115
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 368

var yyAct = []int{

	74, 106, 187, 138, 104, 105, 42, 40, 37, 96,
	33, 91, 75, 51, 22, 21, 88, 30, 194, 172,
	97, 200, 69, 166, 39, 77, 78, 79, 190, 15,
	12, 94, 51, 80, 58, 13, 41, 48, 14, 54,
	52, 53, 27, 46, 140, 56, 51, 60, 50, 48,
	82, 83, 64, 81, 84, 85, 86, 87, 68, 52,
	53, 41, 72, 97, 44, 38, 89, 50, 173, 51,
	41, 100, 101, 52, 53, 38, 93, 98, 22, 21,
	24, 50, 108, 47, 8, 25, 171, 15, 26, 133,
	127, 128, 129, 130, 5, 61, 52, 53, 135, 146,
	47, 141, 136, 51, 50, 19, 51, 145, 20, 143,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 29, 57,
	52, 53, 165, 52, 53, 49, 210, 186, 50, 208,
	178, 50, 22, 21, 177, 176, 175, 169, 180, 179,
	111, 112, 63, 168, 117, 118, 119, 120, 121, 122,
	123, 124, 109, 110, 113, 114, 115, 116, 125, 126,
	193, 71, 184, 51, 185, 51, 103, 145, 189, 36,
	88, 66, 67, 191, 142, 99, 32, 204, 195, 77,
	78, 79, 180, 197, 202, 70, 203, 80, 198, 196,
	52, 53, 52, 53, 205, 134, 207, 209, 50, 107,
	50, 139, 140, 182, 82, 83, 38, 81, 84, 85,
	86, 87, 199, 35, 132, 131, 59, 111, 112, 92,
	62, 117, 118, 119, 120, 121, 122, 123, 124, 109,
	110, 113, 114, 115, 116, 125, 126, 181, 206, 188,
	144, 137, 111, 112, 90, 73, 117, 118, 119, 120,
	121, 122, 123, 124, 109, 110, 113, 114, 115, 116,
	125, 126, 167, 7, 65, 43, 31, 111, 112, 18,
	9, 117, 118, 119, 120, 121, 122, 123, 124, 109,
	110, 113, 114, 115, 116, 125, 126, 111, 112, 16,
	55, 117, 118, 119, 120, 121, 122, 123, 124, 34,
	110, 113, 114, 115, 116, 125, 126, 111, 112, 2,
	3, 117, 118, 119, 120, 121, 122, 123, 124, 45,
	23, 113, 114, 115, 116, 125, 126, 117, 118, 119,
	120, 121, 122, 123, 124, 119, 120, 121, 28, 123,
	4, 125, 126, 11, 6, 17, 10, 125, 126, 1,
	201, 192, 76, 95, 183, 174, 102, 170,
}
var yyPact = []int{

	315, -1000, 59, 59, -1000, 38, -1000, -7, 293, 51,
	-1000, 273, -1000, -1000, -1000, 96, -1000, 43, -1000, 32,
	-1000, -1000, -30, 270, 177, 170, 15, -1000, 269, -1000,
	-1000, -1000, 54, -1000, -1000, 95, 29, -1000, 112, 24,
	-1000, 78, 220, -32, -1000, 268, -1000, 164, -1000, 168,
	174, 10, 184, 158, -1000, 249, -1000, 171, -1000, 248,
	-1000, -36, -1000, -1000, 219, 37, 17, 31, 173, 164,
	164, 162, 199, 19, 135, -1000, -1000, 171, 171, 171,
	171, 216, -1000, -1000, -1000, -1000, -1000, -1000, 171, 195,
	-10, -1000, -1000, -1000, -1000, 245, -1000, 203, -1000, 164,
	-1000, 172, 244, -1000, -1000, 92, -1000, -1000, -1000, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, -1000, -1000, -1000,
	-1000, 171, -23, 262, -1000, -1000, 139, -26, 45, -27,
	58, -1000, 164, 126, 164, -1000, 164, 282, 302, 318,
	318, 318, 318, 318, 318, 324, 324, -1000, -1000, -1000,
	324, -1000, 324, -1000, -1000, 237, 204, -1000, -1000, -1000,
	35, 122, -1000, -1000, 242, 21, -1000, -1000, -1000, -1000,
	-1000, -1000, 171, 157, -1000, -1000, 2, 189, 164, 188,
	164, 212, -1000, 7, -1000, 180, -1000, -1000, -1000, -1000,
	-1000, 241, 135, -1000, 164, 125, 171, 120, -1000, 135,
	-1000,
}
var yyPgo = []int{

	0, 1, 5, 367, 366, 4, 365, 3, 364, 363,
	9, 0, 12, 362, 361, 360, 359, 350, 273, 356,
	355, 353, 348, 6, 108, 330, 329, 10, 309, 300,
	8, 226, 7, 2,
}
var yyR1 = []int{

	0, 16, 16, 19, 19, 19, 19, 17, 17, 18,
	18, 21, 21, 21, 22, 22, 24, 24, 20, 20,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	26, 26, 27, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 5, 28, 28, 9, 9, 10, 10, 10,
	7, 7, 7, 6, 6, 2, 2, 8, 8, 8,
	3, 3, 3, 3, 14, 14, 14, 15, 15, 29,
	29, 30, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 31, 31, 32,
	32, 23, 23, 33, 33,
}
var yyR2 = []int{

	0, 4, 4, 0, 1, 1, 1, 0, 3, 0,
	3, 3, 5, 2, 1, 3, 1, 2, 0, 3,
	3, 5, 2, 2, 3, 5, 2, 3, 5, 2,
	1, 3, 2, 1, 3, 4, 3, 5, 5, 3,
	1, 3, 2, 4, 6, 1, 3, 5, 1, 3,
	2, 4, 4, 1, 3, 1, 3, 0, 1, 1,
	0, 3, 4, 6, 0, 2, 4, 1, 3, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 2, 2, 2, 2, 4, 6, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	3, 0, 1, 0, 1,
}
var yyChk = []int{

	-1000, -16, 4, 5, -17, 35, -17, -18, 46, -18,
	-19, -21, 37, 42, 45, 36, 6, -20, 6, 9,
	-24, 47, 46, -25, 37, 42, 45, 10, -22, -24,
	47, 6, 9, -27, -28, 46, 9, -30, 46, 9,
	-32, 46, -23, 6, 10, -26, -27, 46, -1, 40,
	46, 11, 38, 39, 10, -29, -30, 17, 10, -31,
	-32, 17, 10, -24, -23, 6, 13, 8, 48, 12,
	11, 13, -23, 6, -11, -12, -13, 18, 19, 20,
	26, 46, 43, 44, 47, 48, 49, 50, 9, -23,
	6, 47, 10, -27, 14, -9, -10, 46, 46, 12,
	-1, -1, -4, 14, -5, -2, -1, 10, -30, 27,
	28, 15, 16, 29, 30, 31, 32, 19, 20, 21,
	22, 23, 24, 25, 26, 33, 34, -12, -12, -12,
	-12, 9, 8, -11, 10, -32, -23, 6, -7, 8,
	9, -1, 12, -23, 6, -1, 7, -11, -11, -11,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, -11, -11, -11, 46, 10, 14, -10,
	-3, 41, 46, 10, -6, -2, -5, -1, 14, -5,
	-1, 10, 9, -8, -1, -7, 15, -33, 7, -33,
	7, -11, -14, 13, 16, -1, 10, -5, 10, 10,
	14, -15, -11, 16, 7, -33, 7, -1, 14, -11,
	16,
}
var yyDef = []int{

	0, -2, 7, 7, 9, 0, 9, 3, 0, 18,
	1, 0, 4, 5, 6, 0, 8, 2, 10, 0,
	13, 16, 0, 0, 0, 0, 0, 11, 111, 14,
	17, 19, 0, 22, 23, 0, 0, 26, 0, 0,
	29, 109, 0, 112, 20, 111, 30, 0, 32, 0,
	33, 0, 0, 0, 24, 111, 69, 0, 27, 111,
	107, 0, 12, 15, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 112, 71, 72, 91, 0, 0, 0,
	0, 104, 98, 99, 100, 101, 102, 103, 0, 0,
	112, 110, 21, 31, 43, 111, 45, 48, 34, 0,
	36, 0, 111, 39, 40, 0, 55, 25, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 94,
	95, 0, 0, 0, 28, 108, 0, 112, 60, 0,
	0, 35, 0, 0, 112, 42, 0, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 0, 105, 106, 44, 46,
	57, 0, 49, 50, 113, 113, 53, 37, 38, 41,
	56, 96, 0, 64, 58, 59, 0, 0, 114, 0,
	114, 0, 47, 0, 61, 0, 51, 54, 52, 97,
	65, 113, 67, 62, 0, 0, 114, 0, 66, 68,
	63,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 18, 3, 3, 3, 23, 25, 3,
	9, 10, 21, 19, 7, 20, 8, 22, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	15, 17, 16, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 11, 3, 12, 26, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 13, 24, 14,
}
var yyTok2 = []int{

	2, 3, 4, 5, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		//line grammar.y:159
		{
			lexGenEOF(yylex)
		}
	case 4:
		//line grammar.y:161
		{
			lexGenEOF(yylex)
		}
	case 5:
		//line grammar.y:163
		{
			lexGenEOF(yylex)
		}
	case 6:
		//line grammar.y:165
		{
			lexGenEOF(yylex)
		}
	case 7:
		//line grammar.y:170
		{
			lexPosErrorf(yylex, Pos{}, "File must start with package statement")
		}
	case 8:
		//line grammar.y:172
		{
			lexIDLFile(yylex).PackageDef = NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}
		}
	case 16:
		//line grammar.y:190
		{
			imps := &lexIDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Pos: yyS[yypt-0].strpos.pos}})
		}
	case 17:
		//line grammar.y:195
		{
			imps := &lexIDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 32:
		//line grammar.y:224
		{
			tds := &lexIDLFile(yylex).TypeDefs
			*tds = append(*tds, &TypeDef{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: yyS[yypt-1].strpos.str, Pos: yyS[yypt-1].strpos.pos}})
		}
	case 33:
		//line grammar.y:231
		{
			yyVAL.typeexpr = &TypeNamed{Name: yyS[yypt-0].strpos.str, P: yyS[yypt-0].strpos.pos}
		}
	case 34:
		//line grammar.y:233
		{
			yyVAL.typeexpr = &TypeNamed{Name: yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, P: yyS[yypt-2].strpos.pos}
		}
	case 35:
		//line grammar.y:235
		{
			yyVAL.typeexpr = &TypeArray{Len: int(yyS[yypt-2].intpos.int.Int64()), Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-3].pos}
		}
	case 36:
		//line grammar.y:237
		{
			yyVAL.typeexpr = &TypeList{Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-2].pos}
		}
	case 37:
		//line grammar.y:239
		{
			yyVAL.typeexpr = &TypeMap{Key: yyS[yypt-2].typeexpr, Elem: yyS[yypt-0].typeexpr, P: yyS[yypt-4].pos}
		}
	case 38:
		//line grammar.y:241
		{
			yyVAL.typeexpr = &TypeStruct{Fields: yyS[yypt-2].fields, P: yyS[yypt-4].pos}
		}
	case 39:
		//line grammar.y:243
		{
			yyVAL.typeexpr = &TypeStruct{P: yyS[yypt-2].pos}
		}
	case 40:
		//line grammar.y:247
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 41:
		//line grammar.y:249
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 42:
		//line grammar.y:287
		{
			if names, ok := typeListToStrList(yylex, yyS[yypt-1].typeexprs); ok {
				for _, n := range names {
					yyVAL.fields = append(yyVAL.fields, &Field{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Name: n.str, Pos: n.pos}})
				}
			} else {
				lexPosErrorf(yylex, yyS[yypt-0].typeexpr.Pos(), "Perhaps you forgot a comma before type %q?.", yyS[yypt-0].typeexpr.String())
			}
		}
	case 43:
		//line grammar.y:300
		{
			ifs := &lexIDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{NamePos: NamePos{Name: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos}})
		}
	case 44:
		//line grammar.y:305
		{
			yyS[yypt-2].iface.Name, yyS[yypt-2].iface.Pos = yyS[yypt-5].strpos.str, yyS[yypt-5].strpos.pos
			ifs := &lexIDLFile(yylex).Interfaces
			*ifs = append(*ifs, yyS[yypt-2].iface)
		}
	case 45:
		//line grammar.y:313
		{
			yyVAL.iface = yyS[yypt-0].iface
		}
	case 46:
		//line grammar.y:315
		{
			yyS[yypt-2].iface.Embeds = append(yyS[yypt-2].iface.Embeds, yyS[yypt-0].iface.Embeds...)
			yyS[yypt-2].iface.Methods = append(yyS[yypt-2].iface.Methods, yyS[yypt-0].iface.Methods...)
			yyVAL.iface = yyS[yypt-2].iface
		}
	case 47:
		//line grammar.y:323
		{
			yyVAL.iface = &Interface{Methods: []*Method{{InArgs: yyS[yypt-3].fields, InStream: yyS[yypt-2].typeexprs[0], OutStream: yyS[yypt-2].typeexprs[1], OutArgs: yyS[yypt-1].fields, Tags: yyS[yypt-0].constexprs, NamePos: NamePos{Name: yyS[yypt-4].strpos.str, Pos: yyS[yypt-4].strpos.pos}}}}
		}
	case 48:
		//line grammar.y:325
		{
			yyVAL.iface = &Interface{Embeds: []*NamePos{{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}}}
		}
	case 49:
		//line grammar.y:327
		{
			yyVAL.iface = &Interface{Embeds: []*NamePos{{Name: yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, Pos: yyS[yypt-2].strpos.pos}}}
		}
	case 50:
		//line grammar.y:331
		{
			yyVAL.fields = nil
		}
	case 51:
		//line grammar.y:333
		{
			yyVAL.fields = yyS[yypt-2].fields
		}
	case 52:
		//line grammar.y:337
		{
			for _, t := range yyS[yypt-2].typeexprs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: t, NamePos: NamePos{Pos: t.Pos()}})
			}
		}
	case 53:
		//line grammar.y:347
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 54:
		//line grammar.y:349
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 55:
		//line grammar.y:353
		{
			yyVAL.typeexprs = []Type{yyS[yypt-0].typeexpr}
		}
	case 56:
		//line grammar.y:355
		{
			yyVAL.typeexprs = append(yyS[yypt-2].typeexprs, yyS[yypt-0].typeexpr)
		}
	case 57:
		//line grammar.y:361
		{
			yyVAL.fields = nil
		}
	case 58:
		//line grammar.y:363
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-0].typeexpr, NamePos: NamePos{Pos: yyS[yypt-0].typeexpr.Pos()}}}
		}
	case 59:
		//line grammar.y:365
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 60:
		//line grammar.y:369
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 61:
		//line grammar.y:371
		{
			yyVAL.typeexprs = []Type{nil, nil}
		}
	case 62:
		//line grammar.y:373
		{
			yyVAL.typeexprs = []Type{yyS[yypt-1].typeexpr, nil}
		}
	case 63:
		//line grammar.y:375
		{
			yyVAL.typeexprs = []Type{yyS[yypt-3].typeexpr, yyS[yypt-1].typeexpr}
		}
	case 64:
		//line grammar.y:379
		{
			yyVAL.constexprs = nil
		}
	case 65:
		//line grammar.y:381
		{
			yyVAL.constexprs = nil
		}
	case 66:
		//line grammar.y:383
		{
			yyVAL.constexprs = yyS[yypt-2].constexprs
		}
	case 67:
		//line grammar.y:387
		{
			yyVAL.constexprs = []ConstExpr{yyS[yypt-0].constexpr}
		}
	case 68:
		//line grammar.y:389
		{
			yyVAL.constexprs = append(yyS[yypt-2].constexprs, yyS[yypt-0].constexpr)
		}
	case 71:
		//line grammar.y:398
		{
			cds := &lexIDLFile(yylex).ConstDefs
			*cds = append(*cds, &ConstDef{Expr: yyS[yypt-0].constexpr, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	case 72:
		//line grammar.y:405
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 73:
		//line grammar.y:407
		{
			yyVAL.constexpr = &ConstBinaryOp{"||", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 74:
		//line grammar.y:409
		{
			yyVAL.constexpr = &ConstBinaryOp{"&&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 75:
		//line grammar.y:411
		{
			yyVAL.constexpr = &ConstBinaryOp{"<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 76:
		//line grammar.y:413
		{
			yyVAL.constexpr = &ConstBinaryOp{">", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 77:
		//line grammar.y:415
		{
			yyVAL.constexpr = &ConstBinaryOp{"<=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 78:
		//line grammar.y:417
		{
			yyVAL.constexpr = &ConstBinaryOp{">=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 79:
		//line grammar.y:419
		{
			yyVAL.constexpr = &ConstBinaryOp{"!=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 80:
		//line grammar.y:421
		{
			yyVAL.constexpr = &ConstBinaryOp{"==", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 81:
		//line grammar.y:423
		{
			yyVAL.constexpr = &ConstBinaryOp{"+", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 82:
		//line grammar.y:425
		{
			yyVAL.constexpr = &ConstBinaryOp{"-", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 83:
		//line grammar.y:427
		{
			yyVAL.constexpr = &ConstBinaryOp{"*", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 84:
		//line grammar.y:429
		{
			yyVAL.constexpr = &ConstBinaryOp{"/", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 85:
		//line grammar.y:431
		{
			yyVAL.constexpr = &ConstBinaryOp{"%", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 86:
		//line grammar.y:433
		{
			yyVAL.constexpr = &ConstBinaryOp{"|", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 87:
		//line grammar.y:435
		{
			yyVAL.constexpr = &ConstBinaryOp{"&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 88:
		//line grammar.y:437
		{
			yyVAL.constexpr = &ConstBinaryOp{"^", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 89:
		//line grammar.y:439
		{
			yyVAL.constexpr = &ConstBinaryOp{"<<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 90:
		//line grammar.y:441
		{
			yyVAL.constexpr = &ConstBinaryOp{">>", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 91:
		//line grammar.y:445
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 92:
		//line grammar.y:447
		{
			yyVAL.constexpr = &ConstUnaryOp{"!", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 93:
		//line grammar.y:449
		{
			yyVAL.constexpr = &ConstUnaryOp{"+", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 94:
		//line grammar.y:451
		{
			yyVAL.constexpr = &ConstUnaryOp{"-", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 95:
		//line grammar.y:453
		{
			yyVAL.constexpr = &ConstUnaryOp{"^", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 96:
		//line grammar.y:455
		{
			yyVAL.constexpr = &ConstTypeConv{&TypeNamed{Name: yyS[yypt-3].strpos.str, P: yyS[yypt-3].strpos.pos}, yyS[yypt-1].constexpr, yyS[yypt-3].strpos.pos}
		}
	case 97:
		//line grammar.y:457
		{
			yyVAL.constexpr = &ConstTypeConv{&TypeNamed{Name: yyS[yypt-5].strpos.str + "." + yyS[yypt-3].strpos.str, P: yyS[yypt-5].strpos.pos}, yyS[yypt-1].constexpr, yyS[yypt-5].strpos.pos}
		}
	case 98:
		//line grammar.y:463
		{
			yyVAL.constexpr = &ConstLit{true, yyS[yypt-0].pos}
		}
	case 99:
		//line grammar.y:465
		{
			yyVAL.constexpr = &ConstLit{false, yyS[yypt-0].pos}
		}
	case 100:
		//line grammar.y:467
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 101:
		//line grammar.y:469
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 102:
		//line grammar.y:471
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 103:
		//line grammar.y:473
		{
			yyVAL.constexpr = &ConstLit{yyS[yypt-0].imagpos.imag, yyS[yypt-0].imagpos.pos}
		}
	case 104:
		//line grammar.y:475
		{
			yyVAL.constexpr = &ConstNamed{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 105:
		//line grammar.y:477
		{
			yyVAL.constexpr = &ConstNamed{yyS[yypt-2].strpos.str + "." + yyS[yypt-0].strpos.str, yyS[yypt-2].strpos.pos}
		}
	case 106:
		//line grammar.y:479
		{
			yyVAL.constexpr = yyS[yypt-1].constexpr
		}
	case 109:
		//line grammar.y:488
		{
			eds := &lexIDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{NamePos: NamePos{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}})
		}
	case 110:
		//line grammar.y:493
		{
			ensureNonEmptyToken(yylex, yyS[yypt-0].strpos, "Error id must be non-empty if specified")
			eds := &lexIDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{ID: yyS[yypt-0].strpos.str, NamePos: NamePos{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos}})
		}
	}
	goto yystack /* stack new state and value */
}
