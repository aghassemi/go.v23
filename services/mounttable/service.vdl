// Package mounttable defines a set of mount points and how to traverse them.
package mounttable

import (
	"veyron.io/veyron/veyron2/security"
	"veyron.io/veyron/veyron2/services/mounttable/types"
)

type Globbable interface {
	// Glob returns all matching entries at the given server.
	// 
	// Glob returns an entry that exactly matches the pattern only if the
	// principal has some access to the entry, and read or resolve access to the
	// parent entry. However, if the pattern expands an entry "p" (e.g. "p/*",
	// "p/...", "p/[abc]"), Glob returns child entries only if the principal has
	// read access to "p".
	// In summary, the principal must have at least resolve access to call Glob,
	// but may require additional access for certain patterns.
	Glob(pattern string) stream<_, types.MountEntry> error {security.ResolveLabel}
}

// MountTable defines the interface to talk to a mounttable.
type MountTable interface {
	// In all methods of MountTable, the receiver is the name bound to.

	// Mount Server (a global name) onto the receiver.
	// Subsequent mounts add to the servers mounted there.  The multiple
	// servers are considered equivalent and are meant solely for
	// availability, i.e., no load balancing is guaranteed.
	//
	// TTL is the number of seconds the mount is to last unless refreshed by
	// another mount of the same server.  A TTL of 0 represents an infinite
	// duration.  A server with an expired TTL should never appear in the
	// results nor affect the operation of any MountTable method, and should
	// act as if it was never present as far as the interface is concerned.
	//
	// Opts represents a bit mask of options.
	Mount(Server string, TTL uint32, Flags types.MountFlag) error {security.WriteLabel}

	// Unmount removes Server from the mount point.  If Server is empty, remove
	// all servers mounted there.
	// Returns a non-nil error iff Server remains mounted at the mount point.
	Unmount(Server string) error {security.WriteLabel}

	// ResolveStep takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStep() (Servers []types.MountedServer, Suffix string, Error error) {security.ReadLabel}

	Globbable
}
