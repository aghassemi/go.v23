// This file was auto-generated by the veyron vdl tool.
// Source: service.vdl

// Package mounttable defines a set of mount points and how to traverse them.
package mounttable

import (
	"v.io/core/veyron2/naming"

	"v.io/core/veyron2/services/security/access"

	// The non-user imports are prefixed with "__" to prevent collisions.
	__veyron2 "v.io/core/veyron2"
	__context "v.io/core/veyron2/context"
	__ipc "v.io/core/veyron2/ipc"
	__vdlutil "v.io/core/veyron2/vdl/vdlutil"
	__wiretype "v.io/core/veyron2/wiretype"
)

// TODO(toddw): Remove this line once the new signature support is done.
// It corrects a bug where __wiretype is unused in VDL pacakges where only
// bootstrap types are used on interfaces.
const _ = __wiretype.TypeIDInvalid

// MountTableClientMethods is the client interface
// containing MountTable methods.
//
// MountTable defines the interface to talk to a mounttable.
type MountTableClientMethods interface {
	// Mount Server (a global name) onto the receiver.
	// Subsequent mounts add to the servers mounted there.  The multiple
	// servers are considered equivalent and are meant solely for
	// availability, i.e., no load balancing is guaranteed.
	//
	// TTL is the number of seconds the mount is to last unless refreshed by
	// another mount of the same server.  A TTL of 0 represents an infinite
	// duration.  A server with an expired TTL should never appear in the
	// results nor affect the operation of any MountTable method, and should
	// act as if it was never present as far as the interface is concerned.
	//
	// Opts represents a bit mask of options.
	Mount(ctx *__context.T, Server string, TTL uint32, Flags naming.MountFlag, opts ...__ipc.CallOpt) error
	// Unmount removes Server from the mount point.  If Server is empty, remove
	// all servers mounted there.
	// Returns a non-nil error iff Server remains mounted at the mount point.
	Unmount(ctx *__context.T, Server string, opts ...__ipc.CallOpt) error
	// ResolveStep takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStep(*__context.T, ...__ipc.CallOpt) (Servers []naming.VDLMountedServer, Suffix string, err error)
	// ResolveStepX takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStepX(*__context.T, ...__ipc.CallOpt) (Entry naming.VDLMountEntry, err error)
}

// MountTableClientStub adds universal methods to MountTableClientMethods.
type MountTableClientStub interface {
	MountTableClientMethods
	__ipc.UniversalServiceMethods
}

// MountTableClient returns a client stub for MountTable.
func MountTableClient(name string, opts ...__ipc.BindOpt) MountTableClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implMountTableClientStub{name, client}
}

type implMountTableClientStub struct {
	name   string
	client __ipc.Client
}

func (c implMountTableClientStub) c(ctx *__context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.RuntimeFromContext(ctx).Client()
}

func (c implMountTableClientStub) Mount(ctx *__context.T, i0 string, i1 uint32, i2 naming.MountFlag, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Mount", []interface{}{i0, i1, i2}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implMountTableClientStub) Unmount(ctx *__context.T, i0 string, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Unmount", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implMountTableClientStub) ResolveStep(ctx *__context.T, opts ...__ipc.CallOpt) (o0 []naming.VDLMountedServer, o1 string, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ResolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &o1, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implMountTableClientStub) ResolveStepX(ctx *__context.T, opts ...__ipc.CallOpt) (o0 naming.VDLMountEntry, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ResolveStepX", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implMountTableClientStub) Signature(ctx *__context.T, opts ...__ipc.CallOpt) (o0 __ipc.ServiceSignature, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// MountTableServerMethods is the interface a server writer
// implements for MountTable.
//
// MountTable defines the interface to talk to a mounttable.
type MountTableServerMethods interface {
	// Mount Server (a global name) onto the receiver.
	// Subsequent mounts add to the servers mounted there.  The multiple
	// servers are considered equivalent and are meant solely for
	// availability, i.e., no load balancing is guaranteed.
	//
	// TTL is the number of seconds the mount is to last unless refreshed by
	// another mount of the same server.  A TTL of 0 represents an infinite
	// duration.  A server with an expired TTL should never appear in the
	// results nor affect the operation of any MountTable method, and should
	// act as if it was never present as far as the interface is concerned.
	//
	// Opts represents a bit mask of options.
	Mount(ctx __ipc.ServerContext, Server string, TTL uint32, Flags naming.MountFlag) error
	// Unmount removes Server from the mount point.  If Server is empty, remove
	// all servers mounted there.
	// Returns a non-nil error iff Server remains mounted at the mount point.
	Unmount(ctx __ipc.ServerContext, Server string) error
	// ResolveStep takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStep(__ipc.ServerContext) (Servers []naming.VDLMountedServer, Suffix string, err error)
	// ResolveStepX takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStepX(__ipc.ServerContext) (Entry naming.VDLMountEntry, err error)
}

// MountTableServerStubMethods is the server interface containing
// MountTable methods, as expected by ipc.Server.
// There is no difference between this interface and MountTableServerMethods
// since there are no streaming methods.
type MountTableServerStubMethods MountTableServerMethods

// MountTableServerStub adds universal methods to MountTableServerStubMethods.
type MountTableServerStub interface {
	MountTableServerStubMethods
	// Describe the MountTable interfaces.
	Describe__() []__ipc.InterfaceDesc
	// Signature will be replaced with Describe__.
	Signature(ctx __ipc.ServerContext) (__ipc.ServiceSignature, error)
}

// MountTableServer returns a server stub for MountTable.
// It converts an implementation of MountTableServerMethods into
// an object that may be used by ipc.Server.
func MountTableServer(impl MountTableServerMethods) MountTableServerStub {
	stub := implMountTableServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implMountTableServerStub struct {
	impl MountTableServerMethods
	gs   *__ipc.GlobState
}

func (s implMountTableServerStub) Mount(ctx __ipc.ServerContext, i0 string, i1 uint32, i2 naming.MountFlag) error {
	return s.impl.Mount(ctx, i0, i1, i2)
}

func (s implMountTableServerStub) Unmount(ctx __ipc.ServerContext, i0 string) error {
	return s.impl.Unmount(ctx, i0)
}

func (s implMountTableServerStub) ResolveStep(ctx __ipc.ServerContext) ([]naming.VDLMountedServer, string, error) {
	return s.impl.ResolveStep(ctx)
}

func (s implMountTableServerStub) ResolveStepX(ctx __ipc.ServerContext) (naming.VDLMountEntry, error) {
	return s.impl.ResolveStepX(ctx)
}

func (s implMountTableServerStub) Globber() *__ipc.GlobState {
	return s.gs
}

func (s implMountTableServerStub) Describe__() []__ipc.InterfaceDesc {
	return []__ipc.InterfaceDesc{MountTableDesc}
}

// MountTableDesc describes the MountTable interface.
var MountTableDesc __ipc.InterfaceDesc = descMountTable

// descMountTable hides the desc to keep godoc clean.
var descMountTable = __ipc.InterfaceDesc{
	Name:    "MountTable",
	PkgPath: "v.io/core/veyron2/services/mounttable",
	Doc:     "// MountTable defines the interface to talk to a mounttable.",
	Methods: []__ipc.MethodDesc{
		{
			Name: "Mount",
			Doc:  "// Mount Server (a global name) onto the receiver.\n// Subsequent mounts add to the servers mounted there.  The multiple\n// servers are considered equivalent and are meant solely for\n// availability, i.e., no load balancing is guaranteed.\n//\n// TTL is the number of seconds the mount is to last unless refreshed by\n// another mount of the same server.  A TTL of 0 represents an infinite\n// duration.  A server with an expired TTL should never appear in the\n// results nor affect the operation of any MountTable method, and should\n// act as if it was never present as far as the interface is concerned.\n//\n// Opts represents a bit mask of options.",
			InArgs: []__ipc.ArgDesc{
				{"Server", ``}, // string
				{"TTL", ``},    // uint32
				{"Flags", ``},  // naming.MountFlag
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdlutil.Any{access.Tag("Write")},
		},
		{
			Name: "Unmount",
			Doc:  "// Unmount removes Server from the mount point.  If Server is empty, remove\n// all servers mounted there.\n// Returns a non-nil error iff Server remains mounted at the mount point.",
			InArgs: []__ipc.ArgDesc{
				{"Server", ``}, // string
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdlutil.Any{access.Tag("Write")},
		},
		{
			Name: "ResolveStep",
			Doc:  "// ResolveStep takes the next step in resolving a name.  Returns the next\n// servers to query and the suffix at those servers.",
			OutArgs: []__ipc.ArgDesc{
				{"Servers", ``}, // []naming.VDLMountedServer
				{"Suffix", ``},  // string
				{"err", ``},     // error
			},
			Tags: []__vdlutil.Any{access.Tag("Read")},
		},
		{
			Name: "ResolveStepX",
			Doc:  "// ResolveStepX takes the next step in resolving a name.  Returns the next\n// servers to query and the suffix at those servers.",
			OutArgs: []__ipc.ArgDesc{
				{"Entry", ``}, // naming.VDLMountEntry
				{"err", ``},   // error
			},
			Tags: []__vdlutil.Any{access.Tag("Read")},
		},
	},
}

func (s implMountTableServerStub) Signature(ctx __ipc.ServerContext) (__ipc.ServiceSignature, error) {
	// TODO(toddw): Replace with new Describe__ implementation.
	result := __ipc.ServiceSignature{Methods: make(map[string]__ipc.MethodSignature)}
	result.Methods["Mount"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "Server", Type: 3},
			{Name: "TTL", Type: 52},
			{Name: "Flags", Type: 65},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 66},
		},
	}
	result.Methods["ResolveStep"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "Servers", Type: 68},
			{Name: "Suffix", Type: 3},
			{Name: "err", Type: 66},
		},
	}
	result.Methods["ResolveStepX"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "Entry", Type: 69},
			{Name: "err", Type: 66},
		},
	}
	result.Methods["Unmount"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "Server", Type: 3},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 66},
		},
	}

	result.TypeDefs = []__vdlutil.Any{
		__wiretype.NamedPrimitiveType{Type: 0x34, Name: "v.io/core/veyron2/naming.MountFlag", Tags: []string(nil)}, __wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}, __wiretype.StructType{
			[]__wiretype.FieldType{
				__wiretype.FieldType{Type: 0x3, Name: "Server"},
				__wiretype.FieldType{Type: 0x34, Name: "TTL"},
			},
			"v.io/core/veyron2/naming.VDLMountedServer", []string(nil)},
		__wiretype.SliceType{Elem: 0x43, Name: "", Tags: []string(nil)}, __wiretype.StructType{
			[]__wiretype.FieldType{
				__wiretype.FieldType{Type: 0x3, Name: "Name"},
				__wiretype.FieldType{Type: 0x44, Name: "Servers"},
				__wiretype.FieldType{Type: 0x2, Name: "MT"},
			},
			"v.io/core/veyron2/naming.VDLMountEntry", []string(nil)},
	}

	return result, nil
}
