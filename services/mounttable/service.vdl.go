// This file was auto-generated by the veyron vdl tool.
// Source: service.vdl

// Package mounttable defines a set of mount points and how to traverse them.
package mounttable

import (
	"veyron.io/veyron/veyron2/security"

	"veyron.io/veyron/veyron2/services/mounttable/types"

	// The non-user imports are prefixed with "__" to prevent collisions.
	__io "io"
	__veyron2 "veyron.io/veyron/veyron2"
	__context "veyron.io/veyron/veyron2/context"
	__ipc "veyron.io/veyron/veyron2/ipc"
	__vdlutil "veyron.io/veyron/veyron2/vdl/vdlutil"
	__wiretype "veyron.io/veyron/veyron2/wiretype"
)

// TODO(toddw): Remove this line once the new signature support is done.
// It corrects a bug where __wiretype is unused in VDL pacakges where only
// bootstrap types are used on interfaces.
const _ = __wiretype.TypeIDInvalid

// GlobbableClientMethods is the client interface
// containing Globbable methods.
type GlobbableClientMethods interface {
	// Glob returns all matching entries at the given server.
	//
	// Glob returns an entry that exactly matches the pattern only if the
	// principal has some access to the entry, and read or resolve access to the
	// parent entry. However, if the pattern expands an entry "p" (e.g. "p/*",
	// "p/...", "p/[abc]"), Glob returns child entries only if the principal has
	// read access to "p".
	// In summary, the principal must have at least resolve access to call Glob,
	// but may require additional access for certain patterns.
	Glob(ctx __context.T, pattern string, opts ...__ipc.CallOpt) (GlobbableGlobCall, error)
}

// GlobbableClientStub adds universal methods to GlobbableClientMethods.
type GlobbableClientStub interface {
	GlobbableClientMethods
	__ipc.UniversalServiceMethods
}

// GlobbableClient returns a client stub for Globbable.
func GlobbableClient(name string, opts ...__ipc.BindOpt) GlobbableClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implGlobbableClientStub{name, client}
}

type implGlobbableClientStub struct {
	name   string
	client __ipc.Client
}

func (c implGlobbableClientStub) c(ctx __context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.RuntimeFromContext(ctx).Client()
}

func (c implGlobbableClientStub) Glob(ctx __context.T, i0 string, opts ...__ipc.CallOpt) (ocall GlobbableGlobCall, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Glob", []interface{}{i0}, opts...); err != nil {
		return
	}
	ocall = &implGlobbableGlobCall{call, implGlobbableGlobClientRecv{call: call}}
	return
}

func (c implGlobbableClientStub) Signature(ctx __context.T, opts ...__ipc.CallOpt) (o0 __ipc.ServiceSignature, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implGlobbableClientStub) GetMethodTags(ctx __context.T, method string, opts ...__ipc.CallOpt) (o0 []interface{}, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// GlobbableGlobClientStream is the client stream for Globbable.Glob.
type GlobbableGlobClientStream interface {
	// RecvStream returns the receiver side of the client stream.
	RecvStream() interface {
		// Advance stages an item so that it may be retrieved via Value.  Returns
		// true iff there is an item to retrieve.  Advance must be called before
		// Value is called.  May block if an item is not available.
		Advance() bool
		// Value returns the item that was staged by Advance.  May panic if Advance
		// returned false or was not called.  Never blocks.
		Value() types.MountEntry
		// Err returns any error encountered by Advance.  Never blocks.
		Err() error
	}
}

// GlobbableGlobCall represents the call returned from Globbable.Glob.
type GlobbableGlobCall interface {
	GlobbableGlobClientStream
	// Finish blocks until the server is done, and returns the positional return
	// values for call.
	//
	// Finish returns immediately if Cancel has been called; depending on the
	// timing the output could either be an error signaling cancelation, or the
	// valid positional return values from the server.
	//
	// Calling Finish is mandatory for releasing stream resources, unless Cancel
	// has been called or any of the other methods return an error.  Finish should
	// be called at most once.
	Finish() error
	// Cancel cancels the RPC, notifying the server to stop processing.  It is
	// safe to call Cancel concurrently with any of the other stream methods.
	// Calling Cancel after Finish has returned is a no-op.
	Cancel()
}

type implGlobbableGlobClientRecv struct {
	call __ipc.Call
	val  types.MountEntry
	err  error
}

func (c *implGlobbableGlobClientRecv) Advance() bool {
	c.val = types.MountEntry{}
	c.err = c.call.Recv(&c.val)
	return c.err == nil
}
func (c *implGlobbableGlobClientRecv) Value() types.MountEntry {
	return c.val
}
func (c *implGlobbableGlobClientRecv) Err() error {
	if c.err == __io.EOF {
		return nil
	}
	return c.err
}

type implGlobbableGlobCall struct {
	call __ipc.Call
	recv implGlobbableGlobClientRecv
}

func (c *implGlobbableGlobCall) RecvStream() interface {
	Advance() bool
	Value() types.MountEntry
	Err() error
} {
	return &c.recv
}
func (c *implGlobbableGlobCall) Finish() (err error) {
	if ierr := c.call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}
func (c *implGlobbableGlobCall) Cancel() {
	c.call.Cancel()
}

// GlobbableServerMethods is the interface a server writer
// implements for Globbable.
type GlobbableServerMethods interface {
	// Glob returns all matching entries at the given server.
	//
	// Glob returns an entry that exactly matches the pattern only if the
	// principal has some access to the entry, and read or resolve access to the
	// parent entry. However, if the pattern expands an entry "p" (e.g. "p/*",
	// "p/...", "p/[abc]"), Glob returns child entries only if the principal has
	// read access to "p".
	// In summary, the principal must have at least resolve access to call Glob,
	// but may require additional access for certain patterns.
	Glob(ctx GlobbableGlobContext, pattern string) error
}

// GlobbableServerStubMethods is the server interface containing
// Globbable methods, as expected by ipc.Server.  The difference between
// this interface and GlobbableServerMethods is that the first context
// argument for each method is always ipc.ServerCall here, while it is either
// ipc.ServerContext or a typed streaming context there.
type GlobbableServerStubMethods interface {
	// Glob returns all matching entries at the given server.
	//
	// Glob returns an entry that exactly matches the pattern only if the
	// principal has some access to the entry, and read or resolve access to the
	// parent entry. However, if the pattern expands an entry "p" (e.g. "p/*",
	// "p/...", "p/[abc]"), Glob returns child entries only if the principal has
	// read access to "p".
	// In summary, the principal must have at least resolve access to call Glob,
	// but may require additional access for certain patterns.
	Glob(call __ipc.ServerCall, pattern string) error
}

// GlobbableServerStub adds universal methods to GlobbableServerStubMethods.
type GlobbableServerStub interface {
	GlobbableServerStubMethods
	// GetMethodTags will be replaced with DescribeInterfaces.
	GetMethodTags(call __ipc.ServerCall, method string) ([]interface{}, error)
	// Signature will be replaced with DescribeInterfaces.
	Signature(call __ipc.ServerCall) (__ipc.ServiceSignature, error)
}

// GlobbableServer returns a server stub for Globbable.
// It converts an implementation of GlobbableServerMethods into
// an object that may be used by ipc.Server.
func GlobbableServer(impl GlobbableServerMethods) GlobbableServerStub {
	stub := implGlobbableServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implGlobbableServerStub struct {
	impl GlobbableServerMethods
	gs   *__ipc.GlobState
}

func (s implGlobbableServerStub) Glob(call __ipc.ServerCall, i0 string) error {
	ctx := &implGlobbableGlobContext{call, implGlobbableGlobServerSend{call}}
	return s.impl.Glob(ctx, i0)
}

func (s implGlobbableServerStub) VGlob() *__ipc.GlobState {
	return s.gs
}

func (s implGlobbableServerStub) GetMethodTags(call __ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(toddw): Replace with new DescribeInterfaces implementation.
	switch method {
	case "Glob":
		return []interface{}{security.Label(1)}, nil
	default:
		return nil, nil
	}
}

func (s implGlobbableServerStub) Signature(call __ipc.ServerCall) (__ipc.ServiceSignature, error) {
	// TODO(toddw) Replace with new DescribeInterfaces implementation.
	result := __ipc.ServiceSignature{Methods: make(map[string]__ipc.MethodSignature)}
	result.Methods["Glob"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "pattern", Type: 3},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},

		OutStream: 68,
	}

	result.TypeDefs = []__vdlutil.Any{
		__wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}, __wiretype.StructType{
			[]__wiretype.FieldType{
				__wiretype.FieldType{Type: 0x3, Name: "Server"},
				__wiretype.FieldType{Type: 0x34, Name: "TTL"},
			},
			"veyron.io/veyron/veyron2/services/mounttable/types.MountedServer", []string(nil)},
		__wiretype.SliceType{Elem: 0x42, Name: "", Tags: []string(nil)}, __wiretype.StructType{
			[]__wiretype.FieldType{
				__wiretype.FieldType{Type: 0x3, Name: "Name"},
				__wiretype.FieldType{Type: 0x43, Name: "Servers"},
				__wiretype.FieldType{Type: 0x2, Name: "MT"},
			},
			"veyron.io/veyron/veyron2/services/mounttable/types.MountEntry", []string(nil)},
	}

	return result, nil
}

// GlobbableGlobServerStream is the server stream for Globbable.Glob.
type GlobbableGlobServerStream interface {
	// SendStream returns the send side of the server stream.
	SendStream() interface {
		// Send places the item onto the output stream.  Returns errors encountered
		// while sending.  Blocks if there is no buffer space; will unblock when
		// buffer space is available.
		Send(item types.MountEntry) error
	}
}

// GlobbableGlobContext represents the context passed to Globbable.Glob.
type GlobbableGlobContext interface {
	__ipc.ServerContext
	GlobbableGlobServerStream
}

type implGlobbableGlobServerSend struct {
	call __ipc.ServerCall
}

func (s *implGlobbableGlobServerSend) Send(item types.MountEntry) error {
	return s.call.Send(item)
}

type implGlobbableGlobContext struct {
	__ipc.ServerContext
	send implGlobbableGlobServerSend
}

func (s *implGlobbableGlobContext) SendStream() interface {
	Send(item types.MountEntry) error
} {
	return &s.send
}

// MountTableClientMethods is the client interface
// containing MountTable methods.
//
// MountTable defines the interface to talk to a mounttable.
type MountTableClientMethods interface {
	GlobbableClientMethods
	// Mount Server (a global name) onto the receiver.
	// Subsequent mounts add to the servers mounted there.  The multiple
	// servers are considered equivalent and are meant solely for
	// availability, i.e., no load balancing is guaranteed.
	//
	// TTL is the number of seconds the mount is to last unless refreshed by
	// another mount of the same server.  A TTL of 0 represents an infinite
	// duration.  A server with an expired TTL should never appear in the
	// results nor affect the operation of any MountTable method, and should
	// act as if it was never present as far as the interface is concerned.
	//
	// Opts represents a bit mask of options.
	Mount(ctx __context.T, Server string, TTL uint32, Flags types.MountFlag, opts ...__ipc.CallOpt) error
	// Unmount removes Server from the mount point.  If Server is empty, remove
	// all servers mounted there.
	// Returns a non-nil error iff Server remains mounted at the mount point.
	Unmount(ctx __context.T, Server string, opts ...__ipc.CallOpt) error
	// ResolveStep takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStep(__context.T, ...__ipc.CallOpt) (Servers []types.MountedServer, Suffix string, err error)
	// ResolveStepX takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStepX(__context.T, ...__ipc.CallOpt) (Entry types.MountEntry, err error)
}

// MountTableClientStub adds universal methods to MountTableClientMethods.
type MountTableClientStub interface {
	MountTableClientMethods
	__ipc.UniversalServiceMethods
}

// MountTableClient returns a client stub for MountTable.
func MountTableClient(name string, opts ...__ipc.BindOpt) MountTableClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implMountTableClientStub{name, client, GlobbableClient(name, client)}
}

type implMountTableClientStub struct {
	name   string
	client __ipc.Client

	GlobbableClientStub
}

func (c implMountTableClientStub) c(ctx __context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.RuntimeFromContext(ctx).Client()
}

func (c implMountTableClientStub) Mount(ctx __context.T, i0 string, i1 uint32, i2 types.MountFlag, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Mount", []interface{}{i0, i1, i2}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implMountTableClientStub) Unmount(ctx __context.T, i0 string, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Unmount", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implMountTableClientStub) ResolveStep(ctx __context.T, opts ...__ipc.CallOpt) (o0 []types.MountedServer, o1 string, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ResolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &o1, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implMountTableClientStub) ResolveStepX(ctx __context.T, opts ...__ipc.CallOpt) (o0 types.MountEntry, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ResolveStepX", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implMountTableClientStub) Signature(ctx __context.T, opts ...__ipc.CallOpt) (o0 __ipc.ServiceSignature, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implMountTableClientStub) GetMethodTags(ctx __context.T, method string, opts ...__ipc.CallOpt) (o0 []interface{}, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// MountTableServerMethods is the interface a server writer
// implements for MountTable.
//
// MountTable defines the interface to talk to a mounttable.
type MountTableServerMethods interface {
	GlobbableServerMethods
	// Mount Server (a global name) onto the receiver.
	// Subsequent mounts add to the servers mounted there.  The multiple
	// servers are considered equivalent and are meant solely for
	// availability, i.e., no load balancing is guaranteed.
	//
	// TTL is the number of seconds the mount is to last unless refreshed by
	// another mount of the same server.  A TTL of 0 represents an infinite
	// duration.  A server with an expired TTL should never appear in the
	// results nor affect the operation of any MountTable method, and should
	// act as if it was never present as far as the interface is concerned.
	//
	// Opts represents a bit mask of options.
	Mount(ctx __ipc.ServerContext, Server string, TTL uint32, Flags types.MountFlag) error
	// Unmount removes Server from the mount point.  If Server is empty, remove
	// all servers mounted there.
	// Returns a non-nil error iff Server remains mounted at the mount point.
	Unmount(ctx __ipc.ServerContext, Server string) error
	// ResolveStep takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStep(__ipc.ServerContext) (Servers []types.MountedServer, Suffix string, Error error)
	// ResolveStepX takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStepX(__ipc.ServerContext) (Entry types.MountEntry, Error error)
}

// MountTableServerStubMethods is the server interface containing
// MountTable methods, as expected by ipc.Server.  The difference between
// this interface and MountTableServerMethods is that the first context
// argument for each method is always ipc.ServerCall here, while it is either
// ipc.ServerContext or a typed streaming context there.
type MountTableServerStubMethods interface {
	GlobbableServerStubMethods
	// Mount Server (a global name) onto the receiver.
	// Subsequent mounts add to the servers mounted there.  The multiple
	// servers are considered equivalent and are meant solely for
	// availability, i.e., no load balancing is guaranteed.
	//
	// TTL is the number of seconds the mount is to last unless refreshed by
	// another mount of the same server.  A TTL of 0 represents an infinite
	// duration.  A server with an expired TTL should never appear in the
	// results nor affect the operation of any MountTable method, and should
	// act as if it was never present as far as the interface is concerned.
	//
	// Opts represents a bit mask of options.
	Mount(call __ipc.ServerCall, Server string, TTL uint32, Flags types.MountFlag) error
	// Unmount removes Server from the mount point.  If Server is empty, remove
	// all servers mounted there.
	// Returns a non-nil error iff Server remains mounted at the mount point.
	Unmount(call __ipc.ServerCall, Server string) error
	// ResolveStep takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStep(__ipc.ServerCall) (Servers []types.MountedServer, Suffix string, Error error)
	// ResolveStepX takes the next step in resolving a name.  Returns the next
	// servers to query and the suffix at those servers.
	ResolveStepX(__ipc.ServerCall) (Entry types.MountEntry, Error error)
}

// MountTableServerStub adds universal methods to MountTableServerStubMethods.
type MountTableServerStub interface {
	MountTableServerStubMethods
	// GetMethodTags will be replaced with DescribeInterfaces.
	GetMethodTags(call __ipc.ServerCall, method string) ([]interface{}, error)
	// Signature will be replaced with DescribeInterfaces.
	Signature(call __ipc.ServerCall) (__ipc.ServiceSignature, error)
}

// MountTableServer returns a server stub for MountTable.
// It converts an implementation of MountTableServerMethods into
// an object that may be used by ipc.Server.
func MountTableServer(impl MountTableServerMethods) MountTableServerStub {
	stub := implMountTableServerStub{
		impl:                impl,
		GlobbableServerStub: GlobbableServer(impl),
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implMountTableServerStub struct {
	impl MountTableServerMethods
	gs   *__ipc.GlobState

	GlobbableServerStub
}

func (s implMountTableServerStub) Mount(call __ipc.ServerCall, i0 string, i1 uint32, i2 types.MountFlag) error {
	return s.impl.Mount(call, i0, i1, i2)
}

func (s implMountTableServerStub) Unmount(call __ipc.ServerCall, i0 string) error {
	return s.impl.Unmount(call, i0)
}

func (s implMountTableServerStub) ResolveStep(call __ipc.ServerCall) ([]types.MountedServer, string, error) {
	return s.impl.ResolveStep(call)
}

func (s implMountTableServerStub) ResolveStepX(call __ipc.ServerCall) (types.MountEntry, error) {
	return s.impl.ResolveStepX(call)
}

func (s implMountTableServerStub) VGlob() *__ipc.GlobState {
	return s.gs
}

func (s implMountTableServerStub) GetMethodTags(call __ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(toddw): Replace with new DescribeInterfaces implementation.
	if resp, err := s.GlobbableServerStub.GetMethodTags(call, method); resp != nil || err != nil {
		return resp, err
	}
	switch method {
	case "Mount":
		return []interface{}{security.Label(4)}, nil
	case "Unmount":
		return []interface{}{security.Label(4)}, nil
	case "ResolveStep":
		return []interface{}{security.Label(2)}, nil
	case "ResolveStepX":
		return []interface{}{security.Label(2)}, nil
	default:
		return nil, nil
	}
}

func (s implMountTableServerStub) Signature(call __ipc.ServerCall) (__ipc.ServiceSignature, error) {
	// TODO(toddw) Replace with new DescribeInterfaces implementation.
	result := __ipc.ServiceSignature{Methods: make(map[string]__ipc.MethodSignature)}
	result.Methods["Mount"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "Server", Type: 3},
			{Name: "TTL", Type: 52},
			{Name: "Flags", Type: 65},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 66},
		},
	}
	result.Methods["ResolveStep"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "Servers", Type: 68},
			{Name: "Suffix", Type: 3},
			{Name: "Error", Type: 66},
		},
	}
	result.Methods["ResolveStepX"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "Entry", Type: 69},
			{Name: "Error", Type: 66},
		},
	}
	result.Methods["Unmount"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "Server", Type: 3},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 66},
		},
	}

	result.TypeDefs = []__vdlutil.Any{
		__wiretype.NamedPrimitiveType{Type: 0x34, Name: "veyron.io/veyron/veyron2/services/mounttable/types.MountFlag", Tags: []string(nil)}, __wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}, __wiretype.StructType{
			[]__wiretype.FieldType{
				__wiretype.FieldType{Type: 0x3, Name: "Server"},
				__wiretype.FieldType{Type: 0x34, Name: "TTL"},
			},
			"veyron.io/veyron/veyron2/services/mounttable/types.MountedServer", []string(nil)},
		__wiretype.SliceType{Elem: 0x43, Name: "", Tags: []string(nil)}, __wiretype.StructType{
			[]__wiretype.FieldType{
				__wiretype.FieldType{Type: 0x3, Name: "Name"},
				__wiretype.FieldType{Type: 0x44, Name: "Servers"},
				__wiretype.FieldType{Type: 0x2, Name: "MT"},
			},
			"veyron.io/veyron/veyron2/services/mounttable/types.MountEntry", []string(nil)},
	}
	var ss __ipc.ServiceSignature
	var firstAdded int
	ss, _ = s.GlobbableServerStub.Signature(call)
	firstAdded = len(result.TypeDefs)
	for k, v := range ss.Methods {
		for i, _ := range v.InArgs {
			if v.InArgs[i].Type >= __wiretype.TypeIDFirst {
				v.InArgs[i].Type += __wiretype.TypeID(firstAdded)
			}
		}
		for i, _ := range v.OutArgs {
			if v.OutArgs[i].Type >= __wiretype.TypeIDFirst {
				v.OutArgs[i].Type += __wiretype.TypeID(firstAdded)
			}
		}
		if v.InStream >= __wiretype.TypeIDFirst {
			v.InStream += __wiretype.TypeID(firstAdded)
		}
		if v.OutStream >= __wiretype.TypeIDFirst {
			v.OutStream += __wiretype.TypeID(firstAdded)
		}
		result.Methods[k] = v
	}
	//TODO(bprosnitz) combine type definitions from embeded interfaces in a way that doesn't cause duplication.
	for _, d := range ss.TypeDefs {
		switch wt := d.(type) {
		case __wiretype.SliceType:
			if wt.Elem >= __wiretype.TypeIDFirst {
				wt.Elem += __wiretype.TypeID(firstAdded)
			}
			d = wt
		case __wiretype.ArrayType:
			if wt.Elem >= __wiretype.TypeIDFirst {
				wt.Elem += __wiretype.TypeID(firstAdded)
			}
			d = wt
		case __wiretype.MapType:
			if wt.Key >= __wiretype.TypeIDFirst {
				wt.Key += __wiretype.TypeID(firstAdded)
			}
			if wt.Elem >= __wiretype.TypeIDFirst {
				wt.Elem += __wiretype.TypeID(firstAdded)
			}
			d = wt
		case __wiretype.StructType:
			for i, fld := range wt.Fields {
				if fld.Type >= __wiretype.TypeIDFirst {
					wt.Fields[i].Type += __wiretype.TypeID(firstAdded)
				}
			}
			d = wt
			// NOTE: other types are missing, but we are upgrading anyways.
		}
		result.TypeDefs = append(result.TypeDefs, d)
	}

	return result, nil
}
