// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package nosql

import (
  "v.io/v23/security/access"
)

// BatchOptions configures a batch.
// TODO(sadovsky): Add more options, e.g. to configure isolation, whether to
// track the read set, etc.
// TODO(sadovsky): Maybe add a DefaultBatchOptions() function that initializes
// BatchOptions with our desired defaults. Clients would be encouraged to
// initialize their BatchOptions object using that function and then modify it
// to their liking.
type BatchOptions struct {
	// Arbitrary string, typically used to describe the intent behind a batch.
	// Hints are surfaced to clients during conflict resolution.
	Hint string

	// TODO(sadovsky): The current design is still suboptimal for read-only
	// batches in that (1) the client does not explicitly specify that the batch
	// is read-only, so we must track the read set and prevent concurrent
	// transactions' write sets from getting GC'ed, and (2) the compiler can't
	// help enforce read-only semantics. Adding another bool to specify whether
	// the read set should be tracked addresses (1), though perhaps providing an
	// explicit "ReadOnly" option would be more user-friendly. It seems we can't
	// address (2) without having two different Table() functions, one for
	// read-only and one for read-write.

	// FailEagerly specifies whether individual operations inside a batch should
	// fail (with error ErrConcurrentBatch) if some other batch has committed rows
	// that conflict with rows touched by this batch. If false, only Commit() can
	// fail with ErrConcurrentBatch.
	// Typically, this option should be set to false for read-only batches and to
	// true for read-write batches.
	FailEagerly bool
}

// PrefixPermissions represents a pair of (prefix, permissions).
type PrefixPermissions struct {
	Prefix string
	Perms  access.Permissions
}
