// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Source: types.vdl

package nosql

import (
	// VDL system imports
	"v.io/v23/vdl"

	// VDL user imports
	"v.io/v23/security/access"
)

// BatchOptions configures a batch.
// TODO(sadovsky): Add more options, e.g. to configure isolation, whether to
// track the read set, etc.
// TODO(sadovsky): Maybe add a DefaultBatchOptions() function that initializes
// BatchOptions with our desired defaults. Clients would be encouraged to
// initialize their BatchOptions object using that function and then modify it
// to their liking.
type BatchOptions struct {
	// Arbitrary string, typically used to describe the intent behind a batch.
	// Hints are surfaced to clients during conflict resolution.
	Hint string
	// FailEagerly specifies whether individual operations inside a batch should
	// fail (with error ErrConcurrentBatch) if some other batch has committed rows
	// that conflict with rows touched by this batch. If false, only Commit() can
	// fail with ErrConcurrentBatch.
	// Typically, this option should be set to false for read-only batches and to
	// true for read-write batches.
	FailEagerly bool
}

func (BatchOptions) __VDLReflect(struct {
	Name string "v.io/syncbase/v23/services/syncbase/nosql.BatchOptions"
}) {
}

// PrefixPermissions represents a pair of (prefix, permissions).
type PrefixPermissions struct {
	Prefix string
	Perms  access.Permissions
}

func (PrefixPermissions) __VDLReflect(struct {
	Name string "v.io/syncbase/v23/services/syncbase/nosql.PrefixPermissions"
}) {
}

func init() {
	vdl.Register((*BatchOptions)(nil))
	vdl.Register((*PrefixPermissions)(nil))
}
