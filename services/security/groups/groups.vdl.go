// This file was auto-generated by the veyron vdl tool.
// Source: groups.vdl

// Package groups defines structs and interfaces pertaining to groups, which can
// be referenced by BlessingPatterns (e.g. in ACLs).
//
// TODO(sadovsky): Write a detailed description of this package and add a
// reference to the (forthcoming) design doc.
package groups

import (
	"v.io/core/veyron2/services/security/access"

	// The non-user imports are prefixed with "__" to prevent collisions.
	__veyron2 "v.io/core/veyron2"
	__context "v.io/core/veyron2/context"
	__ipc "v.io/core/veyron2/ipc"
	__vdl "v.io/core/veyron2/vdl"
	__vdlutil "v.io/core/veyron2/vdl/vdlutil"
	__wiretype "v.io/core/veyron2/wiretype"
)

// TODO(toddw): Remove this line once the new signature support is done.
// It corrects a bug where __wiretype is unused in VDL pacakges where only
// bootstrap types are used on interfaces.
const _ = __wiretype.TypeIDInvalid

// BlessingPatternChunk is a substring of a BlessingPattern. As with
// BlessingPatterns, BlessingPatternChunks may contain references to
// groups. However, they may be restricted in other ways. For example, in the
// future BlessingPatterns may support "$" terminators, but these may be
// disallowed for BlessingPatternChunks.
type BlessingPatternChunk string

func (BlessingPatternChunk) __VDLReflect(struct {
	Name string "v.io/core/veyron2/services/security/groups.BlessingPatternChunk"
}) {
}

type GetRequest struct {
}

func (GetRequest) __VDLReflect(struct {
	Name string "v.io/core/veyron2/services/security/groups.GetRequest"
}) {
}

type GetResponse struct {
}

func (GetResponse) __VDLReflect(struct {
	Name string "v.io/core/veyron2/services/security/groups.GetResponse"
}) {
}

type RestRequest struct {
}

func (RestRequest) __VDLReflect(struct {
	Name string "v.io/core/veyron2/services/security/groups.RestRequest"
}) {
}

type RestResponse struct {
}

func (RestResponse) __VDLReflect(struct {
	Name string "v.io/core/veyron2/services/security/groups.RestResponse"
}) {
}

func init() {
	__vdl.Register(BlessingPatternChunk(""))
	__vdl.Register(GetRequest{})
	__vdl.Register(GetResponse{})
	__vdl.Register(RestRequest{})
	__vdl.Register(RestResponse{})
}

// GroupClientMethods is the client interface
// containing Group methods.
//
// A group's etag covers its ACL as well as any other data stored in the group.
// Clients should treat etags as opaque identifiers. For both Get and Rest, if
// etag is set and matches the Group's current etag, the response will indicate
// that fact but will otherwise be empty.
type GroupClientMethods interface {
	// Object provides access control for Veyron objects.
	//
	// Veyron services implementing dynamic access control would typically
	// embed this interface and tag additional methods defined by the service
	// with one of Admin, Read, Write, Resolve etc. For example,
	// the VDL definition of the object would be:
	//
	//   package mypackage
	//
	//   import "v.io/core/veyron2/security/access"
	//
	//   type MyObject interface {
	//     access.Object
	//     MyRead() (string, error) {access.Read}
	//     MyWrite(string) error    {access.Write}
	//   }
	//
	// If the set of pre-defined tags is insufficient, services may define their
	// own tag type and annotate all methods with this new type.
	// Instead of embedding this Object interface, define SetACL and GetACL in
	// their own interface. Authorization policies will typically respect
	// annotations of a single type. For example, the VDL definition of an object
	// would be:
	//
	//  package mypackage
	//
	//  import "v.io/core/veyron2/security/access"
	//
	//  type MyTag string
	//
	//  const (
	//    Blue = MyTag("Blue")
	//    Red  = MyTag("Red")
	//  )
	//
	//  type MyObject interface {
	//    MyMethod() (string, error) {Blue}
	//
	//    // Allow clients to change access via the access.Object interface:
	//    SetACL(acl access.TaggedACLMap, etag string) error         {Red}
	//    GetACL() (acl access.TaggedACLMap, etag string, err error) {Blue}
	//  }
	access.ObjectClientMethods
	// Create creates a new group if it doesn't already exist.
	// If acl is nil, a default TaggedACLMap is used, providing Admin access to
	// the caller.
	// Create requires the caller to have Write permission at the GroupServer.
	Create(ctx *__context.T, acl access.TaggedACLMap, entries []BlessingPatternChunk, opts ...__ipc.CallOpt) error
	// Delete deletes the group.
	// Permissions for all group-related methods except Create() are checked
	// against the Group object.
	Delete(ctx *__context.T, etag string, opts ...__ipc.CallOpt) error
	// Add adds an entry to the group.
	Add(ctx *__context.T, entry BlessingPatternChunk, etag string, opts ...__ipc.CallOpt) error
	// Remove removes an entry from the group.
	Remove(ctx *__context.T, entry BlessingPatternChunk, etag string, opts ...__ipc.CallOpt) error
	// Get returns all entries in the group.
	// TODO(sadovsky): Flesh out this API.
	Get(ctx *__context.T, req GetRequest, reqEtag string, opts ...__ipc.CallOpt) (res GetResponse, etag string, err error)
	// Rest returns information sufficient for the client to perform its ACL
	// checks.
	// TODO(sadovsky): Flesh out this API.
	Rest(ctx *__context.T, req RestRequest, reqEtag string, opts ...__ipc.CallOpt) (res RestResponse, etag string, err error)
}

// GroupClientStub adds universal methods to GroupClientMethods.
type GroupClientStub interface {
	GroupClientMethods
	__ipc.UniversalServiceMethods
}

// GroupClient returns a client stub for Group.
func GroupClient(name string, opts ...__ipc.BindOpt) GroupClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implGroupClientStub{name, client, access.ObjectClient(name, client)}
}

type implGroupClientStub struct {
	name   string
	client __ipc.Client

	access.ObjectClientStub
}

func (c implGroupClientStub) c(ctx *__context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.GetClient(ctx)
}

func (c implGroupClientStub) Create(ctx *__context.T, i0 access.TaggedACLMap, i1 []BlessingPatternChunk, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Create", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implGroupClientStub) Delete(ctx *__context.T, i0 string, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Delete", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implGroupClientStub) Add(ctx *__context.T, i0 BlessingPatternChunk, i1 string, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Add", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implGroupClientStub) Remove(ctx *__context.T, i0 BlessingPatternChunk, i1 string, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Remove", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implGroupClientStub) Get(ctx *__context.T, i0 GetRequest, i1 string, opts ...__ipc.CallOpt) (o0 GetResponse, o1 string, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Get", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &o1, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implGroupClientStub) Rest(ctx *__context.T, i0 RestRequest, i1 string, opts ...__ipc.CallOpt) (o0 RestResponse, o1 string, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Rest", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &o1, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implGroupClientStub) Signature(ctx *__context.T, opts ...__ipc.CallOpt) (o0 __ipc.ServiceSignature, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// GroupServerMethods is the interface a server writer
// implements for Group.
//
// A group's etag covers its ACL as well as any other data stored in the group.
// Clients should treat etags as opaque identifiers. For both Get and Rest, if
// etag is set and matches the Group's current etag, the response will indicate
// that fact but will otherwise be empty.
type GroupServerMethods interface {
	// Object provides access control for Veyron objects.
	//
	// Veyron services implementing dynamic access control would typically
	// embed this interface and tag additional methods defined by the service
	// with one of Admin, Read, Write, Resolve etc. For example,
	// the VDL definition of the object would be:
	//
	//   package mypackage
	//
	//   import "v.io/core/veyron2/security/access"
	//
	//   type MyObject interface {
	//     access.Object
	//     MyRead() (string, error) {access.Read}
	//     MyWrite(string) error    {access.Write}
	//   }
	//
	// If the set of pre-defined tags is insufficient, services may define their
	// own tag type and annotate all methods with this new type.
	// Instead of embedding this Object interface, define SetACL and GetACL in
	// their own interface. Authorization policies will typically respect
	// annotations of a single type. For example, the VDL definition of an object
	// would be:
	//
	//  package mypackage
	//
	//  import "v.io/core/veyron2/security/access"
	//
	//  type MyTag string
	//
	//  const (
	//    Blue = MyTag("Blue")
	//    Red  = MyTag("Red")
	//  )
	//
	//  type MyObject interface {
	//    MyMethod() (string, error) {Blue}
	//
	//    // Allow clients to change access via the access.Object interface:
	//    SetACL(acl access.TaggedACLMap, etag string) error         {Red}
	//    GetACL() (acl access.TaggedACLMap, etag string, err error) {Blue}
	//  }
	access.ObjectServerMethods
	// Create creates a new group if it doesn't already exist.
	// If acl is nil, a default TaggedACLMap is used, providing Admin access to
	// the caller.
	// Create requires the caller to have Write permission at the GroupServer.
	Create(ctx __ipc.ServerContext, acl access.TaggedACLMap, entries []BlessingPatternChunk) error
	// Delete deletes the group.
	// Permissions for all group-related methods except Create() are checked
	// against the Group object.
	Delete(ctx __ipc.ServerContext, etag string) error
	// Add adds an entry to the group.
	Add(ctx __ipc.ServerContext, entry BlessingPatternChunk, etag string) error
	// Remove removes an entry from the group.
	Remove(ctx __ipc.ServerContext, entry BlessingPatternChunk, etag string) error
	// Get returns all entries in the group.
	// TODO(sadovsky): Flesh out this API.
	Get(ctx __ipc.ServerContext, req GetRequest, reqEtag string) (res GetResponse, etag string, err error)
	// Rest returns information sufficient for the client to perform its ACL
	// checks.
	// TODO(sadovsky): Flesh out this API.
	Rest(ctx __ipc.ServerContext, req RestRequest, reqEtag string) (res RestResponse, etag string, err error)
}

// GroupServerStubMethods is the server interface containing
// Group methods, as expected by ipc.Server.
// There is no difference between this interface and GroupServerMethods
// since there are no streaming methods.
type GroupServerStubMethods GroupServerMethods

// GroupServerStub adds universal methods to GroupServerStubMethods.
type GroupServerStub interface {
	GroupServerStubMethods
	// Describe the Group interfaces.
	Describe__() []__ipc.InterfaceDesc
	// Signature will be replaced with Describe__.
	Signature(ctx __ipc.ServerContext) (__ipc.ServiceSignature, error)
}

// GroupServer returns a server stub for Group.
// It converts an implementation of GroupServerMethods into
// an object that may be used by ipc.Server.
func GroupServer(impl GroupServerMethods) GroupServerStub {
	stub := implGroupServerStub{
		impl:             impl,
		ObjectServerStub: access.ObjectServer(impl),
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implGroupServerStub struct {
	impl GroupServerMethods
	access.ObjectServerStub
	gs *__ipc.GlobState
}

func (s implGroupServerStub) Create(ctx __ipc.ServerContext, i0 access.TaggedACLMap, i1 []BlessingPatternChunk) error {
	return s.impl.Create(ctx, i0, i1)
}

func (s implGroupServerStub) Delete(ctx __ipc.ServerContext, i0 string) error {
	return s.impl.Delete(ctx, i0)
}

func (s implGroupServerStub) Add(ctx __ipc.ServerContext, i0 BlessingPatternChunk, i1 string) error {
	return s.impl.Add(ctx, i0, i1)
}

func (s implGroupServerStub) Remove(ctx __ipc.ServerContext, i0 BlessingPatternChunk, i1 string) error {
	return s.impl.Remove(ctx, i0, i1)
}

func (s implGroupServerStub) Get(ctx __ipc.ServerContext, i0 GetRequest, i1 string) (GetResponse, string, error) {
	return s.impl.Get(ctx, i0, i1)
}

func (s implGroupServerStub) Rest(ctx __ipc.ServerContext, i0 RestRequest, i1 string) (RestResponse, string, error) {
	return s.impl.Rest(ctx, i0, i1)
}

func (s implGroupServerStub) Globber() *__ipc.GlobState {
	return s.gs
}

func (s implGroupServerStub) Describe__() []__ipc.InterfaceDesc {
	return []__ipc.InterfaceDesc{GroupDesc, access.ObjectDesc}
}

// GroupDesc describes the Group interface.
var GroupDesc __ipc.InterfaceDesc = descGroup

// descGroup hides the desc to keep godoc clean.
var descGroup = __ipc.InterfaceDesc{
	Name:    "Group",
	PkgPath: "v.io/core/veyron2/services/security/groups",
	Doc:     "// A group's etag covers its ACL as well as any other data stored in the group.\n// Clients should treat etags as opaque identifiers. For both Get and Rest, if\n// etag is set and matches the Group's current etag, the response will indicate\n// that fact but will otherwise be empty.",
	Embeds: []__ipc.EmbedDesc{
		{"Object", "v.io/core/veyron2/services/security/access", "// Object provides access control for Veyron objects.\n//\n// Veyron services implementing dynamic access control would typically\n// embed this interface and tag additional methods defined by the service\n// with one of Admin, Read, Write, Resolve etc. For example,\n// the VDL definition of the object would be:\n//\n//   package mypackage\n//\n//   import \"v.io/core/veyron2/security/access\"\n//\n//   type MyObject interface {\n//     access.Object\n//     MyRead() (string, error) {access.Read}\n//     MyWrite(string) error    {access.Write}\n//   }\n//\n// If the set of pre-defined tags is insufficient, services may define their\n// own tag type and annotate all methods with this new type.\n// Instead of embedding this Object interface, define SetACL and GetACL in\n// their own interface. Authorization policies will typically respect\n// annotations of a single type. For example, the VDL definition of an object\n// would be:\n//\n//  package mypackage\n//\n//  import \"v.io/core/veyron2/security/access\"\n//\n//  type MyTag string\n//\n//  const (\n//    Blue = MyTag(\"Blue\")\n//    Red  = MyTag(\"Red\")\n//  )\n//\n//  type MyObject interface {\n//    MyMethod() (string, error) {Blue}\n//\n//    // Allow clients to change access via the access.Object interface:\n//    SetACL(acl access.TaggedACLMap, etag string) error         {Red}\n//    GetACL() (acl access.TaggedACLMap, etag string, err error) {Blue}\n//  }"},
	},
	Methods: []__ipc.MethodDesc{
		{
			Name: "Create",
			Doc:  "// Create creates a new group if it doesn't already exist.\n// If acl is nil, a default TaggedACLMap is used, providing Admin access to\n// the caller.\n// Create requires the caller to have Write permission at the GroupServer.",
			InArgs: []__ipc.ArgDesc{
				{"acl", ``},     // access.TaggedACLMap
				{"entries", ``}, // []BlessingPatternChunk
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdlutil.Any{access.Tag("Write")},
		},
		{
			Name: "Delete",
			Doc:  "// Delete deletes the group.\n// Permissions for all group-related methods except Create() are checked\n// against the Group object.",
			InArgs: []__ipc.ArgDesc{
				{"etag", ``}, // string
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdlutil.Any{access.Tag("Write")},
		},
		{
			Name: "Add",
			Doc:  "// Add adds an entry to the group.",
			InArgs: []__ipc.ArgDesc{
				{"entry", ``}, // BlessingPatternChunk
				{"etag", ``},  // string
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdlutil.Any{access.Tag("Write")},
		},
		{
			Name: "Remove",
			Doc:  "// Remove removes an entry from the group.",
			InArgs: []__ipc.ArgDesc{
				{"entry", ``}, // BlessingPatternChunk
				{"etag", ``},  // string
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdlutil.Any{access.Tag("Write")},
		},
		{
			Name: "Get",
			Doc:  "// Get returns all entries in the group.\n// TODO(sadovsky): Flesh out this API.",
			InArgs: []__ipc.ArgDesc{
				{"req", ``},     // GetRequest
				{"reqEtag", ``}, // string
			},
			OutArgs: []__ipc.ArgDesc{
				{"res", ``},  // GetResponse
				{"etag", ``}, // string
				{"err", ``},  // error
			},
			Tags: []__vdlutil.Any{access.Tag("Read")},
		},
		{
			Name: "Rest",
			Doc:  "// Rest returns information sufficient for the client to perform its ACL\n// checks.\n// TODO(sadovsky): Flesh out this API.",
			InArgs: []__ipc.ArgDesc{
				{"req", ``},     // RestRequest
				{"reqEtag", ``}, // string
			},
			OutArgs: []__ipc.ArgDesc{
				{"res", ``},  // RestResponse
				{"etag", ``}, // string
				{"err", ``},  // error
			},
			Tags: []__vdlutil.Any{access.Tag("Resolve")},
		},
	},
}

func (s implGroupServerStub) Signature(ctx __ipc.ServerContext) (__ipc.ServiceSignature, error) {
	// TODO(toddw): Replace with new Describe__ implementation.
	result := __ipc.ServiceSignature{Methods: make(map[string]__ipc.MethodSignature)}
	result.Methods["Add"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "entry", Type: 69},
			{Name: "etag", Type: 3},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 71},
		},
	}
	result.Methods["Create"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "acl", Type: 68},
			{Name: "entries", Type: 70},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 71},
		},
	}
	result.Methods["Delete"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "etag", Type: 3},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 71},
		},
	}
	result.Methods["Get"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "req", Type: 72},
			{Name: "reqEtag", Type: 3},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "res", Type: 73},
			{Name: "etag", Type: 3},
			{Name: "err", Type: 71},
		},
	}
	result.Methods["Remove"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "entry", Type: 69},
			{Name: "etag", Type: 3},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 71},
		},
	}
	result.Methods["Rest"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "req", Type: 74},
			{Name: "reqEtag", Type: 3},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "res", Type: 75},
			{Name: "etag", Type: 3},
			{Name: "err", Type: 71},
		},
	}

	result.TypeDefs = []__vdlutil.Any{
		__wiretype.NamedPrimitiveType{Type: 0x3, Name: "v.io/core/veyron2/security.BlessingPattern", Tags: []string(nil)}, __wiretype.SliceType{Elem: 0x41, Name: "", Tags: []string(nil)}, __wiretype.StructType{
			[]__wiretype.FieldType{
				__wiretype.FieldType{Type: 0x42, Name: "In"},
				__wiretype.FieldType{Type: 0x3d, Name: "NotIn"},
			},
			"v.io/core/veyron2/services/security/access.ACL", []string(nil)},
		__wiretype.MapType{Key: 0x3, Elem: 0x43, Name: "v.io/core/veyron2/services/security/access.TaggedACLMap", Tags: []string(nil)}, __wiretype.NamedPrimitiveType{Type: 0x3, Name: "v.io/core/veyron2/services/security/groups.BlessingPatternChunk", Tags: []string(nil)}, __wiretype.SliceType{Elem: 0x45, Name: "", Tags: []string(nil)}, __wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}, __wiretype.StructType{
			nil,
			"v.io/core/veyron2/services/security/groups.GetRequest", []string(nil)},
		__wiretype.StructType{
			nil,
			"v.io/core/veyron2/services/security/groups.GetResponse", []string(nil)},
		__wiretype.StructType{
			nil,
			"v.io/core/veyron2/services/security/groups.RestRequest", []string(nil)},
		__wiretype.StructType{
			nil,
			"v.io/core/veyron2/services/security/groups.RestResponse", []string(nil)},
	}
	var ss __ipc.ServiceSignature
	var firstAdded int
	ss, _ = s.ObjectServerStub.Signature(ctx)
	firstAdded = len(result.TypeDefs)
	for k, v := range ss.Methods {
		for i, _ := range v.InArgs {
			if v.InArgs[i].Type >= __wiretype.TypeIDFirst {
				v.InArgs[i].Type += __wiretype.TypeID(firstAdded)
			}
		}
		for i, _ := range v.OutArgs {
			if v.OutArgs[i].Type >= __wiretype.TypeIDFirst {
				v.OutArgs[i].Type += __wiretype.TypeID(firstAdded)
			}
		}
		if v.InStream >= __wiretype.TypeIDFirst {
			v.InStream += __wiretype.TypeID(firstAdded)
		}
		if v.OutStream >= __wiretype.TypeIDFirst {
			v.OutStream += __wiretype.TypeID(firstAdded)
		}
		result.Methods[k] = v
	}
	//TODO(bprosnitz) combine type definitions from embeded interfaces in a way that doesn't cause duplication.
	for _, d := range ss.TypeDefs {
		switch wt := d.(type) {
		case __wiretype.SliceType:
			if wt.Elem >= __wiretype.TypeIDFirst {
				wt.Elem += __wiretype.TypeID(firstAdded)
			}
			d = wt
		case __wiretype.ArrayType:
			if wt.Elem >= __wiretype.TypeIDFirst {
				wt.Elem += __wiretype.TypeID(firstAdded)
			}
			d = wt
		case __wiretype.MapType:
			if wt.Key >= __wiretype.TypeIDFirst {
				wt.Key += __wiretype.TypeID(firstAdded)
			}
			if wt.Elem >= __wiretype.TypeIDFirst {
				wt.Elem += __wiretype.TypeID(firstAdded)
			}
			d = wt
		case __wiretype.StructType:
			for i, fld := range wt.Fields {
				if fld.Type >= __wiretype.TypeIDFirst {
					wt.Fields[i].Type += __wiretype.TypeID(firstAdded)
				}
			}
			d = wt
			// NOTE: other types are missing, but we are upgrading anyways.
		}
		result.TypeDefs = append(result.TypeDefs, d)
	}

	return result, nil
}
