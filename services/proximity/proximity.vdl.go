// This file was auto-generated by the veyron vdl tool.
// Source: proximity.vdl

package proximity

import (
	"veyron2/security"

	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_veyron2 "veyron2"
	_gen_context "veyron2/context"
	_gen_ipc "veyron2/ipc"
	_gen_naming "veyron2/naming"
	_gen_rt "veyron2/rt"
	_gen_vdlutil "veyron2/vdl/vdlutil"
	_gen_wiretype "veyron2/wiretype"
)

// Device represents one neighborhood device.  It contains that device's
// MAC address, observed names, and the average distance to the device.
// TODO(bprosnitz) This is bluetooth specific. We need a more generate service as well.
type Device struct {
	// MAC is remote device's MAC address, in one of the following formats
	// (as per http://golang.org/pkg/net/#ParseMAC):
	//   01:23:45:67:89:ab
	//   01:23:45:67:89:ab:cd:ef
	//   01-23-45-67-89-ab
	//   01-23-45-67-89-ab-cd-ef
	//   0123.4567.89ab
	//   0123.4567.89ab.cdef
	MAC string
	// Names represents all unique observed names of the remote device.
	Names []string
	// Distance represents the (estimated) distance to the neighborhood
	// device.  It can be parsed using distance.Parse method.
	// TODO(bprosnitz) Change from string.
	Distance string
}

// TODO(bprosnitz) Remove this line once signatures are updated to use typevals.
// It corrects a bug where _gen_wiretype is unused in VDL pacakges where only bootstrap types are used on interfaces.
const _ = _gen_wiretype.TypeIDInvalid

// Proximity maintains a list of devices in our close proximity, using scan
// readings from nearby devices.  It also continuously advertises a set of
// provided names, which will be visible at nearby devices and associated
// with this device.
// ProximityAnnouncer is the interface the client binds and uses.
// ProximityAnnouncer_ExcludingUniversal is the interface without internal framework-added methods
// to enable embedding without method collisions.  Not to be used directly by clients.
type ProximityAnnouncer_ExcludingUniversal interface {
	// RegisterName adds a name that this device will be associated with;
	// a remote device will see all the unique names currently registered
	// with this device (see Names field in Device).
	RegisterName(ctx _gen_context.T, Name string, opts ..._gen_ipc.CallOpt) (err error)
	// UnregisterName removes a name previously associated with this device.
	// If the name doesn't exist, this method will return an error.
	// If the name has been registered multiple times, this method will
	// remove only one instance of that registration.
	UnregisterName(ctx _gen_context.T, Name string, opts ..._gen_ipc.CallOpt) (err error)
}
type ProximityAnnouncer interface {
	_gen_ipc.UniversalServiceMethods
	ProximityAnnouncer_ExcludingUniversal
}

// ProximityAnnouncerService is the interface the server implements.
type ProximityAnnouncerService interface {

	// RegisterName adds a name that this device will be associated with;
	// a remote device will see all the unique names currently registered
	// with this device (see Names field in Device).
	RegisterName(context _gen_ipc.ServerContext, Name string) (err error)
	// UnregisterName removes a name previously associated with this device.
	// If the name doesn't exist, this method will return an error.
	// If the name has been registered multiple times, this method will
	// remove only one instance of that registration.
	UnregisterName(context _gen_ipc.ServerContext, Name string) (err error)
}

// BindProximityAnnouncer returns the client stub implementing the ProximityAnnouncer
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindProximityAnnouncer(name string, opts ..._gen_ipc.BindOpt) (ProximityAnnouncer, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdlutil.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdlutil.ErrTooManyOptionsToBind
	}
	stub := &clientStubProximityAnnouncer{client: client, name: name}

	return stub, nil
}

// NewServerProximityAnnouncer creates a new server stub.
//
// It takes a regular server implementing the ProximityAnnouncerService
// interface, and returns a new server stub.
func NewServerProximityAnnouncer(server ProximityAnnouncerService) interface{} {
	return &ServerStubProximityAnnouncer{
		service: server,
	}
}

// clientStubProximityAnnouncer implements ProximityAnnouncer.
type clientStubProximityAnnouncer struct {
	client _gen_ipc.Client
	name   string
}

func (__gen_c *clientStubProximityAnnouncer) RegisterName(ctx _gen_context.T, Name string, opts ..._gen_ipc.CallOpt) (err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "RegisterName", []interface{}{Name}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProximityAnnouncer) UnregisterName(ctx _gen_context.T, Name string, opts ..._gen_ipc.CallOpt) (err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "UnregisterName", []interface{}{Name}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProximityAnnouncer) UnresolveStep(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProximityAnnouncer) Signature(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply _gen_ipc.ServiceSignature, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProximityAnnouncer) GetMethodTags(ctx _gen_context.T, method string, opts ..._gen_ipc.CallOpt) (reply []interface{}, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubProximityAnnouncer wraps a server that implements
// ProximityAnnouncerService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubProximityAnnouncer struct {
	service ProximityAnnouncerService
}

func (__gen_s *ServerStubProximityAnnouncer) GetMethodTags(call _gen_ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(bprosnitz) GetMethodTags() will be replaces with Signature().
	// Note: This exhibits some weird behavior like returning a nil error if the method isn't found.
	// This will change when it is replaced with Signature().
	switch method {
	case "RegisterName":
		return []interface{}{security.Label(2)}, nil
	case "UnregisterName":
		return []interface{}{security.Label(2)}, nil
	default:
		return nil, nil
	}
}

func (__gen_s *ServerStubProximityAnnouncer) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["RegisterName"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "Name", Type: 3},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["UnregisterName"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "Name", Type: 3},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []_gen_vdlutil.Any{
		_gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}

func (__gen_s *ServerStubProximityAnnouncer) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := __gen_s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubProximityAnnouncer) RegisterName(call _gen_ipc.ServerCall, Name string) (err error) {
	err = __gen_s.service.RegisterName(call, Name)
	return
}

func (__gen_s *ServerStubProximityAnnouncer) UnregisterName(call _gen_ipc.ServerCall, Name string) (err error) {
	err = __gen_s.service.UnregisterName(call, Name)
	return
}

// ProximityScanner is the interface the client binds and uses.
// ProximityScanner_ExcludingUniversal is the interface without internal framework-added methods
// to enable embedding without method collisions.  Not to be used directly by clients.
type ProximityScanner_ExcludingUniversal interface {
	// NearbyDevices returns the most up-to-date list of nearby devices,
	// sorted in increasing distance order.
	NearbyDevices(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []Device, err error)
}
type ProximityScanner interface {
	_gen_ipc.UniversalServiceMethods
	ProximityScanner_ExcludingUniversal
}

// ProximityScannerService is the interface the server implements.
type ProximityScannerService interface {

	// NearbyDevices returns the most up-to-date list of nearby devices,
	// sorted in increasing distance order.
	NearbyDevices(context _gen_ipc.ServerContext) (reply []Device, err error)
}

// BindProximityScanner returns the client stub implementing the ProximityScanner
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindProximityScanner(name string, opts ..._gen_ipc.BindOpt) (ProximityScanner, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdlutil.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdlutil.ErrTooManyOptionsToBind
	}
	stub := &clientStubProximityScanner{client: client, name: name}

	return stub, nil
}

// NewServerProximityScanner creates a new server stub.
//
// It takes a regular server implementing the ProximityScannerService
// interface, and returns a new server stub.
func NewServerProximityScanner(server ProximityScannerService) interface{} {
	return &ServerStubProximityScanner{
		service: server,
	}
}

// clientStubProximityScanner implements ProximityScanner.
type clientStubProximityScanner struct {
	client _gen_ipc.Client
	name   string
}

func (__gen_c *clientStubProximityScanner) NearbyDevices(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []Device, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "NearbyDevices", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProximityScanner) UnresolveStep(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProximityScanner) Signature(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply _gen_ipc.ServiceSignature, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProximityScanner) GetMethodTags(ctx _gen_context.T, method string, opts ..._gen_ipc.CallOpt) (reply []interface{}, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubProximityScanner wraps a server that implements
// ProximityScannerService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubProximityScanner struct {
	service ProximityScannerService
}

func (__gen_s *ServerStubProximityScanner) GetMethodTags(call _gen_ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(bprosnitz) GetMethodTags() will be replaces with Signature().
	// Note: This exhibits some weird behavior like returning a nil error if the method isn't found.
	// This will change when it is replaced with Signature().
	switch method {
	case "NearbyDevices":
		return []interface{}{security.Label(1)}, nil
	default:
		return nil, nil
	}
}

func (__gen_s *ServerStubProximityScanner) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["NearbyDevices"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 66},
			{Name: "", Type: 67},
		},
	}

	result.TypeDefs = []_gen_vdlutil.Any{
		_gen_wiretype.StructType{
			[]_gen_wiretype.FieldType{
				_gen_wiretype.FieldType{Type: 0x3, Name: "MAC"},
				_gen_wiretype.FieldType{Type: 0x3d, Name: "Names"},
				_gen_wiretype.FieldType{Type: 0x3, Name: "Distance"},
			},
			"veyron2/services/proximity.Device", []string(nil)},
		_gen_wiretype.SliceType{Elem: 0x41, Name: "", Tags: []string(nil)}, _gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}

func (__gen_s *ServerStubProximityScanner) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := __gen_s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubProximityScanner) NearbyDevices(call _gen_ipc.ServerCall) (reply []Device, err error) {
	reply, err = __gen_s.service.NearbyDevices(call)
	return
}

// Proximity is the interface the client binds and uses.
// Proximity_ExcludingUniversal is the interface without internal framework-added methods
// to enable embedding without method collisions.  Not to be used directly by clients.
type Proximity_ExcludingUniversal interface {
	// Proximity maintains a list of devices in our close proximity, using scan
	// readings from nearby devices.  It also continuously advertises a set of
	// provided names, which will be visible at nearby devices and associated
	// with this device.
	ProximityAnnouncer_ExcludingUniversal
	ProximityScanner_ExcludingUniversal
}
type Proximity interface {
	_gen_ipc.UniversalServiceMethods
	Proximity_ExcludingUniversal
}

// ProximityService is the interface the server implements.
type ProximityService interface {

	// Proximity maintains a list of devices in our close proximity, using scan
	// readings from nearby devices.  It also continuously advertises a set of
	// provided names, which will be visible at nearby devices and associated
	// with this device.
	ProximityAnnouncerService
	ProximityScannerService
}

// BindProximity returns the client stub implementing the Proximity
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindProximity(name string, opts ..._gen_ipc.BindOpt) (Proximity, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdlutil.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdlutil.ErrTooManyOptionsToBind
	}
	stub := &clientStubProximity{client: client, name: name}
	stub.ProximityAnnouncer_ExcludingUniversal, _ = BindProximityAnnouncer(name, client)
	stub.ProximityScanner_ExcludingUniversal, _ = BindProximityScanner(name, client)

	return stub, nil
}

// NewServerProximity creates a new server stub.
//
// It takes a regular server implementing the ProximityService
// interface, and returns a new server stub.
func NewServerProximity(server ProximityService) interface{} {
	return &ServerStubProximity{
		ServerStubProximityAnnouncer: *NewServerProximityAnnouncer(server).(*ServerStubProximityAnnouncer),
		ServerStubProximityScanner:   *NewServerProximityScanner(server).(*ServerStubProximityScanner),
		service:                      server,
	}
}

// clientStubProximity implements Proximity.
type clientStubProximity struct {
	ProximityAnnouncer_ExcludingUniversal
	ProximityScanner_ExcludingUniversal

	client _gen_ipc.Client
	name   string
}

func (__gen_c *clientStubProximity) UnresolveStep(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProximity) Signature(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply _gen_ipc.ServiceSignature, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProximity) GetMethodTags(ctx _gen_context.T, method string, opts ..._gen_ipc.CallOpt) (reply []interface{}, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubProximity wraps a server that implements
// ProximityService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubProximity struct {
	ServerStubProximityAnnouncer
	ServerStubProximityScanner

	service ProximityService
}

func (__gen_s *ServerStubProximity) GetMethodTags(call _gen_ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(bprosnitz) GetMethodTags() will be replaces with Signature().
	// Note: This exhibits some weird behavior like returning a nil error if the method isn't found.
	// This will change when it is replaced with Signature().
	if resp, err := __gen_s.ServerStubProximityAnnouncer.GetMethodTags(call, method); resp != nil || err != nil {
		return resp, err
	}
	if resp, err := __gen_s.ServerStubProximityScanner.GetMethodTags(call, method); resp != nil || err != nil {
		return resp, err
	}
	return nil, nil
}

func (__gen_s *ServerStubProximity) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}

	result.TypeDefs = []_gen_vdlutil.Any{}
	var ss _gen_ipc.ServiceSignature
	var firstAdded int
	ss, _ = __gen_s.ServerStubProximityAnnouncer.Signature(call)
	firstAdded = len(result.TypeDefs)
	for k, v := range ss.Methods {
		for i, _ := range v.InArgs {
			if v.InArgs[i].Type >= _gen_wiretype.TypeIDFirst {
				v.InArgs[i].Type += _gen_wiretype.TypeID(firstAdded)
			}
		}
		for i, _ := range v.OutArgs {
			if v.OutArgs[i].Type >= _gen_wiretype.TypeIDFirst {
				v.OutArgs[i].Type += _gen_wiretype.TypeID(firstAdded)
			}
		}
		if v.InStream >= _gen_wiretype.TypeIDFirst {
			v.InStream += _gen_wiretype.TypeID(firstAdded)
		}
		if v.OutStream >= _gen_wiretype.TypeIDFirst {
			v.OutStream += _gen_wiretype.TypeID(firstAdded)
		}
		result.Methods[k] = v
	}
	//TODO(bprosnitz) combine type definitions from embeded interfaces in a way that doesn't cause duplication.
	for _, d := range ss.TypeDefs {
		switch wt := d.(type) {
		case _gen_wiretype.SliceType:
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.ArrayType:
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.MapType:
			if wt.Key >= _gen_wiretype.TypeIDFirst {
				wt.Key += _gen_wiretype.TypeID(firstAdded)
			}
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.StructType:
			for i, fld := range wt.Fields {
				if fld.Type >= _gen_wiretype.TypeIDFirst {
					wt.Fields[i].Type += _gen_wiretype.TypeID(firstAdded)
				}
			}
			d = wt
			// NOTE: other types are missing, but we are upgrading anyways.
		}
		result.TypeDefs = append(result.TypeDefs, d)
	}
	ss, _ = __gen_s.ServerStubProximityScanner.Signature(call)
	firstAdded = len(result.TypeDefs)
	for k, v := range ss.Methods {
		for i, _ := range v.InArgs {
			if v.InArgs[i].Type >= _gen_wiretype.TypeIDFirst {
				v.InArgs[i].Type += _gen_wiretype.TypeID(firstAdded)
			}
		}
		for i, _ := range v.OutArgs {
			if v.OutArgs[i].Type >= _gen_wiretype.TypeIDFirst {
				v.OutArgs[i].Type += _gen_wiretype.TypeID(firstAdded)
			}
		}
		if v.InStream >= _gen_wiretype.TypeIDFirst {
			v.InStream += _gen_wiretype.TypeID(firstAdded)
		}
		if v.OutStream >= _gen_wiretype.TypeIDFirst {
			v.OutStream += _gen_wiretype.TypeID(firstAdded)
		}
		result.Methods[k] = v
	}
	//TODO(bprosnitz) combine type definitions from embeded interfaces in a way that doesn't cause duplication.
	for _, d := range ss.TypeDefs {
		switch wt := d.(type) {
		case _gen_wiretype.SliceType:
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.ArrayType:
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.MapType:
			if wt.Key >= _gen_wiretype.TypeIDFirst {
				wt.Key += _gen_wiretype.TypeID(firstAdded)
			}
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.StructType:
			for i, fld := range wt.Fields {
				if fld.Type >= _gen_wiretype.TypeIDFirst {
					wt.Fields[i].Type += _gen_wiretype.TypeID(firstAdded)
				}
			}
			d = wt
			// NOTE: other types are missing, but we are upgrading anyways.
		}
		result.TypeDefs = append(result.TypeDefs, d)
	}

	return result, nil
}

func (__gen_s *ServerStubProximity) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := __gen_s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}
