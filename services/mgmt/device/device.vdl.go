// This file was auto-generated by the veyron vdl tool.
// Source: device.vdl

// Package device supports managing a device and applications running on
// the device.
package device

import (
	"v.io/core/veyron2/services/mgmt/binary"

	"v.io/core/veyron2/services/security/access"

	// The non-user imports are prefixed with "__" to prevent collisions.
	__veyron2 "v.io/core/veyron2"
	__context "v.io/core/veyron2/context"
	__ipc "v.io/core/veyron2/ipc"
	__vdl "v.io/core/veyron2/vdl"
)

// TODO(caprita): Merge with veyron2/config and veyron/lib/exec/config.go.
type Config map[string]string

func (Config) __VDLReflect(struct {
	Name string "v.io/core/veyron2/services/mgmt/device.Config"
}) {
}

// Description enumerates the profiles that a Device supports.
type Description struct {
	// Profiles is a set of names of supported profiles.	Each name can
	// either be an object name that resolves to a Profile, or can be the
	// profile's label, e.g.:
	//   "profiles/google/cluster/diskfull"
	//   "linux-media"
	//
	// Profiles for devices can be provided by hand, but they can also be
	// automatically derived by examining the device.
	Profiles map[string]struct{}
}

func (Description) __VDLReflect(struct {
	Name string "v.io/core/veyron2/services/mgmt/device.Description"
}) {
}

// Association is a tuple containing an association between a Veyron
// identity and a system account name.
type Association struct {
	IdentityName string
	AccountName  string
}

func (Association) __VDLReflect(struct {
	Name string "v.io/core/veyron2/services/mgmt/device.Association"
}) {
}

func init() {
	__vdl.Register(Config(nil))
	__vdl.Register(Description{})
	__vdl.Register(Association{})
}

// ApplicationClientMethods is the client interface
// containing Application methods.
//
// Application can be used to manage applications on a device. The
// idea is that this interace will be invoked using an object name that
// identifies the application and its installations and instances
// where applicable.
//
// In particular, the interface methods can be divided into three
// groups based on their intended receiver:
//
// 1) Method receiver is an application:
// -- Install()
//
// 2) Method receiver is an application installation:
// -- Start()
// -- Uninstall()
// -- Update()
//
// 3) Method receiver is application installation instance:
// -- Refresh()
// -- Restart()
// -- Resume()
// -- Stop()
// -- Suspend()
//
// For groups 2) and 3), the suffix that specifies the receiver can
// optionally omit the installation and/or instance, in which case the
// operation applies to all installations and/or instances in the
// scope of the suffix.
//
// Examples:
// # Install Google Maps on the device.
// device/apps.Install("/google.com/appstore/maps") --> "google maps/0"
//
// # Start an instance of the previously installed maps application installation.
// device/apps/google maps/0.Start() --> { "0" }
//
// # Start a second instance of the previously installed maps application installation.
// device/apps/google maps/0.Start() --> { "1" }
//
// # Stop the first instance previously started.
// device/apps/google maps/0/0.Stop()
//
// # Install a second Google Maps installation.
// device/apps.Install("/google.com/appstore/maps") --> "google maps/1"
//
// # Start an instance for all maps application installations.
// device/apps/google maps.Start() --> {"0/2", "1/0"}
//
// # Refresh the state of all instances of all maps application installations.
// device/apps/google maps.Refresh()
//
// # Refresh the state of all instances of the maps application installation
// identified by the given suffix.
// device/apps/google maps/0.Refresh()
//
// # Refresh the state of the maps application installation instance identified by
// the given suffix.
// device/apps/google maps/0/2.Refresh()
//
// # Update the second maps installation to the latest version available.
// device/apps/google maps/1.Update()
//
// # Update the first maps installation to a specific version.
// device/apps/google maps/0.UpdateTo("/google.com/appstore/beta/maps")
//
// Further, the following methods complement one another:
// -- Install() and Uninstall()
// -- Start() and Stop()
// -- Suspend() and Resume()
//
// Finally, an application installation instance can be in one of
// three abstract states: 1) "does not exist", 2) "running", or 3)
// "suspended". The interface methods transition between these
// abstract states using the following state machine:
//
// apply(Start(), "does not exists") = "running"
// apply(Refresh(), "running") = "running"
// apply(Refresh(), "suspended") = "suspended"
// apply(Restart(), "running") = "running"
// apply(Restart(), "suspended") = "running"
// apply(Resume(), "suspended") = "running"
// apply(Resume(), "running") = "running"
// apply(Stop(), "running") = "does not exist"
// apply(Stop(), "suspended") = "does not exist"
// apply(Suspend(), "running") = "suspended"
// apply(Suspend(), "suspended") = "suspended"
//
// In other words, invoking any method using an existing application
// installation instance as a receiver is well-defined.
type ApplicationClientMethods interface {
	// Object provides access control for Veyron objects.
	//
	// Veyron services implementing dynamic access control would typically
	// embed this interface and tag additional methods defined by the service
	// with one of Admin, Read, Write, Resolve etc. For example,
	// the VDL definition of the object would be:
	//
	//   package mypackage
	//
	//   import "v.io/core/veyron2/security/access"
	//
	//   type MyObject interface {
	//     access.Object
	//     MyRead() (string, error) {access.Read}
	//     MyWrite(string) error    {access.Write}
	//   }
	//
	// If the set of pre-defined tags is insufficient, services may define their
	// own tag type and annotate all methods with this new type.
	// Instead of embedding this Object interface, define SetACL and GetACL in
	// their own interface. Authorization policies will typically respect
	// annotations of a single type. For example, the VDL definition of an object
	// would be:
	//
	//  package mypackage
	//
	//  import "v.io/core/veyron2/security/access"
	//
	//  type MyTag string
	//
	//  const (
	//    Blue = MyTag("Blue")
	//    Red  = MyTag("Red")
	//  )
	//
	//  type MyObject interface {
	//    MyMethod() (string, error) {Blue}
	//
	//    // Allow clients to change access via the access.Object interface:
	//    SetACL(acl access.TaggedACLMap, etag string) error         {Red}
	//    GetACL() (acl access.TaggedACLMap, etag string, err error) {Blue}
	//  }
	access.ObjectClientMethods
	// Install installs the application identified by the argument and
	// returns an object name suffix that identifies the new installation.
	//
	// The argument should be an object name for an application envelope.
	// The service it identifies must implement repository.Application, and
	// is expected to return either the requested version (if the object name
	// encodes a specific version), or otherwise the latest available version,
	// as appropriate.
	//
	// The returned suffix, when appended to the name used to reach the
	// receiver for Install, can be used to control the installation object.
	// The suffix will contain the title of the application as a prefix,
	// which can then be used to control all the installations of the given
	// application.
	// TODO(rjkroege): Use customized labels.
	Install(ctx *__context.T, name string, config Config, opts ...__ipc.CallOpt) (string, error)
	// Refresh refreshes the state of application installation(s)
	// instance(s).
	Refresh(*__context.T, ...__ipc.CallOpt) error
	// Restart restarts execution of application installation(s)
	// instance(s).
	Restart(*__context.T, ...__ipc.CallOpt) error
	// Resume resumes execution of application installation(s)
	// instance(s).
	Resume(*__context.T, ...__ipc.CallOpt) error
	// Revert reverts application installation(s) to the most recent
	// previous installation.
	Revert(*__context.T, ...__ipc.CallOpt) error
	// Start starts an instance of application installation(s) and
	// returns the object name(s) that identifies/identify the new
	// instance(s).
	Start(*__context.T, ...__ipc.CallOpt) ([]string, error)
	// Stop attempts a clean shutdown of application installation(s)
	// instance(s). If the deadline (in seconds) is non-zero and the
	// instance(s) in questions are still running after the given deadline,
	// shutdown of the instance(s) is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Stop(ctx *__context.T, deadline uint32, opts ...__ipc.CallOpt) error
	// Suspend suspends execution of application installation(s)
	// instance(s).
	Suspend(*__context.T, ...__ipc.CallOpt) error
	// Uninstall uninstalls application installation(s).
	Uninstall(*__context.T, ...__ipc.CallOpt) error
	// Update updates the application installation(s) from the object name
	// provided during Install.  If the new application envelope contains a
	// different application title, the update does not occur, and an error
	// is returned.
	Update(*__context.T, ...__ipc.CallOpt) error
	// UpdateTo updates the application installation(s) to the application
	// specified by the object name argument.  If the new application
	// envelope contains a different application title, the update does not
	// occur, and an error is returned.
	UpdateTo(ctx *__context.T, name string, opts ...__ipc.CallOpt) error
}

// ApplicationClientStub adds universal methods to ApplicationClientMethods.
type ApplicationClientStub interface {
	ApplicationClientMethods
	__ipc.UniversalServiceMethods
}

// ApplicationClient returns a client stub for Application.
func ApplicationClient(name string, opts ...__ipc.BindOpt) ApplicationClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implApplicationClientStub{name, client, access.ObjectClient(name, client)}
}

type implApplicationClientStub struct {
	name   string
	client __ipc.Client

	access.ObjectClientStub
}

func (c implApplicationClientStub) c(ctx *__context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.GetClient(ctx)
}

func (c implApplicationClientStub) Install(ctx *__context.T, i0 string, i1 Config, opts ...__ipc.CallOpt) (o0 string, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Install", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) Refresh(ctx *__context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Refresh", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) Restart(ctx *__context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Restart", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) Resume(ctx *__context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Resume", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) Revert(ctx *__context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Revert", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) Start(ctx *__context.T, opts ...__ipc.CallOpt) (o0 []string, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Start", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) Stop(ctx *__context.T, i0 uint32, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Stop", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) Suspend(ctx *__context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Suspend", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) Uninstall(ctx *__context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Uninstall", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) Update(ctx *__context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Update", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implApplicationClientStub) UpdateTo(ctx *__context.T, i0 string, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "UpdateTo", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

// ApplicationServerMethods is the interface a server writer
// implements for Application.
//
// Application can be used to manage applications on a device. The
// idea is that this interace will be invoked using an object name that
// identifies the application and its installations and instances
// where applicable.
//
// In particular, the interface methods can be divided into three
// groups based on their intended receiver:
//
// 1) Method receiver is an application:
// -- Install()
//
// 2) Method receiver is an application installation:
// -- Start()
// -- Uninstall()
// -- Update()
//
// 3) Method receiver is application installation instance:
// -- Refresh()
// -- Restart()
// -- Resume()
// -- Stop()
// -- Suspend()
//
// For groups 2) and 3), the suffix that specifies the receiver can
// optionally omit the installation and/or instance, in which case the
// operation applies to all installations and/or instances in the
// scope of the suffix.
//
// Examples:
// # Install Google Maps on the device.
// device/apps.Install("/google.com/appstore/maps") --> "google maps/0"
//
// # Start an instance of the previously installed maps application installation.
// device/apps/google maps/0.Start() --> { "0" }
//
// # Start a second instance of the previously installed maps application installation.
// device/apps/google maps/0.Start() --> { "1" }
//
// # Stop the first instance previously started.
// device/apps/google maps/0/0.Stop()
//
// # Install a second Google Maps installation.
// device/apps.Install("/google.com/appstore/maps") --> "google maps/1"
//
// # Start an instance for all maps application installations.
// device/apps/google maps.Start() --> {"0/2", "1/0"}
//
// # Refresh the state of all instances of all maps application installations.
// device/apps/google maps.Refresh()
//
// # Refresh the state of all instances of the maps application installation
// identified by the given suffix.
// device/apps/google maps/0.Refresh()
//
// # Refresh the state of the maps application installation instance identified by
// the given suffix.
// device/apps/google maps/0/2.Refresh()
//
// # Update the second maps installation to the latest version available.
// device/apps/google maps/1.Update()
//
// # Update the first maps installation to a specific version.
// device/apps/google maps/0.UpdateTo("/google.com/appstore/beta/maps")
//
// Further, the following methods complement one another:
// -- Install() and Uninstall()
// -- Start() and Stop()
// -- Suspend() and Resume()
//
// Finally, an application installation instance can be in one of
// three abstract states: 1) "does not exist", 2) "running", or 3)
// "suspended". The interface methods transition between these
// abstract states using the following state machine:
//
// apply(Start(), "does not exists") = "running"
// apply(Refresh(), "running") = "running"
// apply(Refresh(), "suspended") = "suspended"
// apply(Restart(), "running") = "running"
// apply(Restart(), "suspended") = "running"
// apply(Resume(), "suspended") = "running"
// apply(Resume(), "running") = "running"
// apply(Stop(), "running") = "does not exist"
// apply(Stop(), "suspended") = "does not exist"
// apply(Suspend(), "running") = "suspended"
// apply(Suspend(), "suspended") = "suspended"
//
// In other words, invoking any method using an existing application
// installation instance as a receiver is well-defined.
type ApplicationServerMethods interface {
	// Object provides access control for Veyron objects.
	//
	// Veyron services implementing dynamic access control would typically
	// embed this interface and tag additional methods defined by the service
	// with one of Admin, Read, Write, Resolve etc. For example,
	// the VDL definition of the object would be:
	//
	//   package mypackage
	//
	//   import "v.io/core/veyron2/security/access"
	//
	//   type MyObject interface {
	//     access.Object
	//     MyRead() (string, error) {access.Read}
	//     MyWrite(string) error    {access.Write}
	//   }
	//
	// If the set of pre-defined tags is insufficient, services may define their
	// own tag type and annotate all methods with this new type.
	// Instead of embedding this Object interface, define SetACL and GetACL in
	// their own interface. Authorization policies will typically respect
	// annotations of a single type. For example, the VDL definition of an object
	// would be:
	//
	//  package mypackage
	//
	//  import "v.io/core/veyron2/security/access"
	//
	//  type MyTag string
	//
	//  const (
	//    Blue = MyTag("Blue")
	//    Red  = MyTag("Red")
	//  )
	//
	//  type MyObject interface {
	//    MyMethod() (string, error) {Blue}
	//
	//    // Allow clients to change access via the access.Object interface:
	//    SetACL(acl access.TaggedACLMap, etag string) error         {Red}
	//    GetACL() (acl access.TaggedACLMap, etag string, err error) {Blue}
	//  }
	access.ObjectServerMethods
	// Install installs the application identified by the argument and
	// returns an object name suffix that identifies the new installation.
	//
	// The argument should be an object name for an application envelope.
	// The service it identifies must implement repository.Application, and
	// is expected to return either the requested version (if the object name
	// encodes a specific version), or otherwise the latest available version,
	// as appropriate.
	//
	// The returned suffix, when appended to the name used to reach the
	// receiver for Install, can be used to control the installation object.
	// The suffix will contain the title of the application as a prefix,
	// which can then be used to control all the installations of the given
	// application.
	// TODO(rjkroege): Use customized labels.
	Install(ctx __ipc.ServerContext, name string, config Config) (string, error)
	// Refresh refreshes the state of application installation(s)
	// instance(s).
	Refresh(__ipc.ServerContext) error
	// Restart restarts execution of application installation(s)
	// instance(s).
	Restart(__ipc.ServerContext) error
	// Resume resumes execution of application installation(s)
	// instance(s).
	Resume(__ipc.ServerContext) error
	// Revert reverts application installation(s) to the most recent
	// previous installation.
	Revert(__ipc.ServerContext) error
	// Start starts an instance of application installation(s) and
	// returns the object name(s) that identifies/identify the new
	// instance(s).
	Start(__ipc.ServerContext) ([]string, error)
	// Stop attempts a clean shutdown of application installation(s)
	// instance(s). If the deadline (in seconds) is non-zero and the
	// instance(s) in questions are still running after the given deadline,
	// shutdown of the instance(s) is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Stop(ctx __ipc.ServerContext, deadline uint32) error
	// Suspend suspends execution of application installation(s)
	// instance(s).
	Suspend(__ipc.ServerContext) error
	// Uninstall uninstalls application installation(s).
	Uninstall(__ipc.ServerContext) error
	// Update updates the application installation(s) from the object name
	// provided during Install.  If the new application envelope contains a
	// different application title, the update does not occur, and an error
	// is returned.
	Update(__ipc.ServerContext) error
	// UpdateTo updates the application installation(s) to the application
	// specified by the object name argument.  If the new application
	// envelope contains a different application title, the update does not
	// occur, and an error is returned.
	UpdateTo(ctx __ipc.ServerContext, name string) error
}

// ApplicationServerStubMethods is the server interface containing
// Application methods, as expected by ipc.Server.
// There is no difference between this interface and ApplicationServerMethods
// since there are no streaming methods.
type ApplicationServerStubMethods ApplicationServerMethods

// ApplicationServerStub adds universal methods to ApplicationServerStubMethods.
type ApplicationServerStub interface {
	ApplicationServerStubMethods
	// Describe the Application interfaces.
	Describe__() []__ipc.InterfaceDesc
}

// ApplicationServer returns a server stub for Application.
// It converts an implementation of ApplicationServerMethods into
// an object that may be used by ipc.Server.
func ApplicationServer(impl ApplicationServerMethods) ApplicationServerStub {
	stub := implApplicationServerStub{
		impl:             impl,
		ObjectServerStub: access.ObjectServer(impl),
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implApplicationServerStub struct {
	impl ApplicationServerMethods
	access.ObjectServerStub
	gs *__ipc.GlobState
}

func (s implApplicationServerStub) Install(ctx __ipc.ServerContext, i0 string, i1 Config) (string, error) {
	return s.impl.Install(ctx, i0, i1)
}

func (s implApplicationServerStub) Refresh(ctx __ipc.ServerContext) error {
	return s.impl.Refresh(ctx)
}

func (s implApplicationServerStub) Restart(ctx __ipc.ServerContext) error {
	return s.impl.Restart(ctx)
}

func (s implApplicationServerStub) Resume(ctx __ipc.ServerContext) error {
	return s.impl.Resume(ctx)
}

func (s implApplicationServerStub) Revert(ctx __ipc.ServerContext) error {
	return s.impl.Revert(ctx)
}

func (s implApplicationServerStub) Start(ctx __ipc.ServerContext) ([]string, error) {
	return s.impl.Start(ctx)
}

func (s implApplicationServerStub) Stop(ctx __ipc.ServerContext, i0 uint32) error {
	return s.impl.Stop(ctx, i0)
}

func (s implApplicationServerStub) Suspend(ctx __ipc.ServerContext) error {
	return s.impl.Suspend(ctx)
}

func (s implApplicationServerStub) Uninstall(ctx __ipc.ServerContext) error {
	return s.impl.Uninstall(ctx)
}

func (s implApplicationServerStub) Update(ctx __ipc.ServerContext) error {
	return s.impl.Update(ctx)
}

func (s implApplicationServerStub) UpdateTo(ctx __ipc.ServerContext, i0 string) error {
	return s.impl.UpdateTo(ctx, i0)
}

func (s implApplicationServerStub) Globber() *__ipc.GlobState {
	return s.gs
}

func (s implApplicationServerStub) Describe__() []__ipc.InterfaceDesc {
	return []__ipc.InterfaceDesc{ApplicationDesc, access.ObjectDesc}
}

// ApplicationDesc describes the Application interface.
var ApplicationDesc __ipc.InterfaceDesc = descApplication

// descApplication hides the desc to keep godoc clean.
var descApplication = __ipc.InterfaceDesc{
	Name:    "Application",
	PkgPath: "v.io/core/veyron2/services/mgmt/device",
	Doc:     "// Application can be used to manage applications on a device. The\n// idea is that this interace will be invoked using an object name that\n// identifies the application and its installations and instances\n// where applicable.\n//\n// In particular, the interface methods can be divided into three\n// groups based on their intended receiver:\n//\n// 1) Method receiver is an application:\n// -- Install()\n//\n// 2) Method receiver is an application installation:\n// -- Start()\n// -- Uninstall()\n// -- Update()\n//\n// 3) Method receiver is application installation instance:\n// -- Refresh()\n// -- Restart()\n// -- Resume()\n// -- Stop()\n// -- Suspend()\n//\n// For groups 2) and 3), the suffix that specifies the receiver can\n// optionally omit the installation and/or instance, in which case the\n// operation applies to all installations and/or instances in the\n// scope of the suffix.\n//\n// Examples:\n// # Install Google Maps on the device.\n// device/apps.Install(\"/google.com/appstore/maps\") --> \"google maps/0\"\n//\n// # Start an instance of the previously installed maps application installation.\n// device/apps/google maps/0.Start() --> { \"0\" }\n//\n// # Start a second instance of the previously installed maps application installation.\n// device/apps/google maps/0.Start() --> { \"1\" }\n//\n// # Stop the first instance previously started.\n// device/apps/google maps/0/0.Stop()\n//\n// # Install a second Google Maps installation.\n// device/apps.Install(\"/google.com/appstore/maps\") --> \"google maps/1\"\n//\n// # Start an instance for all maps application installations.\n// device/apps/google maps.Start() --> {\"0/2\", \"1/0\"}\n//\n// # Refresh the state of all instances of all maps application installations.\n// device/apps/google maps.Refresh()\n//\n// # Refresh the state of all instances of the maps application installation\n// identified by the given suffix.\n// device/apps/google maps/0.Refresh()\n//\n// # Refresh the state of the maps application installation instance identified by\n// the given suffix.\n// device/apps/google maps/0/2.Refresh()\n//\n// # Update the second maps installation to the latest version available.\n// device/apps/google maps/1.Update()\n//\n// # Update the first maps installation to a specific version.\n// device/apps/google maps/0.UpdateTo(\"/google.com/appstore/beta/maps\")\n//\n// Further, the following methods complement one another:\n// -- Install() and Uninstall()\n// -- Start() and Stop()\n// -- Suspend() and Resume()\n//\n// Finally, an application installation instance can be in one of\n// three abstract states: 1) \"does not exist\", 2) \"running\", or 3)\n// \"suspended\". The interface methods transition between these\n// abstract states using the following state machine:\n//\n// apply(Start(), \"does not exists\") = \"running\"\n// apply(Refresh(), \"running\") = \"running\"\n// apply(Refresh(), \"suspended\") = \"suspended\"\n// apply(Restart(), \"running\") = \"running\"\n// apply(Restart(), \"suspended\") = \"running\"\n// apply(Resume(), \"suspended\") = \"running\"\n// apply(Resume(), \"running\") = \"running\"\n// apply(Stop(), \"running\") = \"does not exist\"\n// apply(Stop(), \"suspended\") = \"does not exist\"\n// apply(Suspend(), \"running\") = \"suspended\"\n// apply(Suspend(), \"suspended\") = \"suspended\"\n//\n// In other words, invoking any method using an existing application\n// installation instance as a receiver is well-defined.",
	Embeds: []__ipc.EmbedDesc{
		{"Object", "v.io/core/veyron2/services/security/access", "// Object provides access control for Veyron objects.\n//\n// Veyron services implementing dynamic access control would typically\n// embed this interface and tag additional methods defined by the service\n// with one of Admin, Read, Write, Resolve etc. For example,\n// the VDL definition of the object would be:\n//\n//   package mypackage\n//\n//   import \"v.io/core/veyron2/security/access\"\n//\n//   type MyObject interface {\n//     access.Object\n//     MyRead() (string, error) {access.Read}\n//     MyWrite(string) error    {access.Write}\n//   }\n//\n// If the set of pre-defined tags is insufficient, services may define their\n// own tag type and annotate all methods with this new type.\n// Instead of embedding this Object interface, define SetACL and GetACL in\n// their own interface. Authorization policies will typically respect\n// annotations of a single type. For example, the VDL definition of an object\n// would be:\n//\n//  package mypackage\n//\n//  import \"v.io/core/veyron2/security/access\"\n//\n//  type MyTag string\n//\n//  const (\n//    Blue = MyTag(\"Blue\")\n//    Red  = MyTag(\"Red\")\n//  )\n//\n//  type MyObject interface {\n//    MyMethod() (string, error) {Blue}\n//\n//    // Allow clients to change access via the access.Object interface:\n//    SetACL(acl access.TaggedACLMap, etag string) error         {Red}\n//    GetACL() (acl access.TaggedACLMap, etag string, err error) {Blue}\n//  }"},
	},
	Methods: []__ipc.MethodDesc{
		{
			Name: "Install",
			Doc:  "// Install installs the application identified by the argument and\n// returns an object name suffix that identifies the new installation.\n//\n// The argument should be an object name for an application envelope.\n// The service it identifies must implement repository.Application, and\n// is expected to return either the requested version (if the object name\n// encodes a specific version), or otherwise the latest available version,\n// as appropriate.\n//\n// The returned suffix, when appended to the name used to reach the\n// receiver for Install, can be used to control the installation object.\n// The suffix will contain the title of the application as a prefix,\n// which can then be used to control all the installations of the given\n// application.\n// TODO(rjkroege): Use customized labels.",
			InArgs: []__ipc.ArgDesc{
				{"name", ``},   // string
				{"config", ``}, // Config
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // string
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Write")},
		},
		{
			Name: "Refresh",
			Doc:  "// Refresh refreshes the state of application installation(s)\n// instance(s).",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "Restart",
			Doc:  "// Restart restarts execution of application installation(s)\n// instance(s).",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Write")},
		},
		{
			Name: "Resume",
			Doc:  "// Resume resumes execution of application installation(s)\n// instance(s).",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Write")},
		},
		{
			Name: "Revert",
			Doc:  "// Revert reverts application installation(s) to the most recent\n// previous installation.",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "Start",
			Doc:  "// Start starts an instance of application installation(s) and\n// returns the object name(s) that identifies/identify the new\n// instance(s).",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // []string
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Read")},
		},
		{
			Name: "Stop",
			Doc:  "// Stop attempts a clean shutdown of application installation(s)\n// instance(s). If the deadline (in seconds) is non-zero and the\n// instance(s) in questions are still running after the given deadline,\n// shutdown of the instance(s) is enforced.\n//\n// TODO(jsimsa): Switch deadline to time.Duration when built-in types\n// are implemented.",
			InArgs: []__ipc.ArgDesc{
				{"deadline", ``}, // uint32
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "Suspend",
			Doc:  "// Suspend suspends execution of application installation(s)\n// instance(s).",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Write")},
		},
		{
			Name: "Uninstall",
			Doc:  "// Uninstall uninstalls application installation(s).",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "Update",
			Doc:  "// Update updates the application installation(s) from the object name\n// provided during Install.  If the new application envelope contains a\n// different application title, the update does not occur, and an error\n// is returned.",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "UpdateTo",
			Doc:  "// UpdateTo updates the application installation(s) to the application\n// specified by the object name argument.  If the new application\n// envelope contains a different application title, the update does not\n// occur, and an error is returned.",
			InArgs: []__ipc.ArgDesc{
				{"name", ``}, // string
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
	},
}

// DeviceClientMethods is the client interface
// containing Device methods.
//
// Device can be used to manage a device remotely using an object name that
// identifies it.
type DeviceClientMethods interface {
	// Application can be used to manage applications on a device. The
	// idea is that this interace will be invoked using an object name that
	// identifies the application and its installations and instances
	// where applicable.
	//
	// In particular, the interface methods can be divided into three
	// groups based on their intended receiver:
	//
	// 1) Method receiver is an application:
	// -- Install()
	//
	// 2) Method receiver is an application installation:
	// -- Start()
	// -- Uninstall()
	// -- Update()
	//
	// 3) Method receiver is application installation instance:
	// -- Refresh()
	// -- Restart()
	// -- Resume()
	// -- Stop()
	// -- Suspend()
	//
	// For groups 2) and 3), the suffix that specifies the receiver can
	// optionally omit the installation and/or instance, in which case the
	// operation applies to all installations and/or instances in the
	// scope of the suffix.
	//
	// Examples:
	// # Install Google Maps on the device.
	// device/apps.Install("/google.com/appstore/maps") --> "google maps/0"
	//
	// # Start an instance of the previously installed maps application installation.
	// device/apps/google maps/0.Start() --> { "0" }
	//
	// # Start a second instance of the previously installed maps application installation.
	// device/apps/google maps/0.Start() --> { "1" }
	//
	// # Stop the first instance previously started.
	// device/apps/google maps/0/0.Stop()
	//
	// # Install a second Google Maps installation.
	// device/apps.Install("/google.com/appstore/maps") --> "google maps/1"
	//
	// # Start an instance for all maps application installations.
	// device/apps/google maps.Start() --> {"0/2", "1/0"}
	//
	// # Refresh the state of all instances of all maps application installations.
	// device/apps/google maps.Refresh()
	//
	// # Refresh the state of all instances of the maps application installation
	// identified by the given suffix.
	// device/apps/google maps/0.Refresh()
	//
	// # Refresh the state of the maps application installation instance identified by
	// the given suffix.
	// device/apps/google maps/0/2.Refresh()
	//
	// # Update the second maps installation to the latest version available.
	// device/apps/google maps/1.Update()
	//
	// # Update the first maps installation to a specific version.
	// device/apps/google maps/0.UpdateTo("/google.com/appstore/beta/maps")
	//
	// Further, the following methods complement one another:
	// -- Install() and Uninstall()
	// -- Start() and Stop()
	// -- Suspend() and Resume()
	//
	// Finally, an application installation instance can be in one of
	// three abstract states: 1) "does not exist", 2) "running", or 3)
	// "suspended". The interface methods transition between these
	// abstract states using the following state machine:
	//
	// apply(Start(), "does not exists") = "running"
	// apply(Refresh(), "running") = "running"
	// apply(Refresh(), "suspended") = "suspended"
	// apply(Restart(), "running") = "running"
	// apply(Restart(), "suspended") = "running"
	// apply(Resume(), "suspended") = "running"
	// apply(Resume(), "running") = "running"
	// apply(Stop(), "running") = "does not exist"
	// apply(Stop(), "suspended") = "does not exist"
	// apply(Suspend(), "running") = "suspended"
	// apply(Suspend(), "suspended") = "suspended"
	//
	// In other words, invoking any method using an existing application
	// installation instance as a receiver is well-defined.
	ApplicationClientMethods
	// Claim is used to claim ownership of a device by blessing its
	// identity. By default, after this call, all device methods will be
	// access protected to the identity of the claimer.
	Claim(*__context.T, ...__ipc.CallOpt) error
	// Describe generates a description of the device.
	Describe(*__context.T, ...__ipc.CallOpt) (Description, error)
	// IsRunnable checks if the device can execute the given binary.
	IsRunnable(ctx *__context.T, description binary.Description, opts ...__ipc.CallOpt) (bool, error)
	// Reset resets the device. If the deadline is non-zero and the device
	// in question is still running after the given deadline expired,
	// reset of the device is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Reset(ctx *__context.T, deadline uint64, opts ...__ipc.CallOpt) error
	// AssociateAccount associates a local  system account name with the provided
	// Veyron identities. It replaces the existing association if one already exists for that
	// identity. Setting an AccountName to "" removes the association for each
	// listed identity.
	AssociateAccount(ctx *__context.T, identityNames []string, accountName string, opts ...__ipc.CallOpt) error
	// ListAssociations returns all of the associations between Veyron identities
	// and system names.
	ListAssociations(*__context.T, ...__ipc.CallOpt) ([]Association, error)
}

// DeviceClientStub adds universal methods to DeviceClientMethods.
type DeviceClientStub interface {
	DeviceClientMethods
	__ipc.UniversalServiceMethods
}

// DeviceClient returns a client stub for Device.
func DeviceClient(name string, opts ...__ipc.BindOpt) DeviceClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implDeviceClientStub{name, client, ApplicationClient(name, client)}
}

type implDeviceClientStub struct {
	name   string
	client __ipc.Client

	ApplicationClientStub
}

func (c implDeviceClientStub) c(ctx *__context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.GetClient(ctx)
}

func (c implDeviceClientStub) Claim(ctx *__context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Claim", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implDeviceClientStub) Describe(ctx *__context.T, opts ...__ipc.CallOpt) (o0 Description, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Describe", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implDeviceClientStub) IsRunnable(ctx *__context.T, i0 binary.Description, opts ...__ipc.CallOpt) (o0 bool, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "IsRunnable", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implDeviceClientStub) Reset(ctx *__context.T, i0 uint64, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Reset", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implDeviceClientStub) AssociateAccount(ctx *__context.T, i0 []string, i1 string, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "AssociateAccount", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implDeviceClientStub) ListAssociations(ctx *__context.T, opts ...__ipc.CallOpt) (o0 []Association, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "ListAssociations", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// DeviceServerMethods is the interface a server writer
// implements for Device.
//
// Device can be used to manage a device remotely using an object name that
// identifies it.
type DeviceServerMethods interface {
	// Application can be used to manage applications on a device. The
	// idea is that this interace will be invoked using an object name that
	// identifies the application and its installations and instances
	// where applicable.
	//
	// In particular, the interface methods can be divided into three
	// groups based on their intended receiver:
	//
	// 1) Method receiver is an application:
	// -- Install()
	//
	// 2) Method receiver is an application installation:
	// -- Start()
	// -- Uninstall()
	// -- Update()
	//
	// 3) Method receiver is application installation instance:
	// -- Refresh()
	// -- Restart()
	// -- Resume()
	// -- Stop()
	// -- Suspend()
	//
	// For groups 2) and 3), the suffix that specifies the receiver can
	// optionally omit the installation and/or instance, in which case the
	// operation applies to all installations and/or instances in the
	// scope of the suffix.
	//
	// Examples:
	// # Install Google Maps on the device.
	// device/apps.Install("/google.com/appstore/maps") --> "google maps/0"
	//
	// # Start an instance of the previously installed maps application installation.
	// device/apps/google maps/0.Start() --> { "0" }
	//
	// # Start a second instance of the previously installed maps application installation.
	// device/apps/google maps/0.Start() --> { "1" }
	//
	// # Stop the first instance previously started.
	// device/apps/google maps/0/0.Stop()
	//
	// # Install a second Google Maps installation.
	// device/apps.Install("/google.com/appstore/maps") --> "google maps/1"
	//
	// # Start an instance for all maps application installations.
	// device/apps/google maps.Start() --> {"0/2", "1/0"}
	//
	// # Refresh the state of all instances of all maps application installations.
	// device/apps/google maps.Refresh()
	//
	// # Refresh the state of all instances of the maps application installation
	// identified by the given suffix.
	// device/apps/google maps/0.Refresh()
	//
	// # Refresh the state of the maps application installation instance identified by
	// the given suffix.
	// device/apps/google maps/0/2.Refresh()
	//
	// # Update the second maps installation to the latest version available.
	// device/apps/google maps/1.Update()
	//
	// # Update the first maps installation to a specific version.
	// device/apps/google maps/0.UpdateTo("/google.com/appstore/beta/maps")
	//
	// Further, the following methods complement one another:
	// -- Install() and Uninstall()
	// -- Start() and Stop()
	// -- Suspend() and Resume()
	//
	// Finally, an application installation instance can be in one of
	// three abstract states: 1) "does not exist", 2) "running", or 3)
	// "suspended". The interface methods transition between these
	// abstract states using the following state machine:
	//
	// apply(Start(), "does not exists") = "running"
	// apply(Refresh(), "running") = "running"
	// apply(Refresh(), "suspended") = "suspended"
	// apply(Restart(), "running") = "running"
	// apply(Restart(), "suspended") = "running"
	// apply(Resume(), "suspended") = "running"
	// apply(Resume(), "running") = "running"
	// apply(Stop(), "running") = "does not exist"
	// apply(Stop(), "suspended") = "does not exist"
	// apply(Suspend(), "running") = "suspended"
	// apply(Suspend(), "suspended") = "suspended"
	//
	// In other words, invoking any method using an existing application
	// installation instance as a receiver is well-defined.
	ApplicationServerMethods
	// Claim is used to claim ownership of a device by blessing its
	// identity. By default, after this call, all device methods will be
	// access protected to the identity of the claimer.
	Claim(__ipc.ServerContext) error
	// Describe generates a description of the device.
	Describe(__ipc.ServerContext) (Description, error)
	// IsRunnable checks if the device can execute the given binary.
	IsRunnable(ctx __ipc.ServerContext, description binary.Description) (bool, error)
	// Reset resets the device. If the deadline is non-zero and the device
	// in question is still running after the given deadline expired,
	// reset of the device is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Reset(ctx __ipc.ServerContext, deadline uint64) error
	// AssociateAccount associates a local  system account name with the provided
	// Veyron identities. It replaces the existing association if one already exists for that
	// identity. Setting an AccountName to "" removes the association for each
	// listed identity.
	AssociateAccount(ctx __ipc.ServerContext, identityNames []string, accountName string) error
	// ListAssociations returns all of the associations between Veyron identities
	// and system names.
	ListAssociations(__ipc.ServerContext) ([]Association, error)
}

// DeviceServerStubMethods is the server interface containing
// Device methods, as expected by ipc.Server.
// There is no difference between this interface and DeviceServerMethods
// since there are no streaming methods.
type DeviceServerStubMethods DeviceServerMethods

// DeviceServerStub adds universal methods to DeviceServerStubMethods.
type DeviceServerStub interface {
	DeviceServerStubMethods
	// Describe the Device interfaces.
	Describe__() []__ipc.InterfaceDesc
}

// DeviceServer returns a server stub for Device.
// It converts an implementation of DeviceServerMethods into
// an object that may be used by ipc.Server.
func DeviceServer(impl DeviceServerMethods) DeviceServerStub {
	stub := implDeviceServerStub{
		impl: impl,
		ApplicationServerStub: ApplicationServer(impl),
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implDeviceServerStub struct {
	impl DeviceServerMethods
	ApplicationServerStub
	gs *__ipc.GlobState
}

func (s implDeviceServerStub) Claim(ctx __ipc.ServerContext) error {
	return s.impl.Claim(ctx)
}

func (s implDeviceServerStub) Describe(ctx __ipc.ServerContext) (Description, error) {
	return s.impl.Describe(ctx)
}

func (s implDeviceServerStub) IsRunnable(ctx __ipc.ServerContext, i0 binary.Description) (bool, error) {
	return s.impl.IsRunnable(ctx, i0)
}

func (s implDeviceServerStub) Reset(ctx __ipc.ServerContext, i0 uint64) error {
	return s.impl.Reset(ctx, i0)
}

func (s implDeviceServerStub) AssociateAccount(ctx __ipc.ServerContext, i0 []string, i1 string) error {
	return s.impl.AssociateAccount(ctx, i0, i1)
}

func (s implDeviceServerStub) ListAssociations(ctx __ipc.ServerContext) ([]Association, error) {
	return s.impl.ListAssociations(ctx)
}

func (s implDeviceServerStub) Globber() *__ipc.GlobState {
	return s.gs
}

func (s implDeviceServerStub) Describe__() []__ipc.InterfaceDesc {
	return []__ipc.InterfaceDesc{DeviceDesc, ApplicationDesc, access.ObjectDesc}
}

// DeviceDesc describes the Device interface.
var DeviceDesc __ipc.InterfaceDesc = descDevice

// descDevice hides the desc to keep godoc clean.
var descDevice = __ipc.InterfaceDesc{
	Name:    "Device",
	PkgPath: "v.io/core/veyron2/services/mgmt/device",
	Doc:     "// Device can be used to manage a device remotely using an object name that\n// identifies it.",
	Embeds: []__ipc.EmbedDesc{
		{"Application", "v.io/core/veyron2/services/mgmt/device", "// Application can be used to manage applications on a device. The\n// idea is that this interace will be invoked using an object name that\n// identifies the application and its installations and instances\n// where applicable.\n//\n// In particular, the interface methods can be divided into three\n// groups based on their intended receiver:\n//\n// 1) Method receiver is an application:\n// -- Install()\n//\n// 2) Method receiver is an application installation:\n// -- Start()\n// -- Uninstall()\n// -- Update()\n//\n// 3) Method receiver is application installation instance:\n// -- Refresh()\n// -- Restart()\n// -- Resume()\n// -- Stop()\n// -- Suspend()\n//\n// For groups 2) and 3), the suffix that specifies the receiver can\n// optionally omit the installation and/or instance, in which case the\n// operation applies to all installations and/or instances in the\n// scope of the suffix.\n//\n// Examples:\n// # Install Google Maps on the device.\n// device/apps.Install(\"/google.com/appstore/maps\") --> \"google maps/0\"\n//\n// # Start an instance of the previously installed maps application installation.\n// device/apps/google maps/0.Start() --> { \"0\" }\n//\n// # Start a second instance of the previously installed maps application installation.\n// device/apps/google maps/0.Start() --> { \"1\" }\n//\n// # Stop the first instance previously started.\n// device/apps/google maps/0/0.Stop()\n//\n// # Install a second Google Maps installation.\n// device/apps.Install(\"/google.com/appstore/maps\") --> \"google maps/1\"\n//\n// # Start an instance for all maps application installations.\n// device/apps/google maps.Start() --> {\"0/2\", \"1/0\"}\n//\n// # Refresh the state of all instances of all maps application installations.\n// device/apps/google maps.Refresh()\n//\n// # Refresh the state of all instances of the maps application installation\n// identified by the given suffix.\n// device/apps/google maps/0.Refresh()\n//\n// # Refresh the state of the maps application installation instance identified by\n// the given suffix.\n// device/apps/google maps/0/2.Refresh()\n//\n// # Update the second maps installation to the latest version available.\n// device/apps/google maps/1.Update()\n//\n// # Update the first maps installation to a specific version.\n// device/apps/google maps/0.UpdateTo(\"/google.com/appstore/beta/maps\")\n//\n// Further, the following methods complement one another:\n// -- Install() and Uninstall()\n// -- Start() and Stop()\n// -- Suspend() and Resume()\n//\n// Finally, an application installation instance can be in one of\n// three abstract states: 1) \"does not exist\", 2) \"running\", or 3)\n// \"suspended\". The interface methods transition between these\n// abstract states using the following state machine:\n//\n// apply(Start(), \"does not exists\") = \"running\"\n// apply(Refresh(), \"running\") = \"running\"\n// apply(Refresh(), \"suspended\") = \"suspended\"\n// apply(Restart(), \"running\") = \"running\"\n// apply(Restart(), \"suspended\") = \"running\"\n// apply(Resume(), \"suspended\") = \"running\"\n// apply(Resume(), \"running\") = \"running\"\n// apply(Stop(), \"running\") = \"does not exist\"\n// apply(Stop(), \"suspended\") = \"does not exist\"\n// apply(Suspend(), \"running\") = \"suspended\"\n// apply(Suspend(), \"suspended\") = \"suspended\"\n//\n// In other words, invoking any method using an existing application\n// installation instance as a receiver is well-defined."},
	},
	Methods: []__ipc.MethodDesc{
		{
			Name: "Claim",
			Doc:  "// Claim is used to claim ownership of a device by blessing its\n// identity. By default, after this call, all device methods will be\n// access protected to the identity of the claimer.",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "Describe",
			Doc:  "// Describe generates a description of the device.",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // Description
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "IsRunnable",
			Doc:  "// IsRunnable checks if the device can execute the given binary.",
			InArgs: []__ipc.ArgDesc{
				{"description", ``}, // binary.Description
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // bool
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "Reset",
			Doc:  "// Reset resets the device. If the deadline is non-zero and the device\n// in question is still running after the given deadline expired,\n// reset of the device is enforced.\n//\n// TODO(jsimsa): Switch deadline to time.Duration when built-in types\n// are implemented.",
			InArgs: []__ipc.ArgDesc{
				{"deadline", ``}, // uint64
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "AssociateAccount",
			Doc:  "// AssociateAccount associates a local  system account name with the provided\n// Veyron identities. It replaces the existing association if one already exists for that\n// identity. Setting an AccountName to \"\" removes the association for each\n// listed identity.",
			InArgs: []__ipc.ArgDesc{
				{"identityNames", ``}, // []string
				{"accountName", ``},   // string
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
		{
			Name: "ListAssociations",
			Doc:  "// ListAssociations returns all of the associations between Veyron identities\n// and system names.",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // []Association
				{"", ``}, // error
			},
			Tags: []__vdl.AnyRep{access.Tag("Admin")},
		},
	},
}
