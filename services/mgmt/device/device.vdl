// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package device supports managing a device and applications running on
// the device.
package device

import (
	"v.io/v23/security"
	"v.io/v23/security/access"
	"v.io/v23/services/mgmt/application"
	"v.io/v23/services/mgmt/binary"
	"v.io/v23/services/permissions"
)

// TODO(caprita): Merge with v23/config and v.io/x/ref/lib/exec/config.go.

// Config specifies app configuration that overrides what's in the envelope.
type Config map[string]string

// InstallationState describes the states that an installation can be in at any
// time.
type InstallationState enum {
	Active
	Uninstalled
}

// InstanceState describes the states that an instance can be in at any
// time.
type InstanceState enum {
	Starting
	Started
	Suspending
	Suspended
	Stopping
	Stopped
	Updating
}

// Application can be used to manage applications on a device. The
// idea is that this interace will be invoked using an object name that
// identifies the application and its installations and instances
// where applicable.
//
// In particular, the interface methods can be divided into three
// groups based on their intended receiver:
//
// 1) Method receiver is an application:
// -- Install()
//
// 2) Method receiver is an application installation:
// -- Start()
// -- Uninstall()
// -- Update()
//
// 3) Method receiver is application installation instance:
// -- Refresh()
// -- Restart()
// -- Resume()
// -- Stop()
// -- Suspend()
//
// For groups 2) and 3), the suffix that specifies the receiver can
// optionally omit the installation and/or instance, in which case the
// operation applies to all installations and/or instances in the
// scope of the suffix.
//
// Examples:
// # Install Google Maps on the device.
// device/apps.Install("/google.com/appstore/maps", nil, nil) --> "google maps/0"
//
// # Start an instance of the previously installed maps application installation.
// device/apps/google maps/0.Start() --> { "0" }
//
// # Start a second instance of the previously installed maps application installation.
// device/apps/google maps/0.Start() --> { "1" }
//
// # Stop the first instance previously started.
// device/apps/google maps/0/0.Stop()
//
// # Install a second Google Maps installation.
// device/apps.Install("/google.com/appstore/maps", nil, nil) --> "google maps/1"
//
// # Start an instance for all maps application installations.
// device/apps/google maps.Start() --> {"0/2", "1/0"}
//
// # Refresh the state of all instances of all maps application installations.
// device/apps/google maps.Refresh()
//
// # Refresh the state of all instances of the maps application installation
// identified by the given suffix.
// device/apps/google maps/0.Refresh()
//
// # Refresh the state of the maps application installation instance identified by
// the given suffix.
// device/apps/google maps/0/2.Refresh()
//
// # Update the second maps installation to the latest version available.
// device/apps/google maps/1.Update()
//
// # Update the first maps installation to a specific version.
// device/apps/google maps/0.UpdateTo("/google.com/appstore/beta/maps")
//
// Further, the following methods complement one another:
// -- Install() and Uninstall()
// -- Start() and Stop()
// -- Suspend() and Resume()
//
// Finally, an application installation instance can be in one of
// three abstract states: 1) "does not exist", 2) "running", or 3)
// "suspended". The interface methods transition between these
// abstract states using the following state machine:
//
// apply(Start(), "does not exists") = "running"
// apply(Refresh(), "running") = "running"
// apply(Refresh(), "suspended") = "suspended"
// apply(Restart(), "running") = "running"
// apply(Restart(), "suspended") = "running"
// apply(Resume(), "suspended") = "running"
// apply(Resume(), "running") = "running"
// apply(Stop(), "running") = "does not exist"
// apply(Stop(), "suspended") = "does not exist"
// apply(Suspend(), "running") = "suspended"
// apply(Suspend(), "suspended") = "suspended"
//
// In other words, invoking any method using an existing application
// installation instance as a receiver is well-defined.
type Application interface {
	// Object provides GetPermissions/SetPermissions methods to read/modify AccessLists for the
	// Application methods. After a device has been claimed, only the
	// claimant will be able to modify the AccessLists for the device.
	permissions.Object
	// TODO(caprita): Rather than overriding config and package piecemeal,
	// consider providing an envelope override during install.

	// Install installs the application identified by the first argument and
	// returns an object name suffix that identifies the new installation.
	//
	// The name argument should be an object name for an application
	// envelope.  The service it identifies must implement
	// repository.Application, and is expected to return either the
	// requested version (if the object name encodes a specific version), or
	// otherwise the latest available version, as appropriate.  This object
	// name will be used by default by the Update method, as a source for
	// updated application envelopes (can be overriden by setting
	// AppOriginConfigKey in the config).
	//
	// The config argument specifies config settings that will take
	// precedence over those present in the application envelope.
	//
	// The packages argument specifies packages to be installed in addition
	// to those specified in the envelope.  If a package in the envelope has
	// the same key, the package in the packages argument takes precedence.
	//
	// The returned suffix, when appended to the name used to reach the
	// receiver for Install, can be used to control the installation object.
	// The suffix will contain the title of the application as a prefix,
	// which can then be used to control all the installations of the given
	// application.
	// TODO(rjkroege): Use customized labels.
	Install(name string, config Config, packages application.Packages) (string | error) {access.Write}
	// Refresh refreshes the state of application installation(s)
	// instance(s).
	Refresh() error {access.Admin}
	// Restart restarts execution of application installation(s)
	// instance(s).
	Restart() error {access.Write}
	// Resume resumes execution of application installation(s)
	// instance(s).
	Resume() error {access.Write}
	// Revert reverts application installation(s) to the most recent
	// previous installation.
	Revert() error {access.Admin}
	// Start starts an instance of application installation(s). The
	// server sends the application instance's Public Key on the stream.
	// When the client receives the Public Key it must send Blessings back
	// to the server. When the instance is ready to start, the server sends
	// the instance name to the client.
	// Client                 Server
	//  "object".Start() -->
	//                   <--  InstancePublicKey
	//  AppBlessings     -->
	//                   <--  InstanceName
	Start() stream<StartClientMessage, StartServerMessage> error {access.Read}
	// Stop attempts a clean shutdown of application installation(s)
	// instance(s). If the deadline (in seconds) is non-zero and the
	// instance(s) in questions are still running after the given deadline,
	// shutdown of the instance(s) is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Stop(deadline uint32) error {access.Admin}
	// Suspend suspends execution of application installation(s)
	// instance(s).
	Suspend() error {access.Write}
	// Uninstall uninstalls application installation(s).
	Uninstall() error {access.Admin}
	// Update updates the application installation(s) from the object name
	// provided during Install.  If the new application envelope contains a
	// different application title, the update does not occur, and an error
	// is returned.
	Update() error {access.Admin}
	// TODO(caprita): Decide if we keep this in v0.1.  If we do, we may want
	// to use it over the origin override mechanism in the config, to
	// specify a new origin for the app installation.

	// UpdateTo updates the application installation(s) to the application
	// specified by the object name argument.  If the new application
	// envelope contains a different application title, the update does not
	// occur, and an error is returned.
	UpdateTo(name string) error {access.Admin}
	// Debug returns debug information about the application installation or
	// instance.  This is generally highly implementation-specific, and
	// presented in an unstructured form.  No guarantees are given about the
	// stability of the format, and parsing it programmatically is
	// specifically discouraged.
	Debug() (string | error) {access.Debug}

	// Status return structured information about the application
	// installation or instance.
	Status() (Status | error) {access.Read}
}

// Status is returned by the Application Status method.
type Status union {
     Instance InstanceStatus
     Installation InstallationStatus
}

// InstallationStatus specifies the Status returned by the Application Status
// method for installation objects.
type InstallationStatus struct {
	State InstallationState
	Version string
}

// InstanceStatus specifies the Status returned by the Application Status method
// for instance objects.
type InstanceStatus struct {
	State InstanceState
	Version string
}

// StartServerMessage is the data type that is streamed from the server to the
// client during a Start method call.
type StartServerMessage union {
	// The object name of the instance being started.
	InstanceName string
	// The public key of the instance being started. The client must return
	// blessings for this key.
	InstancePublicKey []byte
}

// StartClientMessage is the data type that is streamed from the client to the
// server during a Start method call.
type StartClientMessage union {
	// Blessings for the application instance.
	AppBlessings security.WireBlessings
}

// Description enumerates the profiles that a Device supports.
type Description struct {
	// Profiles is a set of names of supported profiles.	Each name can
	// either be an object name that resolves to a Profile, or can be the
	// profile's label, e.g.:
	//   "profiles/google/cluster/diskfull"
	//   "linux-media"
	//
	// Profiles for devices can be provided by hand, but they can also be
	// automatically derived by examining the device.
	Profiles set[string]
}

// Association is a tuple containing an association between a Vanadium
// identity and a system account name.
type Association struct {
	IdentityName string
	AccountName string
}

// Claimable represents an uninitialized device with no owner
// (i.e., a device that has no blessings).
//
// Claim is used to claim ownership by blessing the device's private key.
// Devices that have provided a pairing token to the claimer through an
// out-of-band communication channel (eg: display/email) would expect this
// pairing token to be replayed by the claimer.
//
// Once claimed, the device will export the "Device" interface and all methods
// will be restricted to the claimer.
//
// The blessings that the device is to be claimed with is provided
// via the ipc.Granter option in Go.
type Claimable interface {
	Claim(pairingToken string) error {access.Admin}
}

// Device can be used to manage a device remotely using an object name that
// identifies it.
type Device interface {
	// Each method of the Application interface invoked at the device
	// level applies to all applications installed on the device (and
	// their installations and instances where applicable).
	Application
	// Describe generates a description of the device.
	Describe() (Description | error) {access.Admin}
	// IsRunnable checks if the device can execute the given binary.
	IsRunnable(description binary.Description) (bool | error) {access.Admin}
	// Reset resets the device. If the deadline is non-zero and the device
	// in question is still running after the given deadline expired,
	// reset of the device is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Reset(deadline uint64) error {access.Admin}
	// AssociateAccount associates a local  system account name with the provided
	// Vanadium identities. It replaces the existing association if one already exists for that
	// identity. Setting an AccountName to "" removes the association for each
	// listed identity.
	AssociateAccount(identityNames []string, accountName string) error {access.Admin}
	// ListAssociations returns all of the associations between Vanadium identities
	// and system names.
	ListAssociations() ([]Association | error) {access.Admin}
}
