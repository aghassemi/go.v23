// This file was auto-generated by the veyron vdl tool.
// Source: build.vdl

// Package build supports building and describing Veyron binaries.
//
// TODO(jsimsa): Switch Architecture, Format, and OperatingSystem type
// to enum when supported.
package build

import (
	"veyron2/services/mgmt/binary"

	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_io "io"
	_gen_context "veyron2/context"
	_gen_ipc "veyron2/ipc"
	_gen_naming "veyron2/naming"
	_gen_rt "veyron2/rt"
	_gen_vdlutil "veyron2/vdl/vdlutil"
	_gen_wiretype "veyron2/wiretype"
)

type Architecture byte

type Format byte

type OperatingSystem byte

type File struct {
	Name     string
	Contents []byte
}

const (
	UnsupportedArchitecture = Architecture(0)

	AMD64 = Architecture(1)

	ARM = Architecture(2)

	X86 = Architecture(3)

	UnsupportedFormat = Format(0)

	ELF = Format(1)

	MACH = Format(2)

	PE = Format(3)

	UnsupportedOperatingSystem = OperatingSystem(0)

	Darwin = OperatingSystem(1)

	Linux = OperatingSystem(2)

	Windows = OperatingSystem(3)
)

// TODO(bprosnitz) Remove this line once signatures are updated to use typevals.
// It corrects a bug where _gen_wiretype is unused in VDL pacakges where only bootstrap types are used on interfaces.
const _ = _gen_wiretype.TypeIDInvalid

// Build describes an interface for building binaries from source.
// Build is the interface the client binds and uses.
// Build_ExcludingUniversal is the interface without internal framework-added methods
// to enable embedding without method collisions.  Not to be used directly by clients.
type Build_ExcludingUniversal interface {
	// Build streams sources to the build server, which then attempts to
	// build the sources and streams back the compiled binaries.
	Build(ctx _gen_context.T, Arch Architecture, OS OperatingSystem, opts ..._gen_ipc.CallOpt) (reply BuildBuildStream, err error)
	// Describe generates a description for a binary identified by
	// the given Object name.
	Describe(ctx _gen_context.T, Name string, opts ..._gen_ipc.CallOpt) (reply binary.Description, err error)
}
type Build interface {
	_gen_ipc.UniversalServiceMethods
	Build_ExcludingUniversal
}

// BuildService is the interface the server implements.
type BuildService interface {

	// Build streams sources to the build server, which then attempts to
	// build the sources and streams back the compiled binaries.
	Build(context _gen_ipc.ServerContext, Arch Architecture, OS OperatingSystem, stream BuildServiceBuildStream) (reply []byte, err error)
	// Describe generates a description for a binary identified by
	// the given Object name.
	Describe(context _gen_ipc.ServerContext, Name string) (reply binary.Description, err error)
}

// BuildBuildStream is the interface for streaming responses of the method
// Build in the service interface Build.
type BuildBuildStream interface {

	// Send places the item onto the output stream, blocking if there is no
	// buffer space available.  Calls to Send after having called CloseSend
	// or Cancel will fail.  Any blocked Send calls will be unblocked upon
	// calling Cancel.
	Send(item File) error

	// CloseSend indicates to the server that no more items will be sent;
	// server Recv calls will receive io.EOF after all sent items.  This is
	// an optional call - it's used by streaming clients that need the
	// server to receive the io.EOF terminator before the client calls
	// Finish (for example, if the client needs to continue receiving items
	// from the server after having finished sending).
	// Calls to CloseSend after having called Cancel will fail.
	// Like Send, CloseSend blocks when there's no buffer space available.
	CloseSend() error

	// Advance stages an element so the client can retrieve it
	// with Value.  Advance returns true iff there is an
	// element to retrieve.  The client must call Advance before
	// calling Value.  The client must call Cancel if it does
	// not iterate through all elements (i.e. until Advance
	// returns false).  Advance may block if an element is not
	// immediately available.
	Advance() bool

	// Value returns the element that was staged by Advance.
	// Value may panic if Advance returned false or was not
	// called at all.  Value does not block.
	Value() File

	// Err returns a non-nil error iff the stream encountered
	// any errors.  Err does not block.
	Err() error

	// Finish performs the equivalent of CloseSend, then blocks until the server
	// is done, and returns the positional return values for call.
	//
	// If Cancel has been called, Finish will return immediately; the output of
	// Finish could either be an error signalling cancelation, or the correct
	// positional return values from the server depending on the timing of the
	// call.
	//
	// Calling Finish is mandatory for releasing stream resources, unless Cancel
	// has been called or any of the other methods return a non-EOF error.
	// Finish should be called at most once.
	Finish() (reply []byte, err error)

	// Cancel cancels the RPC, notifying the server to stop processing.  It
	// is safe to call Cancel concurrently with any of the other stream methods.
	// Calling Cancel after Finish has returned is a no-op.
	Cancel()
}

// Implementation of the BuildBuildStream interface that is not exported.
type implBuildBuildStream struct {
	clientCall _gen_ipc.Call
	val        File
	err        error
}

func (c *implBuildBuildStream) Send(item File) error {
	return c.clientCall.Send(item)
}

func (c *implBuildBuildStream) CloseSend() error {
	return c.clientCall.CloseSend()
}

func (c *implBuildBuildStream) Advance() bool {
	c.val = File{}
	c.err = c.clientCall.Recv(&c.val)
	return c.err == nil
}

func (c *implBuildBuildStream) Value() File {
	return c.val
}

func (c *implBuildBuildStream) Err() error {
	if c.err == _gen_io.EOF {
		return nil
	}
	return c.err
}

func (c *implBuildBuildStream) Finish() (reply []byte, err error) {
	if ierr := c.clientCall.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c *implBuildBuildStream) Cancel() {
	c.clientCall.Cancel()
}

// BuildServiceBuildStream is the interface for streaming responses of the method
// Build in the service interface Build.
type BuildServiceBuildStream interface {
	// Send places the item onto the output stream, blocking if there is no buffer
	// space available.  If the client has canceled, an error is returned.
	Send(item File) error

	// Advance stages an element so the client can retrieve it
	// with Value.  Advance returns true iff there is an
	// element to retrieve.  The client must call Advance before
	// calling Value.  The client must call Cancel if it does
	// not iterate through all elements (i.e. until Advance
	// returns false).  Advance may block if an element is not
	// immediately available.
	Advance() bool

	// Value returns the element that was staged by Advance.
	// Value may panic if Advance returned false or was not
	// called at all.  Value does not block.
	//
	// In general, Value is undefined if the underlying collection
	// of elements changes while iteration is in progress.  If
	// <DataProvider> supports concurrent modification, it should
	// document its behavior.
	Value() File

	// Err returns a non-nil error iff the stream encountered
	// any errors.  Err does not block.
	Err() error
}

// Implementation of the BuildServiceBuildStream interface that is not exported.
type implBuildServiceBuildStream struct {
	serverCall _gen_ipc.ServerCall
	val        File
	err        error
}

func (s *implBuildServiceBuildStream) Send(item File) error {
	return s.serverCall.Send(item)
}

func (s *implBuildServiceBuildStream) Advance() bool {
	s.val = File{}
	s.err = s.serverCall.Recv(&s.val)
	return s.err == nil
}

func (s *implBuildServiceBuildStream) Value() File {
	return s.val
}

func (s *implBuildServiceBuildStream) Err() error {
	if s.err == _gen_io.EOF {
		return nil
	}
	return s.err
}

// BindBuild returns the client stub implementing the Build
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindBuild(name string, opts ..._gen_ipc.BindOpt) (Build, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdlutil.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdlutil.ErrTooManyOptionsToBind
	}
	stub := &clientStubBuild{client: client, name: name}

	return stub, nil
}

// NewServerBuild creates a new server stub.
//
// It takes a regular server implementing the BuildService
// interface, and returns a new server stub.
func NewServerBuild(server BuildService) interface{} {
	return &ServerStubBuild{
		service: server,
	}
}

// clientStubBuild implements Build.
type clientStubBuild struct {
	client _gen_ipc.Client
	name   string
}

func (__gen_c *clientStubBuild) Build(ctx _gen_context.T, Arch Architecture, OS OperatingSystem, opts ..._gen_ipc.CallOpt) (reply BuildBuildStream, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Build", []interface{}{Arch, OS}, opts...); err != nil {
		return
	}
	reply = &implBuildBuildStream{clientCall: call}
	return
}

func (__gen_c *clientStubBuild) Describe(ctx _gen_context.T, Name string, opts ..._gen_ipc.CallOpt) (reply binary.Description, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Describe", []interface{}{Name}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubBuild) UnresolveStep(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubBuild) Signature(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply _gen_ipc.ServiceSignature, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubBuild) GetMethodTags(ctx _gen_context.T, method string, opts ..._gen_ipc.CallOpt) (reply []interface{}, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubBuild wraps a server that implements
// BuildService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubBuild struct {
	service BuildService
}

func (__gen_s *ServerStubBuild) GetMethodTags(call _gen_ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(bprosnitz) GetMethodTags() will be replaces with Signature().
	// Note: This exhibits some weird behavior like returning a nil error if the method isn't found.
	// This will change when it is replaced with Signature().
	switch method {
	case "Build":
		return []interface{}{}, nil
	case "Describe":
		return []interface{}{}, nil
	default:
		return nil, nil
	}
}

func (__gen_s *ServerStubBuild) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["Build"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "Arch", Type: 65},
			{Name: "OS", Type: 66},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 68},
			{Name: "", Type: 69},
		},
		InStream:  70,
		OutStream: 70,
	}
	result.Methods["Describe"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "Name", Type: 3},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 72},
			{Name: "", Type: 69},
		},
	}

	result.TypeDefs = []_gen_vdlutil.Any{
		_gen_wiretype.NamedPrimitiveType{Type: 0x32, Name: "veyron2/services/mgmt/build.Architecture", Tags: []string(nil)}, _gen_wiretype.NamedPrimitiveType{Type: 0x32, Name: "veyron2/services/mgmt/build.OperatingSystem", Tags: []string(nil)}, _gen_wiretype.NamedPrimitiveType{Type: 0x32, Name: "byte", Tags: []string(nil)}, _gen_wiretype.SliceType{Elem: 0x43, Name: "", Tags: []string(nil)}, _gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}, _gen_wiretype.StructType{
			[]_gen_wiretype.FieldType{
				_gen_wiretype.FieldType{Type: 0x3, Name: "Name"},
				_gen_wiretype.FieldType{Type: 0x44, Name: "Contents"},
			},
			"veyron2/services/mgmt/build.File", []string(nil)},
		_gen_wiretype.MapType{Key: 0x3, Elem: 0x2, Name: "", Tags: []string(nil)}, _gen_wiretype.StructType{
			[]_gen_wiretype.FieldType{
				_gen_wiretype.FieldType{Type: 0x3, Name: "Name"},
				_gen_wiretype.FieldType{Type: 0x47, Name: "Profiles"},
			},
			"veyron2/services/mgmt/binary.Description", []string(nil)},
	}

	return result, nil
}

func (__gen_s *ServerStubBuild) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := __gen_s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubBuild) Build(call _gen_ipc.ServerCall, Arch Architecture, OS OperatingSystem) (reply []byte, err error) {
	stream := &implBuildServiceBuildStream{serverCall: call}
	reply, err = __gen_s.service.Build(call, Arch, OS, stream)
	return
}

func (__gen_s *ServerStubBuild) Describe(call _gen_ipc.ServerCall, Name string) (reply binary.Description, err error) {
	reply, err = __gen_s.service.Describe(call, Name)
	return
}
