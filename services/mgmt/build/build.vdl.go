// This file was auto-generated by the veyron vdl tool.
// Source: build.vdl

// Package build supports building and describing Veyron binaries.
package build

import (
	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_veyron2 "veyron2"
	_gen_context "veyron2/context"
	_gen_ipc "veyron2/ipc"
	_gen_naming "veyron2/naming"
	_gen_rt "veyron2/rt"
	_gen_vdl "veyron2/vdl"
	_gen_wiretype "veyron2/wiretype"
)

// Binaries are named and have been determined to run on some set of
// profiles. The mechanism for determing profiles is specifically not
// specified and left to the implementation of the Build interface.
type BinaryDescription struct {
	// Name is the Object name of the application binary that can be
	// used to fetch the actual binary from a content server.
	Name string
	// Profiles is a set of names of compatible profiles.  Each name can either
	// be an Object name that resolves to a Profile, or can be the profile's
	// label, e.g.:
	//   "profiles/google/cluster/diskfull"
	//   "linux-media"
	//
	// Application developers can specify compatible profiles by hand, but we also
	// want to be able to automatically derive the matching profiles from
	// examining the binary itself (e.g. that's what Build.Describe() does).
	Profiles map[string]bool
}

// Build describes an interface for building binaries from source.
// Build is the interface the client binds and uses.
// Build_ExcludingUniversal is the interface without internal framework-added methods
// to enable embedding without method collisions.  Not to be used directly by clients.
type Build_ExcludingUniversal interface {
	// Describe generates a BinaryDescription for a binary identified by
	// the given Object name.
	Describe(ctx _gen_context.T, Name string, opts ..._gen_ipc.CallOpt) (reply BinaryDescription, err error)
}
type Build interface {
	_gen_ipc.UniversalServiceMethods
	Build_ExcludingUniversal
}

// BuildService is the interface the server implements.
type BuildService interface {

	// Describe generates a BinaryDescription for a binary identified by
	// the given Object name.
	Describe(context _gen_ipc.ServerContext, Name string) (reply BinaryDescription, err error)
}

// BindBuild returns the client stub implementing the Build
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindBuild(name string, opts ..._gen_ipc.BindOpt) (Build, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdl.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdl.ErrTooManyOptionsToBind
	}
	stub := &clientStubBuild{client: client, name: name}

	return stub, nil
}

// NewServerBuild creates a new server stub.
//
// It takes a regular server implementing the BuildService
// interface, and returns a new server stub.
func NewServerBuild(server BuildService) interface{} {
	return &ServerStubBuild{
		service: server,
	}
}

// clientStubBuild implements Build.
type clientStubBuild struct {
	client _gen_ipc.Client
	name   string
}

func (__gen_c *clientStubBuild) Describe(ctx _gen_context.T, Name string, opts ..._gen_ipc.CallOpt) (reply BinaryDescription, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Describe", []interface{}{Name}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubBuild) UnresolveStep(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubBuild) Signature(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply _gen_ipc.ServiceSignature, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubBuild) GetMethodTags(ctx _gen_context.T, method string, opts ..._gen_ipc.CallOpt) (reply []interface{}, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubBuild wraps a server that implements
// BuildService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubBuild struct {
	service BuildService
}

func (__gen_s *ServerStubBuild) GetMethodTags(call _gen_ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(bprosnitz) GetMethodTags() will be replaces with Signature().
	// Note: This exhibits some weird behavior like returning a nil error if the method isn't found.
	// This will change when it is replaced with Signature().
	switch method {
	case "Describe":
		return []interface{}{}, nil
	default:
		return nil, nil
	}
}

func (__gen_s *ServerStubBuild) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["Describe"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "Name", Type: 3},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 66},
			{Name: "", Type: 67},
		},
	}

	result.TypeDefs = []_gen_vdl.Any{
		_gen_wiretype.MapType{Key: 0x3, Elem: 0x2, Name: "", Tags: []string(nil)}, _gen_wiretype.StructType{
			[]_gen_wiretype.FieldType{
				_gen_wiretype.FieldType{Type: 0x3, Name: "Name"},
				_gen_wiretype.FieldType{Type: 0x41, Name: "Profiles"},
			},
			"veyron2/services/mgmt/build.BinaryDescription", []string(nil)},
		_gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}

func (__gen_s *ServerStubBuild) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := __gen_s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubBuild) Describe(call _gen_ipc.ServerCall, Name string) (reply BinaryDescription, err error) {
	reply, err = __gen_s.service.Describe(call, Name)
	return
}
