// This file was auto-generated by the veyron idl tool.
// Source: profile.idl

// Package profile serves the purpose of abstracting device
// configurations that can be used to run Veyron applications.
//
// OVERVIEW: Profiles are expected to be organized using veyron's
// hierarchical namespace. The nodes of the hierarchy are expected to
// implement: 1) the MountTable interface, to enable extending the
// hierarchy, 2) the Profile interface, to enable profile
// retrieval, and 3) the Glob interface, to enable profile discovery.
package profile

import (
	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_idl "veyron2/idl"
	_gen_ipc "veyron2/ipc"
	_gen_naming "veyron2/naming"
	_gen_rt "veyron2/rt/r"
	_gen_wiretype "veyron2/wiretype"
)

// Profile abstracts a device's ability to run binaries, and hides
// specifics such as operating system, hardware architecture, and the
// set of installed libraries. Profiles describe binaries and devices,
// and are used to match them.
// Profile is the interface the client binds and uses.
// Profile_InternalNoTagGetter is the interface without the TagGetter
// and UnresolveStep methods (both framework-added, rathern than user-defined),
// to enable embedding without method collisions.  Not to be used directly by
// clients.
type Profile_InternalNoTagGetter interface {

	// Label is the human-readable profile key for the profile,
	// e.g. "linux-media". The label can be used to uniquely identify
	// the profile (for the purpose of matching application binaries and
	// nodes).
	Label(opts ..._gen_ipc.ClientCallOpt) (reply string, err error)

	// Description is a free-text description of the profile, meant for
	// human consumption.
	Description(opts ..._gen_ipc.ClientCallOpt) (reply string, err error)
}
type Profile interface {
	_gen_idl.TagGetter
	// UnresolveStep returns the names for the remote service, rooted at the
	// service's immediate namespace ancestor.
	UnresolveStep(opts ..._gen_ipc.ClientCallOpt) ([]string, error)
	Profile_InternalNoTagGetter
}

// ProfileService is the interface the server implements.
type ProfileService interface {

	// Label is the human-readable profile key for the profile,
	// e.g. "linux-media". The label can be used to uniquely identify
	// the profile (for the purpose of matching application binaries and
	// nodes).
	Label(context _gen_ipc.Context) (reply string, err error)

	// Description is a free-text description of the profile, meant for
	// human consumption.
	Description(context _gen_ipc.Context) (reply string, err error)
}

// BindProfile returns the client stub implementing the Profile
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindProfile(name string, opts ..._gen_ipc.BindOpt) (Profile, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_ipc.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_idl.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_idl.ErrTooManyOptionsToBind
	}
	stub := &clientStubProfile{client: client, name: name}

	return stub, nil
}

// NewServerProfile creates a new server stub.
//
// It takes a regular server implementing the ProfileService
// interface, and returns a new server stub.
func NewServerProfile(server ProfileService) interface{} {
	return &ServerStubProfile{
		service: server,
	}
}

// clientStubProfile implements Profile.
type clientStubProfile struct {
	client _gen_ipc.Client
	name   string
}

func (c *clientStubProfile) GetMethodTags(method string) []interface{} {
	return GetProfileMethodTags(method)
}

func (__gen_c *clientStubProfile) Label(opts ..._gen_ipc.ClientCallOpt) (reply string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Label", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubProfile) Description(opts ..._gen_ipc.ClientCallOpt) (reply string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Description", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c *clientStubProfile) UnresolveStep(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = c.client.StartCall(c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubProfile wraps a server that implements
// ProfileService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubProfile struct {
	service ProfileService
}

func (s *ServerStubProfile) GetMethodTags(method string) []interface{} {
	return GetProfileMethodTags(method)
}

func (s *ServerStubProfile) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["Description"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 3},
			{Name: "", Type: 65},
		},
	}
	result.Methods["Label"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 3},
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []_gen_idl.AnyData{
		_gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}

func (s *ServerStubProfile) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubProfile) Label(call _gen_ipc.ServerCall) (reply string, err error) {
	reply, err = __gen_s.service.Label(call)
	return
}

func (__gen_s *ServerStubProfile) Description(call _gen_ipc.ServerCall) (reply string, err error) {
	reply, err = __gen_s.service.Description(call)
	return
}

func GetProfileMethodTags(method string) []interface{} {
	switch method {
	case "Label":
		return []interface{}{}
	case "Description":
		return []interface{}{}
	default:
		return nil
	}
}
