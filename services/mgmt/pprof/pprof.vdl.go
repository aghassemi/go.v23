// This file was auto-generated by the veyron vdl tool.
// Source: pprof.vdl

// Package pprof is used to access runtime profiling data in the format expected
// by the pprof visualization tool. For more information about pprof, see
// http://code.google.com/p/google-perftools/.
package pprof

import (
	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_io "io"
	_gen_veyron2 "veyron.io/veyron/veyron2"
	_gen_context "veyron.io/veyron/veyron2/context"
	_gen_ipc "veyron.io/veyron/veyron2/ipc"
	_gen_naming "veyron.io/veyron/veyron2/naming"
	_gen_vdlutil "veyron.io/veyron/veyron2/vdl/vdlutil"
	_gen_wiretype "veyron.io/veyron/veyron2/wiretype"
)

// TODO(toddw): Remove this line once the new signature support is done.
// It corrects a bug where _gen_wiretype is unused in VDL pacakges where only
// bootstrap types are used on interfaces.
const _ = _gen_wiretype.TypeIDInvalid

// PProf is the interface the client binds and uses.
// PProf_ExcludingUniversal is the interface without internal framework-added methods
// to enable embedding without method collisions.  Not to be used directly by clients.
type PProf_ExcludingUniversal interface {
	// CmdLine returns the command-line arguments of the server, including
	// the name of the executable.
	CmdLine(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error)
	// Profiles returns the list of available profiles.
	Profiles(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error)
	// Profile streams the requested profile. The debug parameter enables
	// additional output. Passing debug=0 includes only the hexadecimal
	// addresses that pprof needs. Passing debug=1 adds comments translating
	// addresses to function names and line numbers, so that a programmer
	// can read the profile without tools.
	Profile(ctx _gen_context.T, name string, debug int32, opts ..._gen_ipc.CallOpt) (reply PProfProfileCall, err error)
	// CPUProfile enables CPU profiling for the requested duration and
	// streams the profile data.
	CPUProfile(ctx _gen_context.T, seconds int32, opts ..._gen_ipc.CallOpt) (reply PProfCPUProfileCall, err error)
	// Symbol looks up the program counters and returns their respective
	// function names.
	Symbol(ctx _gen_context.T, programCounters []uint64, opts ..._gen_ipc.CallOpt) (reply []string, err error)
}
type PProf interface {
	_gen_ipc.UniversalServiceMethods
	PProf_ExcludingUniversal
}

// PProfService is the interface the server implements.
type PProfService interface {

	// CmdLine returns the command-line arguments of the server, including
	// the name of the executable.
	CmdLine(context _gen_ipc.ServerContext) (reply []string, err error)
	// Profiles returns the list of available profiles.
	Profiles(context _gen_ipc.ServerContext) (reply []string, err error)
	// Profile streams the requested profile. The debug parameter enables
	// additional output. Passing debug=0 includes only the hexadecimal
	// addresses that pprof needs. Passing debug=1 adds comments translating
	// addresses to function names and line numbers, so that a programmer
	// can read the profile without tools.
	Profile(context _gen_ipc.ServerContext, name string, debug int32, stream PProfServiceProfileStream) (err error)
	// CPUProfile enables CPU profiling for the requested duration and
	// streams the profile data.
	CPUProfile(context _gen_ipc.ServerContext, seconds int32, stream PProfServiceCPUProfileStream) (err error)
	// Symbol looks up the program counters and returns their respective
	// function names.
	Symbol(context _gen_ipc.ServerContext, programCounters []uint64) (reply []string, err error)
}

// PProfProfileCall is the interface for call object of the method
// Profile in the service interface PProf.
type PProfProfileCall interface {
	// RecvStream returns the recv portion of the stream
	RecvStream() interface {
		// Advance stages an element so the client can retrieve it
		// with Value.  Advance returns true iff there is an
		// element to retrieve.  The client must call Advance before
		// calling Value. Advance may block if an element is not
		// immediately available.
		Advance() bool

		// Value returns the element that was staged by Advance.
		// Value may panic if Advance returned false or was not
		// called at all.  Value does not block.
		Value() []byte

		// Err returns a non-nil error iff the stream encountered
		// any errors.  Err does not block.
		Err() error
	}

	// Finish blocks until the server is done and returns the positional
	// return values for call.
	//
	// If Cancel has been called, Finish will return immediately; the output of
	// Finish could either be an error signalling cancelation, or the correct
	// positional return values from the server depending on the timing of the
	// call.
	//
	// Calling Finish is mandatory for releasing stream resources, unless Cancel
	// has been called or any of the other methods return an error.
	// Finish should be called at most once.
	Finish() (err error)

	// Cancel cancels the RPC, notifying the server to stop processing.  It
	// is safe to call Cancel concurrently with any of the other stream methods.
	// Calling Cancel after Finish has returned is a no-op.
	Cancel()
}

type implPProfProfileStreamIterator struct {
	clientCall _gen_ipc.Call
	val        []byte
	err        error
}

func (c *implPProfProfileStreamIterator) Advance() bool {
	c.err = c.clientCall.Recv(&c.val)
	return c.err == nil
}

func (c *implPProfProfileStreamIterator) Value() []byte {
	return c.val
}

func (c *implPProfProfileStreamIterator) Err() error {
	if c.err == _gen_io.EOF {
		return nil
	}
	return c.err
}

// Implementation of the PProfProfileCall interface that is not exported.
type implPProfProfileCall struct {
	clientCall _gen_ipc.Call
	readStream implPProfProfileStreamIterator
}

func (c *implPProfProfileCall) RecvStream() interface {
	Advance() bool
	Value() []byte
	Err() error
} {
	return &c.readStream
}

func (c *implPProfProfileCall) Finish() (err error) {
	if ierr := c.clientCall.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c *implPProfProfileCall) Cancel() {
	c.clientCall.Cancel()
}

type implPProfServiceProfileStreamSender struct {
	serverCall _gen_ipc.ServerCall
}

func (s *implPProfServiceProfileStreamSender) Send(item []byte) error {
	return s.serverCall.Send(item)
}

// PProfServiceProfileStream is the interface for streaming responses of the method
// Profile in the service interface PProf.
type PProfServiceProfileStream interface {
	// SendStream returns the send portion of the stream.
	SendStream() interface {
		// Send places the item onto the output stream, blocking if there is no buffer
		// space available.  If the client has canceled, an error is returned.
		Send(item []byte) error
	}
}

// Implementation of the PProfServiceProfileStream interface that is not exported.
type implPProfServiceProfileStream struct {
	writer implPProfServiceProfileStreamSender
}

func (s *implPProfServiceProfileStream) SendStream() interface {
	// Send places the item onto the output stream, blocking if there is no buffer
	// space available.  If the client has canceled, an error is returned.
	Send(item []byte) error
} {
	return &s.writer
}

// PProfCPUProfileCall is the interface for call object of the method
// CPUProfile in the service interface PProf.
type PProfCPUProfileCall interface {
	// RecvStream returns the recv portion of the stream
	RecvStream() interface {
		// Advance stages an element so the client can retrieve it
		// with Value.  Advance returns true iff there is an
		// element to retrieve.  The client must call Advance before
		// calling Value. Advance may block if an element is not
		// immediately available.
		Advance() bool

		// Value returns the element that was staged by Advance.
		// Value may panic if Advance returned false or was not
		// called at all.  Value does not block.
		Value() []byte

		// Err returns a non-nil error iff the stream encountered
		// any errors.  Err does not block.
		Err() error
	}

	// Finish blocks until the server is done and returns the positional
	// return values for call.
	//
	// If Cancel has been called, Finish will return immediately; the output of
	// Finish could either be an error signalling cancelation, or the correct
	// positional return values from the server depending on the timing of the
	// call.
	//
	// Calling Finish is mandatory for releasing stream resources, unless Cancel
	// has been called or any of the other methods return an error.
	// Finish should be called at most once.
	Finish() (err error)

	// Cancel cancels the RPC, notifying the server to stop processing.  It
	// is safe to call Cancel concurrently with any of the other stream methods.
	// Calling Cancel after Finish has returned is a no-op.
	Cancel()
}

type implPProfCPUProfileStreamIterator struct {
	clientCall _gen_ipc.Call
	val        []byte
	err        error
}

func (c *implPProfCPUProfileStreamIterator) Advance() bool {
	c.err = c.clientCall.Recv(&c.val)
	return c.err == nil
}

func (c *implPProfCPUProfileStreamIterator) Value() []byte {
	return c.val
}

func (c *implPProfCPUProfileStreamIterator) Err() error {
	if c.err == _gen_io.EOF {
		return nil
	}
	return c.err
}

// Implementation of the PProfCPUProfileCall interface that is not exported.
type implPProfCPUProfileCall struct {
	clientCall _gen_ipc.Call
	readStream implPProfCPUProfileStreamIterator
}

func (c *implPProfCPUProfileCall) RecvStream() interface {
	Advance() bool
	Value() []byte
	Err() error
} {
	return &c.readStream
}

func (c *implPProfCPUProfileCall) Finish() (err error) {
	if ierr := c.clientCall.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c *implPProfCPUProfileCall) Cancel() {
	c.clientCall.Cancel()
}

type implPProfServiceCPUProfileStreamSender struct {
	serverCall _gen_ipc.ServerCall
}

func (s *implPProfServiceCPUProfileStreamSender) Send(item []byte) error {
	return s.serverCall.Send(item)
}

// PProfServiceCPUProfileStream is the interface for streaming responses of the method
// CPUProfile in the service interface PProf.
type PProfServiceCPUProfileStream interface {
	// SendStream returns the send portion of the stream.
	SendStream() interface {
		// Send places the item onto the output stream, blocking if there is no buffer
		// space available.  If the client has canceled, an error is returned.
		Send(item []byte) error
	}
}

// Implementation of the PProfServiceCPUProfileStream interface that is not exported.
type implPProfServiceCPUProfileStream struct {
	writer implPProfServiceCPUProfileStreamSender
}

func (s *implPProfServiceCPUProfileStream) SendStream() interface {
	// Send places the item onto the output stream, blocking if there is no buffer
	// space available.  If the client has canceled, an error is returned.
	Send(item []byte) error
} {
	return &s.writer
}

// BindPProf returns the client stub implementing the PProf
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindPProf(name string, opts ..._gen_ipc.BindOpt) (PProf, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		// Do nothing.
	case 1:
		if clientOpt, ok := opts[0].(_gen_ipc.Client); opts[0] == nil || ok {
			client = clientOpt
		} else {
			return nil, _gen_vdlutil.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdlutil.ErrTooManyOptionsToBind
	}
	stub := &clientStubPProf{defaultClient: client, name: name}

	return stub, nil
}

// NewServerPProf creates a new server stub.
//
// It takes a regular server implementing the PProfService
// interface, and returns a new server stub.
func NewServerPProf(server PProfService) interface{} {
	return &ServerStubPProf{
		service: server,
	}
}

// clientStubPProf implements PProf.
type clientStubPProf struct {
	defaultClient _gen_ipc.Client
	name          string
}

func (__gen_c *clientStubPProf) client(ctx _gen_context.T) _gen_ipc.Client {
	if __gen_c.defaultClient != nil {
		return __gen_c.defaultClient
	}
	return _gen_veyron2.RuntimeFromContext(ctx).Client()
}

func (__gen_c *clientStubPProf) CmdLine(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "CmdLine", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubPProf) Profiles(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "Profiles", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubPProf) Profile(ctx _gen_context.T, name string, debug int32, opts ..._gen_ipc.CallOpt) (reply PProfProfileCall, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "Profile", []interface{}{name, debug}, opts...); err != nil {
		return
	}
	reply = &implPProfProfileCall{clientCall: call, readStream: implPProfProfileStreamIterator{clientCall: call}}
	return
}

func (__gen_c *clientStubPProf) CPUProfile(ctx _gen_context.T, seconds int32, opts ..._gen_ipc.CallOpt) (reply PProfCPUProfileCall, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "CPUProfile", []interface{}{seconds}, opts...); err != nil {
		return
	}
	reply = &implPProfCPUProfileCall{clientCall: call, readStream: implPProfCPUProfileStreamIterator{clientCall: call}}
	return
}

func (__gen_c *clientStubPProf) Symbol(ctx _gen_context.T, programCounters []uint64, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "Symbol", []interface{}{programCounters}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubPProf) UnresolveStep(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubPProf) Signature(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply _gen_ipc.ServiceSignature, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubPProf) GetMethodTags(ctx _gen_context.T, method string, opts ..._gen_ipc.CallOpt) (reply []interface{}, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubPProf wraps a server that implements
// PProfService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubPProf struct {
	service PProfService
}

func (__gen_s *ServerStubPProf) GetMethodTags(call _gen_ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(bprosnitz) GetMethodTags() will be replaces with Signature().
	// Note: This exhibits some weird behavior like returning a nil error if the method isn't found.
	// This will change when it is replaced with Signature().
	switch method {
	case "CmdLine":
		return []interface{}{}, nil
	case "Profiles":
		return []interface{}{}, nil
	case "Profile":
		return []interface{}{}, nil
	case "CPUProfile":
		return []interface{}{}, nil
	case "Symbol":
		return []interface{}{}, nil
	default:
		return nil, nil
	}
}

func (__gen_s *ServerStubPProf) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["CPUProfile"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "seconds", Type: 36},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},

		OutStream: 67,
	}
	result.Methods["CmdLine"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 61},
			{Name: "", Type: 65},
		},
	}
	result.Methods["Profile"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "name", Type: 3},
			{Name: "debug", Type: 36},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},

		OutStream: 67,
	}
	result.Methods["Profiles"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 61},
			{Name: "", Type: 65},
		},
	}
	result.Methods["Symbol"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "programCounters", Type: 68},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 61},
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []_gen_vdlutil.Any{
		_gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}, _gen_wiretype.NamedPrimitiveType{Type: 0x32, Name: "byte", Tags: []string(nil)}, _gen_wiretype.SliceType{Elem: 0x42, Name: "", Tags: []string(nil)}, _gen_wiretype.SliceType{Elem: 0x35, Name: "", Tags: []string(nil)}}

	return result, nil
}

func (__gen_s *ServerStubPProf) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := __gen_s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubPProf) CmdLine(call _gen_ipc.ServerCall) (reply []string, err error) {
	reply, err = __gen_s.service.CmdLine(call)
	return
}

func (__gen_s *ServerStubPProf) Profiles(call _gen_ipc.ServerCall) (reply []string, err error) {
	reply, err = __gen_s.service.Profiles(call)
	return
}

func (__gen_s *ServerStubPProf) Profile(call _gen_ipc.ServerCall, name string, debug int32) (err error) {
	stream := &implPProfServiceProfileStream{writer: implPProfServiceProfileStreamSender{serverCall: call}}
	err = __gen_s.service.Profile(call, name, debug, stream)
	return
}

func (__gen_s *ServerStubPProf) CPUProfile(call _gen_ipc.ServerCall, seconds int32) (err error) {
	stream := &implPProfServiceCPUProfileStream{writer: implPProfServiceCPUProfileStreamSender{serverCall: call}}
	err = __gen_s.service.CPUProfile(call, seconds, stream)
	return
}

func (__gen_s *ServerStubPProf) Symbol(call _gen_ipc.ServerCall, programCounters []uint64) (reply []string, err error) {
	reply, err = __gen_s.service.Symbol(call, programCounters)
	return
}
