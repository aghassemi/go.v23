// This file was auto-generated by the veyron vdl tool.
// Source: node.idl

// Package node supports managing a node and applications running on
// the node.
package node

import (
	"veyron2/services/mgmt/build"

	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_veyron2 "veyron2"
	_gen_ipc "veyron2/ipc"
	_gen_naming "veyron2/naming"
	_gen_rt "veyron2/rt"
	_gen_vdl "veyron2/vdl"
	_gen_wiretype "veyron2/wiretype"
)

// Description enumerates the profiles that a Node supports.
type Description struct {
	// Profiles is a set of names of supported profiles.  Each name can
	// either be a veyron name that resolves to a Profile, or can be the
	// profile's label, e.g.:
	//   "profiles/google/cluster/diskfull"
	//   "linux-media"
	//
	// Profiles for nodes can be provided by hand, but they can also be
	// automatically derived by examining the node.
	Profiles map[string]struct{}
}

// Application can be used to manage applications. The idea is that
// this interace will be invoked using a veyron name that identifies
// the application and its installations and instances where
// applicable.
//
// In particular, the interface methods can be divided into three
// groups based on their intended receiver:
//
// 1) Method receiver is an application:
// -- Install()
//
// 2) Method receiver is an application installation:
// -- Start()
// -- Uninstall()
// -- Update()
//
// 3) Method receiver is application installation instance:
// -- Refresh()
// -- Restart()
// -- Resume()
// -- Shutdown()
// -- Suspend()
//
// For groups 2) and 3), the suffix that specifies the receiver can
// optionally omit the installation and/or instance, in which case the
// operation applies to all installations and/or instances in the
// scope of the suffix.
//
// Examples:
//
// device/apps/maps.Start() starts an instance of all maps application
// installations.
//
// device/apps/maps/installation.Start() starts an instance of the
// maps application installation identified by the given suffix.
//
// device/apps/maps.Refresh() refreshes the state of all instances of
// all maps application installations.
//
// device/apps/maps/installation.Refresh() refreshes the state of all
// instances of the maps application installation identified by the
// given suffix.
//
// device/apps/maps/installation/instance.Refresh() refreshes the
// state of the maps application installation instance identified by
// the given suffix.
//
// Further, the following methods complement one another:
// -- Install() and Uninstall()
// -- Start() and Shutdown()
// -- Suspend() and Resume()
//
// Finally, an application installation instance can be in one of
// three abstract states: 1) "does not exist", 2) "running", or 3)
// "suspended". The interface methods transition between these
// abstract states using the following state machine:
//
// apply(Start(), "does not exists") = "running"
// apply(Refresh(), "running") = "running"
// apply(Refresh(), "suspended") = "suspended"
// apply(Restart(), "running") = "running"
// apply(Restart(), "suspended") = "running"
// apply(Resume(), "suspended") = "running"
// apply(Resume(), "running") = "running"
// apply(Shutdown(), "running") = "does not exist"
// apply(Shutdown(), "suspended") = "does not exist"
// apply(Suspend(), "running") = "suspended"
// apply(Suspend(), "suspended") = "suspended"
//
// In other words, invoking any method using an existing application
// installation instance as a receiver is well-defined.
// Application is the interface the client binds and uses.
// Application_InternalNoTagGetter is the interface without the TagGetter
// and UnresolveStep methods (both framework-added, rathern than user-defined),
// to enable embedding without method collisions.  Not to be used directly by
// clients.
type Application_InternalNoTagGetter interface {

	// Install installs the latest version of the application and
	// returns a veyron name that identifies the new
	// installation. Optionally, veyron name suffix can be used to
	// specify the application version to be installed. If no version is
	// specified, the latest version is installed.
	Install(opts ..._gen_ipc.ClientCallOpt) (reply string, err error)
	// Start starts an instance of application installation(s) and
	// returns the veyron name(s) that identifies/identify the new
	// instance(s).
	Start(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error)
	// Uninstall uninstalls application installation(s).
	Uninstall(opts ..._gen_ipc.ClientCallOpt) (err error)
	// Update updates application installation(s) version. Optionally,
	// veyron name suffix can be used to specify the application version
	// to which the installation(s) should be updated. If no version is
	// specified, the installation(s) are updated to the latest version.
	Update(opts ..._gen_ipc.ClientCallOpt) (err error)
	// Refresh refreshes the state of application installation(s)
	// instance(s).
	Refresh(opts ..._gen_ipc.ClientCallOpt) (err error)
	// Restart restarts execution of application installation(s)
	// instance(s).
	Restart(opts ..._gen_ipc.ClientCallOpt) (err error)
	// Resume resumes execution of application installation(s)
	// instance(s).
	Resume(opts ..._gen_ipc.ClientCallOpt) (err error)
	// Shutdown attempts a clean shutdown of application installation(s)
	// instance(s). If the deadline is non-zero and the instance(s) in
	// questions is/are still running after the given deadline, shutdown
	// of the instance(s) is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Shutdown(Deadline uint64, opts ..._gen_ipc.ClientCallOpt) (err error)
	// Suspend suspends execution of application installation(s)
	// instance(s).
	Suspend(opts ..._gen_ipc.ClientCallOpt) (err error)
}
type Application interface {
	_gen_vdl.TagGetter
	// UnresolveStep returns the names for the remote service, rooted at the
	// service's immediate namespace ancestor.
	UnresolveStep(opts ..._gen_ipc.ClientCallOpt) ([]string, error)
	Application_InternalNoTagGetter
}

// ApplicationService is the interface the server implements.
type ApplicationService interface {

	// Install installs the latest version of the application and
	// returns a veyron name that identifies the new
	// installation. Optionally, veyron name suffix can be used to
	// specify the application version to be installed. If no version is
	// specified, the latest version is installed.
	Install(context _gen_ipc.Context) (reply string, err error)
	// Start starts an instance of application installation(s) and
	// returns the veyron name(s) that identifies/identify the new
	// instance(s).
	Start(context _gen_ipc.Context) (reply []string, err error)
	// Uninstall uninstalls application installation(s).
	Uninstall(context _gen_ipc.Context) (err error)
	// Update updates application installation(s) version. Optionally,
	// veyron name suffix can be used to specify the application version
	// to which the installation(s) should be updated. If no version is
	// specified, the installation(s) are updated to the latest version.
	Update(context _gen_ipc.Context) (err error)
	// Refresh refreshes the state of application installation(s)
	// instance(s).
	Refresh(context _gen_ipc.Context) (err error)
	// Restart restarts execution of application installation(s)
	// instance(s).
	Restart(context _gen_ipc.Context) (err error)
	// Resume resumes execution of application installation(s)
	// instance(s).
	Resume(context _gen_ipc.Context) (err error)
	// Shutdown attempts a clean shutdown of application installation(s)
	// instance(s). If the deadline is non-zero and the instance(s) in
	// questions is/are still running after the given deadline, shutdown
	// of the instance(s) is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Shutdown(context _gen_ipc.Context, Deadline uint64) (err error)
	// Suspend suspends execution of application installation(s)
	// instance(s).
	Suspend(context _gen_ipc.Context) (err error)
}

// BindApplication returns the client stub implementing the Application
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindApplication(name string, opts ..._gen_ipc.BindOpt) (Application, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdl.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdl.ErrTooManyOptionsToBind
	}
	stub := &clientStubApplication{client: client, name: name}

	return stub, nil
}

// NewServerApplication creates a new server stub.
//
// It takes a regular server implementing the ApplicationService
// interface, and returns a new server stub.
func NewServerApplication(server ApplicationService) interface{} {
	return &ServerStubApplication{
		service: server,
	}
}

// clientStubApplication implements Application.
type clientStubApplication struct {
	client _gen_ipc.Client
	name   string
}

func (c *clientStubApplication) GetMethodTags(method string) []interface{} {
	return GetApplicationMethodTags(method)
}

func (__gen_c *clientStubApplication) Install(opts ..._gen_ipc.ClientCallOpt) (reply string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Install", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubApplication) Start(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Start", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubApplication) Uninstall(opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Uninstall", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubApplication) Update(opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Update", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubApplication) Refresh(opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Refresh", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubApplication) Restart(opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Restart", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubApplication) Resume(opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Resume", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubApplication) Shutdown(Deadline uint64, opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Shutdown", []interface{}{Deadline}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubApplication) Suspend(opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Suspend", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c *clientStubApplication) UnresolveStep(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = c.client.StartCall(c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubApplication wraps a server that implements
// ApplicationService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubApplication struct {
	service ApplicationService
}

func (s *ServerStubApplication) GetMethodTags(method string) []interface{} {
	return GetApplicationMethodTags(method)
}

func (s *ServerStubApplication) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["Install"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 3},
			{Name: "", Type: 65},
		},
	}
	result.Methods["Refresh"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Restart"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Resume"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Shutdown"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "Deadline", Type: 53},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Start"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 61},
			{Name: "", Type: 65},
		},
	}
	result.Methods["Suspend"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Uninstall"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Update"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []_gen_vdl.Any{
		_gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}

func (s *ServerStubApplication) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubApplication) Install(call _gen_ipc.ServerCall) (reply string, err error) {
	reply, err = __gen_s.service.Install(call)
	return
}

func (__gen_s *ServerStubApplication) Start(call _gen_ipc.ServerCall) (reply []string, err error) {
	reply, err = __gen_s.service.Start(call)
	return
}

func (__gen_s *ServerStubApplication) Uninstall(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.Uninstall(call)
	return
}

func (__gen_s *ServerStubApplication) Update(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.Update(call)
	return
}

func (__gen_s *ServerStubApplication) Refresh(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.Refresh(call)
	return
}

func (__gen_s *ServerStubApplication) Restart(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.Restart(call)
	return
}

func (__gen_s *ServerStubApplication) Resume(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.Resume(call)
	return
}

func (__gen_s *ServerStubApplication) Shutdown(call _gen_ipc.ServerCall, Deadline uint64) (err error) {
	err = __gen_s.service.Shutdown(call, Deadline)
	return
}

func (__gen_s *ServerStubApplication) Suspend(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.Suspend(call)
	return
}

func GetApplicationMethodTags(method string) []interface{} {
	switch method {
	case "Install":
		return []interface{}{}
	case "Start":
		return []interface{}{}
	case "Uninstall":
		return []interface{}{}
	case "Update":
		return []interface{}{}
	case "Refresh":
		return []interface{}{}
	case "Restart":
		return []interface{}{}
	case "Resume":
		return []interface{}{}
	case "Shutdown":
		return []interface{}{}
	case "Suspend":
		return []interface{}{}
	default:
		return nil
	}
}

// Node can be used to manage a node. The idea is that this interace
// will be invoked using a veyron name that identifies the node.
// Node is the interface the client binds and uses.
// Node_InternalNoTagGetter is the interface without the TagGetter
// and UnresolveStep methods (both framework-added, rathern than user-defined),
// to enable embedding without method collisions.  Not to be used directly by
// clients.
type Node_InternalNoTagGetter interface {

	// Application can be used to manage applications. The idea is that
	// this interace will be invoked using a veyron name that identifies
	// the application and its installations and instances where
	// applicable.
	//
	// In particular, the interface methods can be divided into three
	// groups based on their intended receiver:
	//
	// 1) Method receiver is an application:
	// -- Install()
	//
	// 2) Method receiver is an application installation:
	// -- Start()
	// -- Uninstall()
	// -- Update()
	//
	// 3) Method receiver is application installation instance:
	// -- Refresh()
	// -- Restart()
	// -- Resume()
	// -- Shutdown()
	// -- Suspend()
	//
	// For groups 2) and 3), the suffix that specifies the receiver can
	// optionally omit the installation and/or instance, in which case the
	// operation applies to all installations and/or instances in the
	// scope of the suffix.
	//
	// Examples:
	//
	// device/apps/maps.Start() starts an instance of all maps application
	// installations.
	//
	// device/apps/maps/installation.Start() starts an instance of the
	// maps application installation identified by the given suffix.
	//
	// device/apps/maps.Refresh() refreshes the state of all instances of
	// all maps application installations.
	//
	// device/apps/maps/installation.Refresh() refreshes the state of all
	// instances of the maps application installation identified by the
	// given suffix.
	//
	// device/apps/maps/installation/instance.Refresh() refreshes the
	// state of the maps application installation instance identified by
	// the given suffix.
	//
	// Further, the following methods complement one another:
	// -- Install() and Uninstall()
	// -- Start() and Shutdown()
	// -- Suspend() and Resume()
	//
	// Finally, an application installation instance can be in one of
	// three abstract states: 1) "does not exist", 2) "running", or 3)
	// "suspended". The interface methods transition between these
	// abstract states using the following state machine:
	//
	// apply(Start(), "does not exists") = "running"
	// apply(Refresh(), "running") = "running"
	// apply(Refresh(), "suspended") = "suspended"
	// apply(Restart(), "running") = "running"
	// apply(Restart(), "suspended") = "running"
	// apply(Resume(), "suspended") = "running"
	// apply(Resume(), "running") = "running"
	// apply(Shutdown(), "running") = "does not exist"
	// apply(Shutdown(), "suspended") = "does not exist"
	// apply(Suspend(), "running") = "suspended"
	// apply(Suspend(), "suspended") = "suspended"
	//
	// In other words, invoking any method using an existing application
	// installation instance as a receiver is well-defined.
	Application_InternalNoTagGetter
	// Describe generates a description of the node.
	Describe(opts ..._gen_ipc.ClientCallOpt) (reply Description, err error)
	// IsRunnable checks if the node can execute the given binary.
	IsRunnable(Binary build.BinaryDescription, opts ..._gen_ipc.ClientCallOpt) (reply bool, err error)
	// Reset resets the node. If the deadline is non-zero and the node
	// in question is still running after the given deadline expired,
	// reset of the node is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Reset(Deadline uint64, opts ..._gen_ipc.ClientCallOpt) (err error)
}
type Node interface {
	_gen_vdl.TagGetter
	// UnresolveStep returns the names for the remote service, rooted at the
	// service's immediate namespace ancestor.
	UnresolveStep(opts ..._gen_ipc.ClientCallOpt) ([]string, error)
	Node_InternalNoTagGetter
}

// NodeService is the interface the server implements.
type NodeService interface {

	// Application can be used to manage applications. The idea is that
	// this interace will be invoked using a veyron name that identifies
	// the application and its installations and instances where
	// applicable.
	//
	// In particular, the interface methods can be divided into three
	// groups based on their intended receiver:
	//
	// 1) Method receiver is an application:
	// -- Install()
	//
	// 2) Method receiver is an application installation:
	// -- Start()
	// -- Uninstall()
	// -- Update()
	//
	// 3) Method receiver is application installation instance:
	// -- Refresh()
	// -- Restart()
	// -- Resume()
	// -- Shutdown()
	// -- Suspend()
	//
	// For groups 2) and 3), the suffix that specifies the receiver can
	// optionally omit the installation and/or instance, in which case the
	// operation applies to all installations and/or instances in the
	// scope of the suffix.
	//
	// Examples:
	//
	// device/apps/maps.Start() starts an instance of all maps application
	// installations.
	//
	// device/apps/maps/installation.Start() starts an instance of the
	// maps application installation identified by the given suffix.
	//
	// device/apps/maps.Refresh() refreshes the state of all instances of
	// all maps application installations.
	//
	// device/apps/maps/installation.Refresh() refreshes the state of all
	// instances of the maps application installation identified by the
	// given suffix.
	//
	// device/apps/maps/installation/instance.Refresh() refreshes the
	// state of the maps application installation instance identified by
	// the given suffix.
	//
	// Further, the following methods complement one another:
	// -- Install() and Uninstall()
	// -- Start() and Shutdown()
	// -- Suspend() and Resume()
	//
	// Finally, an application installation instance can be in one of
	// three abstract states: 1) "does not exist", 2) "running", or 3)
	// "suspended". The interface methods transition between these
	// abstract states using the following state machine:
	//
	// apply(Start(), "does not exists") = "running"
	// apply(Refresh(), "running") = "running"
	// apply(Refresh(), "suspended") = "suspended"
	// apply(Restart(), "running") = "running"
	// apply(Restart(), "suspended") = "running"
	// apply(Resume(), "suspended") = "running"
	// apply(Resume(), "running") = "running"
	// apply(Shutdown(), "running") = "does not exist"
	// apply(Shutdown(), "suspended") = "does not exist"
	// apply(Suspend(), "running") = "suspended"
	// apply(Suspend(), "suspended") = "suspended"
	//
	// In other words, invoking any method using an existing application
	// installation instance as a receiver is well-defined.
	ApplicationService
	// Describe generates a description of the node.
	Describe(context _gen_ipc.Context) (reply Description, err error)
	// IsRunnable checks if the node can execute the given binary.
	IsRunnable(context _gen_ipc.Context, Binary build.BinaryDescription) (reply bool, err error)
	// Reset resets the node. If the deadline is non-zero and the node
	// in question is still running after the given deadline expired,
	// reset of the node is enforced.
	//
	// TODO(jsimsa): Switch deadline to time.Duration when built-in types
	// are implemented.
	Reset(context _gen_ipc.Context, Deadline uint64) (err error)
}

// BindNode returns the client stub implementing the Node
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindNode(name string, opts ..._gen_ipc.BindOpt) (Node, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdl.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdl.ErrTooManyOptionsToBind
	}
	stub := &clientStubNode{client: client, name: name}
	stub.Application_InternalNoTagGetter, _ = BindApplication(name, client)

	return stub, nil
}

// NewServerNode creates a new server stub.
//
// It takes a regular server implementing the NodeService
// interface, and returns a new server stub.
func NewServerNode(server NodeService) interface{} {
	return &ServerStubNode{
		ServerStubApplication: *NewServerApplication(server).(*ServerStubApplication),
		service:               server,
	}
}

// clientStubNode implements Node.
type clientStubNode struct {
	Application_InternalNoTagGetter

	client _gen_ipc.Client
	name   string
}

func (c *clientStubNode) GetMethodTags(method string) []interface{} {
	return GetNodeMethodTags(method)
}

func (__gen_c *clientStubNode) Describe(opts ..._gen_ipc.ClientCallOpt) (reply Description, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Describe", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubNode) IsRunnable(Binary build.BinaryDescription, opts ..._gen_ipc.ClientCallOpt) (reply bool, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "IsRunnable", []interface{}{Binary}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubNode) Reset(Deadline uint64, opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Reset", []interface{}{Deadline}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c *clientStubNode) UnresolveStep(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = c.client.StartCall(c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubNode wraps a server that implements
// NodeService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubNode struct {
	ServerStubApplication

	service NodeService
}

func (s *ServerStubNode) GetMethodTags(method string) []interface{} {
	return GetNodeMethodTags(method)
}

func (s *ServerStubNode) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["Describe"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 66},
			{Name: "", Type: 67},
		},
	}
	result.Methods["IsRunnable"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "Binary", Type: 68},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 2},
			{Name: "", Type: 67},
		},
	}
	result.Methods["Reset"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "Deadline", Type: 53},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 67},
		},
	}

	result.TypeDefs = []_gen_vdl.Any{
		_gen_wiretype.MapType{Key: 0x3, Elem: 0x2, Name: "", Tags: []string(nil)}, _gen_wiretype.StructType{
			[]_gen_wiretype.FieldType{
				_gen_wiretype.FieldType{Type: 0x41, Name: "Profiles"},
			},
			"veyron2/services/mgmt/node.Description", []string(nil)},
		_gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}, _gen_wiretype.StructType{
			[]_gen_wiretype.FieldType{
				_gen_wiretype.FieldType{Type: 0x3, Name: "Name"},
				_gen_wiretype.FieldType{Type: 0x41, Name: "Profiles"},
			},
			"veyron2/services/mgmt/build.BinaryDescription", []string(nil)},
	}
	var ss _gen_ipc.ServiceSignature
	var firstAdded int
	ss, _ = s.ServerStubApplication.Signature(call)
	firstAdded = len(result.TypeDefs)
	for k, v := range ss.Methods {
		for i, _ := range v.InArgs {
			if v.InArgs[i].Type >= _gen_wiretype.TypeIDFirst {
				v.InArgs[i].Type += _gen_wiretype.TypeID(firstAdded)
			}
		}
		for i, _ := range v.OutArgs {
			if v.OutArgs[i].Type >= _gen_wiretype.TypeIDFirst {
				v.OutArgs[i].Type += _gen_wiretype.TypeID(firstAdded)
			}
		}
		if v.InStream >= _gen_wiretype.TypeIDFirst {
			v.InStream += _gen_wiretype.TypeID(firstAdded)
		}
		if v.OutStream >= _gen_wiretype.TypeIDFirst {
			v.OutStream += _gen_wiretype.TypeID(firstAdded)
		}
		result.Methods[k] = v
	}
	//TODO(bprosnitz) combine type definitions from embeded interfaces in a way that doesn't cause duplication.
	for _, d := range ss.TypeDefs {
		switch wt := d.(type) {
		case _gen_wiretype.SliceType:
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.ArrayType:
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.MapType:
			if wt.Key >= _gen_wiretype.TypeIDFirst {
				wt.Key += _gen_wiretype.TypeID(firstAdded)
			}
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.StructType:
			for _, fld := range wt.Fields {
				if fld.Type >= _gen_wiretype.TypeIDFirst {
					fld.Type += _gen_wiretype.TypeID(firstAdded)
				}
			}
			d = wt
		}
		result.TypeDefs = append(result.TypeDefs, d)
	}

	return result, nil
}

func (s *ServerStubNode) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubNode) Describe(call _gen_ipc.ServerCall) (reply Description, err error) {
	reply, err = __gen_s.service.Describe(call)
	return
}

func (__gen_s *ServerStubNode) IsRunnable(call _gen_ipc.ServerCall, Binary build.BinaryDescription) (reply bool, err error) {
	reply, err = __gen_s.service.IsRunnable(call, Binary)
	return
}

func (__gen_s *ServerStubNode) Reset(call _gen_ipc.ServerCall, Deadline uint64) (err error) {
	err = __gen_s.service.Reset(call, Deadline)
	return
}

func GetNodeMethodTags(method string) []interface{} {
	if resp := GetApplicationMethodTags(method); resp != nil {
		return resp
	}
	switch method {
	case "Describe":
		return []interface{}{}
	case "IsRunnable":
		return []interface{}{}
	case "Reset":
		return []interface{}{}
	default:
		return nil
	}
}
