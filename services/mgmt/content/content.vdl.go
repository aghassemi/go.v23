// This file was auto-generated by the veyron vdl tool.
// Source: content.idl

// Package content supports storing and serving arbitrary binary
// content, such as veyron application binaries.
//
// OVERVIEW: Content is expected to be organized using veyron's
// hierarchical namespace. The nodes of the hierarchy are expected to
// implement: 1) the MountTable interface, to enable extending the
// hierarchy, 2) the Content interface, to enable content retrieval,
// and 3) the Glob interface, to enable content discovery.
package content

import (
	"veyron2/security"

	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_veyron2 "veyron2"
	_gen_ipc "veyron2/ipc"
	_gen_naming "veyron2/naming"
	_gen_rt "veyron2/rt"
	_gen_vdl "veyron2/vdl"
	_gen_wiretype "veyron2/wiretype"
)

// Content can be used to manage content of the content server.
// Content is the interface the client binds and uses.
// Content_InternalNoTagGetter is the interface without the TagGetter
// and UnresolveStep methods (both framework-added, rathern than user-defined),
// to enable embedding without method collisions.  Not to be used directly by
// clients.
type Content_InternalNoTagGetter interface {

	// Delete deletes the content.
	Delete(opts ..._gen_ipc.ClientCallOpt) (err error)
	// Download opens a stream that can used for downloading the
	// content.
	Download(opts ..._gen_ipc.ClientCallOpt) (reply ContentDownloadStream, err error)
	// Upload opens a stream that can be used for uploading the content
	// and returns the name under which this content can be found.
	Upload(opts ..._gen_ipc.ClientCallOpt) (reply ContentUploadStream, err error)
}
type Content interface {
	_gen_vdl.TagGetter
	// UnresolveStep returns the names for the remote service, rooted at the
	// service's immediate namespace ancestor.
	UnresolveStep(opts ..._gen_ipc.ClientCallOpt) ([]string, error)
	Content_InternalNoTagGetter
}

// ContentService is the interface the server implements.
type ContentService interface {

	// Delete deletes the content.
	Delete(context _gen_ipc.Context) (err error)
	// Download opens a stream that can used for downloading the
	// content.
	Download(context _gen_ipc.Context, stream ContentServiceDownloadStream) (err error)
	// Upload opens a stream that can be used for uploading the content
	// and returns the name under which this content can be found.
	Upload(context _gen_ipc.Context, stream ContentServiceUploadStream) (reply string, err error)
}

// ContentDownloadStream is the interface for streaming responses of the method
// Download in the service interface Content.
type ContentDownloadStream interface {

	// Recv returns the next item in the input stream, blocking until
	// an item is available.  Returns io.EOF to indicate graceful end of input.
	Recv() (item []byte, err error)

	// Finish closes the stream and returns the positional return values for
	// call.
	Finish() (err error)

	// Cancel cancels the RPC, notifying the server to stop processing.
	Cancel()
}

// Implementation of the ContentDownloadStream interface that is not exported.
type implContentDownloadStream struct {
	clientCall _gen_ipc.ClientCall
}

func (c *implContentDownloadStream) Recv() (item []byte, err error) {
	err = c.clientCall.Recv(&item)
	return
}

func (c *implContentDownloadStream) Finish() (err error) {
	if ierr := c.clientCall.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c *implContentDownloadStream) Cancel() {
	c.clientCall.Cancel()
}

// ContentServiceDownloadStream is the interface for streaming responses of the method
// Download in the service interface Content.
type ContentServiceDownloadStream interface {
	// Send places the item onto the output stream, blocking if there is no buffer
	// space available.
	Send(item []byte) error
}

// Implementation of the ContentServiceDownloadStream interface that is not exported.
type implContentServiceDownloadStream struct {
	serverCall _gen_ipc.ServerCall
}

func (s *implContentServiceDownloadStream) Send(item []byte) error {
	return s.serverCall.Send(item)
}

// ContentUploadStream is the interface for streaming responses of the method
// Upload in the service interface Content.
type ContentUploadStream interface {

	// Send places the item onto the output stream, blocking if there is no buffer
	// space available.
	Send(item []byte) error

	// CloseSend indicates to the server that no more items will be sent; server
	// Recv calls will receive io.EOF after all sent items.  Subsequent calls to
	// Send on the client will fail.  This is an optional call - it's used by
	// streaming clients that need the server to receive the io.EOF terminator.
	CloseSend() error

	// Finish closes the stream and returns the positional return values for
	// call.
	Finish() (reply string, err error)

	// Cancel cancels the RPC, notifying the server to stop processing.
	Cancel()
}

// Implementation of the ContentUploadStream interface that is not exported.
type implContentUploadStream struct {
	clientCall _gen_ipc.ClientCall
}

func (c *implContentUploadStream) Send(item []byte) error {
	return c.clientCall.Send(item)
}

func (c *implContentUploadStream) CloseSend() error {
	return c.clientCall.CloseSend()
}

func (c *implContentUploadStream) Finish() (reply string, err error) {
	if ierr := c.clientCall.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c *implContentUploadStream) Cancel() {
	c.clientCall.Cancel()
}

// ContentServiceUploadStream is the interface for streaming responses of the method
// Upload in the service interface Content.
type ContentServiceUploadStream interface {

	// Recv fills itemptr with the next item in the input stream, blocking until
	// an item is available.  Returns io.EOF to indicate graceful end of input.
	Recv() (item []byte, err error)
}

// Implementation of the ContentServiceUploadStream interface that is not exported.
type implContentServiceUploadStream struct {
	serverCall _gen_ipc.ServerCall
}

func (s *implContentServiceUploadStream) Recv() (item []byte, err error) {
	err = s.serverCall.Recv(&item)
	return
}

// BindContent returns the client stub implementing the Content
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindContent(name string, opts ..._gen_ipc.BindOpt) (Content, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdl.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdl.ErrTooManyOptionsToBind
	}
	stub := &clientStubContent{client: client, name: name}

	return stub, nil
}

// NewServerContent creates a new server stub.
//
// It takes a regular server implementing the ContentService
// interface, and returns a new server stub.
func NewServerContent(server ContentService) interface{} {
	return &ServerStubContent{
		service: server,
	}
}

// clientStubContent implements Content.
type clientStubContent struct {
	client _gen_ipc.Client
	name   string
}

func (c *clientStubContent) GetMethodTags(method string) []interface{} {
	return GetContentMethodTags(method)
}

func (__gen_c *clientStubContent) Delete(opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Delete", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubContent) Download(opts ..._gen_ipc.ClientCallOpt) (reply ContentDownloadStream, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Download", nil, opts...); err != nil {
		return
	}
	reply = &implContentDownloadStream{clientCall: call}
	return
}

func (__gen_c *clientStubContent) Upload(opts ..._gen_ipc.ClientCallOpt) (reply ContentUploadStream, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "Upload", nil, opts...); err != nil {
		return
	}
	reply = &implContentUploadStream{clientCall: call}
	return
}

func (c *clientStubContent) UnresolveStep(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = c.client.StartCall(c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubContent wraps a server that implements
// ContentService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubContent struct {
	service ContentService
}

func (s *ServerStubContent) GetMethodTags(method string) []interface{} {
	return GetContentMethodTags(method)
}

func (s *ServerStubContent) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["Delete"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Download"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},

		OutStream: 67,
	}
	result.Methods["Upload"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 3},
			{Name: "", Type: 65},
		},
		InStream: 67,
	}

	result.TypeDefs = []_gen_vdl.Any{
		_gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}, _gen_wiretype.NamedPrimitiveType{Type: 0x32, Name: "byte", Tags: []string(nil)}, _gen_wiretype.SliceType{Elem: 0x42, Name: "", Tags: []string(nil)}}

	return result, nil
}

func (s *ServerStubContent) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubContent) Delete(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.Delete(call)
	return
}

func (__gen_s *ServerStubContent) Download(call _gen_ipc.ServerCall) (err error) {
	stream := &implContentServiceDownloadStream{serverCall: call}
	err = __gen_s.service.Download(call, stream)
	return
}

func (__gen_s *ServerStubContent) Upload(call _gen_ipc.ServerCall) (reply string, err error) {
	stream := &implContentServiceUploadStream{serverCall: call}
	reply, err = __gen_s.service.Upload(call, stream)
	return
}

func GetContentMethodTags(method string) []interface{} {
	switch method {
	case "Delete":
		return []interface{}{security.Label(2)}
	case "Download":
		return []interface{}{security.Label(1)}
	case "Upload":
		return []interface{}{security.Label(2)}
	default:
		return nil
	}
}
