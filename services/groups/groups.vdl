// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package groups defines interfaces for managing access control groups.  Groups
// can be referenced by BlessingPatterns (e.g. in AccessLists).
package groups

// TODO(sadovsky): Write a detailed description of this package and add a
// reference to the (forthcoming) design doc.

import (
	"v.io/v23/security/access"
	"v.io/v23/services/permissions"
)

// BlessingPatternChunk is a substring of a BlessingPattern. As with
// BlessingPatterns, BlessingPatternChunks may contain references to groups.
// However, they may be restricted in other ways. For example, in the future
// BlessingPatterns may support "$" terminators, but these may be disallowed for
// BlessingPatternChunks.
type BlessingPatternChunk string

type GetRequest struct {
}
type GetResponse struct {
	Entries set[BlessingPatternChunk]
}

type RestRequest struct {
}
type RestResponse struct {
}

// A group's version covers its AccessList as well as any other data stored in
// the group. Clients should treat versions as opaque identifiers. For both Get
// and Rest, if version is set and matches the Group's current version, the
// response will indicate that fact but will otherwise be empty.
type Group interface {
	// Create creates a new group if it doesn't already exist.
	// If acl is nil, a default Permissions is used, providing Admin access to
	// the caller.
	// Create requires the caller to have Write permission at the GroupServer.
	Create(acl access.Permissions, entries []BlessingPatternChunk) error {access.Write}

	// Delete deletes the group.
	// Permissions for all group-related methods except Create() are checked
	// against the Group object.
	Delete(version string) error {access.Write}

	// Add adds an entry to the group.
	Add(entry BlessingPatternChunk, version string) error {access.Write}

	// Remove removes an entry from the group.
	Remove(entry BlessingPatternChunk, version string) error {access.Write}

	// Get returns all entries in the group.
	// TODO(sadovsky): Flesh out this API.
	Get(req GetRequest, reqVersion string) (res GetResponse, version string | error) {access.Read}

	// Rest returns information sufficient for the client to perform its
	// AccessList checks.
	// TODO(sadovsky): Flesh out this API.
	Rest(req RestRequest, reqVersion string) (res RestResponse, version string | error) {access.Resolve}

	// SetPermissions and GetPermissions are included from the Object interface.
	permissions.Object
}

error (
	NoBlessings() {"en":"No blessings recognized; cannot create group AccessList"}
	ExcessiveContention() {RetryBackoff, "en":"Gave up after encountering excessive contention; try again later"}
)
