//line grammar.y:36

// This grammar.go file was auto-generated by yacc from grammar.y.

package build

import __yyfmt__ "fmt"

//line grammar.y:38
import (
	"math/big"
)

type strPos struct {
	str string
	pos Pos
}

type intPos struct {
	int *big.Int
	pos Pos
}

type ratPos struct {
	rat *big.Rat
	pos Pos
}

type cpxPos struct {
	cpx bigCmplx
	pos Pos
}

type typePos struct {
	typ Type
	pos Pos
}

// typeListToStrList converts a slice of typePos to a slice of strPos.  Each
// type must be an NamedType with an empty PackageName, otherwise errors
// are reported, and ok=false is returned.
func typeListToStrList(yylex yyLexer, typeList []typePos) (strList []strPos, ok bool) {
	ok = true
	for _, typepos := range typeList {
		pos := typepos.pos
		named, _ := typepos.typ.(*NamedType)
		if named == nil {
			ok = false
			lexPosErrorf(yylex, pos, "Expected one or more variable names, but received type %q.", typepos.typ.Name())
			return
		}
		if named.PackageName != "" {
			ok = false
			lexPosErrorf(yylex, pos, "Expected one or more variable names, but received package-qualified name %q.", named.Name())
		}
		strList = append(strList, strPos{named.TypeName, pos})
	}
	return
}

// ensureNonEmptyToken reports an error if tok is empty.
func ensureNonEmptyToken(yylex yyLexer, tok strPos, errMsg string) {
	if len(tok.str) == 0 {
		lexPosErrorf(yylex, tok.pos, errMsg)
	}
}

//line grammar.y:102
type yySymType struct {
	yys                 int
	pos                 Pos
	strpos              strPos
	intpos              intPos
	ratpos              ratPos
	cpxpos              cpxPos
	typepos             typePos
	typeposs            []typePos
	fields              []*Field
	method              *Method
	constexpr           constExpr
	constexprs          []constExpr
	interfacecomponent  InterfaceComponent
	interfacecomponents []InterfaceComponent
}

const startImportsOnly = 57346
const startFullFile = 57347
const tOROR = 57348
const tANDAND = 57349
const tLE = 57350
const tGE = 57351
const tNE = 57352
const tEQEQ = 57353
const tLSH = 57354
const tRSH = 57355
const tPACKAGE = 57356
const tIMPORT = 57357
const tTYPE = 57358
const tMAP = 57359
const tSTRUCT = 57360
const tINTERFACE = 57361
const tSTREAM = 57362
const tCONST = 57363
const tTRUE = 57364
const tFALSE = 57365
const tERRORID = 57366
const tIDENT = 57367
const tSTRLIT = 57368
const tINTLIT = 57369
const tRATLIT = 57370
const tCPXLIT = 57371
const notPackage = 57372

var yyToknames = []string{
	"startImportsOnly",
	"startFullFile",
	" ;",
	" ,",
	" .",
	" (",
	" )",
	" [",
	" ]",
	" {",
	" }",
	" <",
	" >",
	" =",
	" !",
	" +",
	" -",
	" *",
	" /",
	" %",
	" |",
	" &",
	" ^",
	"tOROR",
	"tANDAND",
	"tLE",
	"tGE",
	"tNE",
	"tEQEQ",
	"tLSH",
	"tRSH",
	"tPACKAGE",
	"tIMPORT",
	"tTYPE",
	"tMAP",
	"tSTRUCT",
	"tINTERFACE",
	"tSTREAM",
	"tCONST",
	"tTRUE",
	"tFALSE",
	"tERRORID",
	"tIDENT",
	"tSTRLIT",
	"tINTLIT",
	"tRATLIT",
	"tCPXLIT",
	"notPackage",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 117
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 370

var yyAct = []int{

	74, 108, 189, 141, 106, 107, 42, 40, 37, 96,
	33, 91, 75, 51, 22, 21, 88, 30, 196, 172,
	99, 202, 69, 168, 39, 77, 78, 79, 192, 15,
	12, 94, 51, 80, 58, 13, 41, 48, 14, 54,
	52, 53, 27, 46, 142, 56, 51, 60, 50, 48,
	82, 83, 64, 81, 84, 85, 86, 87, 68, 52,
	53, 41, 72, 99, 44, 38, 89, 50, 175, 51,
	41, 102, 103, 52, 53, 38, 93, 100, 22, 21,
	24, 50, 110, 47, 8, 25, 20, 174, 26, 135,
	129, 130, 131, 132, 36, 15, 52, 53, 137, 5,
	47, 148, 138, 143, 50, 51, 29, 19, 51, 147,
	61, 145, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	63, 38, 52, 53, 167, 52, 53, 49, 57, 32,
	50, 212, 188, 50, 22, 21, 179, 178, 177, 171,
	182, 181, 113, 114, 210, 180, 119, 120, 121, 122,
	123, 124, 125, 126, 111, 112, 115, 116, 117, 118,
	127, 128, 206, 170, 195, 186, 35, 187, 144, 147,
	191, 205, 88, 51, 71, 193, 105, 66, 101, 70,
	197, 77, 78, 79, 182, 199, 204, 200, 198, 80,
	121, 122, 123, 136, 125, 109, 207, 92, 209, 211,
	52, 53, 127, 128, 140, 142, 82, 83, 50, 81,
	84, 85, 86, 87, 201, 134, 133, 67, 62, 113,
	114, 184, 208, 119, 120, 121, 122, 123, 124, 125,
	126, 111, 112, 115, 116, 117, 118, 127, 128, 183,
	190, 146, 139, 90, 113, 114, 73, 65, 119, 120,
	121, 122, 123, 124, 125, 126, 111, 112, 115, 116,
	117, 118, 127, 128, 169, 7, 43, 31, 18, 113,
	114, 16, 9, 119, 120, 121, 122, 123, 124, 125,
	126, 111, 112, 115, 116, 117, 118, 127, 128, 113,
	114, 51, 59, 119, 120, 121, 122, 123, 124, 125,
	126, 55, 112, 115, 116, 117, 118, 127, 128, 2,
	3, 4, 34, 45, 23, 6, 28, 11, 52, 53,
	17, 10, 1, 113, 114, 203, 50, 119, 120, 121,
	122, 123, 124, 125, 126, 194, 76, 115, 116, 117,
	118, 127, 128, 119, 120, 121, 122, 123, 124, 125,
	126, 95, 97, 173, 185, 176, 104, 127, 128, 98,
}
var yyPact = []int{

	315, -1000, 64, 64, -1000, 38, -1000, -7, 275, 59,
	-1000, 272, -1000, -1000, -1000, 98, -1000, 43, -1000, 32,
	-1000, -1000, -30, 271, 130, 85, 15, -1000, 270, -1000,
	-1000, -1000, 54, -1000, -1000, 97, 29, -1000, 121, 24,
	-1000, 93, 218, -32, -1000, 251, -1000, 290, -1000, 174,
	219, 10, 178, 171, -1000, 250, -1000, 173, -1000, 247,
	-1000, -36, -1000, -1000, 197, 37, 17, 31, 176, 290,
	290, 172, 195, 19, 137, -1000, -1000, 173, 173, 173,
	173, 217, -1000, -1000, -1000, -1000, -1000, -1000, 173, 193,
	-10, -1000, -1000, -1000, -1000, 246, -1000, -1000, -1000, 206,
	-1000, 290, -1000, 166, 245, -1000, -1000, 94, -1000, -1000,
	-1000, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, -1000,
	-1000, -1000, -1000, 173, -23, 264, -1000, -1000, 159, -26,
	-27, 46, 58, -1000, 290, 141, 290, -1000, 290, 284,
	318, 334, 334, 334, 334, 334, 334, 179, 179, -1000,
	-1000, -1000, 179, -1000, 179, -1000, -1000, 239, 222, -1000,
	-1000, -1000, -1000, 35, 127, -1000, 243, 21, -1000, -1000,
	-1000, -1000, -1000, -1000, 173, 161, -1000, -1000, 2, 188,
	290, 187, 290, 214, -1000, 7, -1000, 165, -1000, -1000,
	-1000, -1000, -1000, 225, 137, -1000, 290, 140, 173, 125,
	-1000, 137, -1000,
}
var yyPgo = []int{

	0, 1, 369, 5, 366, 4, 365, 3, 364, 363,
	362, 9, 361, 0, 12, 346, 345, 335, 332, 321,
	275, 331, 330, 327, 326, 6, 86, 324, 323, 10,
	322, 311, 8, 302, 7, 2,
}
var yyR1 = []int{

	0, 18, 18, 21, 21, 21, 21, 19, 19, 20,
	20, 23, 23, 23, 24, 24, 26, 26, 22, 22,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	28, 28, 29, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 5, 30, 30, 12, 12, 11,
	11, 10, 7, 7, 7, 6, 6, 3, 3, 8,
	8, 8, 9, 9, 9, 9, 16, 16, 16, 17,
	17, 31, 31, 32, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 14, 14, 14, 14, 14, 14, 14,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 33,
	33, 34, 34, 25, 25, 35, 35,
}
var yyR2 = []int{

	0, 4, 4, 0, 1, 1, 1, 0, 3, 0,
	3, 3, 5, 2, 1, 3, 1, 2, 0, 3,
	3, 5, 2, 2, 3, 5, 2, 3, 5, 2,
	1, 3, 2, 1, 3, 1, 3, 4, 3, 5,
	5, 3, 1, 3, 2, 4, 6, 1, 3, 1,
	1, 5, 2, 4, 4, 1, 3, 1, 3, 0,
	1, 1, 0, 3, 4, 6, 0, 2, 4, 1,
	3, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 2, 2, 2, 2, 4, 6,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 1,
	3, 1, 3, 0, 1, 0, 1,
}
var yyChk = []int{

	-1000, -18, 4, 5, -19, 35, -19, -20, 46, -20,
	-21, -23, 37, 42, 45, 36, 6, -22, 6, 9,
	-26, 47, 46, -27, 37, 42, 45, 10, -24, -26,
	47, 6, 9, -29, -30, 46, 9, -32, 46, 9,
	-34, 46, -25, 6, 10, -28, -29, 46, -1, 40,
	46, 11, 38, 39, 10, -31, -32, 17, 10, -33,
	-34, 17, 10, -26, -25, 6, 13, 8, 48, 12,
	11, 13, -25, 6, -13, -14, -15, 18, 19, 20,
	26, 46, 43, 44, 47, 48, 49, 50, 9, -25,
	6, 47, 10, -29, 14, -12, -11, -10, -2, 46,
	46, 12, -1, -1, -4, 14, -5, -3, -1, 10,
	-32, 27, 28, 15, 16, 29, 30, 31, 32, 19,
	20, 21, 22, 23, 24, 25, 26, 33, 34, -14,
	-14, -14, -14, 9, 8, -13, 10, -34, -25, 6,
	8, -7, 9, -1, 12, -25, 6, -1, 7, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, 46, 10,
	14, -11, 46, -9, 41, 10, -6, -3, -5, -1,
	14, -5, -1, 10, 9, -8, -1, -7, 15, -35,
	7, -35, 7, -13, -16, 13, 16, -1, 10, -5,
	10, 10, 14, -17, -13, 16, 7, -35, 7, -1,
	14, -13, 16,
}
var yyDef = []int{

	0, -2, 7, 7, 9, 0, 9, 3, 0, 18,
	1, 0, 4, 5, 6, 0, 8, 2, 10, 0,
	13, 16, 0, 0, 0, 0, 0, 11, 113, 14,
	17, 19, 0, 22, 23, 0, 0, 26, 0, 0,
	29, 111, 0, 114, 20, 113, 30, 0, 32, 0,
	35, 0, 0, 0, 24, 113, 71, 0, 27, 113,
	109, 0, 12, 15, 0, 114, 0, 0, 0, 0,
	0, 0, 0, 114, 73, 74, 93, 0, 0, 0,
	0, 106, 100, 101, 102, 103, 104, 105, 0, 0,
	114, 112, 21, 31, 45, 113, 47, 49, 50, 33,
	36, 0, 38, 0, 113, 41, 42, 0, 57, 25,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 0, 0, 0, 28, 110, 0, 114,
	0, 62, 0, 37, 0, 0, 114, 44, 0, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 92, 0, 107, 108,
	46, 48, 34, 59, 0, 52, 115, 115, 55, 39,
	40, 43, 58, 98, 0, 66, 60, 61, 0, 0,
	116, 0, 116, 0, 51, 0, 63, 0, 53, 56,
	54, 99, 67, 115, 69, 64, 0, 0, 116, 0,
	68, 70, 65,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 18, 3, 3, 3, 23, 25, 3,
	9, 10, 21, 19, 7, 20, 8, 22, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	15, 17, 16, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 11, 3, 12, 26, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 13, 24, 14,
}
var yyTok2 = []int{

	2, 3, 4, 5, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		//line grammar.y:169
		{
			lexGenEOF(yylex)
		}
	case 4:
		//line grammar.y:171
		{
			lexGenEOF(yylex)
		}
	case 5:
		//line grammar.y:173
		{
			lexGenEOF(yylex)
		}
	case 6:
		//line grammar.y:175
		{
			lexGenEOF(yylex)
		}
	case 7:
		//line grammar.y:180
		{
			lexPosErrorf(yylex, Pos{}, "File must start with package statement")
		}
	case 8:
		//line grammar.y:182
		{
			lexIDLFile(yylex).PackageName = yyS[yypt-1].strpos.str
			lexIDLFile(yylex).PackagePos = yyS[yypt-2].pos
		}
	case 16:
		//line grammar.y:203
		{
			imps := &lexIDLFile(yylex).Imports
			*imps = append(*imps, &Import{Path: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos})
		}
	case 17:
		//line grammar.y:208
		{
			imps := &lexIDLFile(yylex).Imports
			*imps = append(*imps, &Import{LocalName: yyS[yypt-1].strpos.str, Path: yyS[yypt-0].strpos.str, Pos: yyS[yypt-1].strpos.pos})
		}
	case 32:
		//line grammar.y:237
		{
			f := lexIDLFile(yylex)
			tds := &f.TypeDefs
			*tds = append(*tds, &TypeDef{Name: yyS[yypt-1].strpos.str, Base: yyS[yypt-0].typepos.typ, Pos: yyS[yypt-1].strpos.pos, File: f})
		}
	case 33:
		//line grammar.y:245
		{
			yyVAL.typepos = typePos{&NamedType{TypeName: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos, WantInterface: true}, yyS[yypt-0].strpos.pos}
		}
	case 34:
		//line grammar.y:247
		{
			yyVAL.typepos = typePos{&NamedType{PackageName: yyS[yypt-2].strpos.str, TypeName: yyS[yypt-0].strpos.str, Pos: yyS[yypt-2].strpos.pos, WantInterface: true}, yyS[yypt-2].strpos.pos}
		}
	case 35:
		//line grammar.y:251
		{
			yyVAL.typepos = typePos{&NamedType{TypeName: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos}, yyS[yypt-0].strpos.pos}
		}
	case 36:
		//line grammar.y:253
		{
			yyVAL.typepos = typePos{&NamedType{PackageName: yyS[yypt-2].strpos.str, TypeName: yyS[yypt-0].strpos.str, Pos: yyS[yypt-2].strpos.pos}, yyS[yypt-2].strpos.pos}
		}
	case 37:
		//line grammar.y:255
		{
			yyVAL.typepos = typePos{&ArrayType{Len: int(yyS[yypt-2].intpos.int.Int64()), Elem: yyS[yypt-0].typepos.typ}, yyS[yypt-3].pos}
		}
	case 38:
		//line grammar.y:257
		{
			yyVAL.typepos = typePos{&SliceType{Elem: yyS[yypt-0].typepos.typ}, yyS[yypt-2].pos}
		}
	case 39:
		//line grammar.y:259
		{
			yyVAL.typepos = typePos{&MapType{Key: yyS[yypt-2].typepos.typ, Elem: yyS[yypt-0].typepos.typ}, yyS[yypt-4].pos}
		}
	case 40:
		//line grammar.y:261
		{
			yyVAL.typepos = typePos{&StructType{Fields: yyS[yypt-2].fields}, yyS[yypt-4].pos}
		}
	case 41:
		//line grammar.y:263
		{
			yyVAL.typepos = typePos{&StructType{}, yyS[yypt-2].pos}
		}
	case 42:
		//line grammar.y:267
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 43:
		//line grammar.y:269
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 44:
		//line grammar.y:307
		{
			if names, ok := typeListToStrList(yylex, yyS[yypt-1].typeposs); ok {
				for _, name := range names {
					yyVAL.fields = append(yyVAL.fields, &Field{Name: name.str, Type: yyS[yypt-0].typepos.typ, Pos: name.pos})
				}
			} else {
				lexPosErrorf(yylex, yyS[yypt-0].typepos.pos, "Perhaps you forgot a comma before type %q?.", yyS[yypt-0].typepos.typ.Name())
			}
		}
	case 45:
		//line grammar.y:320
		{
			f := lexIDLFile(yylex)
			ifs := &lexIDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{Name: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos, Def: &TypeDef{Name: yyS[yypt-3].strpos.str, Base: &InterfaceType{}, Pos: yyS[yypt-3].strpos.pos, File: f}})
		}
	case 46:
		//line grammar.y:326
		{
			f := lexIDLFile(yylex)
			ifs := &lexIDLFile(yylex).Interfaces
			*ifs = append(*ifs, &Interface{Name: yyS[yypt-5].strpos.str, Components: yyS[yypt-2].interfacecomponents, Pos: yyS[yypt-5].strpos.pos, Def: &TypeDef{Name: yyS[yypt-5].strpos.str, Base: &InterfaceType{}, Pos: yyS[yypt-5].strpos.pos, File: f}})
		}
	case 47:
		//line grammar.y:334
		{
			yyVAL.interfacecomponents = []InterfaceComponent{yyS[yypt-0].interfacecomponent}
		}
	case 48:
		//line grammar.y:336
		{
			yyVAL.interfacecomponents = append(yyS[yypt-2].interfacecomponents, yyS[yypt-0].interfacecomponent)
		}
	case 49:
		//line grammar.y:340
		{
			yyVAL.interfacecomponent = yyS[yypt-0].method
		}
	case 50:
		//line grammar.y:342
		{
			yyVAL.interfacecomponent = &EmbeddedInterface{Type: yyS[yypt-0].typepos.typ, Pos: yyS[yypt-0].typepos.pos}
		}
	case 51:
		//line grammar.y:346
		{
			yyVAL.method = &Method{Name: yyS[yypt-4].strpos.str, InArgs: yyS[yypt-3].fields, InStream: yyS[yypt-2].fields[0], OutStream: yyS[yypt-2].fields[1], OutArgs: yyS[yypt-1].fields, Pos: yyS[yypt-4].strpos.pos, tagExprs: yyS[yypt-0].constexprs}
		}
	case 52:
		//line grammar.y:350
		{
			yyVAL.fields = nil
		}
	case 53:
		//line grammar.y:352
		{
			yyVAL.fields = yyS[yypt-2].fields
		}
	case 54:
		//line grammar.y:356
		{
			for _, typepos := range yyS[yypt-2].typeposs {
				yyVAL.fields = append(yyVAL.fields, &Field{Type: typepos.typ, Pos: typepos.pos})
			}
		}
	case 55:
		//line grammar.y:366
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 56:
		//line grammar.y:368
		{
			yyVAL.fields = append(yyS[yypt-2].fields, yyS[yypt-0].fields...)
		}
	case 57:
		//line grammar.y:372
		{
			yyVAL.typeposs = []typePos{yyS[yypt-0].typepos}
		}
	case 58:
		//line grammar.y:374
		{
			yyVAL.typeposs = append(yyS[yypt-2].typeposs, yyS[yypt-0].typepos)
		}
	case 59:
		//line grammar.y:380
		{
			yyVAL.fields = nil
		}
	case 60:
		//line grammar.y:382
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-0].typepos.typ, Pos: yyS[yypt-0].typepos.pos}}
		}
	case 61:
		//line grammar.y:384
		{
			yyVAL.fields = yyS[yypt-0].fields
		}
	case 62:
		//line grammar.y:388
		{
			yyVAL.fields = []*Field{nil, nil}
		}
	case 63:
		//line grammar.y:390
		{
			yyVAL.fields = []*Field{nil, nil}
		}
	case 64:
		//line grammar.y:392
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-1].typepos.typ, Pos: yyS[yypt-1].typepos.pos}, nil}
		}
	case 65:
		//line grammar.y:394
		{
			yyVAL.fields = []*Field{{Type: yyS[yypt-3].typepos.typ, Pos: yyS[yypt-3].typepos.pos}, {Type: yyS[yypt-1].typepos.typ, Pos: yyS[yypt-1].typepos.pos}}
		}
	case 66:
		//line grammar.y:398
		{
			yyVAL.constexprs = nil
		}
	case 67:
		//line grammar.y:400
		{
			yyVAL.constexprs = nil
		}
	case 68:
		//line grammar.y:402
		{
			yyVAL.constexprs = yyS[yypt-2].constexprs
		}
	case 69:
		//line grammar.y:406
		{
			yyVAL.constexprs = []constExpr{yyS[yypt-0].constexpr}
		}
	case 70:
		//line grammar.y:408
		{
			yyVAL.constexprs = append(yyS[yypt-2].constexprs, yyS[yypt-0].constexpr)
		}
	case 73:
		//line grammar.y:417
		{
			f := lexIDLFile(yylex)
			cds := &f.ConstDefs
			*cds = append(*cds, &ConstDef{Name: yyS[yypt-2].strpos.str, Pos: yyS[yypt-2].strpos.pos, File: f, expr: yyS[yypt-0].constexpr})
		}
	case 74:
		//line grammar.y:425
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 75:
		//line grammar.y:427
		{
			yyVAL.constexpr = &binaryOpConst{"||", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 76:
		//line grammar.y:429
		{
			yyVAL.constexpr = &binaryOpConst{"&&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 77:
		//line grammar.y:431
		{
			yyVAL.constexpr = &binaryOpConst{"<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 78:
		//line grammar.y:433
		{
			yyVAL.constexpr = &binaryOpConst{">", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 79:
		//line grammar.y:435
		{
			yyVAL.constexpr = &binaryOpConst{"<=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 80:
		//line grammar.y:437
		{
			yyVAL.constexpr = &binaryOpConst{">=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 81:
		//line grammar.y:439
		{
			yyVAL.constexpr = &binaryOpConst{"!=", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 82:
		//line grammar.y:441
		{
			yyVAL.constexpr = &binaryOpConst{"==", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 83:
		//line grammar.y:443
		{
			yyVAL.constexpr = &binaryOpConst{"+", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 84:
		//line grammar.y:445
		{
			yyVAL.constexpr = &binaryOpConst{"-", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 85:
		//line grammar.y:447
		{
			yyVAL.constexpr = &binaryOpConst{"*", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 86:
		//line grammar.y:449
		{
			yyVAL.constexpr = &binaryOpConst{"/", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 87:
		//line grammar.y:451
		{
			yyVAL.constexpr = &binaryOpConst{"%", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 88:
		//line grammar.y:453
		{
			yyVAL.constexpr = &binaryOpConst{"|", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 89:
		//line grammar.y:455
		{
			yyVAL.constexpr = &binaryOpConst{"&", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 90:
		//line grammar.y:457
		{
			yyVAL.constexpr = &binaryOpConst{"^", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 91:
		//line grammar.y:459
		{
			yyVAL.constexpr = &binaryOpConst{"<<", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 92:
		//line grammar.y:461
		{
			yyVAL.constexpr = &binaryOpConst{">>", yyS[yypt-2].constexpr, yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 93:
		//line grammar.y:465
		{
			yyVAL.constexpr = yyS[yypt-0].constexpr
		}
	case 94:
		//line grammar.y:467
		{
			yyVAL.constexpr = &unaryOpConst{"!", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 95:
		//line grammar.y:469
		{
			yyVAL.constexpr = &unaryOpConst{"+", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 96:
		//line grammar.y:471
		{
			yyVAL.constexpr = &unaryOpConst{"-", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 97:
		//line grammar.y:473
		{
			yyVAL.constexpr = &unaryOpConst{"^", yyS[yypt-0].constexpr, yyS[yypt-1].pos}
		}
	case 98:
		//line grammar.y:475
		{
			yyVAL.constexpr = &typeConvConst{&NamedType{TypeName: yyS[yypt-3].strpos.str, Pos: yyS[yypt-3].strpos.pos}, yyS[yypt-1].constexpr, yyS[yypt-3].strpos.pos}
		}
	case 99:
		//line grammar.y:477
		{
			yyVAL.constexpr = &typeConvConst{&NamedType{PackageName: yyS[yypt-5].strpos.str, TypeName: yyS[yypt-3].strpos.str, Pos: yyS[yypt-5].strpos.pos}, yyS[yypt-1].constexpr, yyS[yypt-5].strpos.pos}
		}
	case 100:
		//line grammar.y:483
		{
			yyVAL.constexpr = &literalConst{true, yyS[yypt-0].pos}
		}
	case 101:
		//line grammar.y:485
		{
			yyVAL.constexpr = &literalConst{false, yyS[yypt-0].pos}
		}
	case 102:
		//line grammar.y:487
		{
			yyVAL.constexpr = &literalConst{yyS[yypt-0].strpos.str, yyS[yypt-0].strpos.pos}
		}
	case 103:
		//line grammar.y:489
		{
			yyVAL.constexpr = &literalConst{yyS[yypt-0].intpos.int, yyS[yypt-0].intpos.pos}
		}
	case 104:
		//line grammar.y:491
		{
			yyVAL.constexpr = &literalConst{yyS[yypt-0].ratpos.rat, yyS[yypt-0].ratpos.pos}
		}
	case 105:
		//line grammar.y:493
		{
			yyVAL.constexpr = &literalConst{yyS[yypt-0].cpxpos.cpx, yyS[yypt-0].cpxpos.pos}
		}
	case 106:
		//line grammar.y:495
		{
			yyVAL.constexpr = &namedConst{name: yyS[yypt-0].strpos.str, p: yyS[yypt-0].strpos.pos}
		}
	case 107:
		//line grammar.y:497
		{
			yyVAL.constexpr = &namedConst{packageName: yyS[yypt-2].strpos.str, name: yyS[yypt-0].strpos.str, p: yyS[yypt-2].strpos.pos}
		}
	case 108:
		//line grammar.y:499
		{
			yyVAL.constexpr = yyS[yypt-1].constexpr
		}
	case 111:
		//line grammar.y:508
		{
			eds := &lexIDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{Name: yyS[yypt-0].strpos.str, Pos: yyS[yypt-0].strpos.pos})
		}
	case 112:
		//line grammar.y:513
		{
			ensureNonEmptyToken(yylex, yyS[yypt-0].strpos, "Error id must be non-empty if specified")
			eds := &lexIDLFile(yylex).ErrorIDs
			*eds = append(*eds, &ErrorID{Name: yyS[yypt-2].strpos.str, ID: yyS[yypt-0].strpos.str, Pos: yyS[yypt-2].strpos.pos})
		}
	}
	goto yystack /* stack new state and value */
}
