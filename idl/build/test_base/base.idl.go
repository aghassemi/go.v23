// This file was auto-generated by the veyron idl tool.
// Source: base.idl

package test_base

import (
	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_veyron2 "veyron2"
	_gen_idl "veyron2/idl"
	_gen_ipc "veyron2/ipc"
	_gen_naming "veyron2/naming"
	_gen_rt "veyron2/rt"
	_gen_wiretype "veyron2/wiretype"
)

// Args will be reordered to show up before NestedArgs in the generated output.
type Args struct {
	A int32
	B int32
}

// NestedArgs is defined before Args; that's allowed in regular Go, and also
// allowed in our idl files.  The compiler will re-order dependent types to ease
// code generation in other languages.
type NestedArgs struct {
	Args Args
}
type MyInt int32
type MyArray [2]uint32
type MySlice []string
type MyMap map[float32]error
type MyInt2 MyInt
type MyArray2 MyArray
type MySlice2 MySlice
type MyMap2 MyMap
type Args2 Args

const (
	// One demonstrates using a simple untyped constant.
	True = true

	// Five demonstrates using a simple typed constant.
	Five = int32(5)
)

// MyInterfaceA is an interface that defines two methods.
// MyInterfaceA is the interface the client binds and uses.
// MyInterfaceA_InternalNoTagGetter is the interface without the TagGetter
// and UnresolveStep methods (both framework-added, rathern than user-defined),
// to enable embedding without method collisions.  Not to be used directly by
// clients.
type MyInterfaceA_InternalNoTagGetter interface {

	// A takes in two arguments and returns an unnamed argument and an error.
	A(A Args2, B MyArray2, opts ..._gen_ipc.ClientCallOpt) (reply MySlice2, err error)

	// B takes in no arguments and returns an error.
	B(opts ..._gen_ipc.ClientCallOpt) (err error)
}
type MyInterfaceA interface {
	_gen_idl.TagGetter
	// UnresolveStep returns the names for the remote service, rooted at the
	// service's immediate namespace ancestor.
	UnresolveStep(opts ..._gen_ipc.ClientCallOpt) ([]string, error)
	MyInterfaceA_InternalNoTagGetter
}

// MyInterfaceAService is the interface the server implements.
type MyInterfaceAService interface {

	// A takes in two arguments and returns an unnamed argument and an error.
	A(context _gen_ipc.Context, A Args2, B MyArray2) (reply MySlice2, err error)

	// B takes in no arguments and returns an error.
	B(context _gen_ipc.Context) (err error)
}

// BindMyInterfaceA returns the client stub implementing the MyInterfaceA
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindMyInterfaceA(name string, opts ..._gen_ipc.BindOpt) (MyInterfaceA, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_idl.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_idl.ErrTooManyOptionsToBind
	}
	stub := &clientStubMyInterfaceA{client: client, name: name}

	return stub, nil
}

// NewServerMyInterfaceA creates a new server stub.
//
// It takes a regular server implementing the MyInterfaceAService
// interface, and returns a new server stub.
func NewServerMyInterfaceA(server MyInterfaceAService) interface{} {
	return &ServerStubMyInterfaceA{
		service: server,
	}
}

// clientStubMyInterfaceA implements MyInterfaceA.
type clientStubMyInterfaceA struct {
	client _gen_ipc.Client
	name   string
}

func (c *clientStubMyInterfaceA) GetMethodTags(method string) []interface{} {
	return GetMyInterfaceAMethodTags(method)
}

func (__gen_c *clientStubMyInterfaceA) A(A Args2, B MyArray2, opts ..._gen_ipc.ClientCallOpt) (reply MySlice2, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "A", []interface{}{A, B}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubMyInterfaceA) B(opts ..._gen_ipc.ClientCallOpt) (err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "B", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c *clientStubMyInterfaceA) UnresolveStep(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = c.client.StartCall(c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubMyInterfaceA wraps a server that implements
// MyInterfaceAService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubMyInterfaceA struct {
	service MyInterfaceAService
}

func (s *ServerStubMyInterfaceA) GetMethodTags(method string) []interface{} {
	return GetMyInterfaceAMethodTags(method)
}

func (s *ServerStubMyInterfaceA) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["A"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "A", Type: 65},
			{Name: "B", Type: 66},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 67},
			{Name: "", Type: 68},
		},
	}
	result.Methods["B"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 68},
		},
	}

	result.TypeDefs = []_gen_idl.AnyData{
		_gen_wiretype.StructType{
			[]_gen_wiretype.FieldType{
				_gen_wiretype.FieldType{Type: 0x24, Name: "A"},
				_gen_wiretype.FieldType{Type: 0x24, Name: "B"},
			},
			"Args2", []string(nil)},
		_gen_wiretype.ArrayType{Elem: 0x34, Len: 0x2, Name: "MyArray2", Tags: []string(nil)}, _gen_wiretype.SliceType{Elem: 0x3, Name: "MySlice2", Tags: []string(nil)}, _gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}

func (s *ServerStubMyInterfaceA) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubMyInterfaceA) A(call _gen_ipc.ServerCall, A Args2, B MyArray2) (reply MySlice2, err error) {
	reply, err = __gen_s.service.A(call, A, B)
	return
}

func (__gen_s *ServerStubMyInterfaceA) B(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.B(call)
	return
}

func GetMyInterfaceAMethodTags(method string) []interface{} {
	switch method {
	case "A":
		return []interface{}{}
	case "B":
		return []interface{}{}
	default:
		return nil
	}
}

// MyInterfaceB is an interface that embeds MyInterfaceA and adds another
// method.
// MyInterfaceB is the interface the client binds and uses.
// MyInterfaceB_InternalNoTagGetter is the interface without the TagGetter
// and UnresolveStep methods (both framework-added, rathern than user-defined),
// to enable embedding without method collisions.  Not to be used directly by
// clients.
type MyInterfaceB_InternalNoTagGetter interface {
	MyInterfaceA_InternalNoTagGetter

	// C takes in one argument and returns two named arguments and an error.
	C(C MyArray2, opts ..._gen_ipc.ClientCallOpt) (Val1 MyInt2, Val2 MyMap, err error)

	// D blah blah
	D(D MyMap2, opts ..._gen_ipc.ClientCallOpt) (reply MyInterfaceBDStream, err error)
}
type MyInterfaceB interface {
	_gen_idl.TagGetter
	// UnresolveStep returns the names for the remote service, rooted at the
	// service's immediate namespace ancestor.
	UnresolveStep(opts ..._gen_ipc.ClientCallOpt) ([]string, error)
	MyInterfaceB_InternalNoTagGetter
}

// MyInterfaceBService is the interface the server implements.
type MyInterfaceBService interface {
	MyInterfaceAService

	// C takes in one argument and returns two named arguments and an error.
	C(context _gen_ipc.Context, C MyArray2) (Val1 MyInt2, Val2 MyMap, err error)

	// D blah blah
	D(context _gen_ipc.Context, D MyMap2, stream MyInterfaceBServiceDStream) (err error)
}

// MyInterfaceBDStream is the interface for streaming responses of the method
// D in the service interface MyInterfaceB.
type MyInterfaceBDStream interface {

	// Send places the item onto the output stream, blocking if there is no buffer
	// space available.
	Send(item int32) error

	// CloseSend indicates to the server that no more items will be sent; server
	// Recv calls will receive io.EOF after all sent items.  Subsequent calls to
	// Send on the client will fail.  This is an optional call - it's used by
	// streaming clients that need the server to receive the io.EOF terminator.
	CloseSend() error

	// Recv returns the next item in the input stream, blocking until
	// an item is available.  Returns io.EOF to indicate graceful end of input.
	Recv() (item MySlice2, err error)

	// Finish closes the stream and returns the positional return values for
	// call.
	Finish() (err error)

	// Cancel cancels the RPC, notifying the server to stop processing.
	Cancel()
}

// Implementation of the MyInterfaceBDStream interface that is not exported.
type implMyInterfaceBDStream struct {
	clientCall _gen_ipc.ClientCall
}

func (c *implMyInterfaceBDStream) Send(item int32) error {
	return c.clientCall.Send(item)
}

func (c *implMyInterfaceBDStream) CloseSend() error {
	return c.clientCall.CloseSend()
}

func (c *implMyInterfaceBDStream) Recv() (item MySlice2, err error) {
	err = c.clientCall.Recv(&item)
	return
}

func (c *implMyInterfaceBDStream) Finish() (err error) {
	if ierr := c.clientCall.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c *implMyInterfaceBDStream) Cancel() {
	c.clientCall.Cancel()
}

// MyInterfaceBServiceDStream is the interface for streaming responses of the method
// D in the service interface MyInterfaceB.
type MyInterfaceBServiceDStream interface {
	// Send places the item onto the output stream, blocking if there is no buffer
	// space available.
	Send(item MySlice2) error

	// Recv fills itemptr with the next item in the input stream, blocking until
	// an item is available.  Returns io.EOF to indicate graceful end of input.
	Recv() (item int32, err error)
}

// Implementation of the MyInterfaceBServiceDStream interface that is not exported.
type implMyInterfaceBServiceDStream struct {
	serverCall _gen_ipc.ServerCall
}

func (s *implMyInterfaceBServiceDStream) Send(item MySlice2) error {
	return s.serverCall.Send(item)
}

func (s *implMyInterfaceBServiceDStream) Recv() (item int32, err error) {
	err = s.serverCall.Recv(&item)
	return
}

// BindMyInterfaceB returns the client stub implementing the MyInterfaceB
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindMyInterfaceB(name string, opts ..._gen_ipc.BindOpt) (MyInterfaceB, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_veyron2.Runtime:
			client = o.Client()
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_idl.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_idl.ErrTooManyOptionsToBind
	}
	stub := &clientStubMyInterfaceB{client: client, name: name}
	stub.MyInterfaceA_InternalNoTagGetter, _ = BindMyInterfaceA(name, client)

	return stub, nil
}

// NewServerMyInterfaceB creates a new server stub.
//
// It takes a regular server implementing the MyInterfaceBService
// interface, and returns a new server stub.
func NewServerMyInterfaceB(server MyInterfaceBService) interface{} {
	return &ServerStubMyInterfaceB{
		ServerStubMyInterfaceA: *NewServerMyInterfaceA(server).(*ServerStubMyInterfaceA),
		service:                server,
	}
}

// clientStubMyInterfaceB implements MyInterfaceB.
type clientStubMyInterfaceB struct {
	MyInterfaceA_InternalNoTagGetter

	client _gen_ipc.Client
	name   string
}

func (c *clientStubMyInterfaceB) GetMethodTags(method string) []interface{} {
	return GetMyInterfaceBMethodTags(method)
}

func (__gen_c *clientStubMyInterfaceB) C(C MyArray2, opts ..._gen_ipc.ClientCallOpt) (Val1 MyInt2, Val2 MyMap, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "C", []interface{}{C}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&Val1, &Val2, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubMyInterfaceB) D(D MyMap2, opts ..._gen_ipc.ClientCallOpt) (reply MyInterfaceBDStream, err error) {
	var call _gen_ipc.ClientCall
	if call, err = __gen_c.client.StartCall(__gen_c.name, "D", []interface{}{D}, opts...); err != nil {
		return
	}
	reply = &implMyInterfaceBDStream{clientCall: call}
	return
}

func (c *clientStubMyInterfaceB) UnresolveStep(opts ..._gen_ipc.ClientCallOpt) (reply []string, err error) {
	var call _gen_ipc.ClientCall
	if call, err = c.client.StartCall(c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubMyInterfaceB wraps a server that implements
// MyInterfaceBService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubMyInterfaceB struct {
	ServerStubMyInterfaceA

	service MyInterfaceBService
}

func (s *ServerStubMyInterfaceB) GetMethodTags(method string) []interface{} {
	return GetMyInterfaceBMethodTags(method)
}

func (s *ServerStubMyInterfaceB) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["C"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "C", Type: 65},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "Val1", Type: 66},
			{Name: "Val2", Type: 68},
			{Name: "err", Type: 67},
		},
	}
	result.Methods["D"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "D", Type: 69},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 67},
		},
		InStream:  36,
		OutStream: 70,
	}

	result.TypeDefs = []_gen_idl.AnyData{
		_gen_wiretype.ArrayType{Elem: 0x34, Len: 0x2, Name: "MyArray2", Tags: []string(nil)}, _gen_wiretype.NamedPrimitiveType{Type: 0x24, Name: "MyInt2", Tags: []string(nil)}, _gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}, _gen_wiretype.MapType{Key: 0x19, Elem: 0x43, Name: "MyMap", Tags: []string(nil)}, _gen_wiretype.MapType{Key: 0x19, Elem: 0x43, Name: "MyMap2", Tags: []string(nil)}, _gen_wiretype.SliceType{Elem: 0x3, Name: "MySlice2", Tags: []string(nil)}}
	var ss _gen_ipc.ServiceSignature
	var firstAdded int
	ss, _ = s.ServerStubMyInterfaceA.Signature(call)
	firstAdded = len(result.TypeDefs)
	for k, v := range ss.Methods {
		for i, _ := range v.InArgs {
			if v.InArgs[i].Type >= _gen_wiretype.TypeIDFirst {
				v.InArgs[i].Type += _gen_wiretype.TypeID(firstAdded)
			}
		}
		for i, _ := range v.OutArgs {
			if v.OutArgs[i].Type >= _gen_wiretype.TypeIDFirst {
				v.OutArgs[i].Type += _gen_wiretype.TypeID(firstAdded)
			}
		}
		if v.InStream >= _gen_wiretype.TypeIDFirst {
			v.InStream += _gen_wiretype.TypeID(firstAdded)
		}
		if v.OutStream >= _gen_wiretype.TypeIDFirst {
			v.OutStream += _gen_wiretype.TypeID(firstAdded)
		}
		result.Methods[k] = v
	}
	//TODO(bprosnitz) combine type definitions from embeded interfaces in a way that doesn't cause duplication.
	for _, d := range ss.TypeDefs {
		switch wt := d.(type) {
		case _gen_wiretype.SliceType:
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.ArrayType:
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.MapType:
			if wt.Key >= _gen_wiretype.TypeIDFirst {
				wt.Key += _gen_wiretype.TypeID(firstAdded)
			}
			if wt.Elem >= _gen_wiretype.TypeIDFirst {
				wt.Elem += _gen_wiretype.TypeID(firstAdded)
			}
			d = wt
		case _gen_wiretype.StructType:
			for _, fld := range wt.Fields {
				if fld.Type >= _gen_wiretype.TypeIDFirst {
					fld.Type += _gen_wiretype.TypeID(firstAdded)
				}
			}
			d = wt
		}
		result.TypeDefs = append(result.TypeDefs, d)
	}

	return result, nil
}

func (s *ServerStubMyInterfaceB) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubMyInterfaceB) C(call _gen_ipc.ServerCall, C MyArray2) (Val1 MyInt2, Val2 MyMap, err error) {
	Val1, Val2, err = __gen_s.service.C(call, C)
	return
}

func (__gen_s *ServerStubMyInterfaceB) D(call _gen_ipc.ServerCall, D MyMap2) (err error) {
	stream := &implMyInterfaceBServiceDStream{serverCall: call}
	err = __gen_s.service.D(call, D, stream)
	return
}

func GetMyInterfaceBMethodTags(method string) []interface{} {
	if resp := GetMyInterfaceAMethodTags(method); resp != nil {
		return resp
	}
	switch method {
	case "C":
		return []interface{}{}
	case "D":
		return []interface{}{}
	default:
		return nil
	}
}
